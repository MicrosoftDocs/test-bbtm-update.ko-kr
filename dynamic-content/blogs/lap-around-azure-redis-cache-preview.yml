### YamlMime:Yaml
ms.openlocfilehash: 3fcc6acce9e6cdd41d48e23ec521e931fff9a4d2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899701"
Slug: lap-around-azure-redis-cache-preview
Title: Azure Redis Cache에 대한 랩
Summary: '2014년 5월 12일에 Azure Redis Cache(미리 보기)의 가용성을 발표했습니다. 이 새로운 캐시 서비스를 통해 고객은 Microsoft에서 관리하는 안전한 전용 Redis 캐시를 사용할 수 있습니다. '
Content: >-
  [업데이트된 2014년 9월 24일] Azure Redis Cache는 이제 가용성 SLA가 99.9%인 일반 공급됩니다.


  이 새로운 캐시 서비스를 통해 고객은 Microsoft에서 관리하는 안전한 전용 <a href="https://redis.io/">Redis 캐시</a>를 사용할 수 있습니다. Redis에서 제공하는 다양한 기능 집합 및 에코시스템을 활용하면서 Microsoft의 안정적인 호스팅 및 모니터링 기능을 이용할 수 있습니다.


  이 게시물에서는 Azure Redis Cache 및 제공하는 주요 기능을 소개합니다.


  이 게시물은 Azure Redis Cache에서 시리즈의 첫 번째 게시물이 될 계획입니다. 따라서 'Redis'로 태그가 지정된 블로그 게시물에 대한 경계를 계속 지켜봐 주시기 바랍니다.


  이 콘텐츠 등을 다루는 비디오 자습서를 보려면 <a href="https://channel9.msdn.com/Shows/Web+Camps+TV/A-look-around-the-Redis-Cache-Preview-with-Saurabh-Pant">Azure Redis Cache(미리 보기)를 살펴보세요</a>.


  &nbsp;


  <b>Redis </b>


  <a href="https://redis.io/">Redis.io</a> Redis를 "<i>... 오픈 소스, BSD 사용이 허가된 고급 키-값 저장소. 키에는 문자열, 해시, 목록, 집합 및 정렬된 집합이 포함될 수 있으므로 데이터 구조 서버라고도 합니다."</i>


  Redis는 키 값 쌍만 다루는 기존 캐시와 달리 높은 성능의 데이터 형식 때문에 널리 사용됩니다. Redis는 문자열에 추가하는 것과 같이 이러한 형식에 대한 원자성 연산 실행을 지원합니다. 해시의 값 증가; 목록으로 푸시; 컴퓨팅 집합 교차점, 합집합 및 차이; 또는 정렬된 집합에서 순위가 가장 높은 멤버를 가져옵니다.


  기타 기능으로는 트랜잭션, 게시/알림, Lua 스크립팅, TTL(Time-to-Live)이 제한된 키 및 보다 일반적인 캐시 역할을 하도록 Redis를 설정하는 구성 설정이 있습니다.


  Redis 크리에이터 살바토레 산필리포(<a href="https://twitter.com/antirez">@antirez</a>)<i>는 "Redis에는 다양한 사용 사례가 있습니다. 이를 설명하는 가장 간단한 방법은 기존 데이터베이스와 메모리에서 계산을 수행하는 것입니다. Redis는 명령 집합을 통해 메모리에 액세스하는 데이터 구조를 노출합니다</i>." 자세한 내용은 그의 블로그 게시물 일반적인 Redis 사용 사례에서 찾을 수 있습니다.


  Redis 성공의 또 다른 중요한 측면은 이를 기반으로 구축된 정상적이고 활발한 오픈 소스 에코시스템입니다. 이를 반영한 한 가지는 여러 언어에서 사용할 수 있는 다양한 <a href="https://redis.io/clients">Redis 클라이언트</a> 집합입니다.


  모든 기술의 성공에 대한 마지막 핵심은 프로덕션 시나리오에서 이를 사용하는 <a href="https://redis.io/topics/whos-using-redis">고객</a> 이며, 여기서 다시 Redis는 좋은 성공을 거두었습니다.


  <b>Windows Redis</b>


  Microsoft Open Technologies는 지난 몇 년 동안 Windows Redis 포트를 유지 관리하여 Windows 사용자가 Redis를 사용할 수 있도록 지원했습니다.


  사용자는 <a href="https://github.com/MSOpenTech/Redis">GitHub 리포지토리</a>를 사용하여 위의 프로젝트를 팔로우, 빌드 또는 기여할 수 있습니다. Nuget 패키지를 사용하여 Windows 호환되는 Redis Server(redis-server.exe) 및 Redis Client(redis-cli.exe)에 대한 이진 파일을 다운로드할 수도 있습니다.


  <b>로컬로 Redis 실행 </b>


  <i>이 섹션에서는 주로 Azure용으로 개발하는 사용자에게도 귀중한 학습, 개발, 진단 리소스인 Redis 서버 및 클라이언트를 로컬로 실행하는 방법에 대해 설명합니다. 그러나 로컬 Redis Server 또는 클라이언트는 Azure Redis Cache와 통신할 <b>필요가</b> 없으며 사용자는 이 섹션을 건너뛰도록 선택할 수 있습니다.</i>


  <span style="text-decoration: underline">Redis 서버</span>


  Redis Server를 로컬로 시작하는 데 필요한 모든 작업이 <i>redis-serve.exe</i>실행됩니다. 그러면 기본 포트에서 수신 대기하는 로컬 Redis 서버가 표시됩니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/06/Capture.png"><img style="border-width: 0px" title="캡처" alt="Capture" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Capture_thumb.png" width="636" height="359" border="0" /></a>


  <span style="text-decoration: underline">Redis 명령줄 클라이언트</span>


  redis-cli.exe 실행하여 Redis 클라이언트를 로컬로 실행합니다. 클라이언트가 점심 식사를 하면 기본 포트에 연결하는 서버에 자동으로 연결됩니다.


  클라이언트에 <i>ping</i> 을 입력하면 서버에서 <i>탁구 </i>응답을 받게 됩니다.


  이제 첫 번째 Redis 명령을 실행하도록 설정되었습니다.


  <i><span style="font-family: lucida console">set azureblog:firstset "Hello World"</span></i>


  <i><span style="font-family: lucida console">azureblog 가져오기:firstset</span> </i>


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/05/clip_image003.jpg"><img style="border-width: 0px" title="clip_image003" alt="clip_image003" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image003_thumb.jpg" width="627" height="149" border="0" /></a>


  <a href="https://redis.io/commands">INFO와 같은 Redis</a> 상태 모니터링 명령을 포함하여 <i>Redis-cli</i>에서 전체 Redis 명령 집합을 실행할 수 있습니다.<a href="https://redis.io/commands/info"></a> <i>Redis-cli</i>는 훌륭한 개발 및 진단 도구일 뿐만 아니라 사용자가 Redis 명령에 익숙해지는 데 도움이 되는 훌륭한 학습 도구가 될 수도 있습니다.


  <b>Azure Redis 캐시(미리 보기)</b>


  <span style="text-decoration: underline">크기, 가격 책정 및 SKU</span>


  Azure Redis Cache 미리 보기는 다음 두 계층으로 제공됩니다.


  <b>기본</b> – 단일 캐시 노드(개발/테스트 및 중요하지 않은 워크로드에 적합)


  <b>표준</b> – 복제된 캐시(두 개의 노드, 마스터 및 복제본)


  Azure Redis Cache는 250MB, 1GB, 2.5GB, 6GB, 13GB, 26GB, 53GB 및 <a title="Azure Service Regionsmany" href="https://azure.microsoft.com/en-us/regions/#services"> 지역에서 사용할 수 있습니다</a>.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/06/S2.png"><img class="alignnone size-medium wp-image-162101" alt="S2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/S2-241x369.png" width="241" height="369" /></a><a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/06/B2.png"><img class="alignnone size-medium wp-image-162111" alt="B2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/B2-241x369.png" width="241" height="369" /></a>


  가격 책정에 대한 자세한 내용은 <a href="https://azure.microsoft.com/en-us/pricing/details/cache/">Azure Cache 가격 책정 페이지에서</a> 확인할 수 있습니다.


  <span style="text-decoration: underline">Azure Redis Cache "Hello World"</span>


  이 섹션에서는 Azure Redis Cache를 만든 다음 C# 애플리케이션을 연결합니다.


  새 Azure Redis Cache를 시작하는 것은 쉽습니다.새 캐시를 만들려면 <a href="https://portal.azure.com/">Azure Preview 포털</a>에 로그인하고 <strong>새</strong><b> -&gt; </b>Redis<b> <strong>Cache</strong></b>를 클릭합니다.<strong></strong>


  <i>MSDN 설명서에서는 </i><a href="https://msdn.microsoft.com/en-us/library/dn690516.aspx"><i>Azure Redis Cache를 만드는 방법에</i></a> 대한 자세한 지침을 제공합니다<i>.</i><i></i>


  <a href="https://mscblogs.blob.core.windows.net/media/scottgu/Media/image_4B8B65E4.png"><img style="border-width: 0px" title="clip_image007" alt="clip_image007" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image007.png" width="569" height="543" border="0" /></a>


  새 캐시 옵션을 구성한 후 <strong>만들기</strong>를 클릭합니다. 캐시를 만드는 데 몇 분 정도 걸릴 수 있습니다. 캐시를 만든 후 새 캐시에 <strong>실행</strong> 상태가 있으며 기본 설정과 함께 사용할 준비가 되었습니다.


  <a href="https://mscblogs.blob.core.windows.net/media/scottgu/Media/clip_image042_6FB35124.jpg"><img style="border-width: 0px" title="clip_image008" alt="clip_image008" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image008.jpg" width="477" height="642" border="0" /></a>

  <table cellspacing="0" cellpadding="0">

  <tbody>

  <tr>

  <td width="6"></td>

  </tr>

  <tr>

  <td></td>

  <td><a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/05/clip_image011.png"><img style="border-width: 0px" title="clip_image011" alt="clip_image011" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image011_thumb.png" width="546" height="288" border="0" /></a></td>

  </tr>

  </tbody>

  </table>

  캐시 엔드포인트와 키는 Azure Preview 포털 내의 캐시 인스턴스에 대한 속성 블레이드 및 키 블레이드에서 각각 가져올 수 있습니다.


  이러한 항목을 검색한 후에는 redis-cli.exe 사용하여 캐시에 대한 연결을 만들 수 있습니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/05/clip_image013.jpg"><img style="border-width: 0px" title="clip_image013" alt="clip_image013" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image013_thumb.jpg" width="628" height="149" border="0" /></a>


  <span style="text-decoration: underline">Redis C# 클라이언트</span>


  Redis는 여러 언어에서 사용할 수 있는 다양한 <a href="https://redis.io/clients">Redis 클라이언트</a> 집합을 제공합니다. 아래 예제에서는 StackExchange.Redis C# Redis 클라이언트를 사용합니다.


  <i>자세한 내용은 </i><a href="https://github.com/StackExchange/StackExchange.Redis"><i>StackExchange.Redis</i></a><i> </i><i>github 페이지 및 </i><a href="https://github.com/StackExchange/StackExchange.Redis#documentation"><i>StackExchange.Redis 캐시 클라이언트 설명서를 참조하세요</i></a><i>.</i>


  StackExchange.Redis NuGet 패키지를 사용하여 Visual Studio에서 클라이언트 응용 프로그램을 구성하려면 <strong>솔루션 탐색기</strong>에서 클라이언트 프로젝트를 마우스 오른쪽 단추로 클릭하고 <strong>NuGet 패키지 관리</strong>를 선택합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/05/clip_image016.png"><img style="border-width: 0px" title="clip_image016" alt="clip_image016" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image016_thumb.png" width="712" height="295" border="0" /></a><strong>온라인 검색</strong> 텍스트 상자에 <strong>StackExchange.Redis</strong>를 입력하고 결과에서 선택한 다음 <strong>설치</strong>를 클릭합니다.


  NuGet 패키지는 StackExchange.Redis 캐시 클라이언트를 사용하여 Azure Redis Cache에 액세스하기 위해 클라이언트 애플리케이션에 필요한 어셈블리 참조를 다운로드하고 추가합니다.


  프로그래밍 방식으로 캐시를 사용하려면 캐시에 대한 연결을 설정하여 시작해 보겠습니다.


  먼저 StackExchange.Redis 클라이언트를 사용하려는 파일의 맨 위에 다음을 추가합니다.

  <pre class="prettyprint">using StackExchange.Redis;</pre>

  Redis 캐시에 대한 연결은 클래스 인스턴스에 <code>ConnectionMultiplexer</code> 의해 관리됩니다. 이 인스턴스는 클라이언트 애플리케이션 전체에서 공유 및 재사용되도록 설계되었으며 작업별로 만들 필요가 없습니다.


  Azure Redis Cache에 연결하고 연결된 <code>ConnectionMultiplexer</code>인스턴스를 반환하려면 정적 <code>Connect</code> 메서드를 호출하고 캐시 엔드포인트에 전달합니다.

  <pre class="prettyprint">ConnectionMultiplexer connection = ConnectionMultiplexer.Connect("contoso5.redis.cache.windows.net,ssl=true,password=... ");</pre>

  연결이 설정되면 메서드를 호출하여 Redis 캐시 데이터베이스에 대한 참조를 반환합니다 <code>ConnectionMultiplexer.GetDatabase</code> .

  <pre class="prettyprint">// connection refers to a previously configured ConnectionMultiplexer

  IDatabase cache = connection.GetDatabase();</pre>

  <i>Redis의 데이터베이스는 데이터 그룹화일 뿐이며 애플리케이션에서 관련 데이터를 논리적으로 그룹화해야 하는 경우 일반적으로 유용합니다.</i>


  <code>StringSet</code> 및 <code>StringGet</code> 메서드를 사용하여 캐시에 항목을 저장하고 캐시에서 항목을 검색할 수 있습니다.

  <pre class="prettyprint">// If key1 exists, it is overwritten.

  cache.StringSet("key1", "value1");

  string value = cache.StringGet("key1");</pre>

  <code>StringGet</code> 호출 시 개체가 있으면 반환되고 없으면 null이 반환됩니다. 이 경우에는 원하는 데이터 소스에서 값을 검색하여 이후에 사용할 수 있게 캐시에 저장할 수 있습니다.

  <pre class="prettyprint">string value = cache.StringGet("key1");

  if (value == null)

  {
     // The item keyed by "key1" is not in the cache. Obtain
     // it from the desired data source and add it to the cache.
     value = GetValueFromDataSource();
     cache.StringSet("key1", value);
  }</pre>

  캐시에서 항목의 만료를 지정하려면 <code>StringSet</code>의 <code>TimeSpan</code> 매개 변수를 사용합니다.

  <pre class="prettyprint">cache.StringSet("key1", "value1", TimeSpan.FromMinutes(90));</pre>

  <i>Azure Redis Cache는 .NET 개체와 기본 데이터 형식을 캐시할 수 있지만 .NET 개체를 캐시하기 전에 직렬화해야 합니다. StackExchange.Redis에서는 개발자가 직렬 변환기를 선택할 수 있는 유연성을 제공하기 때문에 애플리케이션 개발자의 책임입니다. 자세한 내용은 </i><a href="https://msdn.microsoft.com/en-us/library/dn690521.aspx#Objects"><i>캐시에서 .NET 개체 작업을 참조하세요</i></a><i>.</i>


  <a name="specify-the-expiration-of-an-item-in-the"></a>


  이제 Azure Redis Cache에 성공적으로 연결하고 Set 및 Get 작업을 수행했습니다.


  세션 상태를 저장하기 위해 Azure Redis Cache를 사용하는 방법의 예는 Azure <a href="https://blogs.msdn.com/b/webdev/archive/2014/05/12/announcing-asp-net-session-state-provider-for-redis-preview-release.aspx">Redis Cache ASP.NET ASP.NET 세션 상태 공급자</a> 블로그 게시물을 참조하세요.


  <b>Microsoft Hosted Redis Cache 혜택</b>


  Azure Redis Cache는 고객에게 Microsoft에서 관리하는 안전한 전용 <a href="https://redis.io/">Redis 캐시</a>를 사용할 수 있는 기능을 제공합니다. Redis에서 제공하는 다양한 기능 집합 및 에코시스템을 활용하면서 Microsoft의 안정적인 호스팅 및 모니터링 기능을 이용할 수 있습니다.


  아래에서는 Microsoft Hosted Redis에 추가되는 두 가지 주요 값을 자세히 살펴보겠습니다.


  - Azure Redis Cache 표준 SKU에서 턴키 복제를 지원합니다.


  - 기본 제공 모니터링 및 경고


  <span style="text-decoration: underline">복제</span>


  Redis 캐시 엔진은 매우 빠른 비차단 첫 번째 동기화 및 순 분할 시 자동 다시 연결을 사용하여 마스터-슬레이브 복제를 지원합니다. Azure Redis 캐시는 이 기능을 기반으로 빌드되며 모든 표준 계층 캐시에서 복제를 제공합니다. 이렇게 하면 캐시의 가용성을 크게 향상시킬 수 있습니다. 노드 오류 복구는 0(또는 최소) 데이터 손실로 빠르게 복구됩니다.


  내부적으로 각 표준 SKU 캐시(마스터 + 슬레이브)에 대해 두 개의 노드를 프로비전하고 Redis 복제를 사용하여 두 노드를 동기화 상태로 유지합니다. 또한 마스터에게 하트비트를 유지하며, 마스터가 다운된 것을 감지하는 즉시 슬레이브를 마스터로 승격합니다. 일반적으로 캐시 알림의 모든 사용자는 캐시를 사용할 수 없는 동안 작은 블립이며, 그런 다음 상황이 매우 빠르게 정상으로 돌아갑니다.


  &nbsp;


  <span style="text-decoration: underline">모니터링 및 경고</span>


  모든 Azure Redis 캐시에는 기본적으로 모니터링되는 주요 메트릭이 있습니다. 초기 미리 보기 릴리스에서는 캐시 적중, 캐시 누락, Get/Set 명령, 제거된 키, 만료된 키, 사용된 메모리 및 사용된 CPU를 추적합니다. 앞으로 몇 개월 동안 이 집합에 추가할 예정입니다.


  모니터링되는 데이터는 사용자가 시간, 일, 주 또는 특정 사용자 지정 시간 범위에 대한 데이터를 보도록 선택할 수 있는 캐시 인스턴스의 포털 페이지에 표시됩니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/05/clip_image018.jpg"><img style="border-width: 0px" title="clip_image018" alt="clip_image018" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image018_thumb.jpg" width="628" height="551" border="0" /></a><b></b>


  사용자는 데이터를 보는 것 외에도 사용자가 정의한 시간 간격 동안 특정 메트릭이 사용자 정의 임계값을 초과할 때 경고를 설정하도록 선택할 수도 있습니다.


  예를 들어 캐시에서 제거가 표시되면 경고가 캐시 관리자에게 알릴 수 있습니다. 그러면 캐시가 핫으로 실행되고 있으며 더 큰 크기로 업그레이드해야 한다는 신호일 수 있습니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/05/clip_image020.jpg"><img style="border-width: 0px" title="clip_image020" alt="clip_image020" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image020_thumb.jpg" width="296" height="867" border="0" /></a>


  이렇게 하면 주요 Azure Redis Cache 기능에 대한 빠른 랩이 마무리됩니다.


  Redis Cache 검사를 사용하는 샘플 애플리케이션의 경우 - <a href="https://azure.microsoft.com/blog/2014/06/05/mvc-movie-app-with-azure-redis-cache-in-15-minutes/">15분 만에 Azure Redis Cache와 함께 MVC 동영상 앱</a>


  아래 섹션에서는 추가 Azure Cache 리소스를 나열합니다.


  행복한 캐싱!


  &nbsp;


  <b>자세한 정보</b>


  자세한 내용은 다음 링크를 참조하세요.


  ·  <a href="https://channel9.msdn.com/Shows/Web+Camps+TV/A-look-around-the-Redis-Cache-Preview-with-Saurabh-Pant">채널 9 비디오: Azure Redis Cache 살펴보기(미리 보기)</a>


  · <a href="https://azure.microsoft.com/en-us/documentation/services/cache/">Azure Cache 홈페이지</a>


  · <a href="https://aka.ms/clb5bw">Azure Cache 포럼 </a>- 모든 Redis Cache 질문에 대한 답변
