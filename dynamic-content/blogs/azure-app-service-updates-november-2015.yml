### YamlMime:Yaml
ms.openlocfilehash: c01c57679ca52549d6269cf8bb68938829dd16f9
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908658"
Slug: azure-app-service-updates-november-2015
Title: Azure App Service 업데이트 – 2015년 11월
Summary: 이번 주 뉴욕에서 열린 커넥트(); 행사에서는 Azure App Service의 향후 개선 사항을 강조하는 몇 가지 새로운 비디오를 공개했습니다.
Content: >-
  <p>이번 주 뉴욕에서 열린 커넥트(); 행사에서는 Azure App Service의 향후 개선 사항을 강조하는 몇 가지 새로운 비디오를 공개했습니다. Azure App Service가 3월에 발표된 이후,&rsquo; 피드백을 경청하고 플랫폼의 기능과 기능을 발전시키기 위해 노력하여 오늘과 내일의 고객&rsquo; 요구를 충족시켰습니다.</p>


  <p>Mobile Apps, API Apps 및 Logic Apps의 초기 출시는 Azure 고객에 의해 매우 잘 수신되었으며 이러한 앱 유형에 대한 다음 단계에서 업데이트하려고 합니다. 이 블로그 게시물에서는 앞으로 몇 주 및 몇 달 안에 제공될 변경 내용과 새로운 기능에 대해 설명합니다.</p>


  <h1>Mobile Apps 업데이트</h1>


  <p>Were&rsquo;는 고객 피드백에 대한 응답으로 Mobile Apps에 다음과 같은 업데이트를 공유하게 되어 기쁘게 생각합니다.</p>


  <h3>웹앱 및 모바일/API 백 엔드에 대한 인증/권한 부여</h3>


  <p>이제 동일한 턴키 인증/권한 부여 환경을 통해 모바일 백 엔드, API 및 웹 페이지를 보호할 수 있습니다. Azure Active Directory 대한 모든 서버 및 클라이언트 흐름뿐만 아니라 Facebook, Google, Twitter, Microsoft 계정뿐만 아니라 원래 Mobile Services 지원되었던 동일한 집합을 사용자 지정 &ndash; 하는 지원이 추가되었습니다. 애플리케이션에 필요한 범위/클레임을 선언하는 기능도 추가된&#39;.</p>


  <p><img alt="Authentication-Authorization" border="0" height="480" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fd17c232-d1b9-46bd-ae1c-930be207dc5a.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="Authentication-Authorization" width="455"></p>


  <h3>쉬운 테이블 및 API</h3>


  <p>Weve&rsquo;는 고객이 Mobile Services Node.js 테이블 기능의 사용 편의성을 정말 좋아한다는 것을 크고 분명하게 들었습니다. 이 업데이트를 통해 포털의 Azure App Service에 코드 없는 CRUD API 작성 환경을 추가할&#39;있습니다.</p>


  <p>이제 간편한 테이블이라고 하는 SQL Azure 지원되는 모바일 친화적인 OData CRUD API를 쉽게 만들 수 있습니다. 데이터를 보고 엔터티에 대한 스키마를 디자인할 수 있습니다. Visual Studio Online Monaco의 도움으로 브라우저의 Node.js 논리를 추가할 수 있습니다. 물론 쉬운 테이블 및 API를 사용하는 경우 필요에 따라 인수하고 사용자 지정할 수 있는 일반 Express.js 앱을 스캐폴드합니다.</p>


  <p><img alt="Easy Tables" border="0" height="189" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9dabdf06-4211-48a2-b887-fccea0b32b72.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="쉬운 테이블" width="640"></p>


  <h3>파일 동기화 지원</h3>


  <p>App Service Mobile에는 개발자가 오프라인으로 작동하고 다양한 데이터 백 엔드 저장소와 동기화하는 앱을 빌드할 수 있는 데이터 동기화 기능이 포함되어 있습니다. 현재 App Service 데이터 동기화 파일에 대한 지원을 추가할&#39;있습니다. 이 기능을 사용하면 개발자가 App Service Mobile 테이블 컨트롤러를 통해 노출되는 엔터티의 파일을 참조하고 백 엔드에 구성된 Blob Storage와 직접 파일을 동기화할 수 있습니다. 클라이언트 쪽에서는 엔터티에서 참조된 파일의 변경 내용을 추적합니다. 이 기능을 사용하려면 다음 API를 활용합니다.</p>


  <p><font face="Courier New">mobileClient.InitializeFileSync(<font color="#4bacc6">new</font> MyFileSyncHandler(<font color="#4bacc6">this</font>), syncStore);<br>

  <font color="#4bacc6">await</font> myTable.PullFilesAsync(entity);<br>

  <font color="#4bacc6">await</font> myTable.PushFileChangesAsync();</font></p>


  <p>여기서 MyFileSyncHandler는 IFileSyncHandler를 구현하여 파일을 로컬로 저장해야 하는 위치를 지시하고 동기화 규칙을 재정의할 수 있습니다.</p>


  <p>서버에서 이 기능은 클라이언트가 파일을 Blob Storage에 직접 동기화할 수 있도록 SAS 키의 자동화된 발급을 처리하고 기본 동기화 작업을 처리합니다.</p>


  <p>Xamarin 및 Windows 대한 클라이언트 라이브러리는 <a href="https://github.com/Azure/azure-mobile-apps-net-files">여기에서</a> 사용할 수 있습니다. 이 기능을 사용하는 방법에 대한 자세한 샘플은 여기에서 확인할 수 <a href="https://github.com/lindydonna/MobileAppsFilesSample">있습니다</a>.</p>


  <h1>API Apps 업데이트</h1>


  <p>API Apps 미리 보기 전체에서 Weve&rsquo;는 많은 관심과 채택을 받았습니다. Weve&rsquo;는 또한 제품을 개선하고 더 많은 가치를 제공하기 위한 솔직한 피드백을 받았습니다. 아래에서는 모바일 및 Web Apps에 더 잘 부합하고, 개념 수를 줄이고, 배포 및 런타임 성능을 개선하기 위해 API Apps에 대한 기본 변경 사항을 설명합니다.</p>


  <h3>&rsquo;변경 내용</h3>


  <p>API Apps &ndash; 인증, CORS 및 API 메타데이터 &ndash; 의 주요 기능은 App Service로 직접 이동됩니다. 이 변경으로 웹, 모바일 및 API Apps에서 기능을 사용할 수 있습니다. API Apps 게이트웨이는 더 이상 필요하지 않거나&nbsp; API Apps와 함께 제공됩니다.</p>


  <p><img alt="API Apps Gateway" border="0" height="375" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dd5b8ef5-1369-4496-b0ac-8298abdf8dd4.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="API Apps 게이트웨이" width="640"></p>


  <p>API Apps 업데이트의 주요 디자인 원칙은 선택한 언어로 API를 있는 그대로 가져올 수 있도록 하는 것입니다.&nbsp; API가 이미 웹앱 또는 모바일 앱*으로 배포된 경우 새 기능을 활용하기 위해 앱을 다시 배포할 필요가 없습니다.</p>


  <p>*<em>현재 API Apps 미리 보기에 있는 고객의 경우 업데이트된 API Apps 제품을 사용할 수 있게 되면 마이그레이션 지침을 제공합니다.&nbsp; 기존 코드는 대부분 작동하지만 고객은 API Apps 미리 보기로 이미 배포된 앱을 다시 배포해야 합니다.</em></p>


  <h3>API를 쉽게 빌드할 수 있습니다.</h3>


  <p>App Service 호스팅 API에 사용할 수 있는 다양한 턴키 기능이 있습니다.</p>


  <ul>
   <li><strong>인증</strong>: 위에서 설명한 대로 Mobile Apps 섹션에서 설명한 대로 기본 제공 인증을 사용하여 사용자와 다른 서비스를 모두 인증합니다.&nbsp; 요청이 코드에 도달하기 전에 App Service에서 토큰 유효성 검사 및 사용자/서비스 인증이 발생합니다.</li>
   <li><strong>CORS</strong>: 브라우저에서 API에 대한 도메인 간 JavaScript 요청을 수행할 수 있는 원본의 허용 목록을 지정합니다.</li>
   <li><strong>API 정의</strong>: Swagger 2.0 메타데이터의 엔드포인트를 제공하여 다운스트림 도구가 메시지를 표시하지 않고 검색할 수 있도록 합니다.</li>
  </ul>


  <h3>API를 사용하기 쉽습니다.</h3>


  <p>위의 기능을 사용하면 강력한 소비 환경을 사용할 수 있습니다.</p>


  <ul>
   <li><strong>유연한 인증 옵션</strong>: ID 공급자&rsquo; 네이티브 SDK 또는 Mobile Apps SDK를 사용합니다.</li>
   <li><strong>SDK 생성</strong>: Swagger API 정의 및 기본 제공 VS 도구를 사용하여 API에 대한 SDK를 생성합니다. 코드 생성기는 명령줄에서도 사용할 수 있으며 .NET, Node.js, Java 등을 지원합니다.</li>
   <li><strong>Logic Apps</strong>: Logic Apps에서 API를 호출합니다. Logic Apps HTTP 커넥터는 기본적으로 App Service 인증의 기본 제공 옵션 중 하나인 서비스 주체 인증을 지원합니다. 커넥터에 대한 예정된 새로 고침은 Swagger 지원을 추가하여 특히 원활하게 App Service 호스팅 API&rsquo;에 연결할 수 있도록 합니다.</li>
  </ul>


  <h3>API Management 통합이 용이합니다.</h3>


  <p>API에 대한 엔드투엔드 관리, 호스팅 및 개발 환경을 위해 Azure API Management와 API&rsquo; Apps를 함께 사용합니다.&nbsp; API Management는 App Service 호스팅 API를 사용하여 깔끔하게 구성되며 Swagger 2.0도 지원합니다.</p>


  <p>위의 API Apps에 설명된 변경 내용은 앞으로 몇 주 안에 실시간으로 제공될 예정입니다.</p>


  <h1>Logic Apps 업데이트</h1>


  <p>2016년 초에는 고객이 API 및 서비스와의 상호 작용을 보다 쉽게 오케스트레이션할 수 있도록 Logic Apps에 여러 가지 새로운 기능이 도입될 예정입니다. 논리 앱은 현재 사용 중인 완전한 충실도 환경을 계속 제공하지만 Swagger 메타데이터를 노출하는 API 엔드포인트를 더 잘 지원하도록 확장됩니다.</p>


  <p>논리 앱에서 사용자 지정 API에 가장 적합한 환경은 턴키 인증을 사용하도록 설정된 App Service API 앱으로 호스트하는 것입니다. 그러나 더 이상 필요하지 않으므로 Web Apps 또는 클라우드 서비스 웹 역할을 비롯한 모든 기술로 웹 API를 호스트할 수 있으며 swagger 엔드포인트를 노출하는 한 새로운 완전한 충실도 디자이너 환경을 얻을 수 있습니다.</p>


  <p>또한 API Management 기능에 대한 기본 지원을 추가할 예정입니다.&nbsp; 여기에는 백 엔드 API로 트래픽을 라우팅하고 셰이프할 수 있는 제한 및 API Management 정책을 설정하는 기능이 포함됩니다.</p>


  <p>예를 들어 Contoso API를 만들고 swagger를 노출한 경우 논리 앱에서 사용할 수 있는 다른 모든 서비스와 함께 해당 작업이 자동으로 표시됩니다(사용자 부분에 특별한 구성 없이).</p>


  <p><img alt="Contoso API" border="0" height="219" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7538cb27-88e5-4588-9fa1-cd17c83c03ff.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="Contoso API" width="240"></p>


  <p>사용자 지정 API 및 API 관리에 대한 향상된 지원과 함께 논리 앱 디자이너에 다음을 비롯한 다른 개선 사항을 릴리스할 예정입니다.</p>


  <ul>
   <li>모든 개별 API 작업에서 전체 텍스트 검색
   <ul>
    <li>사용자 지정 API와 기본 제공 API 모두 포함</li>
   </ul>
   </li>
   <li>API의 출력을 나타내는 시각적 토큰
   <ul>
    <li>수요가 많은 기능을 통해 이제 논리 앱 정의 언어를 이해하지 않고도 메시지를 빌드하고 어떻게 표시되는지 확인할 수 있습니다.</li>
   </ul>
   </li>
   <li>흐름 중간에 입력을 기다리는 논리 앱을 디자인할 수 있도록 네이티브 웹후크 지원
   <ul>
    <li>승인 시나리오에 유용합니다. 예를 들어 승인을 위해 관리자에게 전자 메일을 보내는 논리 앱을 사용할 수 있으며 관리자가 승인될 때까지 기다린 후 다음 단계를 계속 진행합니다.</li>
   </ul>
   </li>
  </ul>


  <p><img alt="Native Webhook" border="0" height="240" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f944cb5f-625e-4806-a3e5-51588ba8805e.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="네이티브 웹후크" width="231"></p>


  <p>다음 주부터 논리 앱 기본 제공 HTTP 작업을 사용하여 업데이트된 버전의 API Apps 사용을 시작할 수 있습니다. 논리 앱 정의 언어를 직접 사용하여 사용자 지정 API에 연결할 수도 있습니다. 위에서 설명한 Logic Apps의 향상된 환경은 내년 초부터 사용할 수 있습니다.</p>


  <h1>요약</h1>


  <p>Azure App Service는 반복적인 작업과 애플리케이션의 추가 구성을 불필요하게 만들거나 재사용 가능한 방식으로 가능한 한 간단하게 만드는 의미 있는 방식으로 발전하고 있습니다. 위에서 볼 수 있듯이 App Service의 기능을 모든 앱 유형(웹, 모바일, API 및 논리)에서 사용할 수 있도록 하기 위해 노력하고 있습니다.</p>


  <p>&rsquo;Azure Platform으로 작업할 수 있는 흥미로운 시간입니다. <a href="https://tryappservice.azure.com">App Service를 무료로 사용해 보세요</a>!</p>
