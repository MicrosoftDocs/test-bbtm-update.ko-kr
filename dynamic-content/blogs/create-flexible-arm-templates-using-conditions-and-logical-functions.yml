### YamlMime:Yaml
ms.openlocfilehash: 836135052334c1447efbd681ce39994f32a2f1d4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908516"
Slug: create-flexible-arm-templates-using-conditions-and-logical-functions
Title: 조건 및 논리 함수를 사용하여 유연한 ARM 템플릿 만들기
Summary: 이 블로그 게시물에서는 Azure Resource Manager 템플릿에 대한 템플릿 언어 식에 있는 몇 가지 새로운 기능을 안내합니다.
Content: "<p>이 블로그 게시물에서는 Azure Resource Manager 템플릿에 대한 템플릿 언어 식에 있는 몇 가지 새로운 기능을 안내합니다.</p>\n\n<h3>배경</h3>\n\n<p>고객의 일반적인 요청은 &ldquo;ARM 템플릿에서 조건을 어떻게 사용할 수 있는지를 묻는 것입니다. 따라서 사용자가 매개 변수 A를 선택하면 리소스 A가 만들어집니다. 그렇지 않은 경우 리소스 B를 만들어야 하나요?&rdquo;&nbsp; 이 작업을 수행할 수 있는 유일한 방법은 중첩된 템플릿을 사용하고 배포 그래프를 조작하는 mainTemplate을 사용하는 것입니다.</p>\n\n<p>아래에서는 사용자가 <em>새</em> 패턴이나 기존 패턴을 선택하는 일반적인 패턴을 볼 수 <em>있습니다</em>.</p>\n\n<pre class=\"prettyprint\">\n{\n    &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;,\n    &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,\n    &quot;parameters&quot;: {\n        &quot;newOrExisting&quot;: {\n            &quot;type&quot;: &quot;String&quot;,\n            &quot;allowedValues&quot;: [\n                &quot;new&quot;,\n                &quot;existing&quot;\n            ]\n        }\n    },\n    &quot;variables&quot;: {\n        &quot;templatelink&quot;: &quot;[concat(&#39;https://raw.githubusercontent.com/krnese/ARM/master/&#39;, concat(parameters(&#39;newOrExisting&#39;),&#39;StorageAccount.json&#39;))]&quot;\n    },\n    &quot;resources&quot;: [\n        {\n            &quot;apiVersion&quot;: &quot;2017-05-10&quot;,\n            &quot;name&quot;: &quot;nestedTemplate&quot;,\n            &quot;type&quot;: &quot;Microsoft.Resources/deployments&quot;,\n            &quot;properties&quot;: {\n                &quot;mode&quot;: &quot;incremental&quot;,\n                &quot;templateLink&quot;: {\n                    &quot;uri&quot;: &quot;[variables(&#39;templatelink&#39;)]&quot;,\n                    &quot;contentVersion&quot;: &quot;1.0.0.0&quot;\n                },\n                ...\n</pre>\n\n<p>변수 선언에서 템플릿에 대한 링크는 매개 변수 입력에 따라 생성됩니다.</p>\n\n<p>이 예제에서는 템플릿에 대한 URI가 ;또는https://raw.githubusercontent.com/krnese/ARM/master/existingStorageAccount.json&rsquo&lsquo; ;일 것임을 &lsquo;https://raw.githubusercontent.com/krnese/ARM/master/newStorageAccount.json&rsquo보여줍니다.&nbsp;&nbsp;</p>\n\n<p>이 방법은 작동하며&nbsp; 사용자가 매개 변수 선택에서 <em>새로</em> 선택했는지 또는 <em>기존</em> 항목을 선택했는지에 관계없이 템플릿을 성공적으로 배포할 수 있습니다. 그러나 중첩된 템플릿을 사용하는 접근 방식은 실제로 시간이 지남에 따라 많은 템플릿으로 이어질 수 있습니다. 배포 그래프에 오류가 발생하지 않도록 일부 템플릿&nbsp;이 완전히 비어 있는 경우 또한 일반적으로 스토리지 계정 외에 다른 리소스 종류를 &ndash; 사용하고 잠재적으로 여러 조건이 관련될 수 있으므로 복잡성이 증가합니다.</p>\n\n<p>자주 사용되는 또 다른 기술은 입력 매개 변수를 기반으로 복잡한 변수를 조작하여 리소스에 대한 특정 속성을 확인하는 것이었습니다. 아래 예제에서는 ARM이 복잡한 변수 내에서 탐색하여 입력으로 Windows 또는 Linux를 허용한 매개 변수 플랫폼을 기반으로 <em>Linux</em> 또는 <em>Windows</em> 가상 머신을 만드는 방법을 보여 줍니다.</p>\n\n<pre class=\"prettyprint\">\n        &quot;osType&quot;: &quot;[variables(concat(&#39;osType&#39;,parameters(&#39;platform&#39;)))]&quot;,        \n        &quot;osTypeWindows&quot;: {\n            &quot;imageOffer&quot;: &quot;WindowsServer&quot;,\n            &quot;imageSku&quot;: &quot;2016-Datacenter&quot;,\n            &quot;imagepublisher&quot;: &quot;MicrosoftWindowsServer&quot;\n        },\n        &quot;osTypeLinux&quot;: {\n            &quot;imageOffer&quot;: &quot;UbuntuServer&quot;,\n            &quot;imageSku&quot;: &quot;12.04.5-LTS&quot;,\n            &quot;imagepublisher&quot;: &quot;Canonical&quot;\n        },\n</pre>\n\n<p>말할 필요도 없이 템플릿 언어가 조건을 보다 쉽게 지원하고 처리할 수 있도록 이를 간소화해야 한다는 고객의 말을 들었습니다.</p>\n\n<h3>조건에 대한 지원 소개</h3>\n\n<p>우리는 항상 고객의 피드백을 주셔서 감사합니다, 우리는 당신을 생각 나게 기쁘게 생각합니다 (올해 / / 빌드에서 발표) 우리는 리소스에 대한 조건에 대한 지원을 추가뿐만 아니라 더 많은 기능을 추가했습니다.&nbsp; 여기에는 조건을 처리할 때 템플릿 언어로 사용할 수 있는 <a href=\"https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions-logical\">논리</a> 및 <a href=\"https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions-comparison\">비교</a> 함수가 포함&nbsp;됩니다.</p>\n\n<p>ARM 템플릿에서 새 기능을 활용하는 방법에 대한 실용적인 예를 보여 줍니다. 사용자가 가상 머신을 Windows 또는 Linux 기반인지를 선택하려는 일반적인 예제는 이 블로그 게시물의 앞부분에서 설명한 대로 복잡한 변수를 조작해야 합니다. 또한 사용자가 가상 머신을 프로덕션으로 전환해야 하는지 여부를 결정해야 하는 경우 가용성 집합을 선택적 리소스로 설정하려면 리소스 오&nbsp;라레를 빈 상태로 배포한 중첩된 템플릿이 필요합니다.</p>\n\n<p>총 3개 이상의 템플릿이 필요합니다(그 중 2개는 중첩된 템플릿임을 기억하세요).</p>\n\n<p>이제 조건 및 함수를 사용하여 단일 템플릿으로 이 작업을 수행할 수 있습니다. 훨씬 적은 JSON은 말할 것도없고. &rsquo;먼저 샘플 템플릿에서 사용 중인 몇 가지 매개 변수를 살펴보고 수행한 단계를 설명합니다.</p>\n\n<pre class=\"prettyprint\">\n    &quot;parameters&quot;: {\n        &quot;vmNamePrefix&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;defaultValue&quot;: &quot;VM&quot;,\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;Assign a prefix for the VM you will create.&quot;\n            }\n        },\n        &quot;production&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;allowedValues&quot;: [\n                &quot;Yes&quot;,\n                &quot;No&quot;\n            ],\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;Select whether the VM should be in production or not.&quot;\n            }\n        },\n        &quot;platform&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;allowedValues&quot;: [\n                &quot;WinSrv&quot;,\n                &quot;Linux&quot;\n            ],\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;Select the OS type to deploy.&quot;\n            }\n        },\n        &quot;pwdOrssh&quot;: {\n            &quot;type&quot;: &quot;securestring&quot;,\n            &quot;metadata&quot;: {\n                &quot;description&quot;: &quot;If Windows, specify the password for the OS username. If Linux, provide the SSH.&quot;\n            }\n        },\n</pre>\n\n<p>가상 머신에 접두사 할당 외에도 <em>프로덕션</em> 및 <em>플랫폼</em>에 대한 매개 변수도 있습니다.</p>\n\n<p>프로덕션의 경우 사용자는 <em>단순히 예</em> 또는 <em>아니요</em>를 선택할 수 있습니다. <em>예를 들어 가상 </em>머신을 만들기 전에 이 리소스를 배치해야 하므로 생성되는 가상 머신이 가용성 집합과 연결되도록 합니다. 이를 지원하기 위해 템플릿에 다음 리소스를 추가했습니다.</p>\n\n<pre class=\"prettyprint\">\n        {\n            &quot;condition&quot;: &quot;[equals(parameters(&#39;production&#39;), &#39;Yes&#39;)]&quot;,\n            &quot;type&quot;: &quot;Microsoft.Compute/availabilitySets&quot;,\n            &quot;apiVersion&quot;: &quot;2017-03-30&quot;,\n            &quot;name&quot;: &quot;[variables(&#39;availabilitySetName&#39;)]&quot;,\n            &quot;location&quot;: &quot;[resourceGroup().location]&quot;,\n            &quot;properties&quot;: {\n                &quot;platformFaultDomainCount&quot;: 2,\n                &quot;platformUpdateDomainCount&quot;: 3\n            },\n            &quot;sku&quot;: {\n                &quot;name&quot;: &quot;Aligned&quot;\n            }\n        },\n</pre>\n\n<p><em>조건</em> 속성을 확인합니다. 두 값이 서로 같은지 여부를 확인하는 비교 함수 equals(arg1, arg2)를 사용하고 있습니다. 이 경우 매개 변수 <em>프로덕션</em> 이 <em>예</em>와 같으면 ARM은 런타임 중에 이 리소스를 처리합니다. true<em>가 아니면 </em>(선택되지 않음) 프로비전되지 않습니다.</p>\n\n<p>템플릿의 가상 머신 리소스에 대해 도입된 조건에 따라 가용성 집합에 대한 참조를 선언했습니다.</p>\n\n<pre class=\"prettyprint\">\n           &quot;properties&quot;: {\n                &quot;availabilitySet&quot;: &quot;[if(equals(parameters(&#39;production&#39;), &#39;Yes&#39;), variables(&#39;availabilitySetId&#39;), json(&#39;null&#39;))]&quot;,</pre>\n\n<p>논리 함수 중 하나인 if()를 사용하여 Were&rsquo;를 사용합니다. 이 함수는 세 인수를 사용합니다. 첫 번째는 true인지 false인지 확인하는 값인 조건(부울)입니다. 두 번째 인수는 true 값이고 그 뒤에 false인 세 번째 인수가 옵니다. 결과적으로 가상 머신을 연결합니다. 사용자가 <em>프로덕션</em> 매개 변수에 대해 <em>예를</em> 선택하면 가상 머신이 템플릿에 선언된 가용성 집합과 연결됩니다. 이 집합은 조건으로 인해 이미 생성되었습니다. 사용자가 <em>아니요</em>를 선택하면 가용성 집합이 만들어지지 않으므로&rsquo; 가상 머신 리소스에서 연결되지 않습니다&rsquo;.</p>\n\n<p>Windows 또는 Linux 가상 머신을 만드는지 여부를 결정하는 매개 변수 플랫폼도 있습니다. 템플릿 전체에서 언어 식을 간소화하기 위해 Linux 및 Windows 값을 변수 섹션에 추가했습니다.</p>\n\n<pre class=\"prettyprint\">\n        &quot;windowsOffer&quot;: &quot;WindowsServer&quot;,\n        &quot;windowsSku&quot;: &quot;2016-Datacenter&quot;,\n        &quot;windowsPublisher&quot;: &quot;MicrosoftWindowsServer&quot;,\n        &quot;linuxOffer&quot;: &quot;UbuntuServer&quot;,\n        &quot;linuxSku&quot;: &quot;12.04.5-LTS&quot;,\n        &quot;linuxPublisher&quot;: &quot;Canonical&quot;,\n</pre>\n\n<p>사용되는 이미지를 구분하는 storageProfile 섹션 내에서 가상 머신 리소스에서 Windows 또는 Linux에 대한 변수를 참조합니다.</p>\n\n<pre class=\"prettyprint\">\n&quot;storageProfile&quot;: {\n                    &quot;imageReference&quot;: {\n                        &quot;publisher&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), variables(&#39;windowsPublisher&#39;), variables(&#39;linuxPublisher&#39;))]&quot;,\n                        &quot;offer&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), variables(&#39;windowsOffer&#39;), variables(&#39;linuxOffer&#39;))]&quot;,\n                        &quot;version&quot;: &quot;latest&quot;,\n                        &quot;sku&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), variables(&#39;windowsSku&#39;), variables(&#39;linuxSku&#39;))]&quot;\n                    },\n</pre>\n\n<p>사용자가 <em>플랫폼</em> 매개 변수에 대해 <em>WinSrv</em>를 선택하는 경우 Windows 이미지를 가리키는 변수의 값을 가져옵니다. 그렇지 않고 <em>Linux</em> 를 선택한 경우 해당 변수를 대신 참조합니다. 결과는 Windows Server 2016 또는 Ubuntu를 사용하는 가상 머신이 됩니다.</p>\n\n<p>마지막으로 템플릿에 출력 섹션도 있습니다. 이 섹션은 선택 항목에 따라 사용자에게 몇 가지 지침을 제공합니다.</p>\n\n<pre class=\"prettyprint\">\n    &quot;outputs&quot;: {\n        &quot;vmEndpoint&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;value&quot;: &quot;[reference(concat(variables(&#39;pNicName&#39;))).dnsSettings.fqdn]&quot;\n        },\n        &quot;platform&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;value&quot;: &quot;[parameters(&#39;platform&#39;)]&quot;\n        },\n        &quot;connectionInfo&quot;: {\n            &quot;type&quot;: &quot;string&quot;,\n            &quot;value&quot;: &quot;[if(equals(parameters(&#39;platform&#39;), &#39;WinSrv&#39;), &#39;Use RDP to connect to the VM&#39;, &#39;Use SSH to connect to the VM&#39;)]&quot;\n        }\n    }\n</pre>\n\n<p>사용자가 Windows Server를 배포하는 경우 다음과 같은 출력이 표시됩니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b81a43d4-599d-4bd1-adab-baa321bb6796.png\"><img alt=\"image\" border=\"0\" height=\"110\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2fa884b2-e033-4ca8-b2e3-ae245af2e2fc.png\" style=\"border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"이미지\" width=\"605\"></a></p>\n\n<p>사용자가 Linux를 배포하면 다음이 표시됩니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1501153b-dd2a-42a4-9df4-064b23b245bd.png\"><img alt=\"image\" border=\"0\" height=\"86\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8e44fd52-fc9d-44ee-b7e1-63d92748e3c4.png\" style=\"border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"이미지\" width=\"605\"></a></p>\n\n<h3>요약</h3>\n\n<p>템플릿에서 선언하는 리소스에 대한 조건에 대한 지원을 도입하고 논리 및 비교 함수를 사용하여 템플릿 언어 자체에 향상된 기능을 도입함으로써 훨씬 더 간단한 템플릿에 대한 장면을 설정했습니다. 이제 조건을 구현할 때 이전에 사용했던 해결 방법에서 벗어날 수 있으며, Azure에서 복잡한 앱, 리소스 및 토폴로지 배포하는 동안 훨씬 더 많은 유연성을 얻을 수 있기를 바랍니다.</p>\n\n<p><a href=\"https://gist.github.com/krnese/59f3f2668ecd9b02402bf31bbc6bf253\">전체 템플릿은 여기에서 사용할 수 있습니다</a>.</p>"
