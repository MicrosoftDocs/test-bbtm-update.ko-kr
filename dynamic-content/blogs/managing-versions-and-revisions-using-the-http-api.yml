### YamlMime:Yaml
ms.openlocfilehash: 280dc56ed787110a05ce87decd825bcc624452a6
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911734"
Slug: managing-versions-and-revisions-using-the-http-api
Title: HTTP API를 사용하여 버전 및 수정 버전 관리
Summary: '새 버전 및 수정 버전 기능은 기존 관리 API에 최대한 원활하게 맞게 설계되었습니다. 높은 수준의 관점에서 현재 수정 버전으로 작업하는 것은 항상 API로 작업하는 방식과 동일합니다. '
Content: >-
  <p>새 <a href="https://blogs.msdn.microsoft.com/apimanagement/2017/09/14/versions-revisions/">버전 및 수정</a> 버전 기능은 기존 관리 API에 최대한 원활하게 맞게 설계되었습니다.</p>


  <p>높은 수준의 관점에서 현재 수정 버전으로 작업하는 것은 항상 API로 작업하는 방식과 동일합니다. 다른 버전의 API로 작업하는 것은 다른 API로 작업하는 것과 같습니다. 각 버전에는 자체 apiId 식별자가 있습니다. 최신이 아닌 수정 버전을 사용하려면 약간의 마법이 필요합니다. 현재 수정 버전의 apiId만 사용하는 대신 추가 접미사 ;rev=n 여기서 n은 수정 번호입니다.</p>


  <p>ARM을 통해 API에 액세스하는 경우 다음 기본 URL을 사용합니다.</p>


  <pre>

  https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.ApiManagement/service/{serviceName}/</pre>


  <p>또한 권한 부여 헤더에 ARM의 전달자 토큰이 필요합니다. <a href="https://github.com/projectkudu/ARMClient">ArmClient</a>를 사용하는 것이 테스트용 토큰을 가져오는 가장 쉬운 방법입니다.</p>


  <p>그러나 클래식 서비스 관리 API를 사용하는 경우 기본 URL은 다음과 같습니다.</p>


  <pre>

  https://{serviceName}.management.azure-api.net/</pre>


  <p>Security-Management API의 API Management 인스턴스에 대한 Azure Portal에서 필요한 권한 부여 헤더를&gt; 가져올 수 있습니다.</p>


  <p>ARM API의 장점은 관리자가 아닌 사용자에게 API에 대한 액세스 권한을 부여할 수 있으며 작업의 감사 내역이 있다는 것입니다. 유일한 추가 복잡성은 API 응답 데이터가 표준 ARM 페이로드 봉투에 포함되어 있다는 것입니다. 여기에 설명된 모든 시나리오는 두 API를 통해 작동하지만 일부는 하나의 API에 대해서만 설명됩니다.</p>


  <h2>API 및 버전 목록</h2>


  <p>API 목록을 요청할 때 버전이 지정된 모든 API와 버전이 아닌 API의 현재 수정 버전이 표시됩니다. 현재가 아닌 수정 버전은 이 목록에 표시되지 않습니다.</p>


  <pre>

  GET {{baseUrl}}/apis?api-version=2017-01-01 HTTP/1.1


  Authorization: {{authValue}}


  HTTP/1.1 200 OK


  Content-Type: application/json; charset=utf-8


  {

    &quot;value&quot;: [

          {

        &quot;id&quot;: &quot;/subscriptions/6b7f02d9-1f17-43e0-a02c-24e99753d14a/resourceGroups/Api-Default-East-US/providers/Microsoft.ApiManagement/service/conference/apis/5942d3b49ea6ed985e913bc4&quot;,

        &quot;type&quot;: &quot;Microsoft.ApiManagement/service/apis&quot;,

        &quot;name&quot;: &quot;5942d3b49ea6ed985e913bc4&quot;,

        &quot;properties&quot;: {

          &quot;displayName&quot;: &quot;Big Conference API-v2&quot;,

          &quot;apiRevision&quot;: &quot;1&quot;,

          &quot;description&quot;: &quot;Sample hypermedia API running in an API App on App Service.&quot;,

          &quot;path&quot;: &quot;bigconf&quot;,

          &quot;protocols&quot;: [

            &quot;https&quot;

          ],

          &quot;authenticationSettings&quot;: null,

          &quot;subscriptionKeyParameterNames&quot;: null,

          &quot;isCurrent&quot;: true,

          &quot;apiVersion&quot;: &quot;v2&quot;,

          &quot;apiVersionSet&quot;: {

            &quot;id&quot;: &quot;/subscriptions/6b7f02d9-1f17-43e0-a02c-24e99753d14a/resourceGroups/Api-Default-East-US/providers/Microsoft.ApiManagement/service/conference/api-version-sets/5e02bd74-4323-4531-b889-85ab4b51563e&quot;,

            &quot;name&quot;: &quot;Big Conference API&quot;,

            &quot;description&quot;: null,

            &quot;versioningScheme&quot;: &quot;Segment&quot;,

            &quot;versionQueryName&quot;: null,

            &quot;versionHeaderName&quot;: null

          }

        }

      },

    ],

    ...

  }</pre>


  <p>apiVersion 속성은 버전이 없는 API 및 원래 버전에 대해 비어 있습니다. 즉, 버전이 지정되기 전에 존재했던 API입니다.</p>


  <p>apiRevision 속성은 API의 수정 번호를 식별하며 모든 기존 API에 대해 기본값은 1로 설정됩니다. 이 목록에서 isCurrent 속성은 항상 true이고 모든 경우에 읽기 전용 속성입니다.</p>


  <p>apiVersionSet 개체는 API가 속한 버전 집합을 나타냅니다. Api 버전 집합은 버전 집합의 모든 API에 대한 버전 관리 규칙을 정의합니다.</p>


  <h2>현재 수정 버전에 액세스</h2>


  <p>현재 수정 버전과의 상호 작용은 과거와 마찬가지로 작동합니다.</p>


  <pre>

  GET {{baseUrl}}/apis/{{apiId}}?api-version=2017-03-01 HTTP/1.1


  Authorization: {{authValue}}</pre>


  <h2>현재가 아닌 수정 버전에 액세스</h2>


  <p>현재가 아닌 수정 버전에 액세스하려면 수정 접미사를 추가하여 apiId를 약간 수정해야 합니다.</p>


  <pre>

  GET {{baseUrl}}/apis/5942d3b49ea6ed985e913bc4;rev=2?api-version=2017-03-01 HTTP/1.1


  Authorization: {{authValue}}</pre>


  <p>이렇게 하면 여전히 온라인으로 표시된 현재가 아닌 모든 수정 버전에 액세스할 수 있습니다. API 정의에는 새 부울 속성 isOnline이 있습니다.</p>


  <h2>새 수정 버전 만들기</h2>


  <p>다른 API와 마찬가지로 수정 버전을 만들 수 있습니다. 유일한 차이점은 apiId에 추가된 수정 접미사입니다. apiId에 대해 만들어진 첫 번째 수정 버전은 현재 수정 버전으로 간주됩니다.</p>


  <pre>

  PUT {{classicBaseUrl}}/apis/myApiId;rev=1?api-version=2017-03-01


  Authorization: {{authValue}}


  Content-Type: application/json


  {

    &quot;name&quot; : &quot;My Api&quot;,

    &quot;path&quot; : &quot;api&quot;,

    &quot;serviceUrl&quot; : &quot;https://example.org&quot;,

    &quot;protocols&quot; : [&quot;https&quot;]

  }</pre>


  <p>rev 매개 변수는 수정 버전이 다른 API 정의일 뿐이지만 동일한 ApiId를 사용하는 수정 버전 집합 간에 관계가 있음을 강조 표시하는 <a href="https://www.w3.org/DesignIssues/MatrixURIs.html">행렬 매개 변수</a> 로 표시됩니다. 수정 버전은 API와 구별되는 개념이 아닙니다. 특수 식별자가 있는 API일 뿐입니다.</p>


  <p>rev 접미사 없이 PUT을 사용하면 새 API가 아직 없는 경우 수정 버전 1로 생성됩니다.</p>


  <h2>다른 버전을 기반으로 수정 버전 만들기</h2>


  <p>API 수정 버전을 만드는 가장 쉬운 방법은 기존 API 수정 버전을 기반으로 하는 것입니다. 이렇게 하려면 일반 API 계약 페이로드를 전달하는 대신 특수 페이로드를 보내는데, 이 페이로드는 클래식 API에 application/vnd.ms-azure-apim.revisioninfo+json이라는 새 미디어 형식으로 표시됩니다.</p>


  <pre>

  PUT {{classicBaseUrl}}/apis/myapiId;rev=2?api-version=2017-03-01


  Authorization: {{authValue}}


  Content-Type: application/vnd.ms-azure-apim.revisioninfo+json


  {

        &quot;sourceApiId&quot;:&quot;/apis/myapiId&quot;,

        &quot;apiRevisionDescription&quot;:&quot;My new revision&quot;

  }</pre>


  <p>대상 URL은 만들 새 수정 버전을 가리키고 sourceApiId는 기본 경로 다음에 있는 원본 Api 수정 버전의 경로입니다. 이 경우 현재 API의 수정 버전을 만듭니다.</p>


  <p>Azure Portal에서 사용자 인터페이스는 수정 버전이 선형 시퀀스인지 확인합니다. 즉, 새 수정 버전을 추가하면 수정 버전 n을 기반으로 수정 버전 n+1이 만들어집니다. 그러나 API를 통해 제한되지는 않습니다. 선형 경로에서 벗어나지 않도록 주의하거나 업데이트가 손실될 수 있습니다.</p>


  <p>이 작업이 작동하는 방식 때문에 Azure 배포 템플릿에서 지원되지 않을 수 있습니다. 배포 템플릿에서 수정 버전을 지원하는 가장 좋은 방법을 고려하고 있습니다. 기대해 주세요.</p>


  <p>그러나 응답은 ARM 페이로드를 준수합니다.</p>


  <pre>

  {

    &quot;id&quot;: &quot;/subscriptions/6b7f02d9-1f17-43e0-a02c-24e99753d14a/resourceGroups/Api-Default-East-US/providers/Microsoft.ApiManagement/service/conference/apis/55bae80192ff5c0314040001;rev=2&quot;,

    &quot;type&quot;: &quot;Microsoft.ApiManagement/service/apis&quot;,

    &quot;name&quot;: &quot;55bae80192ff5c0314040001;rev=2&quot;,

    &quot;properties&quot;: {

      &quot;displayName&quot;: &quot;Echo API&quot;,

      &quot;apiRevision&quot;: &quot;2&quot;,

      &quot;description&quot;: null,

      &quot;serviceUrl&quot;: &quot;https://echoapi.cloudapp.net/api&quot;,

      &quot;path&quot;: &quot;echo&quot;,

      &quot;protocols&quot;: [

        &quot;https&quot;

      ],

      &quot;authenticationSettings&quot;: {

        &quot;oAuth2&quot;: null,

        &quot;openid&quot;: null

      },

      &quot;subscriptionKeyParameterNames&quot;: {

        &quot;header&quot;: &quot;Ocp-Apim-Subscription-Key&quot;,

        &quot;query&quot;: &quot;subscription-key&quot;

      },

      &quot;apiRevisionDescription&quot;: &quot;My new revision&quot;

    }

  }</pre>


  <h2>수정 버전에서 버전 만들기</h2>


  <p>고객이 옵트인해야 하는 API를 변경해야 하는 경우 새 API 버전을 만들어야 합니다.</p>


  <p>새 API 버전에는 다른 apiId가 있지만 API의 모든 버전에 공통적이고 버전 관리 체계를 정의하는 메타데이터를 포함하는 ApiVersionSet에 연결됩니다. 수정 버전이 특별히 식별된 API 리소스와 마찬가지로 버전도 마찬가지입니다.</p>


  <p>기존 API 수정 버전에서 새 API 버전을 만드는 것은 다른 수정 버전을 기반으로 수정 버전을 만드는 것과 매우 유사합니다. 가장 큰 차이점은 apiVersionSet 개체를 포함하는 것입니다. apiVersionSet에 유효한 ID 속성이 포함되어 있으면 API가 기존 apiVersionSet에 추가됩니다. 그렇지 않으면 새 apiVersionSet이 만들어집니다.</p>


  <pre>

  PUT {{classicBaseUrl}}/apis/{newApiId}


  Content-Type: application/vnd.ms-azure-apim.revisioninfo+json


  {

      &quot;sourceApiId&quot; : &quot;/apis/{existingApiId[rev]}&quot;,

      &quot;apiVersionName&quot; : &quot;v2&quot;,

      &quot;apiVersionDescription&quot; : &quot;Description&quot;,

      &quot;apiVersionSet&quot; : {

          &quot;versioningScheme&quot; : &quot;Segment&quot;

      }

  }</pre>


  <p>apiVersionName은 필수 속성이며 versioningScheme은 Segment, Header 또는 Query 중 하나여야 합니다. 헤더 또는 쿼리 버전 관리가 선택된 경우 headerParameterName 또는 queryParameterName을 제공해야 합니다.</p>


  <p>세그먼트 버전 관리 체계를 사용하는 경우 Azure API Management에서 노출하는 API를 호출할 때 apiVersionName은 Api 접미사 뒤와 작업 UrlTemplate 이전의 세그먼트에 표시되어야 합니다.</p>


  <h2>버전이 지정된 API를 처음부터 만들기</h2>


  <p>버전 관리 전략이 무엇인지 미리 정의하는 새 API 정의를 만들 수 있습니다. 필요한 것은 API 정의 표현에 기존 apiVersionSet에 대한 참조를 포함하는 것입니다.</p>


  <pre>

  PUT {{classicBaseUrl}}/apis/{{apiId}}?api-version=2017-03-01


  Authorization: {{authValue}}


  Content-Type: application/json


  {

    &quot;name&quot; : &quot;My Api&quot;,

    &quot;path&quot; : &quot;api&quot;,

    &quot;serviceUrl&quot; : &quot;https://example.org&quot;,

    &quot;protocols&quot; : [&quot;https&quot;]

    &quot;apiVersion&quot; : &quot;v1&quot;,

    &quot;apiVersionDescription&quot; : &quot;Initial Version&quot;,

    &quot;apiVersionSetId&quot; : &quot;/api-version-sets/myapiversionset&quot;

  }</pre>


  <h2>수정 버전 목록</h2>


  <p>특정 apiId에 대한 수정 버전 집합을 보려면 다음과 같이 요청할 수 있습니다.</p>


  <pre>

  GET https://{{baseUrl}}/apis/{{apiId}}/revisions?api-version=2017-03-01 HTTP/1.1


  Authorization: {{authValue}}


  HTTP/1.1 200 OK


  Content-Type: application/json; charset=utf-8


  {

    &quot;value&quot;: [

      {

        &quot;apiId&quot;: &quot;/apis/echo-api;rev=2&quot;,

        &quot;apiRevision&quot;: &quot;2&quot;,

        &quot;createdDateTime&quot;: &quot;2017-05-30T18:32:06.463&quot;,

        &quot;updatedDateTime&quot;: &quot;2017-05-30T18:32:06.463&quot;,

        &quot;description&quot;: &quot;its a test&quot;,

        &quot;privateUrl&quot;: &quot;/api;rev=2/&quot;,

        &quot;isOnline&quot;: true,

        &quot;isCurrent&quot;: false

      },

      {

        &quot;apiId&quot;: &quot;/apis/echo-api;rev=1&quot;,

        &quot;apiRevision&quot;: &quot;1&quot;,

        &quot;createdDateTime&quot;: &quot;2017-05-30T00:21:33.037&quot;,

        &quot;updatedDateTime&quot;: &quot;2017-05-30T00:21:33.037&quot;,

        &quot;description&quot;: null,

        &quot;privateUrl&quot;: null,

        &quot;isOnline&quot;: true,

        &quot;isCurrent&quot;: true

      }

    ],

    &quot;count&quot;: 2,

    &quot;nextLink&quot;: null

  }</pre>


  <p>반환된 표현은 단순히 수정 버전에 대한 정보의 읽기 전용 요약 보기입니다.</p>


  <h2>모든 수정 버전 삭제</h2>


  <p>.../revisions 리소스가 읽기 전용이라고 했음에도 불구하고 apiId에 연결된 모든 수정 버전을 신속하게 삭제하는 데 사용할 수 있습니다.</p>


  <pre>

  DELETE {{baseUrl}}/apis/{{apiId}}/revisions?api-version=2017-03-01 HTTP/1.1


  If-match: *


  Authorization: {{authValue}}</pre>


  <h2>수정 버전 릴리스 만들기</h2>


  <p>한 번에 현재 수정 버전으로 표시된 각 API에 대해 하나의 수정 버전만 있습니다. API 표현은 수정 버전이 현재인지 여부를 나타내는 isCurrent 플래그를 포함합니다. 이 특성은 읽기 전용입니다. 현재 수정 버전을 변경하려면 릴리스 리소스를 만들어야 합니다. 요청 페이로드는 최신 버전이 될 API 수정 버전을 식별해야 합니다.</p>


  <pre>

  PUT {{classicBaseUrl}}/apis/{{apiId}}/releases/{{releaseId}}?api-version=2017-03-01 HTTP/1.1


  Authorization: {{authValue}}


  Content-Type: application/json


  {

    &quot;apiId&quot; : &quot;/apis/echo-api;rev=2&quot;,

    &quot;notes&quot; : &quot;Let&#39;s release it&quot;

  }</pre>


  <p>여기에 포함된 메모는 개발자 포털의 릴리스 정보에 표시됩니다. 선택적 속성입니다. 릴리스 수정 버전을 롤백하려면 이전 수정 버전을 대상으로 하는 새 릴리스를 만들면 다시 한 번 최신 버전이 됩니다.</p>


  <h2>API에 대한 릴리스 정보 가져오기</h2>


  <p>다음 요청을 사용하여 API에 대한 릴리스 정보 집합을 검색할 수 있습니다.</p>


  <pre>

  GET {{baseUrl}}/apis/{{apiId}}/releases?api-version=2017-03-01 HTTP/1.1


  Authorization: {{authValue}}</pre>


  <h2>요약</h2>


  <p>버전 및 수정 버전 구현은 현재 미리 보기 상태이므로 이러한 API는 사용자 의견에 따라 변경될 수 있습니다. 그래서, 우리가 당신이 어떻게 생각하는지 알려주세요. 당신은 무엇을 좋아합니까? 당신은 무엇을 좋아하지&#39;? 명확한 설명을 사용할 수 있는 부분은 무엇입니까? API가 누락되었나요? 그것을 시도하고 알려주세요.</p>
