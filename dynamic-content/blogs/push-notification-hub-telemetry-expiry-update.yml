### YamlMime:Yaml
ms.openlocfilehash: bc8244e3d48f79c3517724d5466e4b1346440e02
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905790"
Slug: push-notification-hub-telemetry-expiry-update
Title: Notification Hubs에 대한 메시지별 원격 분석 및 디바이스 만료 개선
Summary: Notification Hubs의 메시지별 원격 분석 기능은 이제 예약된 전송을 지원하며 허용되는 디바이스 만료(TTL)가 무한대로 확장됩니다.
Content: >-
  <p>메시지별 원격 분석 기능 및 디바이스 만료에 대한 몇 가지 업데이트를 발표합니다.</p>


  <h2>메시지당 원격 분석</h2>


  <p>메시지<a href="https://msdn.microsoft.com/en-us/library/azure/mt608135.aspx">별 원격 분석은</a> 이제 <a href="https://msdn.microsoft.com/en-us/library/azure/dn790626.aspx">예약된 알림</a>에 사용할 수 있으며 추가 푸시 요청 처리 상태를 이해하도록 개선되었습니다. 기존 큐에 추가된, 처리, 완료됨 및 중단됨 상태 위에 다음이 추가되었습니다.</p>


  <ul>
      <li>예약됨(예약된 알림의 경우): 메시지가 큐에 있으며 예약된 시간에 전송됩니다.</li>
      <li>취소됨(예약된 알림의 경우): 사용자가 예약된 메시지를 취소했습니다.</li>
      <li>NoTargetFound: 푸시 요청에 대한 대상 디바이스를 찾을 수 없습니다.</li>
  </ul>


  <p>REST 또는 .NET SDK&#39;<font style="line-height: 1.46em; font-family: &quot;andale mono&quot;, &quot;lucida console&quot;, monospace; font-size: 13px; font-style: normal; font-weight: normal; white-space: pre;">GetNotificationOutcomeDetailsAsyncAPI</font><span style="line-height: 20px; font-family: tahoma, &quot;Helvetica Neue&quot;, arial, helvetica, sans-serif; font-size: 13px; font-style: normal; font-weight: normal;">&nbsp;</span>를 통해 메시지당 원격 분석을 사용할 수 있습니다.<span style="line-height: 20px; font-family: tahoma, &quot;Helvetica Neue&quot;, arial, helvetica, sans-serif; font-size: 13px; font-style: normal; font-weight: normal; white-space: pre;"></span></p>


  <pre class="prettyprint" style="font-size: 13px;">

  <font style="font-size: 13px;">//Notification will be sent after an hour

  NotificationHubClient notificationHubClient;

  DateTimeOffset scheduledTime = new DateTimeOffset(DateTime.UtcNow).AddHours(1);

  var scheduledNotification = notificationHubClient.ScheduleNotificationAsync(&lt;Notification&gt;, scheduledTime);


  //Query the status of this send request

  var outcome = notificationHubClient.GetNotificationOutcomeDetailsAsync(scheduledNotification.NotificationId);</font>

  </pre>


  <h2>Time To Live(디바이스 만료)</h2>


  <p>이 시나리오를 통해 과거에 많은 고객이 Microsoft에 왔습니다. 최종 사용자가 앱을 거의 열지 않지만 제공된 알림에 크게 의존하는 경우 어떻게 해야 할까요? Notification Hubs에는 최대 90일의 디바이스 Time To Live가 있고 디바이스가 앱 시작 시 허브에 등록되기 때문에 솔루션은 고객이 시작한 export-update-import 프로세스로 각 디바이스를 최신 상태로 &ndash; 유지하기 위해 최소한으로 지루하게 유지했습니다. 따라서&rsquo; 디바이스 모델, <a href="https://azure.microsoft.com/en-us/documentation/articles/notification-hubs-registration-management/">등록</a> 및 <a href="https://azure.microsoft.com/en-us/documentation/articles/notification-hubs-registration-management/">설치(권장)</a>에서 허용된 디바이스 만료를 무한대(또는 정확하게 9999-12-31T23:59:59)로 연장하기로 결정했습니다.</p>


  <p>앱 시작 시 디바이스에 대한 등록 및 설치를 업데이트하는 것이 좋지만, 디바이스가 사용자 지정된 Time To Live에 도달하지 않거나 서비스가 전송 시도 시 플랫폼 알림 시스템에서 토큰 만료&rdquo; 오류를 가져오는 &ldquo;경우 등록 또는 설치 삭제를 시작하지 않습니다&rsquo;. 사용자 지정하지 않는 한 허브 Time To Live를 시스템 최대 DateTime 값으로 기본값으로 설정합니다. 따라서 최근에 해당 알림 허브를 &ldquo;만든 경우 10M 이상 일의 <a href="https://manage.windowsazure.com">클래식 Azure Portal</a>에 등록 시간-라이브&rdquo; 표시가 표시되는 것이 맞습니다.</p>


  <p>이 만료 변경을 활용하려면 알림 허브&rsquo; <a href="https://msdn.microsoft.com/en-us/library/azure/microsoft.azure.notificationhubs.notificationhubdescription.registrationttl.aspx">Time To Live</a> 속성을 업데이트하기만 하면 됩니다. REST 또는 .NET SDK를 통해 이 작업을 수행할 수 있습니다.</p>


  <pre class="prettyprint" style="font-size: 13px;">

  <font style="font-size: 13px;">var namespaceManager = NamespaceManager.CreateFromConnectionString(&quot;connectionstring&quot;);

  NotificationHubDescription hub = namespaceManager.GetNotificationHub(&quot;foo&quot;);

  hub.RegistrationTtl = TimeSpan.MaxValue;

  namespaceManager.UpdateNotificationHub(hub);</font>

  </pre>


  <p>사용해 보시고 아래의 의견 섹션에서 어떻게 생각하는지 알려주세요.</p>
