### YamlMime:Yaml
ms.openlocfilehash: 1dba1012fea22d763bb006eb479f7ef7f318f75c
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903118"
Slug: an-end-to-end-prototype-of-playready-protection-with-acs-authentication-and-acs-token-authorization
Title: ACS 인증 및 ACS 토큰 권한 부여를 사용하는 PlayReady Protection의 엔드투엔드 프로토타입
Summary: Azure Media Services 동적 PlayReady 보호 기능은 "원클릭 DRM"을 현실로 만듭니다.
Content: "&nbsp;\n<h1>소개</h1>\n이 엔드투엔드 프로토타입은 아시아와 유럽의 고객의 요청에 응답했습니다.\n\n<a href=\"https://azure.microsoft.com/blog/2014/09/10/announcing-public-availability-of-azure-media-services-content-protection-services/\">Azure Media Services Content Protection</a>에는 다음이 포함됩니다.\n<ul>\n <li>PlayReady 라이선스 배달 서비스;</li>\n <li>AES 128 지우기 키 배달 서비스;</li>\n <li>배달 시간 동안 동적 PlayReady 보호 또는 AES 암호화;</li>\n <li>미디어 처리 워크플로의 정적 PlayReady 보호 또는 AES 암호화.</li>\n</ul>\nAzure Media Services 동적 PlayReady 보호 기능은 \"원클릭 DRM\"을 현실로 만듭니다. 고객 또는 파트너는 \"기존 DRM\"에 필요한 다음 단계 중 하나를 진행할 필요가 없습니다.\n<ol>\n <li>보안 PlayReady 서버 라이선스,</li>\n <li>PlayReady 라이선스 서버 팜을 설치합니다.</li>\n <li>자산을 보호하기 위해 PlayReady 패키징 워크플로를 진행합니다.</li>\n</ol>\n\"한 번의 클릭\"으로 자산을 보호하거나 보호할 수 있으며 웹 페이지 새로 고침의 속도로 수행됩니다.\n\n일반적으로 DRM 솔루션에는 여러 이동 부분이 포함되며, 다음 블로그에서는 DRM 솔루션의 구성 요소에 대한 개요를 제공합니다. <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\">Azure Media Services PlayReady 라이선스 배달 서비스 사용 시 솔루션 디자인 고려 사항</a>입니다. 이 노력의 목표인 완전한 엔드 투 엔드 프로토타입이 바람직할 것입니다.\n\n&nbsp;\n<h2><span style=\"font-size: xx-large\">엔드 투 엔드 프로토타입</span></h2>\n<h2>디자인 및 기능</h2>\n이러한 노력의 목표는 다음을 다루는 엔드 투 엔드 프로토타입을 제공하는 것입니다.\n<ul>\n <li>AMS의 자산에 대한 토큰 제한을 사용하여 PlayReady 동적 보호(또는 정적 보호)</li>\n <li>PlayReady 라이선스를 배달하기 위한 라이선스 배달 서비스를 Azure Media Services.</li>\n <li>SWT 권한 부여 토큰을 발급하는 <a href=\"https://msdn.microsoft.com/en-us/library/azure/hh147631.aspx\">STS인 Azure ACS</a>(Microsoft Azure Active Directory Access Control)</li>\n <li>Silverlight 플레이어\n<ol>\n <li>는 ACS 서비스 ID에 의해 인증됩니다.</li>\n <li>ACS에서 권한 부여 토큰을 가져옵니다.</li>\n <li>ACS 토큰을 사용하여 AMS 라이선스 배달 서비스에서 PlayReady 라이선스를 획득하고</li>\n <li>는 후속 비디오 재생을 위해 부드러운 스트리밍 또는 MPEG-DASH 자산을 다운로드합니다.</li>\n</ol>\n</li>\n</ul>\n다음과 같은 이유로 Silverlight 플레이어를 사용하기로 결정했습니다.\n<ol>\n <li>IE, Chrome 및 Firefox와 같은 인기 브라우저에서 플레이어에 액세스할 수 있도록 하려면</li>\n <li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=42080\" target=\"_blank\">부드러운 스트리밍 클라이언트 v2.5</a> 는 PlayReady 클라이언트 라이선스가 필요하지 않은 PlayReady 클라이언트 지원과 함께 제공됩니다.</li>\n <li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=42080\" target=\"_blank\">부드러운 스트리밍 클라이언트 v2.5</a> 는 MPEG-DASH도 지원합니다. 이 엔드 투 엔드 프로토타입은 부드러운 스트리밍 외에도 MPEG-DASH를 다룹니다.</li>\n</ol>\n&nbsp;\n\n이 엔드 투 엔드 프로토타입의 디자인은 다음 다이어그램에 설명되어 있습니다. 이는 <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\">Azure Media Services PlayReady 라이선스 배달 서비스를 사용하는 저자의 블로그 솔루션 디자인 고려 사항에</a> 설명된 일반 DRM 솔루션 다이어그램의 전문화입니다.\n\n&nbsp;\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/14/Blog_Secure_Delivery_Prototype.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Blog_Secure_Delivery_Prototype\" alt=\"Blog_Secure_Delivery_Prototype\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Blog_Secure_Delivery_Prototype_thumb.jpg\" width=\"636\" height=\"473\" border=\"0\" /></a>\n\n&nbsp;\n\n엔드 투 엔드 프로토타입은 Azure 및 Azure Media Services 호스트됩니다. 프로토타입과 관련된 정보는 다음과 같습니다.\n<ul>\n <li>PlayReady 동적 보호에서 부드러운 스트리밍 자산의 URL;</li>\n <li>PlayReady 동적 보호에서 MPEG-DASH 자산의 URL입니다.</li>\n <li><a href=\"https://willzhanmediaservice.keydelivery.mediaservices.windows.net/PlayReady/\" target=\"_blank\">PlayReady 라이선스 취득을 위한 URL</a>;</li>\n <li>PlayReady 라이선스 유형: 비영구적(테스트가 시간 프레임에서 여러 번 반복될 수 있도록)</li>\n <li><a href=\"https://willzhanacs.accesscontrol.windows.net\" target=\"_blank\">SWT 권한 부여 토큰을 발급하는 Azure ACS 네임스페이스의 URL</a>입니다.</li>\n <li>Silverlight 플레이어의 URL입니다.</li>\n <li>권한 부여 정책 제한:</li>\n</ul>\n<blockquote>\n<pre class=\"prettyprint\">&lt;TokenRestrictionTemplate xmlns:i=\"https://www.w3.org/2001/XMLSchema-instance\" xmlns=\"\"&gt;\n  &lt;AlternateVerificationKeys&gt;\n    &lt;TokenVerificationKey i:type=\"SymmetricVerificationKey\"&gt;\n      &lt;KeyValue&gt;(portion deleted) Yw1z2wxh6ZkX4tRl/WVhBTvM6T/vUo=&lt;/KeyValue&gt;\n    &lt;/TokenVerificationKey&gt;\n  &lt;/AlternateVerificationKeys&gt;\n  &lt;Audience&gt;urn:test&lt;/Audience&gt;\n  &lt;Issuer&gt;https://willzhanacs.accesscontrol.windows.net/&lt;/Issuer&gt;\n  &lt;PrimaryVerificationKey i:type=\"SymmetricVerificationKey\"&gt;\n    &lt;KeyValue&gt;(portion deleted) A8RlVMrPNhukYBF2sW04UMpuD8bw=&lt;/KeyValue&gt;\n  &lt;/PrimaryVerificationKey&gt;\n  &lt;RequiredClaims /&gt;\n&lt;/TokenRestrictionTemplate&gt;</pre>\n</blockquote>\n&nbsp;\n<h2></h2>\n<h2>어떻게 실행하나요?</h2>\n테스트 플레이어를 사용하여 이 프로토타입을 실행하는 간단한 단계는 다음과 같습니다.\n<ol>\n <li>플레이어로 이동</li>\n <li>URL을 입력할 수 있도록 \"URL 추가\" 확인 표시를 선택합니다.</li>\n <li>ACS 권한 부여 토큰이 먼저 요청되고 LA_URL 텍스트 상자에 지정된 라이선스 취득 URL에서 PlayReady 라이선스 획득에 사용되도록 \"AuthN ACS 토큰 추가\" 확인 표시를 선택합니다.</li>\n <li>부드러운 스트리밍 자산 URL 또는 MPEG-DASH 자산 URL을 복사하여 SRC_URL 텍스트 상자에 붙여넣습니다. 그런 다음, \"재생 목록에 추가\" 단추를 눌러 재생합니다.</li>\n</ol>\n&nbsp;\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/15/Player.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"플레이어\" alt=\"Player\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Player_thumb.jpg\" width=\"636\" height=\"249\" border=\"0\" /></a>\n\n단추를 클릭하면 플레이어는 다음을 수행합니다.\n<ol>\n <li>PlayReady 동적 보호에서 자산의 클라이언트 매니페스트를 다운로드합니다.</li>\n <li>서비스 ID를 통해 ACS 2.0 네임스페이스에서 인증을 받습니다.</li>\n <li>ACS에서 권한 부여 토큰 요청;</li>\n <li>ACS 토큰을 사용하여 LA_URL PlayReady 라이선스를 요청합니다.</li>\n <li>암호를 해독하고 PlayReady 제한을 확인한 다음, 비디오를 재생합니다.</li>\n</ol>\n물론 \"AuthN ACS 토큰 추가\" 확인 표시를 선택 취소하고 단추를 클릭하면 ACS 네임스페이스에서 권한 부여 토큰이 누락되어 PlayReady 라이선스 획득 시 실패합니다.\n\n&nbsp;\n<h1></h1>\n<h1>구현</h1>\n구현에는 다음이 포함됩니다.\n<ol>\n <li>Azure Media Services .NET API를 사용하여 부드러운 스트리밍 자산에 대한 PlayReady 동적 보호를 구성합니다.\n<ul>\n <li>콘텐츠 키 ID 및 콘텐츠 키를 생성합니다.</li>\n <li>키 배달 서비스 구성;</li>\n <li>자산 배달 정책을 통해 동적 PlayReady 보호를 구성합니다.</li>\n <li>자산을 게시합니다.</li>\n</ul>\n</li>\n <li>플레이어 클라이언트를 인증하고 권한 부여 토큰을 발급하도록 Azure ACS 2.0 네임스페이스를 설정합니다.</li>\n <li>인증, 권한 부여, 라이선스 획득 및 비디오 재생을 처리하는 Silverlight 플레이어를 개발합니다.</li>\n</ol>\n<h2></h2>\n&nbsp;\n<h2>콘텐츠 키 생성</h2>\n콘텐츠 키 ID 및 콘텐츠 키를 생성하는 방법에는 다양한 방법이 있습니다. 자세한 내용은 <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\" target=\"_blank\">저자의 블로그</a> (키 생성 및 관리 섹션)를 참조하세요. 예를 들어 다음과 같은 방법이 있습니다.\n<blockquote>\n<pre class=\"prettyprint\">string keySeedB64, contentKeyB64;\nGuid keyId = Guid.NewGuid();\n//Guid keyId = new Guid(\"09a2212a-a803-4989-9a6e-6cd2e69500e7\");</pre>\n&nbsp;\n<pre class=\"prettyprint\">   \n//Method 1: Without using key seed, generete content key directly\n//contentKeyB64 = GeneratePlayReadyContentKey();</pre>\n&nbsp;\n<pre class=\"prettyprint\">//Method 2: With a given key seed and generated key ID (Key Identifiers are unique in the system and there can only be one key with a given Guid within a cluster (even across accounts for now although that may change to be account scoped in the future).  If you try to submit a protection job with a keyId that already exists but a different key value that will cause the PlayReady protection job to fail (the same keyId and keyValue is okay). \nkeySeedB64 = \"XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I\";\ncontentKeyB64 = GetPlayReadyContentKeyFromKeyIdKeySeed(keyId.ToString(), keySeedB64);</pre>\n&nbsp;\n<pre class=\"prettyprint\">//Method 3: With a randomly generated key seed, create content key from the key ID and key seed\n//keySeedB64 = GeneratePlayReadyKeySeed();\n//contentKeyB64 = GetPlayReadyContentKeyFromKeyIdKeySeed(keyId.ToString(), keySeedB64);</pre>\n&nbsp;\n<pre class=\"prettyprint\">//Method 4: Reuse an existing key ID (only once, for test)\n//keyId = new Guid(\"a7586184-40ff-4047-9edd-6a8273ac50fc\");\n//keySeedB64 = \"XVBovsmzhP9gRIZxWfFta3VVRPzVEWmJsazEJ46I\";\n//contentKeyB64 = GetPlayReadyContentKeyFromKeyIdKeySeed(keyId.ToString(), keySeedB64);\nConsole.WriteLine(string.Format(\"STEP 1: Key ID = {0}, Content Key = {1}, Key Seed = {2}\", contentKeyB64, keyId.ToString(), keySeedB64));</pre>\n</blockquote>\n키 ID 및 키 시드를 생성하는 데 사용되는 유틸리티 메서드는 다음과 같습니다.\n<blockquote>\n<pre class=\"prettyprint\">public static byte[] GenerateCryptographicallyStrongRandomBytes(int length)\n{\n    byte[] bytes = new byte[length];\n    //This type implements the IDisposable interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its Dispose method in a try/catch block. To dispose of it indirectly, use a language construct such as using (in C#) \n    using (var rng = new System.Security.Cryptography.RNGCryptoServiceProvider())\n    {\n        rng.GetBytes(bytes);\n    }\n    return bytes;\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">//generate a PlayReady content key: cryptographically strong random byte[16]\npublic static string GeneratePlayReadyContentKey()\n{\n    byte[] bytes = GenerateCryptographicallyStrongRandomBytes(16);\n    return Convert.ToBase64String(bytes);\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">public static string GeneratePlayReadyKeySeed()\n{\n    byte[] bytes = GenerateCryptographicallyStrongRandomBytes(30);   //30 for key seed: https://msdn.microsoft.com/en-us/library/hh973610.aspx\n    return Convert.ToBase64String(bytes);\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">public static string GenerateSymmetricHashKey()\n{\n    byte[] bytes = GenerateCryptographicallyStrongRandomBytes(32);  \n    return Convert.ToBase64String(bytes);\n}</pre>\n&nbsp;\n<pre class=\"prettyprint\">//This API works the same as AESContentKey constructor in PlayReady Server SDK \npublic static string GetPlayReadyContentKeyFromKeyIdKeySeed(string keyIdString, string keySeedB64)\n{\n    Guid keyId = new Guid(keyIdString);\n    byte[] keySeed = Convert.FromBase64String(keySeedB64);\n\n    byte[] contentKey = CommonEncryption.GeneratePlayReadyContentKey(keySeed, keyId);\n\n    string contentKeyB64 = Convert.ToBase64String(contentKey);\n\n    return contentKeyB64;\n}</pre>\n</blockquote>\n&nbsp;\n<h2>Azure Media Services 대한 코드</h2>\nAzure Media Services 쪽에서 보호되지 않는 부드러운 스트리밍 자산이 있다고 가정합니다. 단계는 다음과 같습니다.\n<ol>\n <li>이 자산에 있을 수 있는 로케이터를 제거합니다. 로케이터가 있는 경우 다음 단계를 진행할 수 없으므로 이는 중요합니다.</li>\n <li>있을 수 있는 자산 배달 정책을 제거합니다.</li>\n <li>라이선스 배달 서비스 구성;</li>\n <li>토큰 제한으로 동적 PlayReady 보호 구성;</li>\n <li>자산을 게시합니다.</li>\n</ol>\nPlayReady 키 배달 서비스를 설정하고 입력 자산의 동적 보호를 설정하는 코드는 <a href=\"https://github.com/Azure/azure-media-services-samples/blob/master/PlayReadyACSE2E/PlayReadyACSE2E_AMS_Code\" target=\"_blank\">GitHub Azure/azure-media-services-samples/</a>에서 찾을 수 있습니다.\n\n&nbsp;\n<h2>ACS 설정</h2>\nAzure ACS v 2.0 네임스페이스를 구성하는 단계에 대한 Media Services 주요 서비스를 사용하여 ACS를 구성하도록 Media Services 키 서비스를\" href=\"https://mingfeiy.com/acs-with-key-services\"></a> 사용하여 ACS를 구성하는 방법에 대한 Mingfei의 블로그 <a title=\"Permalink를 참조하세요.\n\n일반적으로 두 가지 인증이 있습니다.\n<ol>\n <li>최종 사용자는 ID 공급자에 의해 인증되어 플레이어(소위 신뢰 당사자)를 호스팅하는 웹 애플리케이션에 액세스할 수 있습니다. 이 프로토타입에서는 사용자 인증 없이 웹 애플리케이션을 열어 두기로 결정했습니다. 따라서 웹 애플리케이션에 대한 ID 공급자가 필요하지 않습니다.</li>\n <li>클라이언트/자치 애플리케이션은 액세스 권한을 얻고 토큰을 획득하기 위해 ACS 2.0 네임스페이스에 의해 인증됩니다. 이를 위해 ID 공급자를 사용하는 대신 ACS로 직접 인증할 <a href=\"https://msdn.microsoft.com/en-us/library/gg185945.aspx\" target=\"_blank\">서비스</a> ID를 지정합니다. 그런 다음, 이 서비스 ID는 ACS 네임스페이스에서 권한 부여 토큰을 요청하기 위해 클라이언트에서 ACS에서 인증을 받는 데 사용됩니다.</li>\n</ol>\n&nbsp;\n\n다음은 이 ACS 2.0 네임스페이스에서 발급한 토큰의 예입니다.\n<pre class=\"prettyprint\">http%3a%2f%2fschemas.xmlsoap.org%2fws%2f2005%2f05%2fidentity%2fclaims%2fnameidentifier=willzhan&amp;http%3a%2f%2fschemas.microsoft.com%2faccesscontrolservice%2f2010%2f07%2fclaims%2fidentityprovider=https%3a%2f%2fwillzhanacs.accesscontrol.windows.net%2f&amp;Audience=urn%3atest&amp;ExpiresOn=1415800463&amp;Issuer=https%3a%2f%2fwillzhanacs.accesscontrol.windows.net%2f&amp;HMACSHA256=ylYe9U18Ea1OfGJ%2fn2hzYfsm3XcM9X1HI2pBgUk54Eo%3d</pre>\n&nbsp;\n\n<strong>참고:</strong> ACS 2.0 네임스페이스에 사용되는 <strong>동일한</strong> (기본) 대칭 해시 키도 PlayReady 동적 보호를 구성하는 데 사용되는지 확인하세요. 특히 PlayReady 동적 보호를 프로그래밍 방식으로 설정할 때 아래와 같이 IContentKeyAuthorizationPolicy에 사용되는 제한 요구 사항을 만들어야 합니다.\n<blockquote>\n<pre class=\"prettyprint\">public static string CreateRestrictionRequirements()\n{\n    string primarySymmetricKey   = System.Configuration.ConfigurationManager.AppSettings[\"PrimarySymmetricKey\"];\n    string secondarySymmetricKey = System.Configuration.ConfigurationManager.AppSettings[\"SecondarySymmetricKey\"];\n    string scope                 = System.Configuration.ConfigurationManager.AppSettings[\"AcsScope\"];\n    string issuer                = System.Configuration.ConfigurationManager.AppSettings[\"AcsIssuer\"];\n\n    TokenRestrictionTemplate objTokenRestrictionTemplate = new TokenRestrictionTemplate();\n\n    objTokenRestrictionTemplate.PrimaryVerificationKey = new SymmetricVerificationKey(Convert.FromBase64String(primarySymmetricKey));\n    objTokenRestrictionTemplate.AlternateVerificationKeys.Add(new SymmetricVerificationKey(Convert.FromBase64String(secondarySymmetricKey)));\n    objTokenRestrictionTemplate.Audience               = new Uri(scope);\n    objTokenRestrictionTemplate.Issuer                 = new Uri(issuer);\n\n    return TokenRestrictionTemplateSerializer.Serialize(objTokenRestrictionTemplate);\n}</pre>\n</blockquote>\n&nbsp;\n\nprimarySymmetricKey 변수는 아래와 같이 ACS 2.0 관리 포털에서 가져온 것과 동일한 대칭 해시 키 문자열을 포함해야 합니다.\n\n&nbsp;\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/11/14/SymmetricHashKey.jpg\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"SymmetricHashKey\" alt=\"SymmetricHashKey\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/SymmetricHashKey_thumb.jpg\" width=\"632\" height=\"371\" border=\"0\" /></a>\n\nACS 네임스페이스에서 서비스 ID를 만들 때 암호 또는 대칭 키 자격 증명 유형을 선택할 수 있습니다. 두 경우 모두 지원하도록 토큰 요청 코드가 향상되었습니다.\n\n&nbsp;\n<h2>클라이언트 쪽의 코드</h2>\nACS에서 권한 부여 토큰을 요청하기 위한 클라이언트 쪽 코드와 Silverlight 내의 사용자 지정 라이선스 취득자는 <a href=\"https://github.com/Azure/azure-media-services-samples/blob/master/PlayReadyACSE2E/PlayReadyACSE2E_Client_Code\" target=\"_blank\">azure/azure-media-services-samples GitHub</a> 찾을 수 있습니다.\n\n플레이어 애플리케이션은 다음을 수행합니다.\n<ol>\n <li>먼저 PlayReady 보호에서 부드러운 스트리밍 자산의 매니페스트를 요청하고 매니페스트에서 보호 헤더를 확인합니다.</li>\n <li>PlayReady 라이선스를 요청하려면 플레이어는 마지막 섹션에서 만든 ACS 네임스페이스에서 권한 부여 토큰을 가져와야 합니다. Silverlight 특정 코드를 너무 많이 작성하지 않도록 하려면 이 코드를 (WCF 또는 REST) 서비스에 배치하고 Silverlight 앱이 서비스를 호출하여 ACS 토큰을 가져오도록 할 수 있습니다. ACS 토큰을 가져온 후 라이선스 취득자가 즉시 사용할 속성(Constants.AcsToken)에 저장할 수 있습니다.</li>\n <li>그런 다음, 사용자 지정 라이선스 취득자가 이전 섹션에 구성된 AMS 라이선스 배달 서비스에서 PlayReady 라이선스를 획득하는 데 ACS 토큰을 사용합니다.</li>\n</ol>\n&nbsp;\n<h2>배포</h2>\n위의 시스템 다이어그램과 <a href=\"https://blogs.msdn.com/b/playready4/archive/2014/08/18/solution-design-considerations-in-using-playready-license-delivery-service-of-azure-media-services.aspx\" target=\"_blank\">작성자의 블로그</a>에 설명된 대로 이 엔드 투 엔드 프로토타입에는 다음과 같은 물리적 구성 요소가 포함되어 있습니다.\n<ol>\n <li>콘텐츠 키 및 콘텐츠 키 ID;</li>\n <li>Azure Media Services 비디오 자산(보호되지 않음) 및 Azure Media Services 스트리밍 원본</li>\n <li>Azure Media Services 자산에 대해 구성된 PlayReady 동적 보호</li>\n <li>Azure Media Services; 에서 구성된 PlayReady 라이선스 배달 서비스</li>\n <li>Azure ACS 2.0 네임스페이스에 구성된 STS;</li>\n <li>ASP.NET 애플리케이션의 Silverlight 비디오 플레이어입니다.</li>\n</ol>\n솔루션은 Azure Media Services 기반으로 구축되었으므로 비디오 플레이어를 호스팅하는 ASP.NET 웹 애플리케이션만 배포해야 합니다. 배포할 수 있는 옵션이 있습니다.\n<ul>\n <li>Azure 웹 사이트,</li>\n <li>Azure IaaS VM 또는</li>\n <li>온-프레미스 서버</li>\n</ul>\nHTTP 프로세스 활성화가 서버에 설치되어 있는지 확인하세요. 그렇지 않으면 WCF 서비스가 제대로 작동하지 않습니다. 또한 PlayReady 동적 보호를 사용하도록 스트리밍 원본에 대해 1개 이상의 RU를 구성해야 합니다.\n\n&nbsp;\n<h1>라이브 스트리밍의 경우는 어떨까요?</h1>\n좋은 소식은 프로그램과 연결된 자산을 \"VOD 자산\"으로 처리하여 Azure Media Services 라이브 스트리밍을 보호하기 위해 정확히 동일한 디자인과 구현을 사용할 수 있다는 것입니다.\n\n특히 잘 알려진 것처럼 Azure Media Services에서 라이브 스트리밍할 경우 채널을 만든 후 해당 채널 아래 프로그램을 만들어야 합니다. 프로그램을 만들려면 프로그램에 대한 라이브 아카이브를 포함할 자산을 만들어야 합니다. 프로그램을 시작하기 전에 \"VOD 자산\"인 것처럼 자산에 동일한 설정/처리를 적용하기만 하면 됩니다. 다음 코드는 정확한 흐름을 보여줍니다.\n\n<a href=\"https://github.com/Azure/azure-media-services-samples/blob/master/PlayReadyACSE2E/PlayReadyACSE2E_AMS_Code\" target=\"_blank\">Azure Media Services 코드</a>에 표시된 것처럼 다음 메서드를 사용하여 VOD 자산에 대한 동적 PlayReady 보호를 설정합니다.\n<pre class=\"prettyprint\">public static void SetupDynamicPlayReadyProtection(CloudMediaContext objCloudMediaContext, IAsset objIAsset)</pre>\n라이브 스트리밍에 대한 동적 PlayReady 보호를 설정하기 위해 평소처럼 채널, 프로그램 및 해당 자산을 만들 수 있지만 프로그램을 시작하기 전에 아래와 같이 자산에 대해 위의 메서드를 실행합니다.\n<pre class=\"prettyprint\">public static void SetupLiveDynamicPlayReadyProtection(CloudMediaContext objCloudMediaContext, string channelName, string programName, string manifestFileName)\n        {\n            //get channel\n            IChannel objIChannel = objCloudMediaContext.Channels.Where(c =&gt; c.Name == channelName).FirstOrDefault();\n            Console.WriteLine(string.Format(\"IChannel.IngestUrl = {0}\",  objIChannel.Input.Endpoints.FirstOrDefault().Url.ToString()));\n            Console.WriteLine(string.Format(\"IChannel.PreviewUrl = {0}\", objIChannel.Preview.Endpoints.FirstOrDefault().Url.ToString()));\n\n            //create program asset\n            IAsset objIAsset = objCloudMediaContext.Assets.Create(string.Format(\"{0}_Program_Asset_PR\", channelName), AssetCreationOptions.None);\n\n            //set up dynamic PlayReady protection for the asset exactly as VOD\n            SetupDynamicPlayReadyProtection(objCloudMediaContext, objIAsset);\n\n            //create a program using this asset \n            ProgramCreationOptions options = new ProgramCreationOptions()\n            {\n                Name                = programName,\n                Description         = \"Dynamic PlayReady protection for live\",\n                ArchiveWindowLength = TimeSpan.FromMinutes(120.0),\n                ManifestName        = manifestFileName, //manifest file name to be duplicated (without .ism suffix)\n                AssetId             = objIAsset.Id\n            };\n            IProgram objIProgram = objIChannel.Programs.Create(options);\n\n            //publish the asset\n            Program.GetStreamingOriginLocator(objIAsset.Id, Program.MediaContentType.SmoothStreaming, true);\n\n            //start the program\n            objIProgram.Start();\n            Console.WriteLine(\"Program {0} has started\", programName);\n        }</pre>\n&nbsp;\n\n물론 단일 콘텐츠 키가 리프 및 루트 라이선스에 대한 이른바 키 회전 없이 보호에 사용되므로 이른바 \"확장 가능한 라이브 TV\" PlayReady 보호는 아닙니다.\n<h1>마무리</h1>\nDRM 솔루션의 모든 주요 구성 요소를 포함하는 Azure Media Services PlayReady 솔루션의 엔드 투 엔드 프로토타입을 제공했습니다.\n<ol>\n <li>콘텐츠 키 ID 및 콘텐츠 키 생성;</li>\n <li>Azure Media Services 스트리밍 원본;</li>\n <li>Azure Media Services PlayReady 동적 보호 기능을 통한 PlayReady 보호;</li>\n <li>Azure Media Services PlayReady 라이선스 배달 서비스를 통한 PlayReady 라이선스 배달;</li>\n <li>Azure ACS 2.0을 통한 STS(보안 토큰 서비스)는 플레이어 클라이언트를 인증하고 권한 부여 토큰을 발급합니다.</li>\n <li>ACS 인증, ACS 권한 부여, PlayReady 라이선스 획득 및 비디오 재생을 처리하는 Azure IaaS VM에서 호스팅되는 비디오 플레이어 애플리케이션입니다.</li>\n</ol>\n&nbsp;\n\n<strong>업데이트:</strong>\n\n2015년 1월 6일: 보다 일반적인 시나리오에서 PlayReady 보호를 테스트하기 위해 부드러운 스트리밍 및 MPEG-DASH 플레이어가 향상되었습니다.\n<ol>\n <li>이제 이 블로그에 설명된 엔드투엔드 구현에 사용되는 ACS 네임스페이스 대신 모든 Azure ACS 네임스페이스에서 작동합니다.</li>\n <li>토큰 제한 여부에 관계없이 열려 있거나 동적 PlayReady 보호에서 부드러운 스트리밍 또는 MPEG-DASH 자산에서 작동합니다.</li>\n <li>Azure Media Services 또는 온-프레미스 PlayReady 라이선스 서버의 주요 배달 서비스인 PlayReady 라이선스 서버에서 작동합니다.</li>\n</ol>\n&nbsp;\n\n2015년 1월 23일: AMS Content Protection에서 JWT 지원이 릴리스됨에 따라 이 프로토타입은 STS 및 IdP로 Azure Active Directory(AAD)를 사용하여 JWT에 토큰 제한을 포함하도록 확장되었습니다. AMS 일괄 처리 작업(동적 PlayReady 보호 또는 AES 암호화 설정): AAD 테넌트를 알고 있지만 플레이어 앱에 대해서는 아무것도 알지 못합니다(모든 플레이어는 괜찮습니다). AAD 테넌트: 플레이어 앱을 알고 있지만 AMS 일괄 처리 작업에 대해서는 아무것도 알지 않습니다. 플레이어 앱: 테넌트 AAD 알고 있지만 AMS 또는 AMS 일괄 처리 작업에 대해서는 아무것도 알지 않습니다. 순서대로 AAD 테넌트와 플레이어 앱은 서로를 알고 있습니다. AMS 일괄 처리 작업은 테넌트 AAD 알고 있지만 어떤 플레이어가 콘텐츠를 사용하는지는 신경 쓰지 않습니다.\n\n&nbsp;\n\n<b><span style=\"font-size: large\">승인:</span> </b> 이러한 노력에 큰 도움을 준 Microsoft Azure Media Services 팀의 퀸틴 번스, 조지 트리포노프, 밍페이 얀에게 특별한 감사를 드립니다."
