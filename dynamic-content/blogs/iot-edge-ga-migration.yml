### YamlMime:Yaml
ms.openlocfilehash: 4c57f02dc166e71bcce4c06d1a85c47b43fb3ad2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911808"
Slug: iot-edge-ga-migration
Title: IoT Edge 솔루션을 GA로 마이그레이션
Summary: 현재 IoT Edge 솔루션을 GA 비트로 마이그레이션하세요!
Content: >-
  <p>2018년 6월 27일 수요일에 Azure IoT Edge의 일반 공급이 <a href="https://azure.microsoft.com/en-us/blog/azure-iot-edge-generally-available-for-enterprise-grade-scaled-deployments">발표되었습니다</a>. 이 릴리스는 이미 공개 미리 보기 비트를 사용하는 사용자에게 수많은 새로운 기능을 추가합니다. Azure IoT Edge를 사용한 적이 없는 고객은 <a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart-linux">Linux</a> 또는 <a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart">Windows</a> 빠른 시작을 시작할 수 있습니다. 미리 보기 비트에서 프로젝트를 시작한 사용자는 최신 비트로 업그레이드하고 호환성이 손상되는 변경 내용을 통합해야 합니다.&nbsp; 이러한 두 프로세스에 대한 세부 정보는 다음과 같습니다.</p>


  <h2>최신 비트로 업그레이드</h2>


  <h3>미리 보기 비트 제거</h3>


  <p>iotedgectl을 사용하여 다음 명령을 실행하여 Edge 디바이스에서 미리 보기 비트를 제거합니다. 미리 보기 비트를 실행하지 않은 디바이스 또는 VM에 GA 비트를 설치하는 경우 이 단계를 건너뛸 수 있습니다.</p>


  <pre>

  iotedgectl uninstall</pre>


  <h3>미리 보기 런타임 컨테이너 이미지 삭제</h3>


  <p>Docker rmi&rdquo;를 사용하여 &ldquo;Edge 디바이스에서 Edge 에이전트 및 Edge Hub의 미리 보기 버전에 대한 컨테이너 이미지를 제거합니다. 미리 보기 비트를 실행하지 않은 디바이스 또는 VM에 GA 비트를 설치하는 경우 이 단계를 건너뛸 수 있습니다.</p>


  <h3>배포에서 컨테이너 이미지 미리 보기에 대한 참조 제거</h3>


  <p>IoT Edge 보안 디먼에는 사용자가 Edge 디바이스에서 사용되는 Edge 에이전트 및 Edge Hub 버전을 지정할 수 있는 기능이 포함되어 있습니다. 이렇게 하면 디바이스의 비트가 업데이트되는 시기를 제어할 수 있습니다. 이러한 런타임 구성 요소의 버전은 배포에 지정됩니다. 미리 보기 중에 만든 배포에는 미리 보기 컨테이너 이미지에 대한 참조가 포함됩니다. 보안 디먼이 머신을 미리 보기 비트로 다운그레이드하지 않도록 GA 컨테이너 이미지를 참조하도록 변경해야 합니다. 배포 코드 조각의 예는 다음과 같습니다.</p>


  <pre>

  &quot;systemModules&quot;: {
       &quot;edgeAgent&quot;: {
           &quot;type&quot;: &quot;docker&quot;,
           &quot;settings&quot;: {
               &quot;image&quot;: &quot;<s>microsoft/azureiotedge-agent:1.0-preview</s>mcr.microsoft.com/azureiotedge-agent:1.0&quot;,
               &quot;createOptions&quot;: &quot;{}&quot;
           }
       },
       &quot;edgeHub&quot;: {
           &quot;type&quot;: &quot;docker&quot;,
           &quot;settings&quot;: {
               &quot;image&quot;: &quot;<s>microsoft/azureiotedge-hub:1.0-preview</s>mcr.microsoft.com/azureiotedge-hub:1.0&quot;,
               &quot;createOptions&quot;: &quot;{}&quot;
           },
           &quot;status&quot;: &quot;running&quot;,
           &quot;restartPolicy&quot;: &quot;always&quot;
       }
  },</pre>


  <h2>GA 비트 설치</h2>


  <p><a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart">Linux</a> 및 <a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart">Windows</a> 대한 빠른 시작에서는 이러한 새로운 인프라 구성 요소를 사용하여 IoT Edge 디바이스를 설정하는 단계를 안내합니다. 빠른 시작은 IoT Edge 보안 디먼이라는 GA에 도입된 구성 요소를 설치하여 시작합니다. 에지 보안을 설정하는 데 도움이 되는 구성 요소 집합인 Edge Security Manager <a href="https://docs.microsoft.com/en-us/azure/iot-edge/quickstart">의</a> 일부입니다.</p>


  <p>IoT Edge 보안 디먼은 Edge 디바이스가 부팅되고 IoT Edge 에이전트를 시작할 때마다 시작됩니다. 즉, IoT Edge 디바이스를 사용할 때 iotedgectl이 더 이상 필요하지 않습니다.</p>


  <p>Hsmlib는 IoT Edge Security Manager의 일부인 또 다른 새로운 구성 요소입니다. 다양한 버전의 hsmlib가 디바이스별 하드웨어와 통합되고 IoT Edge 보안 디먼이 암호화 기능을 수행할 수 있습니다. 고급 유형의 하드웨어를 사용하면 IoT Edge가 혁신적인 보안 및 기능을 제공할 수 있습니다. 예를 들어 하드웨어 보안 모듈이 있는 디바이스(예: TPM)은 Device Provisioning Service를 통해 프로비전할 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0c0a09fb-4836-4638-88e0-821a1293f5b4.png"><img alt="SecurityManager" border="0" height="467" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9e4d754b-80e3-4c75-800b-3991b0d8dcf0.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="SecurityManagerA" width="892"></a> 기본 버전의 hsmlib는 IoT Edge 보안 디먼과 함께 설치됩니다. 이 버전의 hsmlib는 /tpm0에서 TPM을 사용하는 보안 enclave 약속뿐만 아니라 비밀을 저장하기 위해 Edge 디바이스&rsquo; 파일 시스템을 사용하는 표준 보안 약속을 지원합니다.</p>


  <h2>호환성이 손상되는 변경 내용 통합</h2>


  <p>대부분의 기능 추가는 이전 버전과 호환되는 방식으로 수행되어 프로젝트를 GA 비트로 쉽게 마이그레이션할 수 있습니다. Weve&rsquo;는 제품을 공개 미리 보기로 사용하여 엄청난 금액을 배웠으며 사용자 피드백에 따라 몇 가지 작은 호환성이 손상되는 변경을 수행하고 있습니다. 이러한 변경 내용은 제품에 유용성 향상을 제공하는 동시에 가능한 한 작습니다.</p>


  <h2>클라이언트 SDK 분할</h2>


  <h3>변경</h3>


  <p>IoT Edge 모듈을 작성하는 데 사용되는 DeviceClient 개체는 DeviceClient와 ModuleClient라는 두 개체로 분할됩니다.</p>


  <h3>영향</h3>


  <p>작은 코드 변경. 모듈 코드의 모든 DeviceClient 개체에 대한 클래스 이름을 ModuleClient로 변경해야 합니다. &#39;ModuleClients를 만들기 위한 팩터리 클래스도 도입했습니다. 이 도우미 클래스는 IoT Edge 보안 디먼과 올바르게 통합하는 세부 정보를 숨깁니다.</p>


  <h4>이전</h4>


  <pre>

  DeviceClient deviceClient = DeviceClient.CreateFromConnectionString(connStr, transportSettings);</pre>


  <h4>After</h4>


  <pre>

  ModuleClient moduleClient =

  ModuleClient.CreateFromEnvironment(transportSettings);</pre>


  <p>또한 ModuleClient의 API 표면은 현재 모듈에 지원되는 기능으로만 축소됩니다. 이러한 API가 작동하지 않으므로 기존 모듈 코드에는 영향을 주지 않습니다.</p>


  <h4>변경 이유</h4>


  <p>디바이스 및 모듈에서 사용할 수 있는 기능은 약간 다릅니다. 예를 들면 다음과 같습니다.</p>


  <ul>
   <li>모듈은 입력/출력에서 읽고 쓸 수 있지만 디바이스는 IoT Hub에만 쓸 수 있습니다.</li>
   <li>디바이스는 C2D 메시지를 받을 수 있지만 모듈은 수신할 수 없습니다.</li>
   <li>모듈은 수행할 수 없는 동안 디바이스에서 FileUpload를 수행할 수 있습니다.</li>
   <li>클라이언트를 명확하게 구분하면 디바이스 및 모듈에서 사용할 수 있는 기능이 표시됩니다.</li>
  </ul>


  <h2>직접 메서드 호출</h2>


  <h3>변경</h3>


  <p>ServiceClient 클래스는 모듈 ID가 직접 메서드를 호출하는 것을 더 이상 허용하지 않습니다. 이 기능은 위에서 자세히 설명한 클라이언트 SDK 분할의 일부로 ModuleClient 클래스로 이동되었습니다.</p>


  <h3>영향</h3>


  <p>ModuleClient 클래스를 사용하여 ServiceClient 대신 모듈 ID에 대한 메서드를 호출해야 합니다.</p>


  <h4>이전</h4>


  <pre>

  // assumes the use of a module connection

  ServiceClient serviceClient = ServiceClient.CreateFromConnectionString(connStr, transportSettings);

  string.serviceClient.InvokeDeviceMethodAsync(&quot;DeviceId&quot;, &quot;ModuleId&quot;, new CloudToDeviceMethod(&quot;MethodName&quot;));</pre>


  <h4>After</h4>


  <pre>

  ModuleClient moduleClient = ModuleClient.CreateFromEnvironment(transportSettings);

  moduleClient.InvokeMethodAsync(&quot;DeviceId&quot;, &quot;ModuleId&quot;, new DirectMethodRequest(&quot;MethodName&quot;)) ;</pre>


  <h4>변경 이유</h4>


  <p>메서드 호출은 사용자가 두 번째 개체를 인스턴스화하는 대신 ModuleClient로 수행할 수 있을 것으로 예상되는 작업입니다. ModuleClient에 메서드 호출을 추가하면 개발자가 더 이상 해당 코드에 ServiceClient를 포함할 필요가 없기 때문에 모듈 코드의 크기가 줄어듭니다.</p>


  <h2>Edge Hub가 수신 대기하는 포트 구성</h2>


  <h3>변경</h3>


  <p>Edge Hub는 포트 8883 및 443의 다운스트림 디바이스에서 연결을 수신 대기하는 데 사용됩니다. 이제 개발자가 이러한 연결에 사용하는 호스트 포트를 지정해야 합니다.</p>


  <h3>영향</h3>


  <p>배포&#39;JSON을 수동으로 만들 때 Edge Hub에서 포트 전달 정보를 설정해야 합니다. 아래 JSON은 Edge Hub가 이전과 같이 작동하도록 구성합니다(포트 8883 및 443에서 수신 대기).</p>


  <pre>

  &quot;{\&quot;HostConfig\&quot;:{\&quot;PortBindings\&quot;:{\&quot;8883/tcp\&quot;:[{\&quot;HostPort\&quot;:\&quot;8883\&quot;}],\&quot;443/tcp\&quot;:[{\&quot;HostPort\&quot;:\&quot;443\&quot;}]}}}&quot;</pre>


  <p>Azure Portal 또는 VS Code 확장을 통해 배포를 만들&#39;경우 변경할 필요가 없습니다. 이러한 도구는 Edge Hub가 8883 및 443에서 연결을 수신 대기하도록 포트 전달 옵션을 자동으로 설정합니다.</p>


  <h3>변경 이유</h3>


  <p>일부 고객은 해당 포트를 다른 용도로 사용할 수 있으므로 Edge 디바이스가 443 또는 8883 이외의 포트에서 다운스팀 디바이스 연결을 수신 대기하도록 할 수 있습니다. 예를 들어 고객은 443에서 HTTPS 서버를 실행할 수 있습니다.</p>
