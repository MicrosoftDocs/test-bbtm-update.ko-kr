### YamlMime:Yaml
ms.openlocfilehash: f60b5b961a354c40833841b98f91dc65be93d3d3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902713"
Slug: azure-mobile-apps-september-2015-update
Title: Azure Mobile Apps 2015년 9월 업데이트
Summary: Azure Mobile Apps용 .NET Server SDK의 최신 개선 사항에 대해 알아봅니다. Azure Table Storage 대한 지원을 추가하고 ASP.NET 프로젝트 형식과의 통합을 개선했습니다.
Content: >-
  <p><em>이 게시물은 매튜 헨더슨에 의해 공동 저술되었다</em><a href="https://azure.microsoft.com/en-us/blog/author/matthew-henderson/"><em></em></a>.<br />

  &nbsp;</p>


  <p>&rsquo;Azure Mobile Apps용 .NET Server SDK에 대한 최신 업데이트를 발표하게 되어 기쁩니다. 아직 보지 못한&rsquo; 경우 통합 웹 및 모바일 환경을 간략하게 설명한 <a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-august-2015-update/">지난 달&rsquo; 블로그 게시물을</a> 확인하는 것이 좋습니다.</p>


  <p>이번 달에는 .NET Server SDK 버전 0.2.575의 몇 가지 새로운 업데이트가 있습니다.&nbsp;</p>


  <ul>
   <li>(신규!) Azure Table Storage 지원</li>
   <li>(호환성이 손상되는 변경) ASP.NET 더 나은 통합을 위해 자동 OWIN 설정 제거</li>
   <li>(호환성이 손상되는 변경) 인증 미들웨어 설정 개선 사항</li>
   <li>(호환성이 손상되는 변경) 데이터베이스 스키마 설정에 대한 더 나은 기본값</li>
   <li>(호환성이 손상되는 변경) 클라이언트는 더 이상 시스템 속성을 요청할 필요가 없으며 기본적으로 전송됩니다.</li>
  </ul>


  <p>시작하는 가장 쉬운 방법은 다른 종속성을 제공하는 <a href="https://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Quickstart" target="_blank">Microsoft.Azure.Mobile.Server.Quickstart</a> NuGet 패키지를 설치하는 것입니다. 필요한 특정 Microsoft.Azure.Mobile.Server.* 패키지를 가져올 수도 있습니다.</p>


  <h2>Azure Storage</h2>


  <p>이제 새 Microsoft.Azure.Mobile.Server.Storage 패키지를 통해 Azure Table Storage TableControllers에 대한 지원 데이터 공급자로 사용할 수 있습니다.</p>


  <p>Storage 연결하려면 TableController의 <strong>Initialize()</strong> 메서드에 다음을 추가합니다.</p>


  <pre class="prettyprint">

  DomainManager = new StorageDomainManager<todoitem>(connectionStringName, tableName, Request);

  </todoitem></pre>


  <p>여기서 <strong>connectionStringName</strong>은 Storage 연결 문자열의 앱 설정 키이며 <strong>tableName</strong>은 액세스하려는 테이블의 이름입니다. 컨트롤러의 이름인 <strong>controllerContext.ControllerDescriptor.ControllerName.ToLowerInvariant()</strong>에 불과합니다.</p>


  <p><strong>StorageDomainManager</strong>는 <strong>EntityDomainManager</strong>와 약간 다르게 작동하며 TableController 도우미 메서드의 다른 하위 집합을 구현합니다. 즉, TableController &ldquo;get&rdquo; 메서드는 다음과 유사하게 표시됩니다.</p>


  <pre class="prettyprint">

  public Task&lt;IEnumerable&lt;TodoItem&gt;&gt; GetAllTodoItems(ODataQueryOptions queryOptions)

  {
      return QueryAsync(queryOptions);
  }


  public Task&lt;SingleResult&lt;TodoItem&gt;&gt; GetTodoItem(string id)

  {
      return LookupAsync(id);
  }</pre>


  <p>Mobile Apps 클라이언트 SDK는 모두 이 Table Storage 도메인 관리자에서 작동합니다. 그러나 현재 iOS 클라이언트는 StorageDomainManager를 사용하는 테이블 컨트롤러&nbsp;에 대한 오프라인 동기화를 지원하지 않습니다.</p>


  <h2>OWIN 시작</h2>


  <p>.NET 서버 SDK에는 OWIN 미들웨어를 몇 가지 사용합니다. Microsoft.Azure.Mobile.Quickstart 패키지에는 이전에 일부 구성 요소를 함께 연결하는 OWIN 시작 클래스가 포함되어 있습니다.</p>


  <p>이는 편리했지만 동작을 사용자 지정하기가 어려웠으며 기존 앱에 쉽게 통합할 수 없었습니다&rsquo;. 빠른 시작 패키지에는 더 이상 이 시작 클래스가 포함되지 않습니다. <strong>이는 주요 변경 내용입니다.</strong></p>


  <p>이전 버전의 빠른 시작 패키지에서 업그레이드하려면 새 시작 클래스를 추가하고 구성을 이동해야 합니다.</p>


  <ol>
   <li>Visual Studio 프로젝트를 마우스 오른쪽 단추로 클릭하고 <strong>추가 -&gt; 새 항목을</strong> 선택합니다. <strong>웹 -&gt; 일반 -&gt; OWIN 시작 클래스를</strong> 선택합니다.&nbsp;</li>
   <li><strong>MobileAppConfiguration</strong>에 대한 코드를 <strong>WebApiConfig.Register()</strong>에서 새 시작 클래스의 <strong>Configuration()</strong> 메서드로 이동합니다. <strong>Global.asax</strong>에서 전달한 전역 <strong>HttpConfiguration이 아닌 새 HttpConfiguration</strong>을 만드는 경우 앱을 호출<strong>합니다. 메서드의 끝에 있는 UseWebApi(config)</strong>입니다.</li>
  </ol>


  <p>또는 Azure Portal의 서버 빠른 시작 프로젝트를 프로젝트의 시작점으로 사용합니다.</p>


  <h2>OWIN 미들웨어</h2>


  <p>Weve&rsquo;는 이 업데이트에서 인증 환경을 개선했습니다. 이제 모든 인증 구성 요소가 자체 OWIN 미들웨어에 있습니다! 이렇게 하면 개발자에게 더 많은 제어를 제공할 뿐만 아니라 이제 Mobile App 인증 구성 요소를 SignalR 경로를 비롯한 모든 ASP.NET 앱 유형과 통합할 수 있습니다.</p>


  <p><strong>이는 호환성이 손상되는 변경입니다</strong>. <strong>MobileAppConfiguration.AddAppServiceAuthentication()</strong> 메서드가 제거되었으며 더 이상 필요하지 않습니다.</p>


  <p>인증을 사용하려면 OWIN 시작 클래스에서 다음 호출만 있으면 됩니다.</p>


  <pre class="prettyprint">

  app.UseMobileAppAuthentication(config);</pre>


  <p>여기서 <strong>구성</strong> 은 전역 HttpConfiguration 또는 Web API OWIN 자체 호스트에 사용 중인 구성입니다. 인증 설정에 대한 자세한 내용은 설명서 항목을&nbsp; 참조<a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-dotnet-backend-how-to-use-server-sdk/#how-to-add-authentication-to-a-server-project" target="_blank">하세요. 방법: 서버 프로젝트에 인증 추가</a>.</p>


  <h2>데이터베이스 스키마</h2>


  <p>이전에는 .NET Server SDK가 Entity Framework 설정에서 모바일 앱 이름을 기본 스키마 이름으로 사용했습니다. 고객이 dbo 또는 사용자 지정 스키마 이름을 자주 사용하려고 했기 때문에 이것이 매우 유용한 기본값이 아니라고&rsquo; 들었습니다.</p>


  <p>이제 .NET Server SDK 빠른 시작에서는 Entity Framework <strong>dbo</strong>와 동일한 기본 스키마 이름을 사용합니다. 다른 스키마 이름을 사용하려면 <strong>DbContext.OnModelCreating()</strong> 구현에서 지정합니다.</p>


  <pre class="prettyprint">

  modelBuilder.HasDefaultSchema(schema); // specify the schema string </pre>


  <p>이 변경의 일환으로 앱 설정 MS_TableSchema(있는 경우) <em>또는 </em><em>MS_MobileServiceName</em>(그렇지 않은 경우)를 사용하는 <strong>MobileAppSettingsDictionary.GetSchemaName</strong>() 메서드를 제거했습니다.</p>


  <p>(참고: <strong>ServiceSettingsDictionary</strong> 클래스는 마지막 서버 SDK 업데이트 집합에서 <strong>MobileAppSettingsDictionary </strong>로 이름이 바뀌었습니다.)</p>


  <p><strong>이것은 호환성이 손상되는 변경입니다</strong>. <strong>GetSchemaName()</strong> 메서드를 사용하는 경우 다음을 변경합니다.</p>


  <pre class="prettyprint">

  // string schema = MobileAppSettingsDictionary.GetSchemaName(); // method removed


  // ensure you have an app setting for MS_MobileServiceName

  string schema = System.Configuration.ConfigurationManager.AppSettings.Get(&quot;MS_MobileServiceName&quot;); </pre>


  <p>참고: 빠른 시작 프로젝트는 더 이상 <em>web.config MS_MobileServiceName</em> 대한 설정을 추가하지 않습니다. 스키마 이름에 대한 고유한 키를 만들고 web.config 또는 Azure Portal의 앱 설정 블레이드에서 지정하는 것이 좋습니다.</p>


  <h2>시스템 속성</h2>


  <p>이전에는 <strong>쿼리 __systemProperties</strong><strong>=*</strong>가 서버에 전송된 경우에만 __createdAt<strong>,</strong> <strong>__updatedAt</strong>, <strong>__version</strong> 및 __deleted 시스템 속성이 클라이언트로 전송되었습니다. Mobile Services 이전 버전과의 호환성을 위해 이 동작이 필요했지만 클라이언트 SDK를 테스트하고 개발하기가 어려웠습니다.</p>


  <p>이 새 릴리스에서는 <strong>쿼리 문자열 __systemProperties</strong> 무시되고 서비스는 항상 이러한 시스템 속성을 반환합니다. <strong>$select</strong> 사용하여 특정 열을 검색하는 경우 이 절에 시스템 속성을 추가하기만 하면 됩니다. 지정된 $select&#39;없는 경우 시스템 속성을 포함한 모든 속성이 반환됩니다.</p>


  <p><strong>이것은 호환성이 손상되는 변경입니다.</strong>&nbsp; 클라이언트 SDK는 대부분의 경우 동일하게 동작하지만 다음 두 가지 경우에 유의해야 합니다.</p>


  <ul>
   <li>iOS 및 JavaScript 클라이언트에서 온라인 테이블 API를 사용하는 경우 업데이트 및 삭제 작업은 <strong>기본적으로 __version</strong> 필드를 서버로 다시 보냅니다. 동시 업데이트(낙관적 동시성)에 대한 충돌 처리 지원을 원하지 않는 경우 업데이트를 수행하기 전에 클라이언트 개체에서 이 필드를 제거해야 합니다. 오프라인 동기화 API는 영향을 받지 않습니다.</li>
   <li>모든 클라이언트에서 쿼리에 <strong>$select</strong> 및 <strong>__systemProperties</strong> 모두 포함된 경우 <strong>$select</strong> 절의 시스템 속성만 반환됩니다. $select <strong>절에</strong> 원하는 시스템 속성을 포함하도록 쿼리를 변경해야 합니다.</li>
  </ul>


  <p>Mobile Apps는 아직 미리 보기 상태이지만&#39;사용해 볼 수 있기를 바랍니다! 의견, <a href="https://social.msdn.microsoft.com/forums/azure/en-US/home?forum=azuremobile">MSDN 포럼</a>&nbsp;<a href="https://twitter.com/AzureMobile">@AzureMobile</a>에서 어떻게 생각하는지 알려주세요. 제품에 표시하려는 항목&rsquo;에 대한 제안이 있는 경우 피드백 사이트에 알려주세요.</p>


  <p>&#39;변경 내용을 SDK에 계속&nbsp; 게시하고 <a href="https://go.microsoft.com/fwlink/?LinkId=625009">.NET 서버 SDK 변경 로그</a>에도 포함할 것입니다.</p>


  <ul>

  </ul>
