### YamlMime:Yaml
ms.openlocfilehash: 5a6fcf0c4489e2aa490647307fe8f6e9edd1c071
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911199"
Slug: azure-log-analytics-meet-our-new-query-language-2
Title: Azure Log Analytics – 새 쿼리 언어 충족
Summary: 이 게시물은 새 Azure Log Analytics 쿼리 언어에서 지원하는 멋진 새로운 기능 중 일부를 검토합니다. 쿼리 언어에 대한 자세한 내용은 언어 사이트 및 Log Analytics 커뮤니티 공간에서 자습서를 확인하세요.
Content: >-
  <p>Azure Log Analytics는 최근 새 쿼리 언어로 작동하도록 향상되었습니다. 쿼리 언어 자체는 실제로 전혀 새로운 것이 아니며&rsquo; 애플리케이션 Insights 오랫동안 광범위하게 사용되었습니다. 최근에 작동하는 언어와 플랫폼이 Log Analytics에 통합되어 다양한 새로운 기능과 고급 분석을 위해 설계된 새로운 포털을 도입할 수 있습니다.</p>


  <p>이 게시물은 이제 지원되는 멋진 새로운 기능 중 일부를 검토합니다. 하지만&rsquo; 빙산의 일각에 불과하며, <a href="https://docs.loganalytics.io/" target="_blank">언어 사이트</a> 와 <a href="https://aka.ms/AzureLogAnalyticsCommunity" target="_blank">Log Analytics 커뮤니티 공간에서</a> 자습서를 검토하도록 다시 초대할&#39;있습니다. 게시물 전체에 표시된 예제는 Log Analytics <a href="https://portal.loganalytics.io/demo" target="_blank">플레이그라운드에서</a> &ndash; 언제든지 사용할 수 있는 무료 데모 환경을 실행할 수 있으며 등록이 필요하지 않습니다.</p>


  <h4>파이프 어웨이</h4>


  <p>쿼리는 하나 이상의 테이블에 저장된 데이터를 수집합니다. 다음 기본 쿼리를 확인하세요.</p>


  <p><code>Event</code></p>


  <p>이 쿼리는 얻을 수 있는 만큼 간단하지만 <i>이벤트</i> 테이블의 모든 항목을 반환하는 유효한 쿼리일&#39;있습니다. 테이블의 모든 레코드를 잡는 것은 일반적으로 너무 많은 결과를 의미합니다. 데이터를 분석할 때 일반적인 첫 번째 단계는 테이블에서 여러 레코드만 검토하고 관련 데이터를 확대하는 방법을 계획하는 것입니다. 이 작업은 다음을 사용하여 쉽게 수행할 &ldquo;수 있습니다&rdquo;.</p>


  <p><code>Event<br>

  | take 10</code></p>


  <p>이는 파이프로 구분된 여러 요소를 쿼리 &ndash; 하는 일반적인 구조입니다. 첫 번째 요소의 출력(즉, 전체 <i>이벤트</i> 테이블)은 다음 테이블의 입력입니다. 이 경우 최종 쿼리 출력은 <i>이벤트</i> 테이블에서 10개의 레코드가 됩니다. 검토한 후 쿼리를 보다 구체적으로 만드는 방법을 결정할 수 있습니다. 종종 다음과 같은 특정 조건을 기준으로 필터링할 <i>위치를</i> 사용합니다.</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;</code></p>


  <p>이 쿼리는 EventLevelName이 오류&rdquo;(대/소문자 구분)와 같은 테이블의 모든 레코드를 반환합니다&ldquo;.</p>


  <p>쿼리가 여전히 많은 레코드를 반환하는 것처럼 보입니다. 모든 데이터를 이해하기 위해 <i>요약</i>을 사용할 수 있습니다. 요약은 공통 값으로 레코드 그룹을 식별하고 각 그룹에 집계를 적용할 수도 있습니다.</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | summarize count() by Computer </code></p>


  <p>다음은 오류로 표시된 <i>이벤트</i> 레코드 수를 컴퓨터별로 그룹화하여 반환하는 예제입니다.</p>


  <p>우리의 놀이터<a href="https://portal.loganalytics.io/Demo?q=H4sIAAAAAAAAA3MtS80rUeCqUSjPSC1KVXAFcX1Sy1Jz%2FBJzUxVsbRWUXIuK8ouUQEqKS3NzE4syq1IVkvNL80o0NBWSKhWc83MLSktSi7gALzj5wEoAAAA%3D&amp;timespan=PT24H" target="_blank">에서 그것을 밖으로 시도</a>!</p>


  <h4>검색</h4>


  <p>경우에 따라 쿼리를 특정 테이블로 제한하는 대신 모든 데이터를 검색해야 합니다. 이 유형의 쿼리에서는 <i>검색</i>&rdquo; 키워드를 &ldquo; 사용합니다.</p>


  <p><code>search &quot;212.92.108.214&quot;<br>

  | where TimeGenerated &gt; ago(1h)</code></p>


  <p>위의 예제에서는 특정 IP 주소를 포함하는 지난 1시간 동안의 모든 레코드를 검색합니다.</p>


  <p>모든 데이터를 검사하는 데 실행하는 데 시간이 좀 더 걸릴 수 있습니다. 테이블 집합에서 용어를 검색하려면 다음과 같이 검색 범위를 지정합니다.</p>


  <p><code>search in (ConfigurationData, ApplicationInsights) &quot;logon&quot; or &quot;login&quot;</code></p>


  <p>이 예제에서는 <i>ConfigurationData</i> 및 <i>ApplicationInsights</i> 테이블에서 로그온&rdquo; 또는 &ldquo;로그인&rdquo;이라는 용어가 포함된 레코드만 검색합니다&ldquo;.</p>


  <p>검색 용어는 기본적으로 대/소문자를 구분하지 않습니다. 검색 쿼리에는 많은 변형이 있습니다. <a href="https://docs.loganalytics.io/docs/Language-Reference/Tabular-operators/search-operator">테이블 형식 연산자</a>에서 자세히 읽을 수 있습니다.</p>


  <h4>쿼리 시간 사용자 지정 필드</h4>


  <p>사용자 지정 필드를 즉석에서 계산하고 분석에 사용하려는 경우가 많습니다. 이 작업을 수행하는 한 가지 방법은 <i>ErrorsCount</i>와 같이 자동으로 생성된 열에 고유한 이름을 할당하는 것입니다.</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | summarize ErrorsCount=count() by Computer<br>

  | sort by ErrorsCount</code></p>


  <p>그러나 필드를 추가해도 <i>요약</i>을 사용할 필요는 없습니다. 이 작업을 수행하는 가장 쉬운 방법은 <i>확장</i>입니다.</p>


  <p><code>Event<br>

  | where TimeGenerated &gt; datetime(2017-09-16)<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | extend PST_time = TimeGenerated-8h<br>

  | where PST_time between (datetime(2017-09-17T04:00:00) .. datetime(2017-09-18T04:00:00))</code></p>


  <p>이 예제에서는 <i>TimeGenerated</i>를 기반으로 하지만 UTC에서 PST 표준 시간대로 조정되는 <i>PST_time</i> 계산합니다. 이 쿼리는 새 필드를 사용하여 2017-09-17 오전 4시에서 2017-09-18년 사이에 생성된 레코드만 PST 시간인 오전 4시에 필터링합니다.</p>


  <p>유사한 연산자는 <i>프로젝트</i>입니다. 결과 집합에 계산 필드를 추가하는 대신 <i>프로젝트는</i> 프로젝토리된 필드만 유지합니다. 이 예제에서 결과에는 4개의 열만 있습니다.</p>


  <p><code>Event<br>

  | where EventLevelName == &quot;Error&quot;<br>

  | project TimeGenerated, Computer, EventID, RenderedDescription</code></p>


  <p>우리의 놀이터<a href="https://portal.loganalytics.io/Demo?q=H4sIAAAAAAAAAyWMOwqAMBAF%2B5xiSZ0rWGkQQSzEC4h5YMR8WFdtPLwRy4GZsReiqIfuFQyyH%2FW4sA9zAFUVacucWFNRMqcNi9DkA1pE8CxwhuoU8ilg89ddY2hEdGXnGhwL%2Byw%2BRfUCF5avw2kAAAA%3D&amp;timespan=PT24H" target="_blank">에서 그것을 밖으로 시도</a>.</p>


  <p>보완 연산자는 <i>Project</i>- 결과 집합에서 제거할 열을 지정합니다.</p>


  <h4>조인</h4>


  <p>조인은 지정된 열의 값을 일치시켜 두 데이터 집합의 레코드를 병합합니다. 이렇게 하면 다양한 데이터 원본 간의 상관 관계를 기반으로 하는 보다 풍부한 분석을 수행할 수 있습니다.</p>


  <p>다음 예제에서는 <i>Update</i> 및 <i>SecurityEvent</i>라는 두 테이블 &ndash; 의 레코드를 조인합니다.</p>


  <p><code>Update<br>

  | where TimeGenerated &gt; ago(1d)<br>

  | where Classification == &quot;Security Updates&quot; and UpdateState == &quot;Needed&quot;<br>

  | summarize missing_updates=makeset(Title) by Computer<br>

  | join (<br>

  SecurityEvent<br>

  | where TimeGenerated &gt; ago(1h)<br>

  | summarize count() by Computer<br>

  ) on Computer</code></p>


  <p>일치하는 두 데이터 집합을 검토해 보겠습니다&rsquo;. 첫 번째 데이터 집합은 다음과 같습니다.</p>


  <p><code>Update<br>

  | where TimeGenerated &gt; ago(1d)<br>

  | where Classification == &quot;Security Updates&quot; and UpdateState == &quot;Needed&quot;<br>

  | summarize missing_updates=makeset(Title) by Computer</code></p>


  <p>이는 필요한 보안 <i>업데이트를</i> 설명하는 마지막 날의 업데이트 레코드를 사용합니다. 그런 다음 컴퓨터당 필요한 업데이트 집합을 요약합니다.</p>


  <p>두 번째 데이터 집합은 다음과 같습니다.</p>


  <p><code>SecurityEvent<br>

  | where TimeGenerated &gt; ago(1h)<br>

  | summarize count() by Computer</code></p>


  <p>이는 컴퓨터당 마지막 1시간 동안 생성된 <i>SecurityEvent</i> 레코드 수를 계산합니다.</p>


  <p>일치하는 일반적인 필드는 <i>컴퓨터</i>이므로 결국 각 컴퓨터에 누락된 보안 업데이트 목록이 있는 컴퓨터 목록과 지난 1시간 동안의 총 보안 이벤트 수가 표시됩니다.</p>


  <p><img alt="join" border="0" height="311" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/68d200b9-31bc-4208-9c73-c18619464d2e.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="join" width="839"></p>


  <p>대부분의 쿼리에 대한 기본 시각화는 테이블입니다. 데이터를 그래픽으로 시각화하려면 쿼리 끝에 <em>| 렌더링 막대형</em>&rdquo;을 추가 &quot; 하거나 결과 위에 표시된 <em>차트</em> 단추를 선택합니다. 결과는 다음 업데이트를 관리하는 방법을 결정하는 데 도움이 될 수 있습니다.</p>


  <p><img alt="barchart" border="0" height="352" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a50cbd02-7819-4587-8ab4-c8cc5b75952e.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="barchart" width="842"></p>


  <p>가장 필요한 업데이트는 <em>Windows Server용 2017-09 누적 업데이트</em>이며 처리할 <sup>첫 번째</sup> 컴퓨터가 <em>ContosoAzADDS1.ContosoRetail.com</em> 것을 알 수 있습니다.</p>


  <p>조인에는 내부, 외부, 세미 등 다양한 맛이 있습니다. 이러한 맛은 일치를 수행하는 방법과 출력을 정의합니다. 조인에 대해 자세히 알아보려면 조인 <a href="https://go.microsoft.com/fwlink/?linkid=858789" target="_blank">자습서를 검토하세요</a>.</p>


  <h4>다음 단계</h4>


  <p>데이터를 분석하는 방법에 대해 자세히 알아봅니다.</p>


  <ul>
   <li><a href="https://go.microsoft.com/fwlink/?linkid=844764" target="_blank">쿼리 언어 문서 사이트</a></li>
   <li><a href="https://go.microsoft.com/fwlink/?linkid=856078" target="_blank">쿼리 시작</a></li>
   <li><a href="https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-log-search-upgrade" target="_blank">새 쿼리 언어로 업그레이드</a></li>
  </ul>
