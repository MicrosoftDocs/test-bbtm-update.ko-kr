### YamlMime:Yaml
ms.openlocfilehash: 1894e6fe488eac8df14a7c792cbe9bacadac2a23
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139912333"
Slug: unique-identities-are-hard-or-how-i-learned-to-stop-worrying-and-love-the-id-scope
Title: 고유한 ID는 어렵습니다. 걱정을 멈추고 ID 범위를 사랑하는 방법을 배웠습니다.
Summary: ID 범위인 Ah, Device Provisioning Service에서 가장 미묘한 개념 중 하나입니다. 디바이스 프로비저닝의 이름 간격 특성에 대해 비난과 찬사를 받고 있습니다. 그것은 렌치를 던져 ...
Content: >-
  <p>IoT Hub Device Provisioning Service에서 가장 미묘한 개념 중 하나인 ID 범위를 확인합니다. 디바이스 프로비저닝의 이름 간격 특성에 대해 비난과 찬사를 받고 있습니다. 복잡한 프로비저닝 시나리오에서 렌치를 throw하지만&rsquo; 안전한 제로 터치 디바이스 프로비저닝에도 필요합니다. 이 블로그 게시물은 엔지니어링 팀에서 몇 시간 분량의 대화와 디자인 토론의 절정이며, 완전히 이해하기 위해 몇 가지 읽기가 필요할 수 있습니다. ID 범위를 이해하는 것은 목적지가 아닌 여정입니다. 세부 정보에 관심이 없는&rsquo; 경우 디바이스 공급망에서 ID 고유성을 보장하기 위해 ID 범위가 필요하다는 것을 알고 있습니다. 그 이유를 알고 싶다면 계속 읽어보세요.</p>


  <h2>디바이스 고유성</h2>


  <p>디바이스 고유성은 고유한 등록 ID(비공개로 가정되지 않음) 및 키(프라이빗으로 가정됨)의 두 가지 조각으로 구성됩니다. 약식의 경우 각 디바이스는 단일 DPS 내에서 X = 등록 ID 및 Y = 키인 (X, Y)로 표시됩니다. 이는 컴퓨팅에서 eons처럼 느껴지는 용도로 사용되었으며 GUID의 개념은 새로운 것이 아닙니다. 디바이스 ID를 고유하게 설정하기에 충분하지 않은 IoT 시나리오에 대한 몇 가지 고유한 항목이 있습니다. 디바이스 만들기 및 디지털 등록은 별도의 시간에 발생할 수 있으며 충돌을 방지하려면 일종의 범위 지정이 필요합니다. ID 범위를 특정 테넌트 DPS로 지정하는 ID 범위 개념을 도입했습니다.</p>


  <p>이제 범위 지정 메커니즘이 있는 이유에 대한 설명 예제입니다. 또 다른 이유는 디바이스 ID를 증명하는 데 사용되는 보안 기술과 관련이 있습니다. TPM 증명을 지원하며 실제 하드웨어를 가져오기 전에 시뮬레이션된 디바이스를 시작하려는 개발자를 위한 TPM 에뮬레이터를 제공합니다. GitHub 게시하는 TPM 에뮬레이터에는 단일 값으로 하드 코딩된 인증 키가 있습니다. &rsquo;그것은 단지 개발 목적으로, 그래서 이것은 큰 문제가 될 수 없습니다&rsquo;. 즉, 자습서를 따르는 모든 사용자가 X = mydevice, Y = EK_github 사용하여 디바이스를 만듭니다. 이 항목은 DPS 서비스에 고유하지만 전체적으로 고유하지는 않습니다. 내 자습서 디바이스가 Device Provisioning Service에 대해 이야기하고 자습서 디바이스가 Device Provisioning Service와 대화하는 경우 서비스는 디바이스를 구분하여 ID 범위를 구분하는 방법이 필요합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/53fd85e8-ea81-49b5-8318-600dac86308e.png"><img alt="To learn about provisioning and TPMs, go to: https://aka.ms/dps-tpm" border="0" height="384" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/32374198-b443-4bc7-a16d-ec448d846944.png" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지: TM에 대해 자세히 알아보기" width="576"></a></p>


  <p>고유한(X, Y)가 필요한 경우 디바이스가 한꺼번에 만들어지고 1년 동안 선반에 앉아 프로비전 서비스에 등록될 때 문제가 발생합니다. 이러한 디바이스의 (X, Y)는 해당 기간에 이미 등록되었을 수 있으며, 특히 비교적 일반적인 경우 그렇습니다. 이제 스토리지에 있는 이러한 디바이스가 프로비저닝 서비스에 등록되고 다음이 발생합니다.</p>


  <ul>
   <li>등록은 전역 Device Provisioning Service에 이미 있으므로 거부됩니다.</li>
   <li>웨어하우스 디바이스는 새 디바이스의 ID를 하이재킹합니다. 이 서비스는 디바이스를 구분할 방법이 없습니다.</li>
  </ul>


  <p>불행히도, 이것은 공급망에서 매우 일반적입니다. 공급망이 중요하기 때문에 이것이 바로 이것입니다.</p>


  <p>ID 선택과 ID 등록 사이의 일시적 지연의 또 다른 예는 실제로 해당 이메일 주소에 등록하기 전에 전자 메일 주소(또는 도메인 이름) 및 암호를 선택하는 것입니다. 유일한 차이점은 IoT 디바이스가 새 전자 메일 주소를 선택할 수 있는 사용자와 달리 새 ID를 선택할 수 없다는 것입니다.</p>


  <p>약식에 새 변수를 도입할&#39;있으므로(X, Y, Z)는 프로비전 서비스의 Z = ID 범위인 서비스의 단일 디바이스입니다. 따라서 내 디바이스는 (mydevice, EK_github, myIdScope)이고 디바이스는 (mydevice, EK_gitub, yourIdScope)입니다. 이들은 독특하고 균형이 우주로 복원되며 밤에 잘 자면됩니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cbf338fc-721e-4e68-b4b5-f8156b364cd9.png"><img alt="Pictoral representation of tenant data segregation in the Device Provisioning Service." border="0" height="394" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3f5dacdb-9206-4afc-82fe-157cb697a81c.png" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Device Provisioning Service의 데이터 분리" width="576"></a></p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/53237c9c-27cc-4186-8779-89725e65519b.png"><img alt="A meme-like pictoral represenation of the permissions model in the Device Provisioning Service" border="0" height="381" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fdf09a9b-11ce-4024-90e5-a231143ef139.png" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="등록을 편집하는 남자, 밈 같은" width="576"></a></p>


  <p>OEM이 고유(X, Y) ID를 보장하기 위해 어려움을 겪도록 요구할 수 있지만,&#39;기본적으로 보안이 훨씬 더 안전한 고객에게 상당한 보안 부담을 안겨줍니다. 우리는 고객이 안전하게 지울 수 있도록 가능한 한 쉽게 만들고자 합니다. 이는 고객에게 스스로 걸 수 있는 충분한 밧줄을 주지 않는다는 것을 의미합니다. 그래서 우리는 Z가 필요합니다.</p>


  <p>디바이스가 Device Provisioning Service에 표시하고 허브에 할당되려면 해당 디바이스(X, Y, Z)를 알고 있어야 합니다. 디바이스는 (X, Y, Z)를 포함한 펌웨어를 사용하여 만들어집니다. X와 Y가 반드시 전역적으로 고유하지는 않으며 Z 값에 대해 고유한 조회를 수행할 수 없다고 이미 결정한&#39;있기 때문에 디바이스에서 해당 Z 값을 검색할 수&rsquo; 있는 방법은&#39;없습니다. 세 가지 값을 모두 동시에 설정하여 디바이스를 만들어야 합니다.</p>


  <p>물론 누군가가 내 디바이스를 가장하거나 ID에 웅크리지 않도록 하려면 누가 만들 수 있는지(X, Y, Z)를 제어해야 합니다. &#39;우리는 이미 X와 Y가 거의 무엇이든 될 수 있다는 것을 이미 확립했기 때문에 다시 나갈&#39;있습니다. 그러나 Z는 서비스에 의해 설정되며 현재 특정 프로비전 서비스 테넌트에 직접 연결됩니다. Z는 내 프로비저닝 서비스에 연결할 수 있는 디바이스를 제어하는 방법입니다. (X, Y, Z)에 대한 등록 레코드를 만들 수 있는 사람은 Z와 연결된 디바이스 프로비저닝 서비스에 대한 쓰기 액세스 권한이 있는 사용자뿐이며, 이는 일종의 액세스 정책(Device Provisioning Service의 경우 등록 쓰기)으로 표시됩니다. 이렇게 하면 디바이스에 대한 등록 항목을 만들 수 있는 사용자만 레코드를 만들 수 있습니다.</p>


  <p>디바이스의 초기 프로그래머가 클라우드 연결을 수행하지&#39;시나리오도&#39;. 나는&#39;잠시 후에 그것을 얻을 것이다.</p>


  <p>물론 악의적인 행위자가 기술적으로 내 디바이스&#39;(X, Y, Z)를 추측하고 악성 디바이스를 내 IoT Hub에 연결할 수 있지만 이는 새로운 위협이&#39;않습니다. 고객을 보호하기 위해 우리가 할 수 있는 일은 너무나&#39;. 암호의 대칭 키를 사용하여 토스터N&quot; 형식&quot;으로 모든 디바이스의 &quot;&quot; 이름을 지정하고 잘못된 행위자가 내 ID 범위를 검색하는 경우 디바이스 이름 지정 체계를 하이재킹하는 것을 막기 위해 할 수 있는 일은&#39;. 적어도 등록 레코드가 있는 ID만 하이재킹할 수 있으므로 위험을 다소 완화할 수 있습니다. 즉, 나는 암호123의 &quot;암호로 은행 계좌를 열 수 있습니다!&quot; 훨씬 더 쉽게 내 인생 저축을 잃게됩니다. 항상 위협이 될&#39;, 그것은 단지 당신이 당신의 자신의 보안에 넣어 기꺼이&#39;얼마나 많은 노력에 따라 달라집니다.</p>


  <p>우리는 모두 동일한 페이지에 있어야 하며, 각 디바이스에는 고유한(X, Y, Z)가 필요하며 신뢰할 수 있는 행위자만 지정된 Z에 대한 등록 레코드를 만들 수 있습니다. Device Provisioning Service는 Z를 난독 처리하므로 지정된 테넌트 이름에 대한 itll&rsquo;을 추측하기 어려울&#39;있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f5067440-46f1-435e-b768-82dbae2edc7f.png"><img alt="Learning!" border="0" height="384" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/567231b2-8a0e-4018-a35a-bff76a24bad1.png" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Learning!" width="576"></a></p>


  <h2>실제 OEM 시나리오는 어렵습니다.</h2>


  <p>초기 펌웨어를 디바이스에 프로그래밍하는 동일한 엔터티가 클라우드 연결 IoT 솔루션을 담당하는 경우 이 작업이 제대로 작동합니다. 올인원 OEM&quot;을 호출하는 &quot;시나리오입니다. 이 OEM은 사용할 준비가 된 IoT 솔루션이 있는 특수 디바이스 또는 단일 용도의 디바이스를 생성합니다. OEM&#39;고객은 디바이스와 연결된 서비스에 대한 구독을 구입하지만 자체 솔루션을 빌드하지&#39;. 예를 들어 커피 메이커(OEM에서 솔루션을 지리적으로 분할하려는 경우), <a href="https://blogs.microsoft.com/iot/2016/09/12/azure-iot-suite-helps-sandvik-coromant-stay-on-cutting-edge-within-digital-manufacturing/#08ckShkjVuPGPOBP.99" target="_blank">특수 제조 장비</a> 및&#39;임대되는 기타 <a href="https://customers.microsoft.com/story/connecting-beverage-machines-to-the-cloud-to-power-productivity" target="_blank">대형 기계</a> 와 같은 소비자 스마트 디바이스가 있습니다.</p>


  <p>올인원&quot; OEM의 &quot;대칭 이동은 흰색 레이블 OEM입니다. 흰색 레이블 OEM은 해당 디바이스에 대한 고객이 있기 전에 많은 디바이스를 생성합니다. 화이트 레이블 OEM은 공급망에서 많은 역할을 가질 수 있습니다.</p>


  <ul>
   <li>클라우드 연결을 처리하는 고객에게 빈&quot; 디바이스를 판매&quot;합니다. 디바이스 구매자가 초기 이미지에 배치합니다. 이 시나리오는 올인원&rdquo; OEM처럼 &ldquo;기본으로 작동합니다.</li>
   <li>클라우드 연결을 처리하는 고객에게 기본 이미지가 있는 디바이스를 판매합니다. 디바이스는 구매자를&#39;전에 대량으로 만들어집니다.
   <ul>
    <li>디바이스 구매자에서는 OEM에서 제공하는 온보딩을 사용합니다.</li>
    <li>디바이스 구매자가 디바이스를 다시 깜박입니다.</li>
   </ul>
   </li>
   <li>고객에게 기본 이미지가 있는 디바이스를 판매합니다. OEM은 고객과 기존 비즈니스 관계를 맺고 있으며 ID 범위와 같은 프로비저닝 구성에 배치할 수 있습니다.</li>
   <li>고객에게 기본 이미지가 있는 디바이스를 판매합니다. 추가 요금(PaaS)에 대한 고객&#39;IoT 솔루션에 자동 프로비저닝의 부가 가치 서비스를 제공합니다.
   <ul>
    <li>디바이스에 일부 초기 이미지가 있는 경우 OEM에 값 추가에 대한 자체 프로비저닝 서비스가 있거나 고객이 구울 ID 범위를 제공합니다.</li>
   </ul>
   </li>
   <li>고객에게 기본 이미지가 있는 디바이스를 판매합니다. 고객은 소유권 클레임 프로세스를 거쳐 SaaS에 연결합니다. 소유권 클레임 프로세스는 SaaS 서비스를 제공하는 엔터티에 의해 설계되고 빌드됩니다.</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/95e78e8a-f08c-4fc0-924d-8525ff7ab593.png"><img alt="Two IoT scenarios side-by-side: on the left, a man holding a box of plants for planting. On the right, a stack of shipping containers." border="0" height="385" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e562a21a-ad63-4a30-a966-4a4f8c056b41.png" style="border: 0px currentcolor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="두 가지 다른 IoT 시나리오" width="576"></a></p>


  <p>시나리오에 관계없이 즉시 문제가&#39;. 흰색 레이블 OEM에 프로비저닝 서비스가 있다고 가정하지&#39;수 있습니다. 프로비저닝 서비스가 없으므로 디바이스에 프로그래밍할 Z 값이 없습니다. 몇 가지 옵션이 있습니다.</p>


  <ul>
   <li>고객은 OEM에 초기 이미지에 대한 Z 값을 제공합니다.</li>
   <li>OEM에는 자체 Z 값이 있습니다.</li>
   <li>OEM은 첫 번째 책에서 Z 값을 요청하는 디바이스를 프로그래밍합니다. 이렇게 하려면 부팅 시 터치가 필요합니다.</li>
  </ul>


  <p>이 문서에서는 ID 범위의 필요성에 중점을 두고 있으며 시나리오를 자세히 다루지 않습니다. 관심이&#39;경우 프로비저닝 시나리오에 대한 별도의 블로그 게시물을 수행할&#39;있습니다. 그래서 당분간 나는&#39;어떻게 든 장치가 전체 ID를 가지고 있도록 디바이스에 얻는 Z 값이&#39;가정하려고합니다. 이제 DPS_Z 해당 등록이 있는 디바이스(X, Y, Z)를&#39;&rsquo; 고유하며 스푸핑할 수 없음을 확인합니다.</p>


  <h2>ID 범위가 정말 필요합니다.</h2>


  <p>여기서 배운 내용은&#39;.</p>


  <ul>
   <li>ID 및 키 쌍만으로는 IoT 디바이스 공급망과 관련된 타임라인을 고려할 때 디바이스를 고유하게 식별하기에 충분하지&#39;.</li>
   <li>흰색 레이블 OEM 케이스의 디바이스에 범위 지정 식별자를 가져오는 것은 어렵고 여전히 설계 중입니다. 이 영역에는 몇 가지 아이디어가 있습니다. 더 곧 제공될 예정&trade;입니다.</li>
  </ul>


  <p>리머릭으로 요약하려면 다음을 수행합니다.</p>


  <p>우리는 정말 nope 말을하려고했다<br>

  디바이스 ID 범위로<br>

  그러나 보안<br>

  항상 쉬운 것은 아닙니다.<br>

  그래서 지금 우리 모두는 대처해야합니다.</p>
