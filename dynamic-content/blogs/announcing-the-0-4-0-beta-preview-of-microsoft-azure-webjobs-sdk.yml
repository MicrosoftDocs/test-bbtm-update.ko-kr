### YamlMime:Yaml
ms.openlocfilehash: 736d8f3d18a6f6764fa3a3fd8ebb5ccc1ee9a8ae
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899088"
Slug: announcing-the-0-4-0-beta-preview-of-microsoft-azure-webjobs-sdk
Title: Microsoft Azure WebJobs SDK의 0.4.0 베타 미리 보기 발표
Summary: 이 게시물은 WebJobs SDK의 0.4.0 베타 미리 보기의 새로운 기능을 강조 표시합니다.
Content: "<a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\" target=\"_blank\">Scott Hanselman이 도입한</a> Microsoft Azure WebJobs SDK의 또 다른 미리 보기를 릴리스합니다. 이전 미리 보기에 대해 자세히 알아보려면 이 <a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\" target=\"_blank\">발음 게시물을</a> 읽어보세요.\n\n이 릴리스에는 0.3.0 베타와 동일한 일반 기능 집합과 새로운 기능이 있습니다.\n<h2>이 릴리스 다운로드</h2>\nNuGet 갤러리에서 WebJobs SDK를 다운로드할 수 있습니다. 다음과 같이 NuGet 패키지 관리자 콘솔을 사용하여 NuGet 갤러리를 통해 이러한 패키지를 설치하거나 업데이트할 수 있습니다.\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.WebJobs –Pre</pre>\nMicrosoft Azure Service Bus 트리거를 사용하려면 다음 패키지를 설치합니다.\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.WebJobs.ServiceBus -Pre</pre>\n패키지 이름이 0.3.0 베타 버전에서 변경되었으므로 최신 버전으로 업데이트하는 데 도움이 되는 리디렉션 패키지를 업로드했습니다.\n<pre class=\"prettyprint\">Update-Package Microsoft.Azure.Jobs.Core –Pre</pre>\n<pre class=\"prettyprint\">Update-Package Microsoft.Azure.Jobs –Pre</pre>\n<h2>WebJobs SDK란?</h2>\nMicrosoft Azure 웹 사이트의 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a> 기능을 사용하면 웹 사이트에서 서비스 또는 백그라운드 작업과 같은 프로그램을 쉽게 실행할 수 있습니다. .exe, <i>.cmd</i><i> 또는 </i> <i>.bat</i>파일과 같은 실행 파일을 업로드하고 웹 사이트에 실행할 수 있습니다. 트리거되거나 연속적인 WebJobs로 실행할 수 있습니다. WebJobs SDK가 없으면 백그라운드 작업을 연결하고 실행하려면 복잡한 프로그래밍이 많이 필요합니다. SDK는 일반적인 작업을 완료하기 위해 최소한의 코드를 작성할 수 있는 프레임워크를 제공합니다.\n\nWebJobs SDK에는 Service Bus 뿐만 아니라 Microsoft Azure Storage Blob, 큐 및 테이블과 함께 작동하는 바인딩 및 트리거 시스템이 있습니다. 바인딩 시스템을 사용하면 Microsoft Azure Storage 개체를 읽거나 쓰는 코드를 쉽게 작성할 수 있습니다. 트리거 시스템은 큐 또는 Blob에서 새 데이터를 받을 때마다 코드에서 함수를 호출합니다.\n<h2>이 미리 보기의 업데이트</h2>\n<h3><strong><em>비동기 지원</em></strong></h3>\n함수에서 비동기/await를 사용할 수 있으며 함수가 작업을 반환할 수 있습니다.\n\n단일 JobHost 내의 고유 함수는 병렬로 실행됩니다. 즉, 다른 큐에서 수신 대기하는 함수가 2개 있는 경우 병렬로 실행됩니다.\n\n다음 코드에서는 async/await를 사용하고 함수에서 Task를 반환하는 방법을 보여  있습니다. 이 함수는 inputqueue라는 Azure 큐의 새 메시지를 트리거하고 Blob에 메시지를 씁니다.\n<pre class=\"prettyprint\">class Program\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n   public async static Task HelloWorldFunctionAsync(\n   [QueueTrigger(\"inputqueue\")] string inputText,\n   [Blob(\"output/output.txt\")] TextWriter output)\n   {\n       await output.WriteAsync(inputText);\n   }\n}</pre>\n<span style=\"font-family: Trebuchet MS\">필요에 따라 CancellationToken을 함수에 대한 인수로 사용할 수 있습니다. 예: 다음 함수는 \"input\"이라는 컨테이너에서 새 Blob이 검색될 때 트리거됩니다. CancellationToken을 CopyToAsync 함수에 전달할 수 있습니다. 또한 이 함수는 SDK가 파일 이름 및 확장명을 바인딩하고 쉽게 액세스하는 방법을 보여 줍니다.</span>\n<pre class=\"prettyprint\">class HelloWorldAsyncCancellationToken\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n    public async static Task ProcessBlob(\n    [BlobTrigger(\"input/{name}.{extension}\")] Stream input,\n    string name, // The SDK binds the name of the File\n    string extension, // The SDK binds the extension of the File\n    [Blob(\"output/{name}.{extension}\", FileAccess.Write)] Stream output,\n    CancellationToken token)\n    {\n        await input.CopyToAsync(output, 4096, token);\n    }\n}</pre>\n함수를 명시적으로 호출할 수 있습니다. 이 기능은 Azure Scheduler를 사용하여 일정에 따라 WebJob을 실행하거나 함수를 호출하려는 경우에 유용합니다. 이 방법은 여전히 진단, 장기 실행 함수 취소 등과 관련된 SDK의 이점을 제공합니다.\n<pre class=\"prettyprint\">class Program\n{\n    static void Main()\n    {   \n        JobHost host = new JobHost();\n        Task callTask = host.CallAsync(typeof(Program).GetMethod(\"ManualTrigger\"), \n                                      new { value = 20 });\n\n        Console.WriteLine(\"Waiting for async operation...\");\n        callTask.Wait();\n        Console.WriteLine(\"Task completed: \" + callTask.Status);\n    }\n\n    [NoAutomaticTrigger]\n    public static void ManualTrigger(\n    TextWriter log, int value, [Queue(\"outputqueue\")] out string message)\n    {\n        log.WriteLine(\"Function is invoked with value={0}\", value);\n        message = value.ToString();\n        log.WriteLine(\"Following message will be written on the Queue={0}\", message);\n    }\n}</pre>\n<h3><i>Azure 큐에서 포이즌 메시지 처리</i></h3>\n<a href=\"https://azure.microsoft.com/blog/2014/06/18/announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk/\">0.3.0 베타</a>에서 SDK는 큐의 DequeueCount 속성에 바인딩하는 옵션을 제공했으며, 이제 이 릴리스에서는 메시지를 포이즌 큐로 자동으로 이동하기 위한 지원을 추가하고 있습니다.\n\n이제 조사를 위해 로깅하는 등 애플리케이션 코드에서 포이즌 메시지를 처리할 수 있습니다. 함수를 QueueTrigger(\"queuename-poison\")에 바인딩하기만 하면 됩니다.\n\n다음 코드는 큐 메시지를 처리합니다. 함수가 큐에 바인딩되고 함수를 처리하는 동안 예외가 발생하면 SDK는 메시지를 포이즌으로 표시하기 전에 메시지를 5번(기본값) 처리하고 SDK는 메시지를 다른 큐로 이동합니다.\n<pre class=\"prettyprint\">class ProcessPoisonMessages\n{\n    static void Main()\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n     }\n     public async static Task ProcessQueue(\n     [QueueTrigger(\"inputqueue\")] string inputText,\n     [Blob(\"output/output.txt\")] TextWriter output)\n     {\n       await output.WriteAsync(inputText);\n     }\n     public static void ProcessPosionQueue(\n     [QueueTrigger(\"inputqueue-poison\")] string inputText)\n     {\n       //Process the poison message and log it or send a notification\n     }\n}</pre>\n<h3><i>Azure 큐에 대한 더 나은 폴링 논리</i></h3>\n이 릴리스에는 새로운 폴링 전략이 있습니다. 이제 SDK는 임의 지수 백오프 알고리즘을 구현하여 스토리지 트랜잭션 비용에 대한 유휴 큐 폴링의 영향을 줄입니다.\n\n&nbsp;\n<h3><strong>큐에 대한 빠른 경로 알림</strong></h3>\n<ul>\n<ul>\n<ul>\n <li>0.3.0-Beta에서 SDK는 ~2초마다 폴링하는 데 사용되었습니다. 즉, 앱에 20개의 함수 체인이 있는 경우(함수가 큐에 쓰고 다른 큐에 쓰고 다른 함수를 트리거하는 다른 함수를 트리거하는 경우) 20개의 큐 메시지를 처리하는 데 최대 40초가 걸렸을 것입니다. 이러한 변경 내용으로 이제 최대 8초가 걸립니다.</li>\n</ul>\n</ul>\n</ul>\n&nbsp;\n<h3><strong>큐 폴링에 대한 구성 옵션</strong></h3>\nSDK는 큐 폴링 동작을 구성할 수 있는 몇 가지 노브를 노출합니다.\n<ul>\n<ul>\n<ul>\n <li><em>큐가 비어 있는 경우의 MaxPollingInterval은 메시지를 확인하기 전에 대기하는 가장 긴 시간입니다. 기본값은 10분입니다.</em></li>\n <li><i>큐 메시지가 포이즌 큐로 이동되는 경우의 MaxDequeueCount입니다. 기본값은 5입니다.</i></li>\n</ul>\n</ul>\n</ul>\n&nbsp;\n\n다음 코드는 이러한 설정을 구성하는 방법을 보여줍니다.\n<pre class=\"prettyprint\">static void Main()\n{\n       JobHostConfiguration config = new JobHostConfiguration();\n       config.Queues.MaxDequeueCount = 3;\n       config.Queues.MaxPollingInterval = TimeSpan.FromMinutes(20); \n       JobHost host = new JobHost(config);\n       host.RunAndBlock();\n }</pre>\n&nbsp;\n<h3><i>패키지/네임스페이스 변경 내용</i></h3>\n혼동을 주고 검색하기 어려울 수 있는 일반 용어 Job과의 모호성을 방지하기 위해 패키지 이름을 변경하고 있습니다.\n\n<strong>이러한 변경 내용을 통합하려면 기존 앱을 다시 컴파일하고 ConnectionStrings를 변경해야 합니다.</strong>\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"497\"><b>자산</b></td>\n<td valign=\"top\" width=\"420\"><b>이전</b></td>\n<td valign=\"top\" width=\"484\"><b>이후</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"><b>패키지</b></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs</td>\n<td valign=\"top\" width=\"484\">Microsoft.Azure. <strong>WebJobs</strong></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs.Core</td>\n<td valign=\"top\" width=\"484\">Microsoft.Azure. <strong>WebJobs</strong>. 코어</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs.ServiceBus</td>\n<td valign=\"top\" width=\"484\">Microsoft.Azure. <strong>WebJobs</strong>. ServiceBus</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"><b>네임스페이스</b></td>\n<td valign=\"top\" width=\"420\">Microsoft.Azure.Jobs</td>\n<td valign=\"top\" width=\"484\">Microsoft.Azure. <strong>WebJobs</strong></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"><b>ConnectionString 이름</b></td>\n<td valign=\"top\" width=\"420\">AzureJobsStorage</td>\n<td valign=\"top\" width=\"484\"><strong>AzureWebJobs</strong> Storage</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"497\"></td>\n<td valign=\"top\" width=\"420\">AzureJobsDashboard</td>\n<td valign=\"top\" width=\"484\"><strong>AzureWebJobsDashboard</strong></td>\n</tr>\n</tbody>\n</table>\n&nbsp;\n<h3><i>더 빠른 대시보드 인덱스 처리 </i></h3>\nWebJob에 대한 모든 WebJobs 및 함수 세부 정보를 표시할 때 대시보드의 성능 향상\n<h3><i>대시보드 데이터가 만료됨 경고</i></h3>\n이제 대시보드는 백그라운드에서 호스트 데이터를 처리하고 남은 작업이 많은 경우 경고를 표시합니다.\n<h3><i>대시보드 인덱싱 오류</i></h3>\n\"정보\" 페이지에서 대시보드는 인덱싱 오류가 있는 경우 표시합니다. 대시보드가 로그를 인덱싱하지 못하는 경우 이 페이지를 확인하여 오류가 있는지 확인할 수 있으므로 유용합니다.\n<h3><strong><em>버그 수정</em></strong></h3>\n이 릴리스에는 많은 버그 수정이 있습니다. 포럼 및 스택 오버플로에 보고된 버그의 우선 순위를 지정했습니다.\n\n&nbsp;\n<h2><strong>SDK의 기존 기능</strong></h2>\n다음은 0.3.0 베타에서 지원되고 이 릴리스에서 계속 지원되는 기능 집합입니다.\n<h4><em><strong>Azure 사용량</strong></em></h4>\nSDK는 Azure Blob, 큐, 테이블 및 ServiceBus에 대한 트리거 및 바인딩을 추가합니다.\n<h4><strong><em>트리거</em></strong></h4>\n큐 또는 Blob에서 새 입력이 검색되면 함수가 실행됩니다. 트리거에 대한 자세한 내용은 이 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/01/28/trigger-bindings-and-route-parameters-in-azurejobs.aspx\">게시물을</a> 참조하세요.\n<h4><em><strong>바인딩</strong></em></h4>\nSDK는 바인딩을 지원하여 C# 기본 형식과 Blob, 테이블 및 큐와 같은 Azure Storage 간에 모델 바인딩을 제공합니다. 이렇게 하면 개발자가 blob, 테이블 및 큐에서 읽고 쓸 수 있습니다. 따라서 Azure Storage 읽기/쓰기에 관한 코드에 대해 알아볼 필요가 없습니다.\n\n현재 지원되는 바인딩은 <b>Stream, TextReader/Writer 및 String입니다. </b> Storage SDK에서 사용자 지정 형식 및 기타 형식에 바인딩에 대한 지원을 추가할 수도 있습니다. 자세한 내용은 아래 나열된 샘플을 확인할 수 있습니다.\n<h4><strong><em>Hosting</em></strong></h4>\nJobHost는 프로그램에 있는 함수를 알고 있는 실행 컨테이너입니다. JobHost 개체( <a href=\"https://www.nuget.org/packages/Microsoft.Azure.WebJobs\" target=\"_blank\">Microsoft.Azure.WebJobs</a> 에 있음)는 바인딩을 읽고, 트리거를 수신 대기하고, 함수를 호출합니다. 다음 예제에서는 JobHost 인스턴스를 만들고 RunAndBlock()을 호출합니다. 그러면 JobHost가 이 호스트에서 정의하는 모든 함수에 대한 트리거를 수신 대기하게 됩니다.\n<pre class=\"prettyprint\">static void Main()\n{\n    JobHost host = new JobHost();\n    host.RunAndBlock();\n}</pre>\n<h4><strong><em>WebJobs 모니터링을 위한 대시보드입니다.</em></strong></h4>\nWebJobs(<b><i>모든 언어 및 모든 형식으로 작성</i></b>됨)가 실행되면 실시간으로 모니터링할 수 있습니다. 해당 상태(실행 중, 중지됨, 성공적으로 완료됨), 마지막 실행 시간 및 특정 실행 로그를 볼 수 있습니다. 다음 스크린샷은 웹 사이트에서 실행되는 모든 WebJobs의 보기를 보여줍니다.\n\n<img title=\"Azure WebJobs 베타\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AllTypesOfWebJobs.png\" width=\"610\" height=\"308\" border=\"0\" />\n<h4><strong><em>함수 실행 세부 정보</em></strong></h4>\n이 \"ImageProcessing\" WebJob의 특정 실행을 모니터링하는 경우 다음과 같이 프로그램의 함수에 대한 호출 세부 정보를 볼 수 있습니다.\n<ul>\n<ul>\n <li>이 함수의 매개 변수입니다.</li>\n <li>함수를 실행하는 데 걸린 시간입니다.</li>\n <li>Blob에서 읽는 데 걸린 시간 및 읽거나 쓴 바이트 수입니다.</li>\n</ul>\n</ul>\nImageProcessing WebJob에 대한 코드는 다음과 같습니다. 이 WebJob은 다음을 사용합니다.\n<pre class=\"prettyprint\">using Microsoft.Azure.WebJobs;\nusing System.IO;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Web.Helpers;\n\nnamespace ImageResizeAndWaterMark\n{\n    class ImageProcessingFunctions\n    {\n        public static void Resize(\n        [BlobTrigger(@\"images-input/{name}\")] WebImage input,\n        [Blob(@\"images2-output/{name}\")] out WebImage output)\n        {\n            var width = 80;\n            var height = 80;\n            output = input.Resize(width, height);\n        }\n        public static void WaterMark(\n        [BlobTrigger(@\"images2-output/{name}\")] WebImage input,\n        [Blob(@\"images2-newoutput/{name}\")] out WebImage output)\n        {\n            output = input.AddTextWatermark(\"WebJobs is now awesome!!!!\", fontSize: 6);\n        }\n    }\n    public class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;\n    {  \n        public Task&lt;WebImage&gt; ReadFromStreamAsync(Stream input, CancellationToken cancellationToken)\n        {\n            return Task.FromResult(new WebImage(input));\n        }\n\n        public async Task WriteToStreamAsync(WebImage result, Stream output, CancellationToken cancellationToken)\n        {\n            var bytes = result.GetBytes();\n            await output.WriteAsync(bytes, 0, bytes.Length,cancellationToken);\n        }\n    }\n}</pre>\n<img title=\"Azure WebJobs 베타\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/new_details.png\" width=\"610\" height=\"478\" border=\"0\" />\n<h4><em><strong>Replay 호출 &amp;</strong></em></h4>\n위의 예제에서 Resize 함수가 어떤 이유로든 실패하는 경우 실행 체인을 트리거하고 워터마크 함수를 호출하는 새 이미지 및 Replay Resize 함수를 업로드할 수 있습니다. 이는 함수를 함께 연결하기 위한 복잡한 그래프가 있는 경우 문제를 진단하고 디버그하는 데 유용합니다. 대시보드에서 함수를 실행할 수도 있습니다.\n<h4><strong><em>함수의 인과 관계</em></strong></h4>\n위의 예제에서는 Resize 함수가 Blob에 쓸 때 WaterMark 함수를 트리거한다는 것을 알고 있습니다. 대시보드는 함수 간에 이러한 인과 관계를 표시합니다. 새 입력이 검색될 때 트리거되는 많은 함수를 연결한 경우 이 인과 관계 그래프를 보는 것이 유용할 수 있습니다.\n<h4><strong><em>Blob 검색</em></strong></h4>\nBlob 검색을 클릭하고 해당 Blob에 발생한 작업에 대한 정보를 가져올 수 있습니다. 예를 들어 ImageProcessing의 경우 Resize 함수가 실행되었기 때문에 Blob이 작성되었습니다. 검색 Blob에 대한 자세한 내용은 이 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx\">게시물을</a> 참조하세요.\n<h2><strong>샘플</strong></h2>\nWebJobs SDK에 대한 샘플은 다음에서 찾을 수 있습니다. <a title=\"https://github.com/Azure/azure-webjobs-sdk-samples\" href=\"https://github.com/Azure/azure-webjobs-sdk-samples\">https://github.com/Azure/azure-webjobs-sdk-samples</a>\n<ul>\n<ul>\n <li>Blob, 테이블, 큐 및 Service Bus 대한 트리거 및 바인딩을 사용하는 방법에 대한 샘플을 찾을 수 있습니다.</li>\n <li>고객이 Blob Storage에서 해당 사진을 처리하는 함수를 트리거하는 그림을 업로드할 수 있는 이미지 처리 웹 사이트인 PhluffyShuffy라는 샘플이 있습니다.</li>\n</ul>\n</ul>\n<h2><strong>설명서</strong></h2>\n<ul>\n<ul>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">자습서: Windows Azure WebJobs SDK 시작</a></li>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Windows Azure WebJobs SDK를 사용하여 작업을 더 쉽게 만드는 채널 9 비디오</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott Hanselman의 WebJobs 및 SDK 소개</a></li>\n <li>WebJobs를 사용하여 빌드되고 <a href=\"https://twitter.com/bradygaster\">Brady Gaster</a>가 ASP.NET 웹 사이트 모니터</li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs – 권장 리소스</a></li>\n <li><a href=\"https://channel9.msdn.com/Tags/azurefridaywebjobs\" target=\"_blank\">Azure Friday의 WebJobs 비디오 시리즈</a></li>\n</ul>\n</ul>\n<h2><strong>SDK를 사용하여 WebJobs 배포</strong></h2>\nVisual Studio 2013 Update3/Azure SDK 2.4에서 WebJobs를 Azure Websites에 게시하는 Visual Studio 도구 지원이 추가되었습니다. 자세한 내용은 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/\" target=\"_blank\">Azure WebJobs를 Azure Websites에 배포하는 방법을</a> 참조 <a name=\"how-to-deploy-azure-webjobs-to-azure-websites\"></a> 하세요.\n<h2><strong>0.3.0-beta에서 <strong>0.4.0-beta</strong>로 마이그레이션할 때 알려진 문제</strong></h2>\n<h3><em><strong>새 API와 일치하도록 네임스페이스 업데이트</strong></em></h3>Microsoft.Azure.Jobs.CoreAfter<b></b>를 Microsoft.WindowsAzure.Jobs \n<b>전에</b>\n\n<strong></strong>\n\nMicrosoft.WindowsAzure.WebJobs Microsoft.Azure.WebJobs.Core\n<h3><em><strong>connectionString 이름 업데이트</strong></em></h3>\nconnectionStrings를 설정할 때 WebJob의 app.config 또는 Microsoft Azure 웹 사이트의 \"탭 구성\"에서 다음과 같이 connectionString 이름을 변경해야 합니다.\n\n<b>이전</b>\n\nAzureJobsRuntime AzureJobsDashboard\n\n<b>이후</b>\n\nAzureWebJobsRuntime AzureWebJobsDashboard\n<h3><strong><em>로깅 계정에 connectionString 저장</em></strong></h3>\n최신 버전의 SDK(<em>0.4.0 베타</em>)까지 AzureJobsRuntime 스토리지 계정 연결 문자열이 AzureJobsDashboard 로그에 저장되었습니다. 관리자만 로그를 볼 수 있고 동일한 사용자가 연결 문자열을 보고 재설정할 수 있으므로 큰 영향을 주지는 않았지만 앞으로는 이 사례를 중지할 것입니다. 다음 달에는 이전에 저장된 연결 문자열을 제거하도록 대시보드를 업데이트합니다.\n\n이제 이러한 로그를 제거하려면 AzureJobsDashboard connectionString에서 지정한 로그를 엽니다.\n\n다음 \"azure-jobs-host\", \"azure-jobs-host-output\", \"azure-jobs-host-archive\" 및 \"azure-jobs-dashboard\"를 <strong><em>제외하고</em></strong> 이름이 \"azure-jobs*\"인 다음 Blob 컨테이너 이름을 삭제합니다.\n\n이름이 \"AzureJobs*\"인 테이블을 삭제합니다.\n\n이름이 \"azure-jobs*\"인 큐를 삭제합니다.\n<h4><strong><em>대시보드는 0.4.0 베타로 배포된 WebJobs에 대해서만 작동합니다.</em></strong></h4>\n0.3.0 베타 버전의 SDK를 사용하여 WebJob을 배포한 경우 대시보드에 액세스하여 WebJob에 대한 로그를 보는 경우 \"호스트가 실행되지 않음\"에 대한 경고가 표시됩니다. 이 문제는 이 릴리스의 일부로 최신 버전의 대시보드가 모든 Azure Websites에 배포되기 때문에 발생합니다. 새 대시보드에는 0.3.0 베타와 호환되지 않는 일부 프로토콜 변경 내용이 있습니다. <strong>이 오류를 해결하려면 0.4.0-beta NuGet 패키지를 사용하도록 WebJob을 업데이트하고 WebJob을 다시 배포하세요</strong>.\n<h2><strong>피드백 제공 및 도움말 보기</strong></h2>\nMicrosoft Azure 웹 사이트 및 Microsoft Azure WebJobs SDK의 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a> 기능은 미리 보기로 제공됩니다. 이 환경을 개선하기 위한 모든 피드백은 항상 환영합니다.\n\n자습서와 직접 관련이 없는 질문이 있는 경우 <a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure 포럼</a>, <a href=\"https://forums.asp.net/1247.aspx\">ASP.NET 포럼</a> 또는 <a href=\"https://stackoverflow.com/\">StackOverflow.com</a> 게시할 수 있습니다. Twitter용 <a href=\"https://twitter.com/search?q=AzureWebJobs\">#AzureWebJobs</a> SDK 및 StackOverflow에 대한 태그 Azure-WebJobsSDK 사용합니다."
