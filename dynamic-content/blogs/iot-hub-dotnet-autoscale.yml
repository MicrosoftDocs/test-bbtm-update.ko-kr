### YamlMime:Yaml
ms.openlocfilehash: 21dbe05b2c876b7f2aad5957662393e2fc151a42
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905512"
Slug: iot-hub-dotnet-autoscale
Title: 예측 가능한 IoT Cloud를 사용하여 IoT 솔루션 관리 및 자동 크기 조정
Summary: 선택한 제한에 도달하기 전에 메시지의 특정 임계값을 충족할 때 IoT Hub를 더 높은 용량으로 자동으로 확장하는 것이 좋지 않을까요?  이 시점에서 IoT Hub에는 이 기능이 서비스에 기본 제공되어 있지 않지만 특정 메시지 임계값에 도달하여 IoT Hub를 모니터링하고 자동으로 크기 조정하기 위한 샘플 솔루션을 게시했습니다.
Content: >-
  <p>기업이 계속해서 IoT 프로젝트를 완전히 출시함에 따라 솔루션의 다양한 구성 요소를 관리하는 것이 운영의 중요한 부분이 됩니다. 고객이 디바이스 배포 곡선을 따라 어느 시점에 필요한 IoT Hub 용량에 대해서만 비용을 지불하면서 소규모로 시작할 수 있도록 Azure IoT Hub의 유연성은 IoT 솔루션 비용의 예측 가능성을 높이는 데 도움이 됩니다.</p>


  <p>그러나 IoT 솔루션의 디바이스 및 메시지 증가 속도가 불규칙할 수 있으므로 작업에 고유한 문제가 추가됩니다. 지정된 날짜에 디바이스에서 수집된 메시지 수가 선택한 IoT Hub 용량의 제한을 초과하면 IoT Hub가 확장되거나 시간이 다음 날(UTC 시간)으로 롤오버될 때까지 IoT Hub가 메시지를 거부하기 시작합니다. 이 제한에 도달하기 전에 메시지의 특정 임계값을 충족할 때 IoT Hub를 더 높은 용량으로 자동으로 확장하는 것이 좋을까&rsquo;요?</p>


  <p>이 시점에서 IoT Hub에는 이 기능이 서비스에 기본 제공되어 있지 않지만 특정 메시지 임계값에 도달하여 IoT Hub를 모니터링하고 자동으로 크기 조정하기 위한 샘플 솔루션을 게시했습니다.&nbsp; <a href="https://github.com/Azure-Samples/iot-hub-dotnet-autoscale">Azure-Samples 사이트에</a> 게시된 샘플은 <a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-overview" target="_blank">Azure Durable Functions</a> 프레임워크 및 <a href="https://www.nuget.org/packages/Microsoft.Azure.Management.IotHub/" target="_blank">IoT Hub 관리 클라이언트를 활용하여 IoT Hub</a> 메시지 할당량의 소비를 지속적으로 모니터링하고 필요한 경우 프로그래밍 방식으로 IoT Hub 용량을 확장합니다.</p>


  <h2>Azure Durable Functions</h2>


  <p>IoT Hub 크기 조정 솔루션을 오케스트레이션하기 위해 Azure Durable Functions 프레임워크의 <a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable-functions-singletons" target="_blank">Singleton Orchestrator</a> 패턴을 활용합니다. 이 패턴의 주요 이점은 지정된 IoT Hub에 대한 크기 조정 솔루션의 인스턴스가 정확히 한 번에 하나씩 실행되도록 하는 기능입니다. 이를 통해 동시에 실행되는 크기 조정 함수의 여러 인스턴스의 가능한 경합 조건에 대해 걱정할 필요가 없습니다. 패턴은 실제로 솔루션을 작동하는 세 가지 함수로 구성됩니다.</p>


  <ul>
      <li><strong>IotHubScaleInit</strong> - 이 함수는 일반 타이머에서 실행됩니다(기본적으로 시간당 한 번). 이 함수는 Orchestrator 함수의 인스턴스가 실행 중인지 확인하고, 실행되지 않은 경우 해당 인스턴스를 시작합니다.</li>
      <li><strong>IotHubScaleOrchestrator</strong> - 이 함수는 솔루션에 대한 Orchestrator를 구현합니다. 패턴의 Its&rsquo; 역할은 작업자 함수의 실행을 관리하는 것입니다.</li>
      <li><strong>IotHubScaleWorker</strong> - 이 함수는 IoTHub를 스케일링해야 하는지 확인하고 크기 조정해야 하는지 확인하는 작업을 수행하는 함수입니다.</li>
  </ul>


  <p>때때로(샘플에서 한 시간에 한 번) 실행되는 타이머 시작 <b>IoTHubScaleInit</b> 함수로 시작하고, 오케스트레이터 인스턴스가 이미 실행되고 있는지 확인하고, 그렇지 않은 경우 해당 함수를 시작합니다. IoTHubScaleInit 함수의 관련 코드는 다음과 같습니다. 일부 코드는 간결하게 제거되었습니다.</p>


  <pre class="prettyprint">

  const string IotHubScaleOrchestratorInstanceId = &quot;iothubscaleorchestrator_1&quot;;


  var existingInstance = await starter.GetStatusAsync(IotHubScaleOrchestratorInstanceId);


  if (existingInstance == null)

  {
      await starter.StartNewAsync(IotHubScaleOrchestratorName,IotHubScaleOrchestratorInstanceId, input: null);
  }</pre>


  <p>이 함수의 핵심은 상수 <em>인스턴스 ID</em>입니다. 기본적으로 오케스트레이터를 시작하면 시스템은 고유한 인스턴스 ID를 생성합니다. 이 경우 ID를 지정하여 해당 인스턴스가 GetStatusAsync 함수를 사용하여 이미 실행 중인지 확인하고 확인할 수 있습니다.</p>


  <p>이름에서 알 수 있듯이 IotHubScaleOrchestrator 함수는 솔루션 실행을 오케스트레이션합니다.&nbsp; 실행 오류에서 복구하고 다음 실행을 기다리는 동안 코드를 탈수할 수도 있습니다. 그러나 가장 중요한 것은 기존 인스턴스가 완료된 후 크기 조정 함수의 다른 인스턴스를 시작할 수 있도록 하는 것입니다.&nbsp; 이는 지정된 시간에 둘 이상의 인스턴스가 실행되지 않도록 하는 데 있어 중요한 부분입니다. 이 함수의 주요 부분은 다음과 같습니다.</p>


  <pre class="prettyprint">

  await context.CallActivityAsync(IotHubScaleWorkerName);


  DateTime wakeupTime = context.CurrentUtcDateTime.Add(TimeSpan.FromMinutes(JobFrequencyMinutes));

  await context.CreateTimer(wakeupTime, CancellationToken.None);


  context.ContinueAsNew(null);


  </pre>


  <p><em>worker</em> 함수를 호출하고 대기한 후 Durable Functions 프레임워크를 통해 타이머를 만듭니다. 컨텍스트 개체의 ContinueAsNew 메서드는 프레임워크에 이 인스턴스를 종료하고 타이머가 만료되면 다른 인스턴스가 실행되도록 예약하도록 지시합니다. 프레임워크는 나머지를 처리합니다.</p>


  <p>솔루션의 나머지 부분에서는 IoT Hub 사용 상태를 확인하고 필요한 경우 크기를 조정하는 실제 작업을 수행하는 IotHubScaleWorker 함수입니다.</p>


  <h2>IoT Hub 관리 클라이언트</h2>


  <p>IoT Hub 관리 클라이언트를 사용하면 IoT Hub의 구성 만들기, 삭제 및 관리를 포함하여 IoT Hub 서비스의 제어 평면과 상호 작용할 수 있습니다. 작업자 함수 내에서 클라이언트는 IoT Hub 서비스와 상호 작용하는 모든 작업을 수행합니다.</p>


  <p>예를 들어 코드에서 다음 두 코드 조각은 IoT Hub의 현재 구성 세부 정보를 가져옵니다. 이 중 가장 중요한 것은 현재 SKU(S1, S2 또는 S3) 및 현재 단위 수입니다. 두 번째 줄은 허브의 현재 운영 메트릭을 가져옵니다. 주요 관심사는 IoT Hub가 그날 수집한 현재 메시지 수를 제공하는 TotalMessages 메트릭입니다.</p>


  <pre class="prettyprint">

  IotHubDescription desc = client.IotHubResource.Get(ResourceGroupName, IotHubName);

  IPage&lt;iothubquotametricinfo&gt; mi = client.IotHubResource.GetQuotaMetrics(ResourceGroupName, IotHubName);

  </pre>


  <p>해당 정보가 있으면 현재 메시지 수를 해당 SKU/단위 조합에 대해 정의된 임계값과 비교하여 IoT Hub의 크기를 조정해야 하는 경우 샘플에 포함된 몇 가지 도우미 함수를 통해 결정합니다. 크기를 조정해야 하는 경우 위에서 얻은 IoTHubDescription 개체 내에서 SKU 및 단위를 업데이트하고 CreateOrUpdate 관리 함수를 활용하여 IoT Hub의 구성을 업데이트합니다. 이렇게 하면 기존 디바이스 또는 클라이언트를 중단하지 않고 IoT Hub의 스케일 업이 수행됩니다.</p>


  <pre class="prettyprint">

  desc.Sku.Name = newSkuName;

  desc.Sku.Capacity = newSkuUnits;

  client.IotHubResource.CreateOrUpdate(ResourceGroupName, IotHubName, desc);

  </pre>


  <h2>스케일 다운하는 중</h2>


  <p>대부분의 IoT 프로젝트의 궤적이 증가하고 있으며, 간단히 하기 위해 이 샘플은 IoT Hub의 스케일 업에 집중했습니다. 그러나 이전 메시지 볼륨이 감소할 때 비용을 낮추기 위해 IoT Hub를 자동으로 축소해야 하는 유효한 시나리오가 있습니다. 샘플 <a href="https://github.com/Azure-Samples/iot-hub-dotnet-autoscale" target="_blank">설명서</a>에서는 필요한 경우 IoT Hub를 축소하기 위한 솔루션을 수정하기 위한 몇 가지 제안을 제공합니다.</p>


  <p><em><strong>당신이 당신의 접시에 하나의 적은 운영 작업이 알고 <a href="https://github.com/Azure-Samples/iot-hub-dotnet-autoscale" target="_blank">샘플</a> 시도와 더 나은 오늘 밤 잠을 제공!</strong></em></p>


  <h2>샘플에 대한 몇 가지 참고 사항</h2>


  <ul>
      <li>이 샘플은 IoT Hub의 표준 계층에 대해서만 작동합니다. IoT Hub의 무료 계층은 크기를 조정할 수&rsquo; 없으므로&rsquo; 적용할 수 없습니다. 또한 IoT Hub의 무료 계층에서 표준 계층으로 직접 변환할 수 없습니다.</li>
      <li>이 샘플은 크기 조정 알고리즘의 한 가지 간단한 구현을 제공하지만 제공된 소스 코드를 사용하여 고유한 크기 조정 요구 사항에 맞게 사용자 지정할 수 있습니다.</li>
      <li>IoT 예산을 위해 각 단위 증가로 인해 상당한 용량과 비용이 모두 추가되므로 S3과 같은 더 높은 서비스 수준에 도달하면 IoT Hub의 크기를 자동으로 조정하는 데 적절한 고려 사항이 있어야 합니다.</li>
  </ul>
