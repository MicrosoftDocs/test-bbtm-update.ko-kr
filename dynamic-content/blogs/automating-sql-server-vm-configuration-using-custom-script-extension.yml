### YamlMime:Yaml
ms.openlocfilehash: 9f145675df4b73688be73e746dd0b06c9df8c785
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906259"
Slug: automating-sql-server-vm-configuration-using-custom-script-extension
Title: 사용자 지정 스크립트 확장을 사용하여 SQL Server VM 구성 자동화
Summary: Azure VM 사용자 지정 스크립트 확장을 사용하면 PowerShell의 기능을 활용하여 다양한 구성 자동화 시나리오를 구현할 수 있습니다. 이 게시물에서는 사용자 지정 스크립트 확장을 사용하여 SQL Server 2014 백업을 구성하는 샘플 시나리오를 제공합니다.
Content: "Azure <a href=\"https://azure.microsoft.com/blog/2014/04/24/automating-vm-customization-tasks-using-custom-script-extension/\">VM 사용자 지정 스크립트 확장을</a> 사용하면 스토리지 계정에서 PowerShell 스크립트(지원 파일과 함께)를 다운로드하고 실행할 수 있습니다. 이 기능은 간단해 보이지만 PowerShell의 기능을 통해 다양한 VM 사용자 지정 시나리오를 달성하기 위해 유연한 방식으로 VM 구성을 자동화할 수 있습니다. 이 블로그에서는 사용자 지정 스크립트 확장을 사용하여 Azure VM 이미지 갤러리에서 만든 SQL Server 2014 VM을 사용자 지정하는 단계를 안내합니다. SQL PowerShell 스크립트를 사용하여 <a href=\"https://msdn.microsoft.com/en-us/library/dn449496.aspx\">SQL Server Managed Backup을 azure에 Windows</a> 수 있도록 하며, 이를 통해 SQL Server 2014 데이터베이스를 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-how-to-use-blobs/#what-is\">Azure Blob Storage 서비스에</a> 백업할 수 있습니다.\n\n&nbsp;\n<h3>SQL Server 구성 스크립트</h3>\n구성 스크립트는 다음 코드 목록에 표시된 것처럼 간단합니다. <b><i>[Azure Storage 계정]</i></b> 및 <b><i>[Azure Storage 계정 키]를 Azure Storage</i></b> 자격 증명으로 바꾸어야 합니다. 이 스크립트를CustomScriptSQLPS.ps1 저장합니다 <strong> .</strong>\n<pre class=\"prettyprint\">#import SQL Server powershell module\nimport-module  sqlps -DisableNameChecking\n\n#global variables - replace storage account name and key\n$credentialName = \"AzureStorageCredential_\"+(RANDOM)\n$storageAccountName = \"[your Azure storage account]\"\n$storageAccountKey = \"[your Azure storage account key]\"\n\n# start SQL Agent Service                                                                \nwrite-host \"Starting SQL Server Agent service ...\"\nStart-Service  sqlserveragent -verbose\n\nCD SQLSERVER:SQL\\$env:COMPUTERNAME\\DEFAULT\n\nwrite-host \"Creating SQL credential ...\"\n$secureString = convertto-securestring $storageAccountKey  -asplaintext -force    \n\n# Create Credential\nNew-SqlCredential –name $credentialName –Identity $storageAccountName –secret $secureString \n\n$encryptionOption = New-SqlBackupEncryptionOption -NoEncryption\n\nwrite-host \"Enabling Managed SQL Server Backup...\"\n\nget-sqlsmartadmin | set-sqlsmartadmin -BackupEnabled $True -BackupRetentionPeriodInDays 7 -SqlCredential $credentialName -EncryptionOption $encryptionOption \n\nwrite-host \"Managed SQL Server backup current configuration:\"\nget-sqlsmartadmin | fl</pre>\n그러나 이 스크립트를 사용자 지정 스크립트 확장에 직접 전달할 수는 없습니다. 사용자 지정 스크립트 확장은 <b>NTAUTHORITY\\SYSTEM</b> 계정을 사용하여 스크립트를 실행하지만 계정에는 SQL 구성 명령을 실행하는 데 필요한 권한이 없습니다. 이 작업을 해결하기 위해 스크립트를 호출하기 전에 관리자 계정을 가장하는 별도의 부트스트랩 스크립트를 만듭니다.\n\n&nbsp;\n<h3>다른 자격 증명을 사용하여 스크립트 호출</h3>\n다음 콘텐츠를 <b> 사용하여start.ps1</b> 라는 다른 스크립트를 만듭니다. 설명을 쉽게 하기 위해 각 줄에 줄 번호를 추가했습니다.\n<pre class=\"prettyprint\">1: $password =  ConvertTo-SecureString \"[your admin account user password]\" -AsPlainText -Force\n2: $credential = New-Object System.Management.Automation.PSCredential(\"$env:COMPUTERNAME\\[your admin account]\", $password)\n3: $command = $file = $PSScriptRoot + \"\\CustomScriptSQLPS.ps1\"\n4: Enable-PSRemoting –force\n5: Invoke-Command -FilePath $command -Credential $credential -ComputerName $env:COMPUTERNAME\n6: Disable-PSRemoting -Force</pre>\n첫 번째 줄은 관리자의 암호를 일반 텍스트에서 보안 문자열로 가장하도록 변환합니다. 물론 스크립트에서 암호를 일반 텍스트로 사용하는 것이 가장 좋은 방법은 아닙니다. 나중에 다시 살펴보겠습니다. 두 번째 줄은 기본 스크립트를 실행하는 데 사용할 자격 증명을 만듭니다. VM을 프로비전할 때 선택한 것과 동일한 계정을 사용할 수 있습니다. 줄 3은 기본 스크립트의 절대 경로를 가져옵니다. 가장된 자격 증명으로 기본 스크립트를 실행하려면 <a href=\"https://msdn.microsoft.com/en-us/library/aa384426(v=vs.85).aspx\">winRM(Windows 원격 관리)</a>을 사용해야 합니다. 스크립트는 4줄에서 WinRM을 켜고 사용 후 WinRM을 해제합니다(줄 6). 마지막으로 5줄은 <b><i>자격 증명</i></b> 매개 변수를 사용하는 <b><i>Invoke-Command</i></b> cmdlet을 사용하여 기본 스크립트를 호출합니다.\n\n&nbsp;\n<h3>사용자 지정 스크립트 확장 사용</h3>\n이제 두 스크립트를 사용자 지정 스크립트 확장에 전달할 준비가 되었습니다. 두 스크립트를 스토리지 계정 아래의 스크립트 컨테이너<b>에</b> 업로드. 사용자 지정 스크립트 확장의 작동 방식에 대한 자세한 내용은 <a href=\"https://azure.microsoft.com/blog/2014/04/24/automating-vm-customization-tasks-using-custom-script-extension/\">첫 번째 참조 링크를</a> 참조하세요. 특히 기본 스토리지 계정 이외의 다른 스토리지 계정 및 스크립트 이외의 다른 컨테이너를 사용하려는 경우 더욱 <b><i>그렇습니다</i></b>. 그런 다음 워크스테이션에서 다음과 같은 스크립트를 실행할 수 있습니다(다시 줄 번호 사용).\n<pre class=\"prettyprint\">1: $servicename = \"[cloud service that hosts the VM]\"\n2: $vmname = \"[name of the VM]\"\n3: $vm = Get-AzureVM -ServiceName $servicename -Name $vmname\n4: Set-AzureVMCustomScriptExtension -ContainerName scripts -StorageAccountName '[your storage account name]' -VM $vm -FileName 'start.ps1', 'CustomScriptSQLPS.ps1' -Run 'start.ps1' | Update-AzureVM -Verbose\n5: $status = Get-AzureVM -ServiceName $servicename -Name $vmname\n6: $result = $status.ResourceExtensionStatusList.ExtensionSettingStatus.SubStatusList | Select Name, @{\"Label\"=\"Message\";Expression = {$_.FormattedMessage.Message }} \n7: $result |fl</pre>\n위 스크립트의 키 줄은 줄 4입니다. 사용자 지정 스크립트 확장이 VM에 설치되어 있는지 확인하고 확장에 <b>start.ps1</b> 및 <b>CustomScriptSQLPS.ps1 </b>모두 다운로드한 다음 <b>start.ps1</b>실행하도록 지시합니다.\n<h3></h3>\n&nbsp;\n<h3>외부 파일에서 암호 읽기</h3>\n스크립트를 작성하는 한 가지 좋은 방법은 일반 텍스트에 암호를 포함하지 않는 것입니다. 여기서는 암호 암호화/암호 해독에 인증서를 사용합니다. 사용자(또는 IT)가 이미 프라이빗 키가 있는 인증서를 대상 가상 머신에 배포했으며 동일한 인증서의 공개 키를 사용하여 기본 64 형식의 <b>password.txt</b> 파일로 암호를 암호화했다고 가정합니다.\n<pre class=\"prettyprint\">$cert = Get-ChildItem Cert:\\LocalMachine\\My\\[certificate thumbprint]\n$bytes = [Text.Encoding]::UTF8.GetBytes(\"abcdefg\")\n$encrypted = $cert.PublicKey.Key.Encrypt($bytes, $true)\n$base64 = [Convert]::ToBase64String($encrypted)\nSet-Content .\\password.txt $base64</pre>\n<b><i>makecert</i></b>를 사용하여 새 관리 인증서를 만드는 데 도움이 필요한 경우 <a href=\"https://msdn.microsoft.com/en-us/library/azure/gg551722.aspx\">이 링크를</a> 참조하세요. 또한 이 블로그 문서에서는 Azure VM을 사용하여 인증서를 배포하는 방법을 보여줍니다.\n\n<b>start.ps1</b> 수정하고 첫 번째 줄을 다음 줄로 바꿉 있습니다.\n<pre class=\"prettyprint\">$cert = Get-ChildItem Cert:\\LocalMachine\\My\\[certificate thumbprint]\n$base64 = Get-Content .\\password.txt\n$encrypted = [Convert]::FromBase64String($base64)\n$bytes = $cert.PrivateKey.Decrypt($encrypted,$true)\n$password = [Text.Encoding]::UTF8.GetString($bytes)</pre>\n마지막으로 파일 목록에 파일 이름을 추가하여 password.txt 파일이 사용자 지정 스크립트 확장명으로 배달되는지 확인합니다.\n<pre class=\"prettyprint\">Set-AzureVMCustomScriptExtension -ContainerName scripts -StorageAccountName '[your storage account name]' -VM $vm -FileName 'start.ps1', 'CustomScriptSQLPS.ps1', 'password.txt' -Run 'start.ps1' | Update-AzureVM -Verbose</pre>\n<h3></h3>\n&nbsp;\n<h3>결론</h3>\n이 블로그 문서에서는 사용자 지정 스크립트 확장을 사용하여 SQL Server 2014 VM을 사용자 지정하는 단계를 안내했습니다. 이 문서에서는 실제 시나리오에서 작동하는 사용자 지정 스크립트 확장을 보여 줍니다. 또한 이 문서에서는 가장 및 암호 암호화와 같은 몇 가지 일반적인 스크립팅 작업을 다룹니다.\n<h3>크레딧</h3>\n이 블로그 문서는 여러 사람의 공동 작업입니다. 그들의 공헌에 대한 마단 아루무감과 세투 스리니바산에게 큰 감사."
