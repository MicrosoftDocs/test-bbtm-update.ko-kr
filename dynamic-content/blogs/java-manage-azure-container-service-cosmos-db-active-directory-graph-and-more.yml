### YamlMime:Yaml
ms.openlocfilehash: 7d4a8a3d155c3d6e1fee53cd6b8d7041ee712ff1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903230"
Slug: java-manage-azure-container-service-cosmos-db-active-directory-graph-and-more
Title: 'Java: Azure Container Service, Cosmos DB, Active Directory Graph 등 관리'
Summary: Java용 Azure 관리 라이브러리 1.1을 릴리스했습니다. 이 릴리스에서는 Cosmos DB, Azure Container Service 및 레지스트리 Active Directory Graph 대한 지원을 추가합니다.
Content: "<p>Java용 Azure 관리 라이브러리 1.1을 릴리스했습니다. 이 릴리스에서는 다음을 지원합니다.</p> <table cellspacing=\"0\" cellpadding=\"2\" width=\"609\" border=\"0\"> <tbody> <tr> <td valign=\"top\" width=\"133\">Cosmos DB</td> <td valign=\"top\" width=\"281\">Azure Container Service 및 레지스트리</td> <td valign=\"top\" width=\"193\">Active Directory Graph</td></tr></tbody></table> <p><a title=\"https://github.com/Azure/azure-sdk-for-java\" href=\"https://github.com/Azure/azure-sdk-for-java\">https://github.com/Azure/azure-sdk-for-java</a></p> <h2>시작</h2> <p>Maven POM 파일에 다음 종속성 조각을 추가하여 1.1 버전의 라이브러리를 사용합니다.</p><pre class=\"prettyprint\">&lt;dependency&gt;\n    &lt;groupId&gt;com.microsoft.azure&lt;/groupId&gt;\n    &lt;artifactId&gt;azure&lt;/artifactId&gt;\n    &lt;version&gt;1.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>\n<h2>DocumentDB API를 사용하여 Cosmos DB 만들기</h2>\n<p>define()를 사용하여 Cosmos DB 계정을 만들 수 있습니다. create() 메서드 체인.</p><pre class=\"prettyprint\">DocumentDBAccount documentDBAccount = azure.documentDBs().define(\"myDocumentDB\")\n        .withRegion(Region.US_EAST)\n        .withNewResourceGroup(rgName)\n        .withKind(DatabaseAccountKind.GLOBAL_DOCUMENT_DB)\n        .withSessionConsistency()\n        .withWriteReplication(Region.US_WEST)\n        .withReadReplication(Region.US_CENTRAL)\n        .create();\n</pre>\n<p>또한 다음을 수행할 수 있습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-configure-for-high-availability\">DocumentDB API를 사용하여 Cosmos DB 만들기 및 고가용성 구성</a> \n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-configure-for-eventual-consistency\">DocumentDB API를 사용하여 Cosmos DB 만들기 및 최종 일관성으로 구성</a> \n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-configure-firewall\">DocumentDB API를 사용하여 Cosmos DB 만들기, 고가용성 구성 및 승인된 IP 주소 집합의 액세스를 제한하는 방화벽 만들기</a> \n<li><a href=\"https://github.com/Azure-Samples/cosmosdb-java-create-documentdb-and-get-mongodb-connection-string\">MongoDB API를 사용하여 Cosmos DB 만들기 및 연결 문자열 가져오기</a> </li></li></li></li></ul>\n<h2>Azure Container Registry 만들기</h2>\n<p>define()를 사용하여 Azure Container Registry를 만들 수 있습니다. create() 메서드 체인.</p><pre class=\"prettyprint\">Registry azureRegistry = azure.containerRegistries().define(\"acrdemo\")\n       .withRegion(Region.US_EAST)\n       .withNewResourceGroup(rgName)\n       .withNewStorageAccount(saName)\n       .withRegistryNameAsAdminUser()\n       .create();\n</pre>\n<p>listCredentials()를 사용하여 Azure Container Registry 자격 증명을 가져올 수 있습니다.</p><pre class=\"prettyprint\">RegistryListCredentials acrCredentials = azureRegistry.listCredentials();</pre>\n<h2>Kubernetes Orchestration을 사용하여 Azure Container Service 만들기</h2>\n<p>define()를 사용하여 Azure Container Service를 만들 수 있습니다. create() 메서드 체인.</p><pre class=\"prettyprint\">ContainerService azureContainerService = azure.containerServices().define(\"myK8S\")\n      .withRegion(Region.US_EAST)\n      .withNewResourceGroup(rgName)\n      .withKubernetesOrchestration()\n      .withServicePrincipal(servicePrincipalClientId, servicePrincipalSecret)\n      .withLinux()\n      .withRootUsername(rootUserName)\n      .withSshKey(sshKeys.getSshPublicKey())\n      .withMasterNodeCount(ContainerServiceMasterProfileCount.MIN)\n      .withMasterLeafDomainLabel(\"dns-myK8S\")\n      .defineAgentPool(\"agentpool\")\n            .withVMCount(1)\n            .withVMSize(ContainerServiceVMSizeTypes.STANDARD_D1_V2)\n            .withLeafDomainLabel(\"dns-ap-myK8S\")\n            .attach()\n      .create();\n</pre>\n<p>커뮤니티에서 개발한 <a href=\"https://github.com/fabric8io/kubernetes-client\">Kubernetes 클라이언트 라이브러리를 사용하여 Kubernetes 클라이언트를</a> 인스턴스화할 수 있습니다.</p><pre class=\"prettyprint\">KubernetesClient kubernetesClient = new DefaultKubernetesClient(config);</pre>\n<h2>Container Registry에서 Container Service의 Kubernetes로 배포</h2>\n<p>동일한 커뮤니티 개발 <a href=\"https://github.com/fabric8io/kubernetes-client\">Kubernetes 클라이언트 라이브러리</a> 및 Container Registry와 연결된 이미지 끌어오기 비밀을 사용하여 Azure Container Registry에서 Kubernetes 클러스터로 이미지를 배포할 수 있습니다.</p><pre class=\"prettyprint\">ReplicationController rc = new ReplicationControllerBuilder()\n     .withNewMetadata()\n          .withName(\"acssample-rc\")\n          .withNamespace(acsNamespace)\n          .addToLabels(\"acssample-nginx\", \"nginx\")\n     .endMetadata()\n     .withNewSpec()\n          .withReplicas(2)\n          .withNewTemplate()\n               .withNewMetadata()\n                    .addToLabels(\"acssample-nginx\", \"nginx\")\n               .endMetadata()\n               .withNewSpec()\n                    .addNewImagePullSecret(acsSecretName)\n                    .addNewContainer()\n                         .withName(\"acssample-pod-nginx\")\n                         .withImage(\"acrdemo.azurecr.io/samples/acssample-nginx\")\n                         .addNewPort()\n                              .withContainerPort(80)\n                         .endPort()\n                    .endContainer()\n                .endSpec()\n          .endTemplate()\n     .endSpec()\n     .build();\n \nkubernetesClient.replicationControllers().inNamespace(acsNamespace).create(rc);\n</pre>\n\n<p>컨테이너 레지스트리에서 Container Service의 Kubernetes로 이미지를 배포하는 <a href=\"https://github.com/Azure-Samples/acs-java-deploy-image-from-acr-to-kubernetes\">전체 샘플 코드를</a> 찾을 수 있습니다.<br>마찬가지로 <a href=\"https://github.com/Azure-Samples/app-service-java-deploy-image-from-acr-to-linux\">Azure Container Registry에서 App Service의 Linux 컨테이너로 이미지를 배포할 수 있습니다</a> .</p>\n<h2>구독 액세스를 사용하여 서비스 주체 만들기</h2>\n<p>서비스 주체를 만들고 define()를 사용하여 기여자 역할이 있는 구독에 할당할 수 있습니다. create() 메서드 체인.</p><pre class=\"prettyprint\">ServicePrincipal servicePrincipal = authenticated.servicePrincipals().define(\"spName\")\n     .withExistingApplication(activeDirectoryApplication)\n     // define credentials\n     .definePasswordCredential(\"ServicePrincipalAzureSample\")\n           .withPasswordValue(\"StrongPass!12\")\n           .attach()\n     // define certificate credentials\n     .defineCertificateCredential(\"spcert\")\n           .withAsymmetricX509Certificate()\n           .withPublicKey(Files.readAllBytes(Paths.get(certificate.getCerPath())))\n           .withDuration(Duration.standardDays(7))\n           // export credentials to a file\n           .withAuthFileToExport(new FileOutputStream(authFilePath))\n           .withPrivateKeyFile(certificate.getPfxPath())\n           .withPrivateKeyPassword(certPassword)\n           .attach()\n     .withNewRoleInSubscription(role, subscriptionId)\n     .create();\n</pre>\n<p>마찬가지로 다음을 수행할 수 있습니다.</p>\n<ul>\n<li><a href=\"https://github.com/Azure-Samples/aad-java-manage-service-principals\">서비스 주체 관리</a> \n<li><a href=\"https://github.com/Azure-Samples/aad-java-browse-graph-and-manage-roles\">그래프(사용자, 그룹 및 멤버) 찾아보기 및 역할 관리</a> \n<li><a href=\"https://github.com/Azure-Samples/aad-java-manage-passwords\">암호 관리</a> </li></li></li></ul>\n<h2>시도</h2>\n<p>에서&nbsp; <a href=\"https://github.com/azure/azure-sdk-for-java#sample-code\">https://github.com/azure/azure-sdk-for-java#sample-code</a>더 많은 샘플을 얻을 수 있습니다. 시도해 보시고 의견을 보내주세요(아래 전자 메일 또는 댓글을 통해).</p>\n<p>Azure의 Java에 대한 자세한 내용은 다음에서 <a href=\"https://azure.com/java\">https://azure.com/java</a>확인할 수 있습니다.</p>"
