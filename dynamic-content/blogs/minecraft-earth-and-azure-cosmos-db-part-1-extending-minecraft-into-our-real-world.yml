### YamlMime:Yaml
ms.openlocfilehash: a331c84b75a8ba6ca790086b97d5c31d6257b234
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905378"
Slug: minecraft-earth-and-azure-cosmos-db-part-1-extending-minecraft-into-our-real-world
Title: 'Minecraft Earth 및 Azure Cosmos DB 1부: Minecraft 실제 세계로 확장'
Summary: 이 게시물은 조직이 Azure Cosmos DB를 사용하여 실제 요구 사항을 충족하는 방법과 이러한 요구 사항을 충족하는 방법에 대한 두 부분으로 구성된 시리즈의 1부입니다.
Content: >-
  <p><i>이 게시물은 조직이 Azure Cosmos DB를 사용하여 실제 요구 사항을 충족하는 방법과 이에 대한 차이점&rsquo;에 대한 두 부분으로 구성된 시리즈의 1부입니다. 1부에서는 Minecraft Earth의 서비스 개발자가 Azure Cosmos DB를 선택하도록 이끈 과제와 이를 사용하여 전 세계의&mdash; 모든 플레이어가 수행한 거의 모든 작업을 매우 짧은 대기 시간으로 캡처하는 방법을&rsquo; 살펴봅니다. <a href="https://azure.microsoft.com/blog/minecraft-earth-and-azure-cosmos-db-part-2-delivering-turnkey-geographic-distribution" target="_blank">2부</a>에서는 솔루션&rsquo; 워크로드와 Minecraft Earth 서비스 개발자가 Azure Cosmos DB에서 빌드를 통해 어떻게 혜택을 얻었는지 살펴봅니다.</i></p>


  <h2>Minecraft 세계를 현실 세계로 확장</h2>


  <p>당신은&rsquo; 아마 당신이 그것을 직접 연주하지 않은&rsquo; 경우에도, Minecraft 게임에 대해 들었다. &rsquo;2011년 이후 1억 7,600만 부 이상 판매된 역대 최고의 비디오 게임입니다. 현재 Minecraft 1억 1,200만 명이 넘는 월간 플레이어를 보유하고 있으며, 이들은 원료, 공예 도구를 발견하고 수집하고, 몰입&rsquo;<a href="https://www.engadget.com/2015/03/04/how-minecraft-worlds-are-made/" target="_blank">형, 절차적으로 생성된 3D 세계에서</a> 구조나 토목 공사를 구축할 수 있습니다. 게임 모드에 따라 플레이어는 컴퓨터로 제어되는 적과 싸우고 다른 플레이어와&mdash; 경쟁할&mdash; 수도 있습니다.</p>


  <p>2019년 5월, Microsoft는 2019년 12월에 전 세계적으로 출시되기 시작한 Minecraft 지구의 출시를 발표했습니다. Minecraft 프랜차이즈의 이전 게임과 달리, Minecraft 지구는 플레이어가 증강 현실 (AR)의 힘을 통해 우리의 현실 세계 내에서 Minecraft 세계를 경험할 수 있도록하여 완전히 새로운 수준으로 일을합니다.</p>


  <p>Minecraft 지구 플레이어의 경우, 이 경험은 주변 세계와 깊이 통합되어 있지만 즉시 친숙&mdash;합니다. 그러나 Microsoft의 Minecraft 팀 개발자의 경우, gamewould&mdash;를 지원하는 데 필요한 신뢰할 수 있는 백 엔드 서비스를 Minecraft&mdash; 제공하려면 완전히 새로운 것을 구축해야 합니다.</p>


  <p>Minecraft 지구 서비스 개발 팀의 수석 소프트웨어 엔지니어인 Nathan Sosnovske는 다음과 같이 설명합니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;바닐라 Minecraft 자체 서버를 호스트할 수 있지만 중앙 집중식 서비스 기관이 없었습니다. Minecraft 지구는 중앙 집중식, 권위있는 서비스를&mdash; 기반으로 Minecraft합니다.&lsquo;&rsquo;&rsquo;&rdquo;</em></p>


  <p>이 사례 연구에서&rsquo;는 Minecraft 지구 서비스 개발자가 필요한&mdash; 것을 제공하는 데 직면한 몇 가지 과제와 이러한 요구를 충족하기 위해 Azure Cosmos DB를 사용하는 방법을 살펴보겠습니다.</p>


  <h2>기술적 과제: 게임 내 지연 방지</h2>


  <p>iOS 기반 및 Android 기반 AR 지원 장치에서 실행되는 Minecraft Earth 클라이언트 내에서 플레이어가 수행하는 거의 모든 작업은 핵심 Minecraft Earth 서비스에 기록됩니다. 각 쓰기는 눈에 띄는 게임 내 지연을 방지하기 위해 즉시 수락되고 승인되어야 하는 REST POST입니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;서비스 관점에서 Minecraft 지구는 짧은 대기 시간 쓰기 및 중간 대기 시간 읽기&rdquo;가 필요하다고 Sosnovske는 설명합니다. &ldquo; 클라이언트가 렌더링&mdash;하는 데 필요한 경우와 같이 클라이언트가 각 항목에 대한 확인이 필요하므로 쓰기가 빨라야 합니다. 예를 들어 플레이어가 리소스를 탭하여 리소스&rsquo;를 탭하면 해당 REST 요청이 처리되는 동안 시각적 개체가 중단되지 않도록&rsquo; 합니다. 서비스 뒤의 백업 모델을 읽기 위해 업데이트할 수 있을 때까지 클라이언트 쪽 시뮬레이션을 사용할 수 있으므로 중간 대기 시간 읽기가 허용됩니다.&rdquo;</em></p>


  <p>문제를 복잡하게 만들기 위해 Minecraft 지구 서비스 개발자는 플레이어&rsquo; 위치에 관계없이 짧은 대기 시간 쓰기를 보장해야 했습니다. 이렇게 하려면 Minecraft 지구가 제공되는 각 지리 내의 여러 위치에서 서비스 복사본을 실행하고, Minecraft 지구 클라이언트를 서비스가 배포된 가장 가까운 위치로 라우팅하는 기본 제공 인텔리전스가 필요했습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;Sosnovske는 미국 동부와 서부 해안 간의 일반적인 네트워크 대기 시간은 70~80밀리초&rdquo;라고 말합니다. &ldquo; 뉴욕의 플레이어가 샌프란시스코에서 실행되는 서비스에 의존해야 하거나 그 반대의 경우도 마찬가지라면 게임 내 지연은 용납될 수 없습니다. 동시에, 게임은 우리가 샌프란시스코와 뉴욕의 플레이어가 동일한 게임 내 경험을 공유 할 수 있도록하는 데 필요한 지구&mdash; Minecraft 호출됩니다. 이 모든 것을 제공하려면 서비스&mdash; 및 해당 데이터&mdash; 인을 각 지리 내에서 지리적으로 분산된 여러 데이터 센터를 복제해야 합니다.&rdquo;</em></p>


  <h2>솔루션: Azure Cosmos DB를 기반으로 하는 이벤트 소싱 패턴</h2>


  <p>기술 요구 사항을 충족하기 위해 Minecraft Earth 서비스 개발자는 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/introduction" target="_blank">Azure Cosmos DB</a>를 기반으로 <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing" target="_blank">이벤트 소싱 패턴을</a> 구현했습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;원래는 Azure Table Storage를 사용하여 추가 전용 이벤트 로그를 저장하는 것을 고려했지만 읽기 및 쓰기 대기 시간에 대한 SLA가 부족하여 이를 실현할 수 없다고&rdquo; Sosnovske는 말합니다. &ldquo; 궁극적으로 Azure Cosmos DB는 읽기 및 쓰기 모두에 대해 10밀리초 SLA를 제공하고 각 지리 내의 여러 위치에서 서비스를 복제하는 데 필요한 전역 배포 및 다중 마스터 기능을 제공하기 때문에 선택했습니다.&rdquo; </em></p>


  <p>이벤트 소싱 패턴을 사용하면 데이터의 현재 상태를 저장하는 대신 Minecraft Earth 서비스는 Azure Cosmos DB를 기반으로 하는&rsquo; 추가 전용 데이터 저장소를 사용하여 이 경우 데이터에&mdash; 대해 수행된 전체 일련의 작업을 기록하여 플레이어가 수행한 각 게임 내 작업에 매핑합니다. 성공적인 쓰기에 대한 즉각적인 승인이 클라이언트에 반환되면 추가 전용 이벤트 저장소를 구독하는 큐는 사후 처리를 처리하고 수집된 이벤트를 <a href="https://azure.microsoft.com/en-us/services/storage/blobs" target="_blank">Azure Blob Storage</a>에서 유지 관리되는 도메인 상태에 비동기적으로 적용합니다. 작업을 더욱 최적화하기 위해 Minecraft Earth 개발자는 이벤트 소싱 패턴을 도메인 기반 디자인과 결합하여 각 앱이&mdash; 인벤토리 항목, 캐릭터 프로필 또는 도전 과제&mdash;로 자체 이벤트 스트림을 도메인에 포함시켰습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;데이터를 추가 전용 로그에 저장된 이벤트 스트림으로 모델링하고 다양한 클라이언트 뷰&rdquo;를 구동하는 데 사용되는 메모리 내 모델 상태를 변경했다고 Sosnovske는 말합니다. &ldquo; 캐시된 상태는 Azure Blob Storage에서 유지 관리되며 읽기에 충분히 빠르며 Azure Cosmos DB에 대한 요청 단위 비용을 최소로 유지하는 데 도움이 됩니다. 여러 가지 면에서&rsquo; Azure Cosmos DB를 사용하여 수행한 작업은 실제로 복원력이 뛰어난 쓰기 캐시를 빌드하는&rsquo; 것과 같습니다.&rdquo;</em></p>


  <p>다음 다이어그램에서는 Azure Cosmos DB를 기반으로 하는 이벤트 소싱 패턴의 작동 방식을 보여 줍니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/26f4e883-2dd4-43eb-843b-46c0cc30b1f4.png"><img alt="Event sourcing pattern based on Azure Cosmos DB workflow diagram." border="0" height="534" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dfd8c989-e0f7-4554-8e02-d4fbc1046c4f.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure Cosmos DB 워크플로 다이어그램을 기반으로 하는 이벤트 소싱 패턴입니다." width="634"></a></p>


  <h2>Azure Cosmos DB 배치</h2>


  <p>Azure Cosmos DB를 사용할 때 개발자는 몇 가지 디자인 결정을 내려야 했습니다.</p>


  <p><b>Azure Cosmos DB API.</b> 개발자는 Azure Cosmos DB Core(SQL) API를 사용하기로 결정했습니다. 이 API는 다른 필요한 기능과 함께 최상의 성능과 가장 뛰어난 사용 편의성을 제공했기 때문입니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;시스템을 처음부터 빌드했기 때문에 기존 코드를&rdquo; 마이그레이션하는 데 도움이 되는 호환성 계층이 필요하지 않았다고 Sosnovske는 설명합니다. &ldquo; 또한 일부 Azure Cosmos DB 기능은 Core(SQL) API에서만 지원되는 <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.cosmos.transactionalbatch?view=azure-dotnet" target="_blank">TransactionalBatchare</a>&mdash;로 의존&mdash;합니다. 추가적인 이점으로, 우리 팀이 일반적으로 SQL 이미 잘 알고 있었기 때문에 Core(SQL) API는 정말 직관적이었습니다.&rdquo;</em></p>


  <p>자세한 내용은 <a href="https://devblogs.microsoft.com/cosmosdb/introducing-transactionalbatch-in-the-net-sdk/" target="_blank">.NET SDK의 TransactionalBatch 소개</a> 를 참조하세요.</p>


  <p><b>파티션 키입니다.</b> 개발자는 궁극적으로 사용자를 기반으로 Azure Cosmos DB 내에서 데이터를 논리적으로 분할하기로 결정했습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;원래 사용자 및 domainsagain&mdash;에 대한 데이터를 분할했습니다. 예를 들어 인벤토리 항목 또는 도전 과제&mdash;는 이 분석이 너무 세분화되어 Azure Cosmos DB 내에서 데이터베이스 트랜잭션을 최대한&rdquo; 활용하지 못하게 되었습니다.&rdquo;</em></p>


  <p><b>일관성 수준입니다.</b> <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels" target="_blank">Azure Cosmos DB에서 지원하는 5가지 일관성 수준</a> 중 개발자는 세션 일관성을 선택했으며, 이 일관성은 데이터가 제대로 작성되었는지 확인하기 위해 무거운 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/database-transactions-optimistic-concurrency" target="_blank">etag 검사</a>와 결합되었습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;이는 로그의 꼬리&rdquo;에 대한 포인터 역할을 하는 헤드 문서를 사용하여 추가 전용 로그로 모델링되는 데이터를 저장하는 방법 때문에 작동합니다. &ldquo; 데이터베이스에 쓰기에는 헤드 문서 및 해당 etag를 읽고, N+1 로그 ID를 파생시킨 다음, 이전에 읽은 etag를 사용하여 헤드 포인터를 덮어쓰고 로그 항목에 대한 새 문서를 만드는 트랜잭션 일괄 처리 작업을 생성하는 작업이 포함됩니다. 로그가 이미 기록된 경우 etag 검사 및 이미 존재하는 문서를 만들려는 시도는 트랜잭션 실패로 이됩니다. 이는 다른 요청이 쓰기에 영향을 주는지 또는 요청 &lsquo;&rsquo; 이 약간 오래된 데이터를 읽는지 여부에 관계없이 발생합니다.&rdquo;</em></p>


  <p>이 시리즈의 <a href="https://azure.microsoft.com/blog/minecraft-earth-and-azure-cosmos-db-part-2-delivering-turnkey-geographic-distribution" target="_blank">2</a><strong></strong>부에서는 현재 워크로드의 솔루션&rsquo;과 Minecraft Earth 서비스 개발자가 Azure Cosmos DB에서 솔루션을 빌드하는 데 어떻게 도움이 되었는지 살펴봅니다.</p>


  <h2>Azure Cosmos DB 시작</h2>


  <ul>
      <li><a href="https://azure.microsoft.com/en-us/services/cosmos-db/" target="_blank">Azure Cosmos DB</a>를 방문하세요.</li>
      <li><a href="https://azure.microsoft.com/en-us/solutions/gaming/" target="_blank">게임용 Azure</a>에 대해 자세히 알아보세요.</li>
  </ul>
