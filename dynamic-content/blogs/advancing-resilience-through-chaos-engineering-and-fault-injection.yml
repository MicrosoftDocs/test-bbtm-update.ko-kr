### YamlMime:Yaml
ms.openlocfilehash: 5dafcadcdc1d5edb4177a75eff01266d23f617aa
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902799"
Slug: advancing-resilience-through-chaos-engineering-and-fault-injection
Title: 카오스 엔지니어링 및 결함 주입을 통한 복원력 향상
Summary: 이 게시물은 Microsoft에서 자체 시스템의 유효성을 검사하는 방법의 예를 포함하여 일반적인 오류 조건의 유효성을 가장 잘 검사하는 방법에 대해 생각하도록 설계되었습니다.
Content: >-
  <p>&ldquo;<a href="https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/" target="_blank">지난 7월 내 게시물</a>에서 이 <a href="https://azure.microsoft.com/en-us/blog/tag/advancing-reliability/" target="_blank">고급 안정성 블로그 시리즈를</a> 처음 시작했을 때 신뢰할 수 있는 클라우드 서비스 세트를 제공하겠다는 노력의 일환으로 플랫폼 가용성을 개선하기 위해 진행 중인 몇 가지 이니셔티브를 강조했습니다. 제가 언급한 한 가지 영역은 오류 주입이었으며, 이를&rsquo; 통해 오류가 발생할 경우 시스템이 설계한 대로 수행될 것이라는 유효성을 점점 더 검증하고 있습니다. 오늘 Ive&rsquo;는 이 공간의 수석 프로그램 관리자인 <strong>Chris Ashton</strong>에게 이러한 광범위한 &lsquo;혼돈 엔지니어링&rsquo; 개념에 대해 간략하게 설명하고, 스트레스 테스트 및 합성 워크로드와 함께 이러한 개념을 이미 적용하는 방법에&rsquo; 대한 Azure 예제를 간략하게 설명하여 애플리케이션 및 서비스 복원력을 개선해 달라고 요청했습니다.&rdquo; - Mark Russinovich, CTO, Azure</p>


  <hr>

  <p>&nbsp;</p>


  <p>대규모 분산 애플리케이션을 개발하는 것이 더 쉬워진 적이 없지만 캐치가 있습니다. 예, 인프라는 퍼블릭 클라우드 덕분에 몇 분 안에 제공되며, 선택할 수 있는 많은 언어 옵션, 활용할 수 있는 오픈 소스 코드, 빌드할 마켓플레이스의 풍부한 구성 요소 및 서비스가 있습니다. 예, <a href="https://docs.microsoft.com/en-us/azure/architecture/framework/" target="_blank">Azure Well-Architected Framework 및 Azure</a> 아키텍처 <a href="https://docs.microsoft.com/en-us/Azure/architecture/" target="_blank">센터의</a> 다른 리소스와 같은 솔루션 아키텍처 및 디자인에 대한 지침을 제공하는 데 도움이 되는 좋은 참조 가이드가 있습니다. 그러나 애플리케이션 개발이 더&rsquo; 쉽지만 종속성 중단으로 인한 영향의 위험도 증가합니다. 그러나 드물게 제어할 수 없는 중단이 언제든지 발생할 수 있고, 종속성에 인시던트가 있거나, 주요 서비스/시스템이 응답 속도가 느려질 수 있습니다. 한 영역에서 사소한 중단 확대 될 수 있습니다 또는 다른 오래 된 부작용을 가질 수 있습니다. 이러한 서비스 중단은 개발자 생산성을 향상시키고, 고객 신뢰에 부정적인 영향을 미치며, 비즈니스 손실을 야기하고, 조직의&rsquo; 수익에도 영향을 줄 수 있습니다.</p>


  <p>최신 애플리케이션 및 빌드되는 클라우드 플랫폼은 오류에 대해 설계되고 지속적으로 유효성을 검사해야 합니다. 개발자는 알려진 오류 및 알 수 없는 오류 조건을 고려해야 하며, 애플리케이션 및 서비스는 중복성을 위해 설계되어야 하며, 알고리즘에는 다시 시도 및 백오프 메커니즘이 필요합니다. 시스템은 드물지만 불가피한 프로덕션 중단 및 중단으로 인한 시나리오 및 조건에 복원력이 있어야 합니다. 이 게시물은 Microsoft에서 자체 시스템의 유효성을 검사하는 방법의 예를 포함하여 일반적인 오류 조건의 유효성을 가장 잘 검사하는 방법에 대해 생각하도록 설계되었습니다.</p>


  <h2>복원력</h2>


  <p>복원력은 시스템이 무차별적인 이벤트에서 정상적으로&mdash; 실패하고 결국 복구할 수&mdash; 있는 기능입니다. 애플리케이션, 서비스 또는 플랫폼이 복원력이 있는지 확인하는 것은 오류에 대한 빌드만큼 중요합니다. 개별 구성 요소의 안정성을 격리하고 전체 시스템이 신뢰할 수 있을 것이라고 유추하는 것은 쉽고 유혹적이지만 실수일 수 있습니다. 복원력은 구성 요소뿐만 아니라 전체 시스템의 속성입니다. 시스템이 진정으로 복원력이 있는지 이해하려면 시스템이 실행되는 환경에서 전체 시스템의 복원력을 측정하고 이해하는 것이 가장 좋습니다. 하지만 어떻게 해야 하며 어디서부터 시작해야 할까요?</p>


  <h2>카오스 엔지니어링 및 오류 주입</h2>


  <p>카오스 엔지니어링은 프로덕션에서 직면하게 될 실제 오류 및 종속성 중단에 시스템을 적용하는 관행입니다. 오류 주입은 견고성 및 오류 처리의 유효성을 검사하기 위해 시스템에 오류를 의도적으로 도입하는 것입니다.</p>


  <p>일반적으로 장애 주입 및 비정상 엔지니어링 방식의 적용을 통해 설계자는 설계 &ndash; 에 대한 신뢰를 구축할 수 있으며 개발자는 애플리케이션의 복원력을 측정, 이해 및 개선할 수 있습니다. 마찬가지로 SRE(사이트 안정성 엔지니어)와 이 공간에서 더 넓은 팀을 책임지고 있는 사람은 누구나 서비스 수준 목표가 목표 내에 있는지 확인하고 프로덕션 환경에서 시스템 상태를 모니터링할 수 있습니다. 마찬가지로 운영 팀은 고객 사용을 위해 배포하기 전에 새 하드웨어 및 데이터 센터의 유효성을 검사할 수 있습니다. 릴리스 유효성 검사에 비정상 상태 기술을 통합하면 관리를 비롯한 모든 사용자가 조직에서 빌드하는 시스템에 대한 신뢰를 얻을 수 있습니다.</p>


  <p>개발 프로세스 전체에서 이미 수행 중인 것처럼 조기에 테스트하고 자주 테스트합니다. 애플리케이션 또는 서비스를 프로덕션 환경에 적용할 준비를 할 때 단위, 기능, 스트레스 및 통합 테스트를 추가하고 실행하여 일반적인 테스트 사례를 따릅니다. 적합한 경우 오류 사례에 대한 테스트 검사를 추가하고 오류 주입을 사용하여 오류 처리 및 알고리즘 동작을 확인합니다. 더 큰 영향을 미치려면 비정상 작업 엔지니어링이 실제로 시작되는 경우 오류 주입을 사용하여 엔드 투 엔드 워크로드(예: 스트레스 테스트, 성능 벤치마크 또는 가상 워크로드)를 보강합니다. 프로덕션 환경에서 실험을 수행하기 전에 사전 프로덕션 테스트 환경에서 시작하고 실제 고객 트래픽에 잠재적 영향을 도입하기 전에 가상 워크로드가 있는 안전한 환경에서 솔루션이 어떻게 동작하는지 이해합니다.</p>


  <p>유효성 검사 프로세스에서 오류 주입을 정상으로 사용하는 경우 다음 중 하나 이상이 포함될 수 있습니다.</p>


  <ul>
      <li><strong>테스트 환경에서 새 기능의 임시 유효성 검사:</strong><br>
  개발자는 테스트 VM(가상 머신)을 설치하고 격리된 상태로 새 코드를 실행할 수 있습니다. 기존 기능 또는 스트레스 테스트를 실행하는 동안 새 코드가 시나리오를 올바르게 처리한다는 것을 증명하기 위해 원격 종속성(예: SQL Server)에 대한 네트워크 액세스를 차단하기 위해 오류를 삽입할 수 있습니다.</li>
      <li><strong>배포 또는 복원력 게이트를 포함하여 CI/CD 파이프라인의 자동화된 오류 주입 검사:</strong><br>
  기존 엔드 투 엔드 시나리오 테스트(예: 통합 또는 스트레스 테스트)는 오류 주입으로 보강될 수 있습니다. 일부 오류가 적용된 상태에서 실행을 계속하거나 다시 실행하려면 일반 실행 후 새 단계를 삽입하기만 하면 됩니다. 오류를 추가하면 일반적으로 테스트에서 찾을 수 없는 문제를 찾거나 결국 발견될 수 있는 문제의 검색을 가속화할 수 있습니다.</li>
      <li><strong>인시던트 수정 유효성 검사 및 인시던트 회귀 테스트:</strong><br>
  오류 주입을 워크로드 또는 수동 실행과 함께 사용하여 인시던트를 발생시킨 것과 동일한 조건을 유도하여 인시던트 시나리오의 특정 인시던트 수정 또는 회귀 테스트의 유효성을 검사할 수 있습니다.</li>
      <li><strong>사전 프로덕션 환경에서 BCDR 드릴:</strong><br>
  데이터베이스 장애 조치(failover)를 발생하거나 스토리지를 오프라인 상태로 만드는 오류를 BCDR 드릴에서 사용하여 이러한 오류에 직면하여 시스템이 적절하게 동작하고 장애 조치(failover) 테스트 중에 데이터가 손실되지 않는지 확인할 수 있습니다.</li>
      <li><strong>프로덕션의 게임 일 수:</strong><br>
  &lsquo;게임 데이&rsquo;는 시스템이 이벤트를 올바르게 처리하는지 확인하기 위해 가동 중단 또는 인시던트를 조정한 시뮬레이션입니다. 여기에는 일반적으로 모니터링 시스템의 유효성 검사와 인시던트 중에 수행되는 인간 프로세스가 포함됩니다. 게임 일을 수행하는 Teams 오류 주입 도구를 활용하여 가상 시나리오를 제어된 방식으로 나타내는 오류를 오케스트레이션할 수 있습니다.</li>

  </ul>


  <h2>일반적인 릴리스 파이프라인</h2>


  <p>이 그림에서는 일반적인 릴리스 파이프라인과 오류 주입을 포함할 수 있는 기회를 보여줍니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ff02832d-0324-4078-832d-4d72f5d25263.png"><img alt="release pipeline chaos opportunities" border="0" height="285" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2287a5aa-df08-4221-9552-df191a7b542c.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; display: block; background-image: none;" title="" width="1024"></a></p>


  <p>&nbsp;</p>


  <p>다음과 같은 몇 가지 기본 구성 요소를 기반으로 하는 경우 오류 주입에 대한 투자가 더 성공적일 것입니다.</p>


  <ul>
      <li>조정된 배포 파이프라인.</li>
      <li>자동화된 ARM 배포.</li>
      <li>가상 실행기 및 가상 엔드 투 엔드 워크로드.</li>
      <li>모니터링, 경고 및 생명 사이트 대시보드.</li>
  </ul>


  <p>이러한 작업을 수행하면 추가 오버헤드 &ndash; 가 거의 또는 전혀 없는 배포 프로세스에 오류 주입을 통합할 수 있으며 프로덕션으로 가는 길에 코드 흐름을 제어하는 데 사용할 수 있습니다.</p>


  <p>지역화된 랙 정전 및 장비 오류는 과거 인시던트에 대한 근본 원인 분석에서 단일 실패 지점으로 발견되었습니다. 서비스가 영향을 받고 복원력이 없는 Learning 프로덕션에서 이러한 이벤트 중 하나는 대기 중인 엔지니어에게 시간 제한이 있고 고통스럽고 비용이 많이 드는 프로세스입니다. 오류 주입을 사용하여 제어된 환경 및 시간 범위에서 릴리스 파이프라인 전체에서 이러한 오류에 대한 복원력의 유효성을 검사할 수 있는 몇 가지 기회가 있으며, 코드 작성자가 발견된 문제에 대한 조사를 이끌 수 있는 더 많은 기회를 제공합니다. 코드 변경 또는 새 코드가 있는 개발자는 VM을 중지하거나, 서비스에 대한 액세스를 차단하거나, 단순히 사용 권한을 변경하는 등 오프라인 &ndash; 으로 종속성을 취하는 것을 시뮬레이션하는 오류가 있는 기능 테스트 및 도구를 사용하여 테스트 환경을 만들고, 코드를 배포하고, 임시 실험을 수행할 수 있습니다. 스테이징 환경에서는 자동화된 엔드 투 엔드 및 통합 테스트 또는 기타 가상 워크로드에 유사한 오류를 삽입할 수 있습니다. 그런 다음 테스트 결과 및 원격 분석을 사용하여 오류의 영향을 확인하고 필요한 경우 코드 흐름을 차단하는 기준 성능과 비교할 수 있습니다.</p>


  <p>사전 프로덕션 또는 &lsquo;카나리아&rsquo; 환경에서 자동화된 실행기를 다시 종속성에 대한 액세스를 차단하거나 오프라인으로 전환할 수 있는 오류와 함께 사용할 수 있습니다. 그런 다음 모니터링, 경고 및 생명 사이트 대시보드를 사용하여 가동 중단이 관찰되었는지 확인하고 시스템이 복원력을 입증한 문제에&mdash; 대해 반응하고 보정했는지 확인할 수 있습니다. 이와 동일한 환경에서 SR 또는 운영 팀은 BCDR(비즈니스 연속성/재해 복구) 훈련을 수행하여 오류 주입을 사용하여 스토리지 또는 데이터베이스를 오프라인으로 전환하고 다시 한 번 시스템 메트릭을 모니터링하여 복원력 및 데이터 무결성의 유효성을 검사할 수 있습니다. 이러한 동일한 카나리아 활동은 실제 고객 트래픽이 있는 프로덕션 환경에서도 수행할 수 있지만, 이렇게 하면 고객에게 더 많은 영향을 미칠 수 있으므로 파이프라인의 앞부분에서 오류 주입을 활용한 후에만 이 작업을 수행하는 것이 좋습니다. 이러한 사례를 설정하고 배포 파이프라인에 오류 주입을 통합하면 체계적이고 제어된 복원력 유효성 검사를 통해 팀이 최종 고객에게 영향을 주지 않고 문제를 완화하고 애플리케이션 안정성을 개선할 수 있습니다.</p>


  <h2>Microsoft에서 오류 주입</h2>


  <p>Microsoft에서 일부 팀은 유효성 검사 파이프라인 및 자동화된 테스트 패스의 초기에 오류 주입을 통합합니다. 각 팀은 정상적으로 자동화된 유효성 검사 게이트에서 스트레스 테스트, 성능 벤치마크 또는 가상 워크로드를 실행하며 기준이 설정됩니다. 그런 다음, 이번에는 CPU 압력, 디스크 IO 지터 또는 네트워크 대기 시간과 같은 오류가 적용 &ndash; 된 상태에서 워크로드가 다시 실행됩니다. 워크로드 결과가 모니터링되고, 원격 분석이 검사되고, 크래시 덤프가 검사되고, SLA(서비스 수준 지표)가 SLO(서비스 수준 목표)와 비교하여 영향을 측정합니다. 결과가 실패로 간주되는 경우 코드가 파이프라인의 다음 단계로 전달되지 않을 수 있습니다.</p>


  <p>다른 Microsoft 팀은 일반 비즈니스 연속성, BCDR(재해 복구) 훈련 및 게임 데이에 오류 주입을 사용합니다. 일부 팀은 매월, 분기별 또는 반년마다 BCDR 훈련을 수행하고 오류 주입을 사용하여 재해를 유도하고 복구 프로세스와 경고, 모니터링 및 라이브 사이트 프로세스의 유효성을 모두 검사합니다. 이는 프로덕션 자체에서 실제 고객 트래픽으로 사용되기 전에 사전 프로덕션 카나리아 환경에서 수행되는 경우가 많습니다. 또한 일부 팀은 게임 데이를 수행하여 과거 인시던트의 복제와 같은 가상 시나리오를 마련하고 오류 주입을 사용하여 오케스트레이션을 지원합니다. 이 경우 오류는 VM 충돌, 네트워크 액세스 끄기, 데이터베이스 장애 조치(failover) 또는 전체 데이터 센터 오프라인 시뮬레이트 시뮬레이트처럼 더 파괴&mdash;적일 수 있습니다. 다시 말하지만, 일반 라이브 사이트 모니터링 및 경고가 사용되므로 DevOps 및 인시던트 관리 프로세스도 유효성을 검사합니다. 관련된 모든 사용자에게 친절하게 대하기 위해 이러한 활동은 일반적으로 업무 시간 동안 수행되며 하룻밤이나 주말에는 수행되지 않습니다.</p>


  <p>또한 운영 팀은 오류 주입을 사용하여 고객이 사용하기 위해 배포하기 전에 새 하드웨어의 유효성을 검사합니다. 드릴은 전원이 랙 또는 데이터 센터에 차단되는 곳에서 수행되므로 모니터링 및 백업 시스템을 관찰하여 예상대로 작동하도록 할 수 있습니다.</p>


  <p>Microsoft에서는 카오스 엔지니어링 원칙과 결함 주입 기술을 사용하여 배송하는 제품에 대한 복원력과 자신감을 높입니다. 고객에게 제공하는 애플리케이션과 개발자가 제공하는 서비스의 유효성을 검사하는 데 사용됩니다. 기본 Azure 플랫폼 자체의 유효성을 검사하고 새 하드웨어를 배포하기 전에 테스트하는 데 사용됩니다. 이와는 별도로, 이러한 특성은 Azure 플랫폼&mdash;의 전반적인 안정성과 서비스 품질 향상에 기여합니다.</p>


  <h2>의도하지 않은 결과</h2>


  <p>오류 주입은 강력한 도구이며 주의해서 사용해야 합니다. 테스트 또는 사전 프로덕션 환경에 도입된 오류도 프로덕션에 영향을 미치지 않도록 안전 장치를 마련해야 합니다. 오류 시나리오의 폭발 반경은 다른 구성 요소 및 최종 고객에게 미치는 영향을 최소화하기 위해 포함되어야 합니다. 오류를 주입하는 기능은 액세스를 제한하여 사고를 방지하고 악의적인 의도를 가진 해커의 잠재적 사용을 방지해야 합니다. 오류 주입은 프로덕션에서 사용할 수 있지만 신중하게 계획하고, 사전 프로덕션에서 먼저 테스트하고, 폭발 반경을 제한하고, 필요한 경우 실험이 갑자기 종료될 수 있도록 장애 조치(failsafe)를 갖습니다. <a href="https://www.history.com/news/chernobyl-disaster-timeline" target="_blank">1986년 체르노빌 원자력 사고</a>는 고장 주입 훈련이 잘못 된 냉정한 예입니다. 의도하지 않은 결과로부터 시스템을 격리하는 데 주의하세요.</p>


  <h2>서비스로서의 혼돈?</h2>


  <p><a href="https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/" target="_blank">이 이전 블로그 게시물에서</a> Mark Russinovich가 언급했듯이, 우리의 목표는 고객과 파트너가 자체 애플리케이션 및 서비스에서 동일한 유효성 검사를 수행할 수 있도록 네이티브 오류 주입 서비스를 사용할 수 있도록 하는 것입니다. 이 공간은 클라우드 서비스 안정성을 개선하고 드물지만 불가피한 중단의 영향을 줄일 수 있는 많은 잠재력을 가진 흥미로운 공간입니다. 이 공간에는 많은 팀이 흥미로운 작업을 수행하고 있으며&rsquo;, Azure 서비스를 빌드하는 내부 개발자가 Microsoft 365 같은 기본 제공 Azure 서비스를 위해 이러한 다양한 도구와 결함을 함께 사용하여 더 쉽게&mdash; 생활할 수 있는 최선의 방법을 모색합니다Microsoft Teams 및 Dynamics, 그리고 결국 고객과 파트너가 동일한 도구를 사용하여 자체 애플리케이션 및 솔루션에 혼란을 일으키고 궁극적으로 복원력을 향상시킵니다.</p>
