### YamlMime:Yaml
ms.openlocfilehash: d98586dda378129d326e7b12cbf637845d28f173
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908168"
Slug: real-world-windows-azure-davide-bedin-describes-the-akite-retail-management-solution
Title: 'Real World Windows Azure: Davide Bedin이 aKite Retail Management Solution에 대해 설명합니다.'
Summary: Real World Windows Azure 시리즈의 일환으로 BEDIN Shop Windows Systems의 최고 기술 책임자인 Davide Bedin과 이야기를 나누었습니다.
Content: '<p>Real World Windows Azure 시리즈의 일환으로 BEDIN Shop Systems의 최고 기술 책임자인 Davide Bedin과 함께 aKite 소매 관리 솔루션을 제공하기 위해 Windows Azure에 장기적인 전략적 베팅을 한 방법에 대해 이야기했습니다. 이단&rsquo; 그가 무슨 말을했다 :</p>  <p><b>David Ingham: </b><b>고객에게 제공하는 회사 및 aKite 서비스에 대해 알려주세요.</b><b></b></p>  <p><b>Davide Bedin</b>: 이탈리아 트레비소 코르누다에 본사를 둔 BEDIN Shop Systems는 소매업체를 위한 POS(PoS) 및 매장 내 시스템을 개발하는 데 20년 이상의 경험을 보유하고 있습니다. Microsoft는 중소 규모의 소매점, 독립 매장 및 체인을 위한 솔루션에서 Microsoft 기술을 개척하여 국제적인 명성을 쌓아가고 있습니다.<img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2275.Bedin1.png" alt="" style="float: right;" height="374" border="0" width="259"></p>  <p>aKite는 Windows <a target="_blank" href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=cmp_pst001_blg_post0117gen">Azure</a>에서 전적으로 설계된 SaaS(Software as a Service) 솔루션입니다. Windows Azure에서 호스팅되는 aKite <i>Retail Web Services</i>는 데이터를 저장 및 분석하고 본사 및 기타 외부 웹 서비스와 저장소를 연결합니다.</p>  <p>프런트 스토어 작업 및 백 <i></i> 오피스 작업에 대한 <i>SHOP.net POS.net</i> 두 개의 스마트 클라이언트 애플리케이션은 연결이 끊어지고 피어 투 피어 방식으로 협력하므로 저장소에 서버가 필요하지 않습니다. 이는 자주 활용도가 저조한 서버가 단일 실패 지점이 되고 불필요한 에너지를 소비하기 때문에 주요 이점입니다.</p>  <p>aKite는 매장의 복잡성을 제거하여 소매업체의 삶을 더 간단하게 만듭니다. aKite는 또한 자본 투자가 필요하지 않고 좌석당 올 인클루시브 및 매장당 요금만 부과되므로 경제적 이익을 제공합니다. 배포가 너무 간단하기 &ndash; ClickOnce 설치하면 손상된 PC를 교체하거나 몇 분 만에 새 저장소를 열 수 있습니다.</p>  <p><b>DI: 메시지 기반 아키텍처를 사용하여 해결하려는 주요 과제는 무엇인가요?</b><b></b></p>  <p><b>DB</b>: 첫 번째 과제는 Windows Azure에서 호스트되는 스마트 클라이언트와 Retail Web Services 간의 데이터 동기화였습니다. 가격표 업데이트는 웹 서비스에서 스마트 클라이언트로의 이벤트 알림이 필요한 구체적인 예제 중 하나입니다. &rsquo;소규모에서는 어렵지 않지만 aKite는 많은 중간 크기의 체인과 많은 매장이 있는 매우 큰 체인을 지원하므로 이러한 알림을 배포하는 집계 작업은 실제 과제를 나타냅니다. aKite는 소매업체가 이러한 업데이트를 미리 준비할 수 있는 기능을 제공하지만, 가능한 한 빨리 클라이언트에 업데이트를 전파해야 하는 요구 사항이 있습니다. 또한 수백 개의 매장이 참여하는 경우에도 소매업체가 거의 예고 없이 이러한 업데이트를 수행해야 하는 경우도 있습니다. 이 문제를 해결하는 기존의 방법은 클라이언트가 웹 서비스를 집중적으로 폴링하고 업데이트를 확인하는 것입니다. 이 기술에는 웹 서비스에서 리소스를 사용하는 명백한 단점이 있습니다. <a target="_blank" href="https://www.windowsazure.com/en-us/home/features/service-bus/?WT.mc_id=cmp_pst001_blg_post0117bus">Windows Azure Service Bus</a> 클라이언트에 이벤트를 푸시하는 효율적인 방법을 제공하고 애플리케이션이 핵심 작업에 집중할 수 있으므로 훨씬 더 적합합니다.</p>  <p>이 동기화 시나리오에서 Service Bus 사용하여 경험을 쌓은 후 우아함과 잠재력에 대해 자세히 알아보았습니다. aKite Retail Web Services를 구성하는 구성 요소 간의 비동기 메시징이 크게 도움이 될 수 있음을 확인했습니다. 여기서 목표는 메시지가 저장된 데이터베이스의 부하를 줄이고 복원력과 안정성을 향상시키는 솔루션을 찾는 것이었습니다.</p>  <p><b>DI: Service Bus 이러한 기술적 과제를 해결하는 데 어떻게 도움이 되었나요?</b><b></b></p>  <p><b>DB</b>: 일반적으로 Service Bus 통해 aKite 비즈니스 논리에만 집중할 수 있으므로 이벤트 알림 및 메시징 처리에서 서비스를 완화할 수 있습니다. 동기화 시나리오의 경우 Service Bus 채택하면 클라이언트에서 들어오는 aKite Retail Web Services에 대한 호출이 60% 줄어듭니다. 또한 알림을 보내고 사용하는 성능도 향상되었습니다.</p>  <p>Service Bus 클라이언트-서비스 연결과 소매 웹 서비스를 &ndash; 함께 구성하는 구성 요소 간에 느슨하게 결합된 아키텍처를 만들 수 있으므로 배달이 아닌 메시지의 비즈니스 콘텐츠에 집중할 수 있습니다. 구성 요소는 궁극적으로 처리할 구성 요소를 인식하지 않고 Service Bus 큐 및 토픽에 메시지를 보냅니다. 이 느슨한 결합을 통해 다양한 시나리오를 창의적으로 결합할 수 있었고 향후 새로운 예기치 않은 시나리오를 쉽게 지원할 수 있습니다. 예를 들어 새 방식으로 서버 이벤트를 처리하는 새 서비스 구성 요소를 만들어야 하는 경우 새 시나리오와 관련된 메시지만 일치하도록 필터를 사용하여 새 구독을 만들 수 있습니다.</p>  <p>제 관점에서 서비스 아키텍처에 Service Bus 도입하면 즉각적인 요구 사항을 해결하는 것보다 더 많은 가치를 가져다 주며, 이는 시간이 지남에 따라 더 풍부하고 빠른 방식으로 변화와 진화에 대응할 수 있어야 한다는 것을 의미하는 미래의 교정&rdquo; 수준을 &ldquo;제공합니다.</p>  <p><b>DI: 실제로 Service Bus 사용하여 빌드한 메시징 시나리오는 무엇인가요?</b><b></b></p>  <p><b>DB</b>: 현재 다양한 시나리오를 지원하기 위해 Service Bus 사용합니다. 앞서 언급했듯이 첫 번째 시나리오는 저장소에서 실행되는 aKite 스마트 클라이언트에 대한 데이터 업데이트 및 기타 정보를 알리는 것입니다. 알림 메시지는 Service Bus 토픽으로 전송됩니다. 메시지의 속성은 알림을 받아야 하는 저장소를 식별합니다. 각 클라이언트에는 관련 메시지만 수신하도록 하는 필터를 사용하여 토픽에 대한 자체 구독이 있습니다. 업데이트 준비 및 알림은 aKite의 모든 서비스 구성 요소에서 신호를 받은 이벤트에 대한 응답으로 수행됩니다. 이러한 이벤트는 토픽으로 전송되고 작업자 역할에 의해 구독에서 사용되는 메시지로도 표시됩니다.</p>  <p>또 다른 시나리오에서는 각 매장 POS.net 클라이언트가 Service Bus 큐를 통해 aKite Retail Web Services에 판매 문서를 보냅니다. 큐는 매장 체인의 판매 활동의 갑작스럽고 예기치 않은 변화에 대응하는 데 도움이 됩니다. 많은 작업자 역할 인스턴스는 항상 들어오는 메시지에 대한 큐를 수신 대기합니다. 큐의 부하 평준화 특성은 부하의 피크와 트로프가 큐 길이를 쉽게 수용할 수 &ndash; 있다는 것을 의미합니다. 전체 부하가 지속적으로 증가하는 상황이 발생하면 작업을 공유하기 위해 더 많은 작업자 역할 인스턴스를 추가할 수 있습니다.</p>  <p>소매 웹 서비스 내에서 또 다른 Service Bus 메시징 패턴이 사용됩니다. POS.net 클라이언트의 판매 문서는 백 엔드 처리의 일부로 여러 단계를 통과하며, 그 중 상당수는 계산 집약적이거나 데이터베이스와의 광범위한 상호 작용이 필요합니다. 이러한 각 단계는 작업자 역할에 의해 수행되며 역할 간의 통신은 Service Bus 항목과 함께 수행됩니다. 각 작업자 역할은 여러 구독을 수신 대기하며, 각 구독은 전체 매장 체인 또는 대형 체인의 경우 매장의 하위 집합에 대한 데이터를 전달합니다. &nbsp;작업이 완료되면 각 처리 단계에서 문서를 다음 단계로 전달하는 메시지를 토픽에 보냅니다. 다른 작업자 역할은 다양한 작업자 인스턴스 간에 전체 워크로드를 동적으로 자동으로 분할할 수 있으므로 시스템 부하를 처리하기 위해 적절하게 확장할 수 있는 매우 유연하고 아키텍처가 생성됩니다.</p>  <p align="center"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2816.Bedin2.jpg" alt="" border="0"></p>  <p><b>DI: Service Bus 작업할 때 개발자 환경을 어떻게 설명하나요?</b><b></b></p>  <p>Service Bus 개체 모델은 명확하며 샘플 및 설명서에서 설명하는 사용 시나리오는 가능한 여러 사용 사례를 다룹니다. Service Bus Windows Azure 클라이언트 라이브러리에 직접 구워지는 것은 추가적인 간소화입니다.</p>  <p>우리는 Service Bus 얼리 어답터였으며 초기 기술의 경우와 마찬가지로 처음에는 많은 도구 지원을 사용할 수 없었습니다&rsquo;. <a target="_blank" href="https://code.msdn.microsoft.com/windowsazure/Service-Bus-Explorer-f2abca5a">Service Bus 탐색기 </a>도구의 등장은 Service Bus 탐색, 디버그 및 테스트하는 매우 중요한 도구였습니다.</p>  <p><b>DI: 최종 고객에게 솔루션(서비스)을 롤아웃했나요?</b><b></b></p>  <p>예, Service Bus 이제 aKite의 모든 사용자를 지원합니다.&nbsp; 우리는 지속적으로 새로운 기능과 개선 사항을 롤아웃하고 있으며, 제품의 지속적인 성장으로 인한 기존 및 신규, 크고 작은 모든 고객 혜택을 제공합니다.</p>'
