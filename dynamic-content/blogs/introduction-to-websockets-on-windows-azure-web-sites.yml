### YamlMime:Yaml
ms.openlocfilehash: e6e5807492a82dbed4a9b6a00d3eef67d515d99b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139901154"
Slug: introduction-to-websockets-on-windows-azure-web-sites
Title: Windows Azure 웹 사이트의 WebSockets 소개
Summary: Windows Azure Web Sites는 최근에 WebSocket 프로토콜에 대한 지원을 추가했습니다.  .NET 개발자와 node.js 개발자는 이제 애플리케이션에서 WebSockets를 사용하도록 설정하고 사용할 수 있습니다.
Content: >-
  Azure 웹 사이트는 최근에 WebSocket 프로토콜에 대한 지원을 추가했습니다..NET 개발자와 node.js 개발자는 이제 애플리케이션에서 WebSockets를 사용하도록 설정하고 사용할 수 있습니다.


  웹 사이트의 구성 탭에는 애플리케이션에 대한 WebSockets 지원을 사용하도록 설정하는 새로운 옵션이 있습니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/7563.a.png-550x0.png"><img class="alignnone size-medium wp-image-134071" alt="7563.a.png-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7563.a.png-550x0-346x369.png" width="346" height="369" /></a>


  웹 사이트에 WebSockets를 사용하도록 설정하면 ASP.NET(v4.5 이상) 및 node.js 개발자는 해당 프레임워크의 라이브러리 및 API를 사용하여 WebSockets를 사용할 수 있습니다.

  <h4>ASP.NET SignalR 채팅 예제</h4>

  SignalR은 데이터를 전송하기 위해 라이브 HTTP 연결이 필요한 실시간 웹앱을 빌드하기 위한 오픈 소스 .NET 라이브러리입니다.SignalR 라이브러리에 대한 소개 문서와 세부 정보가 있는 훌륭한 <a href="https://www.asp.net/signalr/overview/signalr-20" target="_blank">사이트가</a> 있습니다.


  SignalR은 기본적으로 WebSockets를 프로토콜로 지원하므로 SignalR은 Windows Azure 웹 사이트에서 연결된 웹앱을 실행하는 데 적합합니다.예를 들어 이 <a href="https://www.asp.net/signalr/overview/signalr-20/getting-started-with-signalr-20/tutorial-getting-started-with-signalr-20" target="_blank">샘플 채팅 애플리케이션</a>은 Windows Azure 웹 사이트에서 실행할 수 있습니다.


  아래 스크린샷은 SignalR 채팅 샘플의 구조를 보여 줍니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/3683.B.jpg-400x0.jpg"><img class="alignnone size-medium wp-image-134061" alt="3683.B.jpg-400x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3683.B.jpg-400x0-366x369.jpg" width="366" height="369" /></a>


  Windows Azure 웹 사이트에서 웹 애플리케이션을 만들고, 애플리케이션에 WebSockets를 사용하도록 설정하고, SignalR 채팅 샘플을 업로드한 후에는 Windows Azure 웹 사이트에서 고유한 미니 채팅방을 실행할 수 있습니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7838.C.jpg-550x0.jpg"><img class="alignnone size-full wp-image-134051" alt="7838.C.jpg-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7838.C.jpg-550x0.jpg" width="550" height="166" /></a>


  Fiddler의 원시 HTTP 추적(아래 참조)은 SignalR의 클라이언트 쪽 부분에서 보낸 WebSockets 프로토콜 업그레이드 요청이 웹 서버와 WebSockets 연결을 협상하는 방법을 보여 줍니다.

  <pre><span style="font-family: 'courier new', courier;">Request snippet:</span>

  <span style="font-family: 'courier new', courier;">GET <a href="https://sigr-chat-on-waws.xxxx.net/signalr/connect?transport=webSockets snip HTTP/1.1" target="_blank">https://sigr-chat-on-waws.xxxx.net/signalr/connect?transport=webSockets snip HTTP/1.1 </a></span>

  <span style="font-family: 'courier new', courier;">Origin: https://sigr-chat-on-waws.xxxx.net</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Key: hv2icF/iR1gvF3h+WKBZIw==</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Version: 13</span>

  <span style="font-family: 'courier new', courier;">…</span>

  <span style="font-family: 'courier new', courier;">Response snippet:</span>

  <span style="font-family: 'courier new', courier;">HTTP/1.1 101 Switching Protocols</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Server: Microsoft-IIS/8.0</span>

  <span style="font-family: 'courier new', courier;">X-Content-Type-Options: nosniff</span>

  <span style="font-family: 'courier new', courier;">X-Powered-By: ASP.NET</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Accept: Zb4I6w0esmTDHM2nSpndA+noIvc=</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">…</span></pre>

  SignalR을 사용하여 실시간 웹 애플리케이션을 빌드하는 방법에 대한 자세한 내용은 SignalR 개요 웹 사이트에서 사용할 수 있는 <a href="https://www.asp.net/signalr/overview/signalr-20/getting-started-with-signalr-20/introduction-to-signalr" target="_blank">광범위한 자습서</a> 가 있습니다.

  <h4>ASP.NET Echo 예제</h4>

  ASP.NET v4.5를 .NET Framework 이후 WebSocket을 지원해 왔다.개발자는 일반적으로 SignalR과 같은 상위 수준 라이브러리를 사용하여 WebSockets 연결 관리의 하위 수준 세부 정보를 추상화하려고 합니다.그러나 모험심이 강한 개발자의 경우 이 섹션에서는 ASP.NET 하위 수준의 WebSockets 지원을 사용하는 간단한 예를 보여 줍니다.


  ASP.NET Echo 예제 프로젝트는 WebSocket에서 수신 대기하고 응답하는 서버 쪽 .ashx 처리기와 WebSocket 연결을 설정하고 서버에 텍스트를 보내는 간단한 HTML 페이지로 구성됩니다.


  .ashx 처리기는 WebSockets 연결 요청을 수신 대기합니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3362.D.jpg-400x0.jpg"><img class="alignnone size-full wp-image-134041" alt="3362.D.jpg-400x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3362.D.jpg-400x0.jpg" width="400" height="182" /></a>


  .ashx 처리기는 WebSockets 연결 요청을 수신 대기합니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3580.E.JPG-450x0.jpg"><img class="alignnone size-full wp-image-134031" alt="3580.E.JPG-450x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3580.E.JPG-450x0.jpg" width="450" height="302" /></a>


  WebSocket 연결이 설정되면 처리기는 텍스트를 브라우저에 다시 에코합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/6558.F.JPG-550x0.jpg"><img class="alignnone size-medium wp-image-134021" alt="6558.F.JPG-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6558.F.JPG-550x0-415x369.jpg" width="415" height="369" /></a>


  페이지가 로드되면 해당 HTML 페이지에서 WebSocket 연결을 설정합니다.브라우저 사용자가 WebSocket 연결 아래로 텍스트를 보낼 때마다 ASP.NET 텍스트를 다시 에코합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/1307.G.JPG-550x0.jpg"><img class="alignnone size-medium wp-image-134011" alt="1307.G.JPG-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1307.G.JPG-550x0-376x369.jpg" width="376" height="369" /></a>


  아래 스크린샷은 텍스트가 에코되고 WebSockets 연결이 닫히는 브라우저 세션을 보여줍니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1727.H-.jpg-400x0.jpg"><img class="alignnone size-full wp-image-134001" alt="1727.H .jpg-400x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1727.H-.jpg-400x0.jpg" width="400" height="254" /></a>

  <h4>Node.js 기본 채팅 예제</h4>

  Node.js 개발자는 socket.io 라이브러리를 사용하여 장기 실행 HTTP 연결이 있는 웹 페이지를 작성하는 데 익숙합니다.Socket.io 네트워크 프로토콜로 WebSocket(기타 옵션 중)을 지원하며, WebSocket을 사용할 수 있는 경우 전송으로 사용하도록 구성할 수 있습니다.


  Node.js 애플리케이션은 socket.io 모듈을 포함하고 코드에서 소켓을 구성해야 합니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1385.J.JPG-350x0.jpg"><img class="alignnone size-full wp-image-133991" alt="1385.J.JPG-350x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1385.J.JPG-350x0.jpg" width="350" height="200" /></a>


  아래에 표시된 샘플 코드는 클라이언트가 애칭(예: 채팅 핸들)으로 연결하도록 수신 대기하고 현재 연결된 모든 클라이언트에 채팅 메시지를 브로드캐스트합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/02/5187.I.JPG-550x0.jpg"><img class="alignnone size-medium wp-image-133981" alt="5187.I.JPG-550x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5187.I.JPG-550x0-512x369.jpg" width="512" height="369" /></a>


  WebSockets를 사용하는 node.js 애플리케이션에 대한 web.config 다음과 같은 작은 조정이 필요합니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3404.L.JPG-250x0.jpg"><img class="alignnone size-full wp-image-133971" alt="3404.L.JPG-250x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3404.L.JPG-250x0.jpg" width="250" height="34" /></a>


  이 web.config 항목은 node.js 필요하지 않으므로 IIS WebSockets 지원 모듈(iiswsock.dll)을 해제합니다.IIS의 Nodej.js 자체의 하위 수준 WebSockets 구현을 포함하므로 IIS 지원 모듈을 명시적으로 해제해야 합니다.


  이 게시물의 앞부분에서 보여 주는 UI의 구성 포털 탭을 사용하여 웹 사이트에 대해 WebSockets 기능을 사용하도록 설정해야 합니다.


  두 클라이언트가 샘플 node.js 애플리케이션을 사용하여 메시지를 연결하고 거래한 후 HTML 출력은 다음과 같습니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1817.K-.jpg-300x0.jpg"><img class="alignnone size-full wp-image-133961" alt="1817.K .jpg-300x0" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1817.K-.jpg-300x0.jpg" width="300" height="272" /></a>


  Fiddler의 원시 HTTP 추적(아래 참조)은 웹 서버와 WebSockets 연결을 협상하기 위해 socket.io 클라이언트 쪽 부분에서 보내는 WebSockets 프로토콜 업그레이드 요청을 보여줍니다.

  <pre><span style="font-family: 'courier new', courier;">Request snippet:</span>

  <span style="font-family: 'courier new', courier;">GET https://abc123.azurewebsites.net/socket.io/1/websocket/11757107011524818642 HTTP/1.1</span>

  <span style="font-family: 'courier new', courier;">Origin: https://abc123.azurewebsites.net</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Key: rncnx5pFjLGDxytcDkRgZg==</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Version: 13</span>

  <span style="font-family: 'courier new', courier;">…</span>

  <span style="font-family: 'courier new', courier;">Response snippet:</span>

  <span style="font-family: 'courier new', courier;">HTTP/1.1 101 Switching Protocols</span>

  <span style="font-family: 'courier new', courier;">Upgrade: Websocket</span>

  <span style="font-family: 'courier new', courier;">Server: Microsoft-IIS/8.0</span>

  <span style="font-family: 'courier new', courier;">X-Powered-By: ASP.NET</span>

  <span style="font-family: 'courier new', courier;">Sec-WebSocket-Accept: jIxAr5XJsk8rxjUZkadPWL9ztWE=</span>

  <span style="font-family: 'courier new', courier;">Connection: Upgrade</span>

  <span style="font-family: 'courier new', courier;">…</span></pre>

  <h4>WebSockets 연결 제한</h4>

  현재 Azure 웹 사이트는 실행 중인 웹 사이트 인스턴스당 지원되는 동시 WebSockets 연결 수에 대한 제한을 구현했습니다. 각 크기 조정 모드에 대해 웹 사이트 인스턴스당 지원되는 WebSockets 연결 수는 다음과 같습니다.

  <ul>
   <li>무료: (5) 웹 사이트 인스턴스당 동시 연결</li>
   <li>공유: (35) 웹 사이트 인스턴스당 동시 연결</li>
   <li>기본: (350) 웹 사이트 인스턴스당 동시 연결</li>
   <li>표준: 제한 없음</li>
  </ul>

  애플리케이션이 허용 한도보다 더 많은 WebSocket 연결을 열려고 하면 Windows Azure Web Sites는 503 HTTP 오류 상태 코드를 반환합니다.


  참고: "웹 사이트 인스턴스"라는 용어는 다음을 의미합니다. 웹 사이트가 (2) 인스턴스에서 실행되도록 크기가 조정되면 (2) 실행 중인 웹 사이트 인스턴스로 계산됩니다.

  <h4>WebSockets용 SSL을 사용해야 할 수도 있습니다.</h4>

  WebSockets로 작업할 때 개발자가 유의해야 하는 한 가지 단점이 있습니다.WebSockets 프로토콜은 덜 사용되는 특정 HTTP 헤더, 특히 <em>업그레이드</em> 헤더를 사용하므로 웹 프록시와 같은 중간 네트워크 디바이스에서 이러한 헤더를 제거하는 것은 드문 일이 아닙니다.  최종 결과는 일반적으로 WebSockets 애플리케이션이 작동하지 않거나 WebSockets를 선택하지 않고 대신 덜 효율적인 대안으로 대체되는 이유를 궁금해하는 개발자입니다.


  이 문제를 해결하는 비결은 SSL을 통해 WebSockets 연결을 설정하는 것입니다. 이 작업을 수행하는 두 단계는 다음과 같습니다.

  <ul>
   <li>WebSockets 엔드포인트에 대한 <em>wss://</em> 프로토콜 식별자를 사용합니다.예를 들어<span style="font-family: 'courier new', courier;"> <em>ws://mytestapp.azurewebsites.net</em></span>(HTTP를 통한 WebSockets)에 연결하는 대신 <span style="font-family: 'courier new', courier;"><strong><em>wss://</em></strong> <em>mytestapp.azurewebsites.net</em></span>(HTTPS를 통한 WebSockets)에 연결합니다.</li>
   <li>(선택 사항) SSL을 통해 포함된 페이지도 실행합니다.항상 필요한 것은 아니지만 사용하는 클라이언트 쪽 프레임워크에 따라 WebSockets 연결의 "SSL-ness"가 포함된 HTML 페이지에 적용되는 SSL 설정에서 파생될 수 있습니다.</li>
  </ul>

  Windows Azure Web Sites는 *에 대한 기본 SSL 인증서를 사용하여 무료 사이트에서도 SSL을 지원합니다<em>.<span style="font-family: 'courier new', courier;"> azurewebsites.net</span></em><span style="font-family: 'courier new', courier;">.</span>  따라서 해결 방법을 사용하도록 사용자 고유의 SSL 인증서를 구성할 필요가 없습니다.<span style="font-family: 'courier new', courier;"><em>azurewebsites.net</em></span> WebSockets 엔드포인트의 경우 SSL 및 *를 사용하여 전환할 수 있습니다<em>.<span style="font-family: 'courier new', courier;"> azurewebsites.net</span></em> 와일드카드 SSL 인증서가 자동으로 사용됩니다.


  또한 웹 사이트에 대한 사용자 지정 도메인을 등록한 다음 사이트에 대한 SNI 또는 IP 기반 SSL 인증서를 구성할 수 있습니다.Windows Azure 웹 사이트를 <a href="https://azure.microsoft.com/en-us/develop/net/common-tasks/custom-dns-web-site/" target="_blank">사용하여 사용자 지정 도메인</a> 및 <a href="https://azure.microsoft.com/en-us/develop/net/common-tasks/enable-ssl-web-site/" target="_blank">SSL 인증서</a>를 구성하는 방법에 대한 자세한 내용은 Windows Azure 설명서 웹 사이트에서 확인할 수 있습니다.


  &nbsp;
