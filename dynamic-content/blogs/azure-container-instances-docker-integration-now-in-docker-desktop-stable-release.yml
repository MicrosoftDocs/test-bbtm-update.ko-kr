### YamlMime:Yaml
ms.openlocfilehash: 14ba2b0270779691185d92b8f8951c34fe82c4d2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906604"
Slug: azure-container-instances-docker-integration-now-in-docker-desktop-stable-release
Title: Azure Container Instances - Docker Desktop 안정적인 릴리스에서 Docker 통합
Summary: 오늘 안정적인 새로운 Docker Desktop 릴리스에는 Azure Container Instances - Docker 통합이 포함되어 있음을 발표하게 되어 기쁩니다. 최신 릴리스를 설치하거나 업데이트하고 현재 ACI(Azure Container Instances)에 컨테이너 배포를 시작합니다.
Content: >-
  <p>Were&rsquo; happy는 Docker Desktop의 안정적인 새로운 릴리스에 <a href="https://docs.docker.com/engine/context/aci-integration/" target="_blank">Azure Container Instances - Docker 통합이</a> 포함되어 있다고 발표하게 되어 기쁩니다. 최신 릴리스를 설치하거나 업데이트하고 현재 <a href="https://azure.microsoft.com/en-us/services/container-instances/" target="_blank">ACI(Azure Container Instances</a> )에 컨테이너 배포를 시작합니다.</p>


  <h2>Azure Docker 통합</h2>


  <p>Azure Docker 통합을 사용하면 로컬 개발에서 동일한 Docker CLI(명령줄) 명령을 사용하여 ACI(Azure Container Instances)에 서버리스 컨테이너를 배포할 수 있습니다. 단일 컨테이너를 스핀업하거나 <code>docker compose up</code> Docker Compose 파일로 정의된 다중 컨테이너 애플리케이션을 배포하는 데 사용합니다<code>docker run</code>. 로그를 보고, 셸을 연결하고, 해당 컨테이너가 로컬로 실행 중인 것처럼 ACI에서 실행되는 컨테이너에 대해 다른 작업을 수행할 수도 있습니다. 또한 이제 Compose를 사용하여 로컬 또는 ACI 컨텍스트의 컨테이너에 <a href="https://docs.docker.com/engine/context/aci-integration/#using-azure-file-share-as-volumes-in-aci-containers" target="_blank">Azure 파일 공유 볼륨 탑재</a> 를 연결할 수 있습니다.</p>


  <p>ACI(Azure Container Instances)를 사용하면 인프라를 설정할 필요 없이 클라우드에서 개발/테스트 또는 프로덕션 컨테이너를 실행할 수 있습니다. ACI는 운영 오버헤드를 최소화하면서 클라우드에서 컨테이너를 신속하게 실행해야 하는 개발자를 수용하므로 인프라 또는 플랫폼 관리 오버헤드가 없습니다. ACI는 모니터링 요구 사항에 맞게 데이터 및 Log Analytics를 유지하기 위한 Azure 파일 공유 볼륨과 같은 프로덕션 워크로드 요구 사항에 대한 다른 Azure 서비스와 통합됩니다. ACI에는 종량제 <a href="https://azure.microsoft.com/en-us/pricing/details/container-instances/" target="_blank">가격 책정 모델이</a> 있습니다. 즉, 컨테이너가 실행되는&nbsp; 동안 CPU 및 메모리에 대해서만 요금이 청구되고 1초 이상 청구되지 않습니다.&nbsp;</p>


  <h2>Docker 확장용&nbsp;Visual Studio Code</h2>


  <p>Docker가 Docker Desktop에 대한 업데이트를 릴리스하는 것 외에도 Microsoft는 <a href="https://aka.ms/VSCodeDocker" target="_blank">Visual Studio Code Docker 확장에 대한</a> 업데이트를 릴리스했습니다. 확장의 새로운 1.6 릴리스를 사용하면 이제 ACR( <a href="https://azure.microsoft.com/en-us/services/container-registry/" target="_blank">Azure Container Registry</a> ) 또는 <a href="https://hub.docker.com/" target="_blank">Docker Hub</a> 에서 이미지를 마우스 오른쪽 단추로 클릭하고 ACI(Azure Container Instances)에 직접 배포할 수 있습니다.</p>


  <p>다음 애니메이션에서 볼 수 있듯이 확장은 먼저 기존 ACI 컨텍스트를 선택하거나 새 컨텍스트를 만들라는 메시지를 표시합니다. 이 컨텍스트는 활성 컨텍스트로 설정되고 도구는 <code>docker run</code> 이 명령을 사용하여 ACI에서 컨테이너를 스핀업합니다. 컨테이너를 실행하기 전에 확장은 이미지를 검사하여 포트를 열어야 하는지 확인합니다. 이러한 방식으로 실행 중인 컨테이너는 필요한 포트에서 액세스할 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d2407716-61fd-4dbb-b8e3-779aa101c967.gif"><img alt="Deploy a container to Azure Container Instances (ACI)" border="0" height="576" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9b424351-84c1-4f45-b23f-e34a18d24a9f.gif" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="" width="1024"></a></p>


  <p>이 새로운 기능은 이전 Docker 확장 릴리스에서 추가한 다른 ACI(Azure Container Instances) 기능 외에도 제공됩니다. 이 최신 릴리스에서는 Visual Studio Code 내에서 ACI에서 컨테이너를 만들고, 배포하고, 진단하기 위한 완전한 도구 집합을 제공합니다.</p>


  <h2>지금 사용해 보기</h2>


  <p>아직 다운로드하지 않은&rsquo; 경우 <a href="https://aka.ms/VSCodeDocker" target="_blank">Visual Studio Code Docker 확장</a> 및 <a href="https://aka.ms/dockerdesktopstable" target="_blank">안정적인 Docker Desktop 릴리스</a>를 다운로드하고 Docker CLI 또는 Visual Studio Code 사용하여 ACI(Azure Container Instances)에 컨테이너 배포를 시작해야 합니다. 시작하는 좋은 방법은 <a href="https://aka.ms/ACIDockerQuickstart" target="_blank">ACI(Azure Container Instances) 빠른 시작을 사용하는 것입니다</a>. 아래에 의견을 남기거나 <a href="https://github.com/microsoft/vscode-docker/issues" target="_blank">GitHub 리포지토리에 문제를 제출</a>하는 것이 좋습니다.</p>
