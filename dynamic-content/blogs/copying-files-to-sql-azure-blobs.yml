### YamlMime:Yaml
ms.openlocfilehash: 56448bcf9909ae79716c23fee8778dfe2cbe20b5
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897712"
Slug: copying-files-to-sql-azure-blobs
Title: SQL Azure BLOB에 파일 복사
Summary: '[이 문서는 SQL Azure 팀에서 제공했습니다.] 파일의 여러 BLOB을 SQL Azure 업로드하는 간단한 콘솔 애플리케이션(명령줄에서 실행)을 작성했습니다. 이 문서에서는 다음을 설명합니다.'
Content: '<p>[이 문서는 SQL Azure 팀에서 제공했습니다.]</p><p>파일의 여러 BLOB을 SQL Azure 업로드하는 간단한 콘솔 애플리케이션(명령줄에서 실행)을 작성했습니다. 이 문서에서는 작동 방식을 설명하고, 요구 사항에 맞게 코드를 수정하려는 경우 콘솔 애플리케이션 및 소스 코드의 완전한 Visual Studio 솔루션을 제공합니다. <b>SqlStream</b> 클래스를 소개하는 이 이전 블로그 게시물의 확장입니다.</p>  <p>일부 시나리오에서는 바탕 화면에서 직접 이미지를 배포하여 <b>varbinary(max)</b> 열에 SQL Azure 수 있습니다. Microsoft SSIS 및 BCP 유틸리티와 같은 도구를 사용하여 이 작업을 수행할 수 있습니다. 그러나 이미지 디렉터리가 있는 경우 이 도구를 사용하면 이미지를 SQL Azure 위해 개별적으로 작성된 블록으로 분할하여 스트리밍 방식으로 SQL Azure 직접 업로드할 수 있습니다. </p>  <p>이미지가 될 필요는 없습니다&rsquo;. BlobCopy를 사용하면 파일에 저장할 수 있는 모든 데이터를 SQL Azure 열에 직접 업로드할 수 있습니다.</p>  <p>나는이 도구를 사용하는 방법에 대한 많은 가정을했다; 이렇게 하면 샘플과 코드를 단순하게 유지하는 이점이 있습니다. 가정이 도구를 사용하려는 방식과 일치하지 않을 수 있으므로 원하는 대로 작동하도록 조정할 수 있도록 코드를 포함했습니다. 당신이 원하는 것을 수행하는 방법을 알아낼 수없는&rsquo; 경우, 아래에 의견을 게시하고 나는 도움을 시도합니다. 또한 학습 곡선을 낮게 유지하기 위해 많은 BCP 매개 변수를 에뮬레이트했습니다.</p>  <p>다음은 제가 한 가정입니다.</p>  <ul>  <li>파일 디렉터리가 있습니다. 각 파일은 데이터베이스의 행입니다. </li>  <li>업데이트하려는 행만 디렉터리에 파일이 있습니다. </li>  <li>BlobCopy를 실행할 때 디렉터리의 모든 파일을 업로드해야 합니다. </li>  <li>확장명을 사용하지 않는 각 파일의 이름은 BLOB이 기록되는 데이터베이스의 기본 키를 나타냅니다. 예를 들어 AdventureWorksLTAZ2008R2 데이터베이스 및 SalesLT.Product 테이블을 사용하면 884.jpg 파일은 ProductId = 884로 이동합니다. </li>  <li>한 번에 8192바이트의 데이터가 업로드됩니다. 즉, 트랜잭션당 블록 크기입니다. </li>  </ul>  <p>한 가지 주의해야 할 점은 중간 스트림 오류로 BLOB이 데이터베이스에서 알 수 없는 상태로 유지된다는 것입니다. 각 쓰기는 트랜잭션이지만 BLOB은 여러 블록 및 여러 쓰기로 세분화됩니다. 여러 쓰기에 성공한 다음 프로세스를 종료하는 오류가 발생하는 경우 BLOB은 데이터베이스에 부분적으로만 기록될 수 있습니다.</p>  <h4>샘플</h4>  <p>이 샘플 코드는 AdventureWorksLTAZ2008R2 데이터베이스를 사용하고 C:\My Projects\Sql Azure Blog\BlobCopy\Test Files의 모든 파일을 ThumbNailPhoto 열의 SalesLT.Product 테이블에 씁니다.</p>  <p><em>BlobCopy.exe AdventureWorksLTAZ2008R2.SalesLT.Product -S tcp:yourServer.database.windows.net -U yourlogin -P yourPassword -K ProductId -B ThumbNailPhoto -F "C:\My Projects\Sql Azure Blog\BlobCopy\Test Files"</em></p>  <h4>인수</h4>  <blockquote>  <p><strong><em>BlobCopy database_name.schema.table_name -S server_name&ndash; U login_id &ndash;P 암호 -K primary_key &ndash;B blob_column &ndash;F folder_of_files</em></strong></p>  </blockquote>  <p>BCP 유틸리티와 마찬가지로 첫 번째 인수는 블로그를 작성할 대상의 데이터베이스, 스키마 및 테이블입니다.</p>  <p><b>-S </b>server_name: 연결할 SQL Azure 서버를 지정합니다. </p>  <p><b>-U </b>login_id: SQL Azure 연결하는 데 사용되는 로그인 ID를 지정합니다.</p>  <p><b>-P </b>암호: 로그인 ID의 암호를 지정합니다. 이 옵션을 사용하지 않는 경우 BlobCopy는 기본 암호(NULL)를 사용합니다.</p>  <p><b>-K </b>primary_key: BlobCopy가 Blob을 작성할 행을 식별할 수 있도록 테이블의 기본 키 열을 지정합니다. 열 이름이며 기본 키의 값은 파일 이름에서 가져옵니다.</p>  <p><b>-B</b> blob_column: Blob을 쓸 열을 지정합니다.</p>  <p><b>-F</b> folder_of_files: Blob이 파일로 저장되는 로컬 컴퓨터의 폴더 위치입니다. 업로드할 각 행에 대해 하나의 파일입니다. 파일 이름은 행을 식별하는 기본 키 값입니다.</p>  <h4>추가</h4>  <p>판독기 왼쪽에 있는 코드에 이러한 추가가 유용할 수 있습니다.</p>  <ul>  <li>다른 디렉터리에 성공적으로 업로드한 후 파일을 이동합니다.</li>  <li>각 트랜잭션에서 복사된 바이트 양이 명령 인수에 의해 결정되도록 허용합니다.</li>  <li>이 블로그 게시물에서 설명한 대로 일시적인 재시도를 처리합니다.</li>  </ul>  <h4>요약</h4>  <p>질문, 우려 사항, 의견이 있나요? 아래에 게시하고 우리는 그들을 해결하기 위해 노력할 것입니다.</p>'
