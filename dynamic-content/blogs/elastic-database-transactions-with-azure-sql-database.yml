### YamlMime:Yaml
ms.openlocfilehash: 26ab294ad1db76826d060e4df0b4fc1c1ae41ae8
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906817"
Slug: elastic-database-transactions-with-azure-sql-database
Title: Azure SQL Database 있는 Elastic Database 트랜잭션
Summary: 탄력적 데이터베이스 트랜잭션을 사용하여 Azure SQL Database 분산 트랜잭션을 구현하는 방법을 알아봅니다.
Content: "<p>오늘 Azure SQL Database <a href=\"https://azure.microsoft.com/documentation/articles/sql-database-elastic-transactions-overview/\">탄력적 데이터베이스 트랜잭션</a>의 미리 보기를 발표하게 되어 기쁩니다. 분산 트랜잭션은 SQL Database 가장 요청된 기능 중 하나로 일관되게 순위가 매겨집니다. 이제 트랜잭션 속성을 사용하여 SQL Database 여러 데이터베이스에서 작업을 수행할 수 있습니다. 이렇게 하면 MSDTC(Microsoft Distributed Transaction Coordinator)를 사용할 때 SQL Server 익숙한 것과 동일한 보장이 가능합니다. 탄력적 데이터베이스 트랜잭션을 보장하면 SQL Database 다른 데이터베이스에 대한 변경 내용이 모든 데이터베이스에서 발생하거나 아무 것도 발생하지 않습니다. 이렇게 하면&nbsp; 데이터베이스 전체에서 상태를 일관되게 유지하는 친숙한 원자성 및 격리 속성을 사용할 수 있습니다.&nbsp; 예를 들어 데이터베이스 간에 금융 거래를 처리하거나 한 데이터베이스의 인벤토리와 다른 데이터베이스의 주문을 업데이트할 때 이 작업이 중요합니다.</p>\n\n<p><a href=\"https://blogs.msdn.com/b/dotnet/archive/2015/10/29/announcing-net-framework-4-6-1-rc.aspx\">.NET 4.6.1</a>부터 MSDTC를 사용하여 온-프레미스 트랜잭션을 조정하는 데 사용되는 동일한 .NET API를 통해 SQL 데이터베이스에 대한 탄력적 데이터베이스 트랜잭션을 표시합니다. 즉, 코드를 변경할 필요가 없는 최신 .NET 라이브러리 &ndash; 에 대해 기존 .NET 애플리케이션을 다시 빌드하여 SQL Database 탄력적 데이터베이스 트랜잭션 사용을 시작할 수 있습니다. 또한 탄력적 트랜잭션은 SQL Database 직접 관리되므로 SQL Database 탄력적 트랜잭션에 대해 MSDTC를 배포할 필요가 없습니다.</p>\n\n<p>이 미리 보기에서는 TransactionScope와 같은 <a href=\"https://msdn.microsoft.com/library/system.transactions.aspx\">System.Transactions</a> 의 기능을 사용하여 분산 트랜잭션을 조정하는 .NET 애플리케이션에 중점을 둡니다. .NET 개발자의 경우 이는 이미 SQL Server 널리 채택된 프로그래밍 패턴을 구성합니다. 그러나 T-SQL 사용하여 분산 트랜잭션을 조정하기 위한 서버 쪽 환경은 이 미리 보기의 일부가 아닙니다. 다음 그림에서는 SQL Database 탄력적 데이터베이스 트랜잭션에 대한 시나리오를 보여 줍니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/405dcb1d-2b4c-4701-b915-7d32095bd8bd.png\"><img alt=\"Elastic Database Transactions with Azure SQL Database\" border=\"0\" height=\"391\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e55467d4-71db-4d58-b815-4608839b7a3b.png\" style=\"border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Azure SQL Database 있는 Elastic Database 트랜잭션\" width=\"480\"></a></p>\n\n<p>.NET 애플리케이션에서 Azure SQL DB에서 탄력적 데이터베이스 트랜잭션 사용을 시작하는 방법에 대한 자세한 내용은 다음 단락을 참조하세요.</p>\n\n<h1>설치</h1>\n\n<p>이 미리 보기를 사용하면 이제 여러 SQL 데이터베이스에 저장된 데이터를 원자성으로 변경하는 애플리케이션을 빌드할 수 있습니다. 미리 보기의 초점은 .NET 및 특히 C#의 클라이언트 쪽 개발 환경에 있습니다. 분산 트랜잭션을 조정하기 위한 서버 쪽 환경 또는 .NET 이외의 프로그래밍 언어에 대한 지원은 이 미리 보기의 범위를 벗어버집니다. 향후 이를 지원할 계획입니다.</p>\n\n<p>이 미리 보기의 기능은 .NET 라이브러리 System.Data.dll 및 System.Transactions.dll 대한 업데이트를 통해 제공됩니다. 라이브러리는 원자성을 보장하기 위해 필요한 경우 2단계 커밋이 사용되는지 투명하게 확인합니다. 이러한 라이브러리는 .NET 4.6.1 릴리스 후보의 일부로 시스템에 자동으로 설치됩니다. 릴리스 후보를 가져오는 방법에 대한 자세한 내용은 Microsoft .NET 블로그 <a href=\"https://blogs.msdn.com/b/dotnet/archive/2015/10/29/announcing-net-framework-4-6-1-rc.aspx\" target=\"_blank\">에서 공지 사항을 확인</a> 하세요.</p>\n\n<p>&rsquo;릴리스 후보를 설치한 후에는 System.Transactions에서 분산 트랜잭션 API를 사용하는 기존 애플리케이션을 가져와서 .NET 4.6용으로 다시 빌드할 수 있습니다. 프로젝트가 .NET 4.6을 대상으로 하는 경우 릴리스 후보에서 업데이트된 DLL을 자동으로 사용합니다.</p>\n\n<p>SQL Server 대신 SQL Database 있는 탄력적 데이터베이스 트랜잭션에는 Microsoft Distributed Transaction Coordinator가 필요하지 않습니다. 대신 탄력적 트랜잭션은 기본적으로 SQL Database 및 내부에서 관리됩니다. 이렇게 하면 MSDTC 배포가 SQL Database 분산 트랜잭션을 사용할 필요가 없으므로 특히 클라우드 배포에 대한 환경이 크게 간소화됩니다.</p>\n\n<h1>애플리케이션 개발 환경</h1>\n\n<p>다음 코드 샘플에서는 .NET System.Transactions에 익숙한 프로그래밍 환경을 보여 줍니다. TransactionScope 클래스를 사용하여 .NET에서 앰비언트 트랜잭션을 설정합니다. 앰비언트 트랜잭션 범위 내에서 열린 모든 데이터베이스 연결은 트랜잭션에 참여하고, 여러 다른 데이터베이스가 참여하는 경우 앰비언트 트랜잭션은 탄력적 데이터베이스 트랜잭션으로 승격됩니다.</p>\n\n<p>이 예제에서는 커밋을 나타내도록 범위를 완료하도록 설정하여 트랜잭션의 결과를 제어합니다.</p>\n\n<pre class=\"prettyprint\">\nusing (var scope = new TransactionScope())\n{\n using (var conn1 = new SqlConnection(connStrDb1))\n {\n  conn1.Open();\n  SqlCommand cmd1 = conn1.CreateCommand();\n  cmd1.CommandText = string.Format(&quot;insert into T1 values(1)&quot;);\n  cmd1.ExecuteNonQuery();\n }\n \n using (var conn2 = new SqlConnection(connStrDb2))\n {\n  conn2.Open();\n  var cmd2 = conn2.CreateCommand();\n  cmd2.CommandText = string.Format(&quot;insert into T2 values(2)&quot;);\n  cmd2.ExecuteNonQuery();\n }\n \n scope.Complete();\n}\n</pre>\n\n<p>프로젝트 설정이 버전 4.6을 대상으로 .NET Framework. 이렇게 하면 SQL Database 탄력적 트랜잭션이 작동하려면 .NET 릴리스 후보의 새 라이브러리가 사용됩니다&ndash;.</p>\n\n<h1>트랜잭션 상태 모니터링</h1>\n\n<p><a href=\"https://msdn.microsoft.com/library/ms174302.aspx\">sys.dm_tran_active_transactions</a> 같은 <a href=\"https://msdn.microsoft.com/library/ms178621.aspx\">트랜잭션에 기존 DMV(동적 관리 뷰)</a>를 사용하여 진행 중인 탄력적 데이터베이스 트랜잭션의 상태 및 진행률을 모니터링할 수 있습니다.</p>\n\n<p>예를 들어 위에 제공된 샘플 코드를 실행하고 범위 바로 위에 중단점을 배치할 수 있습니다. 호출을 완료한 다음 sys.dm_tran_active_transactions DMV를 쿼리합니다. 참여하는 모든 데이터베이스는 다음 스크린샷과 같이 동일한 UOW 값을 포함하는 탄력적 데이터베이스 트랜잭션의 참가자 트랜잭션을 표시합니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ab5f7348-956b-497a-8c25-11191f8b9006.png\"><img alt=\"BlogPostVSand SSMSScreenshot\" border=\"0\" height=\"325\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3ac79452-c769-4163-85e0-323128229e49.png\" style=\"border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"BlogPostVSand SSMSScreenshot\" width=\"610\"></a></p>\n\n<h1>다음 단계</h1>\n\n<p><a href=\"https://blogs.msdn.com/b/dotnet/archive/2015/10/29/announcing-net-framework-4-6-1-rc.aspx\">.NET 4.6.1 릴리스 후보를</a> 다운로드하고 현재 SQL Database 탄력적 데이터베이스 트랜잭션 사용을 시작하는 것이 좋습니다.</p>\n\n<p>SQL Database 및 .NET 4.6.1을 사용한 탄력적 데이터베이스 트랜잭션에 대한 자세한 내용은 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/sql-database-elastic-transactions-overview/\">탄력적 데이터베이스 트랜잭션 설명서</a> 및 <a href=\"https://blogs.msdn.com/b/dotnet/archive/2015/10/29/announcing-net-framework-4-6-1-rc.aspx\">.NET 4.6.1 릴리스 후보 공</a>지 사항을 참조하세요.</p>"
