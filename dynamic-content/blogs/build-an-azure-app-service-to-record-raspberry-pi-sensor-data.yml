### YamlMime:Yaml
ms.openlocfilehash: 25c609e75f383f6b10aa7208b1b1314b64f484ac
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906087"
Slug: build-an-azure-app-service-to-record-raspberry-pi-sensor-data
Title: Raspberry Pi 센서 데이터를 기록하는 Azure App Service 빌드
Summary: 최근에 Raspberry Pi 및 Azure SDK 2.8.2 지원 Visual Studio 2015 Community Edition을 중단하여 Azure App Service에서 실행되는 API 앱에 센서 데이터를 보낼 수 있는 빠르고 더티한 애플리케이션을 작동하기로 결정했습니다. 이 블로그 게시물은 이 샘플 만들기를 안내합니다.
Content: >-
  <p>Ive&rsquo;는 휴일 이후 주위에 앉아 Raspberry Pi를했다, 그것을 사용하는 방법에 대한 아이디어의 톤과 함께. 아이디어는 문제가되지 않습니다&rsquo;, 시간의 부족은되었습니다. 나는 2016 년 its&rsquo; 윤년을 감안할 때 전체 여분의 하루를 가지고 있기 때문에, 나는 왜 마침내 내 Raspberry 파이와 팅커에 추가 일을 사용하지 생각? Ive&rsquo;는 최근 2015년 Visual Studio Azure App Service 도구에 대한 몇 가지 개선 사항을 빌드하고 발표하는 데 너무 바빴기 때문에 일부 팀&rsquo; 창작물과 지식을 사용하여 새롭고 재미있는 일을 하는 것은 어떨까요?</p>


  <p>그래서 Raspberry Pi 및 <a href="https://azure.microsoft.com/en-us/blog/announcing-azure-sdk-2-8-2-for-net/" target="_blank">Azure SDK 2.8.2</a> 지원 Visual Studio 2015 Community Edition을 분석하고 Azure App Service에서 실행되는 API 앱에 센서 데이터를 보낼 수 있는 빠르고 더티 애플리케이션을 작동했습니다. 이 게시물은 이 <a href="https://github.com/bradygaster/LeapDayTinkering" target="_blank">GitHub 리포지토리</a>에 저장된 이 샘플의 생성을 안내합니다.</p>


  <h1>필수 조건</h1>


  <p>이 게시물에서는 App Service 및 디바이스에서 샘플 코드를 빌드하고 실행할 모든 부분이 있다고 가정합니다. 다음은 하드웨어 및 소프트웨어&rsquo; 모두에 필요한 필수 구성 요소입니다.</p>


  <ol>
      <li><a href="https://dev.windows.com/en-us/iot" target="_blank">IoT를 Windows</a> 실행 중인 <a href="https://www.raspberrypi.org/products/raspberry-pi-2-model-b/" target="_blank">Raspberry Pi 2 모델 B+</a>입니다. Windows IoT를 사용하여 Raspberry Pi를 설정하는 프로세스는 간단하면서도 이 게시물의 범위를 벗어났습니다. &rsquo;Windows IoT 사이트에 유용한 시작 문서가 있으므로 디바이스에 Windows 설치해야 하는 경우 시작하세요. 전체 프로세스는 1시간 미만이 걸리며 매우 많은 작업이 필요하므로 IoT를 새로 접하는 경우&rsquo; 걱정하지 마세요&rsquo;. 설치 프로세스는 간단한 마법사를 통해 매우 기본입니다.</li>
      <li><a href="https://www.visualstudio.com/" target="_blank">Visual Studio 2015 Community</a></li>
      <li>웹, 모바일 및 REST API 개발자를 위한 몇 가지 새로운 개선 사항이 포함된 <a href="https://azure.microsoft.com/en-us/blog/announcing-azure-sdk-2-8-2-for-net/" target="_blank">.NET용 Azure SDK 2.8.2</a></li>
      <li>&rsquo;App Service에 코드를 배포하려면 Azure 계정이 필요합니다. 아직 없는 경우&rsquo; <a href="https://azure.microsoft.com/en-us/free/" target="_blank">Visual Studio Dev Essentials 가입</a>&nbsp;하고 월별 Azure 크레딧 $25를 <a href="https://www.visualstudio.com/products/visual-studio-dev-essentials-vs"></a> 받으세요.</li>
  </ol>


  <p>이러한 항목&rsquo; 외에도 Raspberry Pi를 네트워크에 연결하려면 네트워크 케이블이 필요합니다. its&rsquo;가 연결&rsquo;되면 Visual Studio 코드를 디바이스에 배포할 수 있습니다. 디바이스에서 라이브로 실행되는 동안&rsquo; 코드를 디버그합니다. 이상적으로는&rsquo; Raspberry Pi에 마우스와 키보드를 연결할 수 있습니다. 데스크톱 컴퓨터에서 무선 마우스/키보드 조합을 사용했지만 Raspberry Pi에 대한 인간 인터페이스 디바이스를 사용하도록 설정하는 많은 옵션이 있습니다.</p>


  <h1>센서 데이터를 기록하는 앱 서비스</h1>


  <p>첫 번째 단계는 Azure App Service에서 배포하고 실행하는 매우 기본적인 REST API를 만드는 것입니다. Visual Studio&rsquo; 사용할 수 있는 Azure API Apps 템플릿을 사용하면 빈 프로젝트를 쉽게 시작할 수 있습니다. 이 템플릿은 기본적으로 빈 <a href="https://www.asp.net/web-api" target="_blank">ASP.NET Web API</a> 프로젝트를 제공하므로&rsquo; 숙련된 ASP.NET 개발자가 있다면 이 부분을 잘 알고 있어야 합니다. 또한 Azure API Apps 프로젝트 템플릿은 <a href="https://www.nuget.org/packages/swashbuckle" target="_blank">Swashbuckle NuGet 패키지</a>에 추가됩니다. 이 패키지는 <a href="https://github.com/OAI/OpenAPI-Specification" target="_blank">Open API 사양</a>(이전의 <a href="https://swagger.io/" target="_blank">Swagger</a>) 메타데이터를 사용하여 Web API 엔드포인트를 동적으로 설명하는 기능을 표시합니다.</p>


  <p><img alt="leap-day-tinkering-01" border="0" height="476" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ed40f875-1b17-4cff-8c91-c3479e36c133.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-01" width="610"></p>


  <p>패키지가 API Apps 템플릿에 포함되었기 때문에 추가된 기능의 이점을 누릴 수 있도록 Swashbuckle 패키지를 업데이트하기로 결정했습니다. Swashbuckle의 새로운 기능 중 일부는 Web API 작업 메서드를 데코레이팅하는 데 사용할 수 있는 주석을 포함합니다. 이러한 기술 및 기타 기술과 Swashbuckle을 사용자 지정하는 방법에 대한 자세한 내용은 <a href="https://azure.microsoft.com/en-us/get-started/" target="_blank">Azure.com 설명서 센터에서</a> <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-api-dotnet-swashbuckle-customize/" target="_blank">Swashbuckle에서 생성된 API 정의 사용자 지정</a> 문서를 참조하세요.</p>


  <p><a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.AppService/Controllers/SensorController.cs" target="_blank">센서</a> 및 <a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.AppService/Controllers/DeviceController.cs" target="_blank">디바이스</a> 웹 API 컨트롤러에 대한 코드는 의도적으로 기본입니다. 실제로 아무것도 저장하지 않지만&rsquo; 고유한 스토리지 패러다임을 연결할 수 있도록 기본 시작점을 제공하도록 설계되었습니다. <a href="https://azure.microsoft.com/en-us/services/sql-database/" target="_blank">SQL Server 데이터베이스</a>, <a href="https://azure.microsoft.com/en-us/documentation/services/app-service/" target="_blank">App Service</a> 파일 시스템 또는 <a href="https://azure.microsoft.com/en-us/documentation/services/storage/" target="_blank">Azure Storage</a> 사용하여 원하는 대로 데이터를 유지할 수 있습니다.</p>


  <p><img alt="image" border="0" height="532" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5f652c03-035a-47a7-915b-3dfb1ce0756c.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="610"></p>


  <p>예를 들어 센서 컨트롤러에는 간단한 <a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.AppService/Models/SensorReading.cs" target="_blank">SensorReading</a> 모델의 인스턴스를 사용하는 Post 메서드라는 하나의 메서드가 있습니다. <em>SwaggerResponse </em>특성을 사용하여 Post 메서드의 비즈니스 규칙에 따라 API가 반환할 수 있는 모든 HTTP 응답 코드를 지정할 수 있습니다.</p>


  <ol>
      <li>사용자가 알 수 없는 디바이스에 대한 센서 판독값을 보내려고 하면 컨트롤러는 디바이스가 존재하지 않음&rsquo;을 나타내는 HTTP 404를 반환합니다.</li>
      <li>사용자가 알려진 디바이스에 대한 센서 판독값을 보내면 읽기가 기록되고 HTTP 200이 클라이언트에 반환됩니다.</li>
  </ol>


  <p>GitHub 샘플에 제공된 코드는 완벽하게 자체 포함되며, 고유한 비즈니스 규칙, 스토리지 기능 등으로 코드를 확장할 수 있는 기본적인 시작 지점을 제공하기 위해 약간의 조정이 필요합니다. 지금은 Azure App Service에서 이 API를 실행할 수 있습니다&rsquo;.</p>


  <h1>App Service에 게시</h1>


  <p>Web API 프로젝트를 App Service에 API 앱으로 게시하는 것은 매우 간단합니다. 프로젝트를 마우스 오른쪽 단추로 클릭하고 프로젝트 상황에 맞는 메뉴에서 <strong>게시</strong> 를 선택합니다. 이렇게 하면 프로필 게시 대화 상자가 나타납니다. 당연히 Ill&rsquo;은 이 코드를 Azure App Service에 게시합니다.</p>


  <p><img alt="leap-day-tinkering-03" border="0" height="379" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c123ff23-ef35-4289-af13-a94bc36a5c62.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-03" width="480"></p>


  <p>다음으로 Ill&rsquo;은 App Service 만들기 대화 상자를 사용하여 Ill&rsquo;이 Web API 코드를 게시할 App Service의 이름을 지정합니다. 아래 스크린샷에 설명된 것처럼 App Service 만들기는 Im&rsquo;이 API 앱을 게시하는 것을 추측할 수 있을 만큼 똑똑하므로&rsquo; 앱 유형 메뉴에서 기본 선택 항목이 선택됩니다.</p>


  <p><strong>새 </strong>단추를 클릭하여 새 리소스 그룹을 만들고 새 무료 App Service 계획을 만들었습니다. App Service 만들기 대화 상자에서 <strong>만들기</strong> 단추를 클릭하면 리소스 그룹이 App Service 계획 및 내 코드를 호스트하는 실제 App Service와 함께 만들어집니다.</p>


  <p><img alt="leap-day-tinkering-04" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b57bf73f-e1ee-4aed-bb6c-1137d9b6ed68.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-04" width="480"></p>


  <p>Azure App Service에서 리소스가 만들어지면 Visual Studio 게시 프로필을 다운로드하여 프로젝트에 추가합니다. 그런 다음 게시 프로세스가 완료되고 코드가 클라우드에서 실행됩니다.</p>


  <h1>Raspberry Pi 연결</h1>


  <p>Raspberry Pi에서 실행되는 코드는 매우 간단하며, 의도적으로 사용자 고유의 상상력을 사용하고 원하는 기능을 추가할 수 있도록 합니다. 여기에&rsquo; 큰 화면에, 우리의 팀 룸에서 실행 내 Raspberry Pi의 사진을 입니다. 당신이 볼 수 있듯이 응용 프로그램은 매우 기본적인 &ndash; 그것은 클릭 할 때, 타이머를 시작, 토글 버튼으로만 구성되어 있습니다. 타이머가 실행될 때마다 방금 배포한 App Service에 대한 요청이 이루어집니다.</p>


  <p><img alt="leap-day-tinkering-15" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b2aef31f-abab-433f-b9f5-f0fd6f5481c0.jpg" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-15" width="480"></p>


  <p>Visual Studio&rsquo; App Service 도구에서 사용할 수 있는 새로운 REST API 클라이언트 생성 기능 덕분에 API를 호출하고 응답을 구문 분석하기 위해 지루하거나 복잡한 코드를 작성할 필요가 없습니다&rsquo;. Windows IoT 앱은 Visual Studio UWP(유니버설 Windows Project) 템플릿을 사용하여 빌드된 앱이므로 Visual Studio 기본 제공되는 REST API 클라이언트 생성 기능을 사용하여 UWP 프로젝트에 직접 코드를 생성할 수 있습니다.</p>


  <p>이렇게 하려면 Visual Studio 내 UWP 프로젝트를 마우스 오른쪽 단추로 클릭하고 솔루션 탐색기에서 <strong>REST API 클라이언트 추가 &gt; </strong>제스처를 선택했습니다. 몇 년 동안 Visual Studio 사용할 수 있었지만 기본 HTTP REST API에 초점을 맞춘 <strong>서비스 참조 추가</strong> 기능&rsquo;과 마찬가지로 REST API 클라이언트 생성기는 강력한 형식의 코드를 삭제하여 HTTP 메서드를 통해 App Service를 호출하는 것이 매우 간단하고 논리적입니다.</p>


  <p><img alt="leap-day-tinkering-06" border="0" height="463" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0ed9f3c5-6d2d-4644-87a2-6661e3b4b8d0.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-06" width="480"></p>


  <p>REST API 클라이언트 생성 대화 상자가 열리면 <strong>Azure 자산 선택</strong> 단추를 클릭하여 API 정의로 사용하도록 설정된 기존 App Services 목록을 볼 수 있습니다(API Apps뿐만 아니라 모든 유형의 App Service에 대해 API 정의를 설정할 수 있음).</p>


  <p><img alt="leap-day-tinkering-07" border="0" height="226" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/00d3da5e-ac9d-46df-8238-77e9bd9932d0.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-07" width="360"></p>


  <p>기존 App Service 선택 대화 상자에서 최근에 배포한 Azure App Service를 선택합니다. 이름별로 App Services를 필터링하는 기능을 제공하는 편리한 검색 상자를 확인합니다.</p>


  <p><img alt="leap-day-tinkering-08" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/064be647-5c20-4881-90c7-82a0fdd0760e.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="leap-day-tinkering-08" width="480"></p>


  <p>App Service를 선택하고 <strong>확인 </strong>단추를 클릭하면 메타데이터가 다운로드되고, 코드가 생성되고, NuGet 통해 종속성이 설치되고, 코드가 프로젝트에 바로 삭제됩니다.</p>


  <p><img alt="image" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/faf8abe8-2b23-4591-99b6-bbff287a987f.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="251"></p>


  <p><strong>참고: </strong> 이 샘플에 대한 코드가 포함된 GitHub 리포지토리에는 REST API 클라이언트 코드가 이미 생성되어 있으므로&rsquo; 직접 탐색하는 경우&rsquo; 이 작업을 수행할 필요가 없습니다. &rsquo;[API의 모양을 변경하지 않는 한 Azure에 배포한 App Service&rsquo;의 기본 URL을 변경하는 것뿐입니다. <a href="https://github.com/bradygaster/LeapDayTinkering/blob/master/LeapDayTinkering.RaspberryPi/ViewModels/MainPageViewModel.cs" target="_blank">MainPageViewModel.cs</a>&rsquo;에 대한 코드에서 데모 URL이 아닌 사용자 고유의 App Service를 가리키도록 URL을 변경할 위치를 확인할 수 있습니다.</p>


  <p><img alt="image" border="0" height="389" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9f627113-1fdf-4e6d-8f51-830e01ed6575.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="610"></p>


  <p>이제 Raspberry Pi 앱 Ill&rsquo;에 대한 코드가 완료되었으므로 지속적으로 실행할 수 있는 Raspberry Pi에 배포하고 간격에 따라 App Service를 ping해야 합니다.</p>


  <h1>Raspberry Pi에 배포</h1>


  <p>대부분의 경우 Pi에서 라이브 배포 및 디버깅은 비교적 간단합니다. 디바이스&rsquo; 앱 코드가 포함된 UWP 프로젝트는 이미 준비되었으며 ARM 프로세서에서 실행되도록 구성되어 있으므로&rsquo; 직접 실행할 필요가 없습니다. 수행해야 할 작업은 자체 디바이스에서 실행되도록 프로젝트를 구성하는 <strong>것입니다</strong> . 이렇게 하려면 UWP 프로젝트의 <strong>속성</strong> 노드를 두 번 클릭하여 Visual Studio Project 속성 창을 엽니다.</p>


  <p>열면&rsquo; <strong>디버그</strong> 탭을 선택하고 Raspberry Pi의 IP 주소를 지정합니다. 이러한 방식으로 Visual Studio 디바이스에서 라이브로 배포하거나 디버그하려는 경우 디바이스에 연결하는 방법을 알 수 있습니다. <strong>대상 디바이스 </strong>메뉴에서 <strong>원격 머신 </strong>옵션을 선택하고 <strong>인증 모드</strong> 메뉴에서 <strong>유니버설(암호화되지 않은 프로토콜)</strong>을 선택해야 합니다.</p>


  <p><img alt="image" border="0" height="264" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a4f19777-74ee-4749-b027-cf79c88a52a5.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="480"></p>


  <p>Ive&rsquo;가 이 집합을 얻었으면 UWP 프로젝트를 마우스 오른쪽 단추로 클릭하고 <strong>배포</strong> 를 선택하여 내 Raspberry Pi에 코드를 푸시할 수 있습니다. 배포 프로세스는 몇 분 정도 걸릴 수 있지만 Ive&rsquo;가 코드를 배포하면 Visual Studio 출력 창에서 아래 스크린샷에 설명된 대로 Raspberry Pi에 방금 배포된 UWP 앱의 패키지 이름을 알려줍니다.</p>


  <p><img alt="image" border="0" height="151" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/40c24e73-3c72-4284-b37b-67ee8e4808b1.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="610"></p>


  <p>에 있는 Raspberry Pis&rsquo; 브라우저 기반 App Manager를 사용하여 새로 배포된 앱을 선택하고 <strong>시작 </strong>단추를 클릭하여 시작할 수 있습니다.</p>


  <p><img alt="image" border="0" height="116" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b792d632-47c4-4458-acbf-c53df5f01594.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="610"></p>


  <p>이제 UWP 앱이 실제로 디바이스에서 실행되고 있는 것을 볼 수 있습니다. 해제하려면 <strong>LeapDayTinkering.RaspberryPi</strong> 앱 옆에 있는 오른쪽 열에서 X를 클릭할 수 있습니다.</p>


  <p><img alt="image" border="0" height="104" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bb09b06f-8c13-480e-980d-d916f31f421b.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="610"></p>


  <p>앱 실행이 시작&rsquo;되면 즉시 Raspberry Pi에 연결된 모니터에 표시합니다. <strong>보내기 시작 </strong>토글 단추를 클릭하면 코드에서 타이머가 활성화되어 20초마다 App Service로 메시지가 전송됩니다. REST API로 들어오는 요청을 보려면 방금 배포한 App Service 노드에서 클라우드 탐색기 창&rsquo; <strong>연결 디버거</strong> 명령을 사용하여 원격 디버거를 연결할 수 있습니다.</p>


  <p><img alt="image" border="0" height="360" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e1532079-6496-46f4-8327-2117f61dae88.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="211"></p>


  <p>Web API 컨트롤러 코드 Im&rsquo;에 중단점을 배치하여 Raspberry Pi에서 보낸 메시지를 내 App Service&rsquo;에 도착하는 메시지를 볼 수 있습니다. 아래 스크린샷은 내 원격 App Service에 연결된 Visual Studio Azure에 있는 디버깅 세션에서 활성 상태인 중단점을 보여줍니다.</p>


  <p><img alt="image" border="0" height="379" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/05a76b5d-e0e2-4269-afbc-b7d1d6262283.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이미지" width="610"></p>


  <h1>요약 및 다음 단계</h1>


  <p>이 게시물에서는 App Service를 IoT 프로젝트의 백 엔드로 사용하는 아이디어를 소개하며, 이 코드는 창의력을 발휘할 수 있는 훌륭한 시작 지점을 제공합니다. 코드를 가져와서 사용자 지정하고, 샘플에 추가하는 경우 분기를 제출하거나 요청을 끌어올 수 있습니다. 몇 가지 미래 아이디어에는 스토리지 계층에 대한 추상화, 추가 센서 기능 또는 Raspberry Pi에서 실행되는 UWP 앱에 대한 센서 공급자 및 확장이 포함될 수 있습니다.</p>


  <p>IoT 프로젝트가 간단한 REST API 액세스 지점을 지나서 진화하고 심각한 원격 분석 또는 데이터 수집 기술이 필요하면 Azure의 IoT에 대한 다양한 옵션이 있습니다. <a href="https://azure.microsoft.com/en-us/develop/iot/" target="_blank">Azure IoT 개발자 센터에</a>는 최근 출시된 <a href="https://azure.microsoft.com/en-us/documentation/services/iot-hub/" target="_blank">IoT Hub와</a> 같이 사용할 수 있는 모든 옵션에 대한 풍부한 정보가 있습니다. <a href="https://azure.microsoft.com/en-us/documentation/services/event-hubs/" target="_blank">Event Hubs</a>, <a href="https://azure.microsoft.com/en-us/documentation/services/notification-hubs/" target="_blank">푸시 알림</a> 옵션 및 <a href="https://azure.microsoft.com/en-us/documentation/services/machine-learning/" target="_blank">디바이스</a>가 수집하는&rsquo; 데이터를 분석하는 Machine Learning 함께 Azure에서 포함된 디바이스로 수행할 수 있는 작업은 제한되지 않습니다.</p>
