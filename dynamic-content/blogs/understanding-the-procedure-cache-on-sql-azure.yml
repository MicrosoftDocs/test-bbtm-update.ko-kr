### YamlMime:Yaml
ms.openlocfilehash: 34d9c7d653601afdadfc281f331bc8b91c755fcf
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907509"
Slug: understanding-the-procedure-cache-on-sql-azure
Title: SQL Azure 프로시저 캐시 이해
Summary: '[이 문서는 SQL Azure 팀에서 제공했습니다.] SQL Server 및 SQL Azure 모두 서버에서 쿼리의 성능을 향상시키는 데 사용되는 프로시저 캐시가 있습니다. 이 블로그 게시물은 ...'
Content: <p>[이 문서는 SQL Azure 팀에서 제공했습니다.]</p><p>SQL Server 및 SQL Azure 모두 서버에서 쿼리의 성능을 향상시키는 데 사용되는 프로시저 캐시가 있습니다. 이 블로그 게시물에서는 프로시저 캐시가 SQL Azure 작동하는 방식에 대해 설명합니다.</p>  <p>SQL Azure 실행 계획과 데이터 버퍼를 모두 저장하는 데 사용되는 메모리 풀이 있습니다. 이 메모리 풀은 데이터베이스 소유자에 관계없이 물리적 컴퓨터의 모든 데이터베이스에 사용됩니다. 풀이 컴퓨터의 모든 데이터베이스에 걸쳐 있더라도 소유하지 않은 실행 계획을 아무도 볼 수 없습니다. 실행 계획이나 데이터 버퍼에 할당되는 풀 비율은 시스템 상태에 따라 동적으로 변동됩니다. 실행 계획을 저장하는 데 사용되는 메모리 풀 부분을 프로시저 캐시라고 합니다.</p>  <p>SQL Azure SQL 문이 실행되면 관계형 엔진은 먼저 프로시저 캐시를 통해 동일한 SQL 문의 기존 실행 계획이 있는지 확인합니다. SQL Azure 찾은 기존 계획을 재사용하여 SQL 문을 다시 컴파일하는 오버헤드를 절약합니다. 기존 실행 계획이 없으면 SQL Azure 쿼리에 대한 새 실행 계획을 생성합니다.</p>  <h2>프로시저 캐시 및 SQL Azure 복제</h2>  <p>SQL Azure 실행되는 데이터베이스의 인스턴스를 복제본이라고 합니다. 지정된 시간에 실행 중인 데이터베이스의 복제본이 세 개 있습니다. 하나의 복제본은 주 복제본으로 간주되며 모든 읽기 및 쓰기 쿼리는 이 복제본으로 이동합니다. 다른 두 복제본은 보조 복제본으로 간주되며 주 복제본에 기록된 모든 데이터도 보조 복제본에 기록됩니다. 주 복제본이 실패하거나 업데이트를 위해 순환해야 하거나 부하 분산 작업이 있는 경우 보조 복제본이 주 복제본으로 승격됩니다.</p>  <p>각 복제본은 별도의 완전 중복 랙에 있는 서로 다른 물리적 컴퓨터에 상주합니다. 프로시저 캐시는 서버별로 있기 때문에 주 복제본이 실패/순환된 경우 보조 복제본이 승격될 때 프로시저 캐시에 해당 데이터베이스에 대한 쿼리 계획이 없습니다.</p>  <h2>프로시저 캐시 통계</h2>  <p>SQL Azure 캐시의 모든 쿼리 계획에 대한 성능 통계를 추적합니다. 다음과 같이 DMV(동적 관리형 뷰) <b>sys.dm_exec_query_stats</b> 사용하여 데이터베이스 쿼리에 대한 이러한 통계를 볼 수 있습니다. </p>  <pre class="csharpcode"><span class="kwrd">SELECT</span> *  <span class="kwrd">FROM</span> sys.dm_exec_query_stats</pre>      <p>자세한 예제는 이 블로그 게시물을 참조하세요. <b>sys.dm_exec_query_stats</b> 쿼리하여 I/O 성능이 좋지 않은 쿼리를 찾는 방법을 보여 줍니다.</p>    <p><b>sys.dm_exec_query_stats</b> SQL Azure 데이터베이스의 주 복제본에 대한 통계만 보고합니다. 보조 데이터베이스가 주 복제본으로 승격되는 경우 <b>sys.dm_exec_query_stats</b> 결과는 몇 초 후에 훨씬 다를 수 있습니다. 캐시의 쿼리가 갑자기 없을 수도 있고 실행 수가 더 작을 수도 있습니다. 일반적으로 시간이 지남에 따라 증가하는 것을 볼 수 있습니다.</p>    <h2>프로시저 캐시에서 실행 계획 제거</h2>    <p>실행 계획은 이를 저장하기에 충분한 메모리가 있는 한 프로시저 캐시에 계속 남아 있습니다. 메모리 압력이 있는 경우 SQL Azure 비용 기반 접근 방식을 사용하여 프로시저 캐시에서 제거할 실행 계획을 결정합니다. </p>    <p>SQL Azure 계획 소유자에 관계없이 캐시에서 계획을 제거합니다. 서버에 있는 모든 데이터베이스의 모든 계획은 제거를 위해 평가됩니다. 각 데이터베이스에 대해 따로 설정된 메모리 풀의 일부가 없습니다. 즉, 프로시저 계획 캐시는 개별 데이터베이스가 아닌 컴퓨터의 이점을 위해 최적화됩니다.</p>    <p>SQL Azure 현재 <a href="https://msdn.microsoft.com/en-us/library/ms174283.aspx">DBCC FREEPROCCACHE(Transact-SQL)</a>를 지원하지 않으므로 cache.&#160;에서 실행 계획을 수동으로 제거할 수 없습니다. 그러나 쿼리(ALTER TABLE 및 ALTER VIEW)에서 참조하는 테이블 또는 뷰를 변경하면 계획이 캐시에서 제거됩니다.</p>    <h2>요약</h2>    <p>여러 가지 면에서 프로시저 캐시는 SQL Server;와 매우 유사합니다. SQL Azure SQL Server 위에 빌드됩니다. 그러나 몇 가지 차이점이 있으며 지금 더 잘 이해하기를 바랍니다. 질문, 우려 사항, 의견이 있나요? 아래에 게시하고 우리는 그들을 해결하기 위해 노력할 것입니다.</p>
