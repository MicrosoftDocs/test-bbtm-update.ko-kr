### YamlMime:Yaml
ms.openlocfilehash: ee915194c50ec36954cc39dd9d5967af16e3ea52
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900880"
Slug: scanatomy-2
Title: Bletchley – 블록체인 스마트 계약의 진화를 & Cryptlet Fabric
Summary: 'Cryptlet Fabric의 첫 번째 공개 미리 보기에 가까워지면서 블록체인 애호가, 전문가 및 개발자가 기대할 수 있는 블록체인을 빠르게 강조할 수 있는 좋은 시기였습니다.  Cryptlet Fabric은 새로 제안된 3계층 & 계층화된 스마트 계약 아키텍처의 중간 계층으로 설계되었으므로 이러한 구현에서 기대할 수 있는 사항을 제공합니다.  크기 조정, 장애 조치, 캐싱, 모니터링, 관리... 기능의 긴 목록, 하지만 새로운 기능:'
Content: >-
  <h2>스마트 계약의 구조</h2>


  <p>스마트 계약의 개념은 잠시 동안 주변에 있었고 주로 1990 <a href="https://en.wikipedia.org/wiki/Nick_Szabo" target="_blank">년대 후반에 닉 Szabos&rsquo;</a> 작업에 기인한다. 그러나 2015년 여름까지 이더리움의 프론티어 릴리스가 첫 번째 구현으로 출시될 때까지 추상적인 개념으로 남아 있었다. 스마트 계약의 약속은 거대하고 비즈니스가 영원히 수행되는 방식을 바꿀 수있는 혁명적 인 파괴자로서 모든 업계의 관심을 받고 있습니다. 그것은 여전히 볼 수 있지만, 매우 중요한 기술의 대부분의 첫 번째 구현과 마찬가지로, 몇 가지 초기 교훈과 개선이 이루어질 수있는 방법에 대한 몇 가지 성찰이있다.</p>


  <p>저는 스마트 계약이 현재 구현되는 방법과 성능, 보안, 확장성, 관리 효율성, 버전 관리 및 재사용을 크게 개선하기 위해 리팩터링할 수 있는 방법을 개략적으로 설명하는 논문을 작성했습니다. 이 문서에서는 문제를 분리하고 3계층/계층화된 스마트 계약 아키텍처를 구현하는 데 중점을 둔 새로운 아키텍처 접근 방식에 대한 사고 프로세스 및 역사적 맥락을 설명합니다.</p>


  <p>컨텍스트와 3계층 &amp; 계층&rdquo;화된 스마트 계약 아키텍처의 &ldquo;의미를 정확히 이해하려면 이 논문에 <a href="https://github.com/Azure/azure-blockchain-projects/blob/master/bletchley/AnatomyofASmartContract.md">스마트 계약의 해부학</a>을 읽어보세요.</p>


  <p>짧고 달콤한 대답을 원하는 경우 다음과 같습니다. 반 신뢰할 수 있는 엔터프라이즈 컨소시엄 네트워크를 위해 설계된 스마트 계약은 3개의 주요 계층으로 구분되어야 합니다.</p>


  <ul>
   <li>데이터 계층 &ndash; 데이터 스키마의 정의이며 삽입(추가) 및 읽기 최적화의 유효성을 검사하기 위한 데이터 논리 <em>만</em> 정의합니다. Ethereum 또는 Chain과 같은 플랫폼에서는 Solidity 및 Ivy와 같은 언어를 이 계층에서 사용할 수 있습니다. 이는 관계형 데이터베이스에서 SQL 언어 및 저장 프로시저를 사용하는 방법과 유사합니다.</li>
   <li>비즈니스 계층 UI(프레젠테이션 계층 &ndash; ) 또는 기타 외부 애플리케이션에서 스마트 계약과 상호 작용하기 위한 스마트 계약 및 표면 수준 API에 대한 모든 비즈니스 논리입니다. Cryptlet 패브릭에서 지원하는 런타임을 대상으로 하는 모든 언어로 작성된 Cryptlet입니다. (.NET, .NET Core, JVM, 네이티브)</li>
   <li>Presentation Layer &ndash; 사용자 인터페이스 플랫폼 및 Cryptlet에서 노출된 API를 사용하여 빌드된 기타 애플리케이션.</li>
  </ul>


  <p>그런 다음, 프레젠테이션, 중간(비즈니스) 및 데이터 계층의 각 계층에서 이러한 계층을 배포, 최적화 및 확장할 수 있습니다.</p>


  <blockquote>

  <p>*이 방법은 일반적으로 스마트 계약의 신뢰할 수 없는 구현에는 유효하지 않지만 엔터프라이즈 컨소시엄 블록체인을 대상으로 합니다.</p>

  </blockquote>


  <h2>Cryptlet 패브릭 &ndash; 업데이트</h2>


  <p>Cryptlet Fabric의 첫 번째 공개 미리 보기에 가까워지면서 블록체인 애호가, 전문가 및 개발자가 기대할 수 있는 블록체인을 빠르게 강조할 수 있는 좋은 시기였습니다. Cryptlet Fabric은 새로 제안된 3계층 &amp; 계층형 스마트 계약 아키텍처의 중간 계층으로 설계되었으므로 이러한 구현에서 기대할 수 있는 사항을 제공합니다.&nbsp; 확장, 장애 조치, 캐싱, 모니터링, 관리&hellip; 기능의 긴 목록을 관리하지만 새로운 기능은 다음과 같습니다.</p>


  <h4>암호화 기본 형식, 보안 실행 Enclave 및 런타임 보안 키(비밀) 플랫폼을 사용하여 이러한 키를 대규모로 암호화하여 보호하는 작업을 수행하기 위해 생성, 지속성 및 동적 애니메이션을 수행할 수 있습니다.</h4>


  <p>이를 통해 Cryptlet은 보안 실행 환경에서 키 쌍을 만들고 저장하고 사용하여 디지털 서명, 제로 지식 증명, 링 서명, 임계값 서명, 심지어 모든 보안 Enclave 내의 동형 암호화와 같은 모든 종류의 &ldquo;블록체인 작업을&rdquo; 수행할 수 있습니다. 크립틀릿은 2가지 기본 유형으로 제공되며, 깊이, 유틸리티 및 계약 <a href="https://github.com/Azure/azure-blockchain-projects/blob/master/bletchley/CryptletsDeepDive.md" target="_blank">에서 Cryptlet을</a> 읽는 데 몇 가지 세부 사항을 설명했습니다.</p>


  <p>Cryptlet Fabric은 기존 시스템과의 통합뿐만 아니라 Cryptlet에 구현된 코드에서 다른 트랜잭션 메시지 및 암호화 서명을 추상화하여 블록체인 라우터 계층을 제공합니다. 예를 들어 Cryptlets&rsquo; 출력에는 시장 데이터 또는 비즈니스 논리 결과와 같이 블록체인으로 전송할 정보만 포함되며, 블록체인 라우터 및 블록체인 플랫폼 특정 공급자에 의해 아래 Cryptlet Fabric에 의해 실제 블록체인 특정 트랜잭션으로 패키지됩니다.&nbsp; 이 캡슐화 기술은 TCP/IP와 같은 기술이 모든 종류의 네트워크(LAN, WAN, 인터넷 및 모바일) 및 모든 종류의 애플리케이션에서 작동할 수 있도록 수십 년 동안 사용되어 왔습니다. 이를 통해 Cryptlet을 다양한 유형의 블록체인에서 다시 사용할 수 있습니다.</p>


  <h3>유틸리티 암호화(oracles)</h3>


  <p>좋아, 나는 마이크로 소프트 사람이되는 것은 내가 회사와 연결하지 않고 아무것도 오라클을 호출하기 어렵게 만든다는 것을 인정합니다. 문제의 사실은 유틸리티 암호화는 주로 블록 체인 오라클을 작성하는 더 확장성, 표준, 보안 및 검색 가능한 방법으로 생각 될 수 있다는 것입니다. Cryptlet에 대해 가져오는 대부분의 요청은 처음에 이 범주에 속하며 블록체인 애플리케이션에 대해 안전한 인증된 데이터 원본을 제공합니다. 선택한 대상 지정 언어(초기) .NET, .NET Core, JVM 및 운영 체제 미설치 런타임을 사용하여 cryptlet oracle을 작성할 수 있으므로 C#, Java, C++, F#, VB 등...&nbsp; cryptlet oracle은 다음을 포함하여 원하는 모든 유형의 데이터를 게시할 수 있습니다.</p>


  <ul>
   <li>시장 가격</li>
   <li>패키지 배달 알림</li>
   <li>워크플로 다음 단계</li>
   <li>날씨 경고</li>
   <li>크레딧 다운그레이드와 같은 대응 업데이트</li>
  </ul>


  <p>및 다음과 같은 구독 매개 변수를 정의합니다.</p>


  <ul>
   <li>시간 및 날짜</li>
   <li>블록체인에서 이벤트 구동 트리거 또는 외부 원본 수신 대기</li>
   <li>이 값이&rdquo; &ldquo;true이면 &ldquo;&rdquo; 조건 &ndash; 부이고, 그렇지 않은 경우 스위치인 경우 평가 조합입니다.</li>
   <li>시간이 오후 4시 EST &amp; 인 경우 조합 &ndash; 은 뉴욕 증권 거래소가 오늘 열려 있었다 다음 나에게 LIBOR와 <em>x</em>의 가격을 보내</li>
  </ul>


  <p>암호화 오라클의 개발자 또는 공급자는 고객을 검색하고 획득하기 위해 라이브러리로 Azure Marketplace에 게시할 수 있습니다. 우리는 크고 작은 우리의 파트너에서 Cryptlet 라이브러리의 강력한 카탈로그를 볼 것으로 예상.</p>


  <p>그러나 유틸리티 Cryptlet에는 단순히 데이터를 제공하는 것보다 더 많은 것이 있습니다. 이를 사용하여 다른 애플리케이션 및 사용자 인터페이스에 대한 블록체인 기반 애플리케이션에 보안 채널을 노출할 수 있습니다.&nbsp; ERP 또는 CRM 시스템은 세부 정보를 알 필요 없이 블록체인에서 데이터를 읽을 수 있으며, 블록체인을 기존 엔터프라이즈 인프라에 쉽게 통합하기 위해 블록체인에 데이터와 이벤트를 안전하게 실행할 수도 있습니다. 또한 Cryptlet은 블록체인 트랜잭션을 확인하고 인덱스 요청 또는 데이터 끌어오기를 실행하여 기존 시스템으로 이벤트를 트리거하여 블록체인 애플리케이션 및 분석 플랫폼에 서비스를 제공할 수 있습니다.</p>


  <p>&rsquo;고객과 파트너는 유틸리티 Cryptlet에 대한 많은 용도를 찾을 수 있지만 가장 먼저 가장 명백한 것은 블록체인 오라클에 대한 것입니다.</p>


  <h2>계약 암호화</h2>


  <p>이러한 Cryptlet은 스마트 계약을 3계층/계층화된 아키텍처로 리팩터링하는 것을 완전히 실현하는 데 핵심적인 요소입니다. 이러한 암호화는 여러 가지 면에서 유틸리티 암호화와 다릅니다. 유틸리티 Cryptlet에는 여러 인스턴스가 동시에 처리되는 여러 인스턴스가 있을 수 있지만, 계약 Cryptlet은 단일, 페어링 또는 링 인스턴스화되어 특정 스마트 계약에 바인딩됩니다.&nbsp; 계약 Cryptlet에는 거래처 간에 스마트 계약을 실행하기 위한 상호 작용을 위한 비즈니스 논리, 규칙 및 외부 API가 포함되어 있습니다.&nbsp; 상대방 간에 강력한 ID 또는 신뢰가 있는 프라이빗 반신탁 컨소시엄 블록체인 네트워크에서 스마트 계약 논리는 온체인&rdquo;에 존재&ldquo;하거나 네트워크의 모든 노드에서 실행될 필요가 없습니다.&nbsp; 블록체인의 데이터 계층과 위의 비즈니스 및 프레젠테이션 간의 문제를 분리하면 재사용 및 최적화를 위한 계층 추상화 구현 간에 코드를 격리합니다.</p>


  <p>계약 Cryptlet은 자체적으로 디지털 서명되며, 포함된 코드가 비공개로 변조하지 않고 변경되지 않고 실행되었음을 증명하는 enclave 내에서 실행됩니다.&nbsp; 이렇게 하면 Cryptlet의 코드가 해당 항목 간에 비공개로 설정되고 지적 재산을 보호하기 위해 암호화될 수도 있습니다.&nbsp; 상대방은 자체 계약 암호화를 작성하고 검토하고, 구현을 위해 컴파일 및 패키징하기 전에 코드를 검사하고 확인하거나, 공급업체 또는 평판이 뒤처진 인증된 계약 암호화 중에서 선택할 수 있습니다.&nbsp;</p>


  <p>특정 스마트 계약 인스턴스에 참여하는 각 상대에 대해 계약 암호화를 인스턴스화할 수 있습니다.&nbsp; 이러한 Cryptlet 쌍 및 링은 선택 사항이지만 각 계약 Cryptlet은 해당 상대에 속하는 서명 또는 암호화를 위한 프라이빗 키와 같은 비밀을 보유할 수 있으므로 동일한 주소 공간에서 해당 항목의 비밀이 서로 일치하지 않도록 방지할 수 있습니다.&nbsp; 이 기능을 사용하면 결과 암호화와 같은 고급 트랜잭션 시나리오를 임계값 또는 링 암호화 체계를 사용하여 블록체인에 저장할 수 있습니다.</p>


  <p>계약 Cryptlet은 패브릭&rsquo;&ldquo; 비밀 서비스에서 가져온 권한이 있는 프라이빗 키와 비밀을&rdquo; 사용할 수 있습니다.&nbsp; 이러한 비밀은 Azure Key Vault를 통해 해당 항목에 의해 완전히 제어되며 Microsoft를 비롯한 다른 참가자는 액세스할 수 없습니다.</p>


  <p>이 방법을 사용하면 스마트 계약&rsquo; 비즈니스 및 통합 논리를 정의하는 코드를 확장된 리소스에서 실행하고 데이터 가까이에 배치하여 성능을 극대화할 수 있습니다.&nbsp; 블록체인에 유지되는 데이터는 여전히 체인&rdquo;의 데이터 논리&ldquo;의 적용을 받으며 합의 프로세스를 통해 네트워크에서 조정됩니다.&nbsp; Cryptlet, enclave 및 블록체인 공급자의 디지털 서명은 유효성 검사 및 증명에 사용되며 블록체인의 각 트랜잭션과 함께 증명으로 저장할 수 있습니다.</p>


  <p>계약 Cryptlet은 유틸리티 Cryptlet 서비스도 사용하나 구독 또는 직접 API 액세스를 통해 패브릭 내에서 직접 상호 작용할 수 있습니다.</p>


  <p>Cryptlet을 사용하면 다음과 같은 세 개의 계층화된 아키텍처를 사용할 수 있습니다.</p>


  <ul>
   <li>블록체인의 스마트 계약은 데이터 계층을 나타내는 블록체인 네트워크에 배포되는 스키마 및 데이터 논리를 정의합니다.</li>
   <li>계약 Cryptlet은 중간 계층을 나타내는 Cryptlet Fabric에 배포된 사용자 인터페이스 및 외부 애플리케이션에 대한 비즈니스 논리 및 Surface Level API를 정의합니다.</li>
   <li>유틸리티 암호화는 중간 계층에서도 재사용 가능한 데이터 원본 및 이벤트를 제공합니다.</li>
   <li>프레젠테이션 계층은 프레젠테이션 계층을 위해 웹 서버, 모바일 디바이스, 서비스 버스 등에 배포된 표준 UI 기술 또는 통합 플랫폼을 사용하여 Cryptlet Fabric의 Surface Level API와 통신합니다.</li>
  </ul>


  <p>이 아키텍처 접근 방식은 클라이언트에서 블록체인 구현을 추상화하고 블록체인과 Cryptlet Fabric을 독립적으로 조정 및 크기 조정합니다.</p>


  <h2>Cryptlet 패브릭 다이어그램</h2>


  <p>다음은 Cryptlet Fabric의 업데이트된 다이어그램입니다.&nbsp; 후속 게시물과 백서에서 해당 부분을 자세히 다룰 예정이며, 릴리스에도 포함될 예정입니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3cebfd6b-e136-49b8-aa5d-d83af1fd9404.png"><img alt="CryptletSmartContracts" border="0" height="467" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/477891e8-3d83-4b76-bac4-55e9e721ac19.png" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="CryptletSmartContracts" width="610"></a></p>
