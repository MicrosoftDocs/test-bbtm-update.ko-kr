### YamlMime:Yaml
ms.openlocfilehash: bee6206fac474042e9e079dfab58a756b6fb5a43
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908397"
Slug: how-to-sync-sql-server-data-with-azure-search
Title: Azure Search와 SQL Server 데이터를 동기화하는 방법
Summary: '이 블로그 게시물에서는 통합 변경 내용 추적이라는 SQL Server 기능을 사용하여 SQL Server 데이터 변경 내용을 Azure Search로 효율적으로 동기화하는 방법을 설명하려고 합니다. '
Content: >-
  Azure Search에서 수신하는 일반적인 요청은 SQL Server 데이터베이스의 데이터를 Azure Search로 확장하는 방법입니다.사용자가 온-프레미스 SQL Server 데이터베이스에서 클라우드로 전체 텍스트 워크로드를 오프로드하거나 단순히 Azure Search의 고급 검색 기능을 활용하려고 하기 때문일 수 있습니다.


  많은 상황에서 데이터 변경 내용은 실시간 수준에 가까운 검색 엔진에 반영되어야 합니다.변경된 행 추적이 제대로 수행되지 않으면 계산에 비용이 많이 들 수 있으므로 이 작업은 어려운 작업이 될 수 있습니다.이 블로그 게시물에서는 <a href="https://technet.microsoft.com/en-us/library/cc280462(v=SQL.105).aspx">통합 변경 내용 추적</a>이라는 SQL Server 기능을 사용하여 SQL Server 데이터 변경 내용을 Azure Search로 효율적으로 동기화하는 방법을 설명하려고 합니다. 변경 내용 추적은 사용자 테이블에 적용된 변경 내용(삽입, 업데이트 및 삭제)을 추적할 수 있는 SQL Server 내부 기능입니다.또한 데이터베이스 성능에 매우 낮은 영향을 주는 변경 내용을 추적하고 찾는 매우 효율적인 방법입니다.


  이 블로그 게시물에서는 <a href="https://go.microsoft.com/fwlink/?LinkID=517876">Codeplex</a>에 있는 샘플을 사용합니다.


  &nbsp;

  <h3><strong>요구 사항</strong></h3>

  이 자습서에서는 다음에 대한 액세스 권한이 있다고 가정합니다.

  <ul>
   <li>SQL Server 2008 이상
  <ul>
   <li><b>참고:</b>  기본 데이터베이스 구성 및 SQL Server Management Studio 사용하는 경우 (LocalDB)\v11.0으로 서버 인스턴스에 연결합니다.</li>
  </ul>

  </li>
   <li>Azure Search 서비스( <a href="https://azure.microsoft.com/en-us/documentation/articles/search-get-started/">자세한 내용은 여기</a>)를 참조하세요.</li>
   <li>Visual Studio 2012 이상</li>
   <li><a href="https://go.microsoft.com/fwlink/?LinkID=517876">샘플</a>에 대한 소스 코드</li>
  </ul>

  &nbsp;

  <h3><strong>Azure Search 샘플에 SQL Server 구성</strong></h3>

  이 시점에서 샘플 프로젝트를 다운로드하고 Visual Studio 열어야 합니다.샘플 Visual Studio 프로젝트에서 Azure Search 서비스에 대한 연결 정보를 추가해야 합니다.또한 수정해야 하는 경우 SQL Server 데이터베이스에 대한 연결 정보도 적어 두세요.


  app.config 열고 Azure Portal에서 찾을 수 있는 Azure Search 서비스 및 Azure Search Service API 키를 반영하도록 SearchServiceName 및 SearchServiceApiKey 값을 변경<a href="https://portal.azure.com/">합니다.</a>


  &nbsp;

  <h3><strong>SQL Server 데이터베이스에 변경 내용 추적 추가</strong></h3>

  이 애플리케이션을 시작하면 Products라는 테이블과 함께 "AzureSearchSyncTest"라는 새 데이터베이스가 데이터로 채워집니다.이 테이블이 만들어지면 이 테이블에 대한 변경 내용 추적이 사용하도록 설정됩니다.

  <p style="padding-left: 30px;"><strong>선택 사항</strong>: 고유한 SQL Server 데이터베이스에서 이 작업을 시도하려는 경우 \sql 폴더에 사용할 수 있는 두 개의 스크립트가 있습니다. 또는 SQL Server 인스턴스를 가리키도록 app.config 파일의 연결 정보를 변경하기만 하면 됩니다.</p>

  검토할 가치가 있는 파일 중 하나는 \sql 폴더에 있는 add_change_tracking.sql 파일입니다. 이 테이블에 대한 통합 변경 내용 추적을 설정하려면 두 개의 SQL 명령만 필요합니다.

  <blockquote>

  <p style="padding-left: 30px;"><em>ALTER DATABASE SyncTest SET CHANGE_TRACKING = ON</em></p>

  <p style="padding-left: 30px;"><em>(CHANGE_RETENTION = 2일, AUTO_CLEANUP = ON);</em></p>

  <p style="padding-left: 30px;"><em>ALTER TABLE Products ENABLE CHANGE_TRACKING</em></p>

  <p style="padding-left: 30px;"><em>WITH (TRACK_COLUMNS_UPDATED = OFF);</em></p>

  </blockquote>

  첫 번째 명령은 데이터베이스에서 변경 내용 추적을 켜고 SQL Server 변경 정보를 2일 동안 유지하도록 지시하며, 그 후에는 데이터베이스 공간이 너무 많이 차지하지 않도록 변경 데이터가 삭제됩니다.두 번째 명령은 추적할 테이블을 SQL Server 알려줍니다.  이 데모에서는 SQL Server 변경된 행만 추적하고 열별 업데이트를 추적<span style="text-decoration: underline;">하지 말라고</span> 했습니다.


  다른 방법은 열에서 변경 트랙을 사용하도록 설정하는 것입니다. 변경된 전체 행보다는 변경된 열을 보내는 것이 더 적합한 경우 이 작업을 수행해야 합니다.이렇게 하면 변경 내용 추적에 할당된 스토리지 양이 늘어나므로 많은 데이터 변경을 수행하고 변경 내용이 일반적으로 행의 몇 열로 제한되는 경우 가치가 있을 수 있습니다.


  &nbsp;

  <h3><strong>작동 방식</strong></h3>

  SQL Server Azure Search로의 동기화를 수행하는 이 콘솔 애플리케이션을 자세히 살펴보겠습니다.이전 단계에서는 Visual Studio 애플리케이션을 열었을 것입니다.아직 열지 않은 경우 지금 여세요.


  &nbsp;

  <h3><strong>변경 내용 검색</strong></h3>

  SQL Server 변경 내용을 효율적으로 검색하는 기능이 이 애플리케이션의 핵심입니다.Program.cs 파일을 열고 Main(string[] args) 함수로 이동합니다.기록해 두려는 첫 번째 줄은 다음과 같습니다.

  <p style="padding-left: 30px;">_lastVersion = -1;</p>

  SQL Server 통합 변경 내용 추적에서는 변경 내용이 추적된 테이블 중 하나에 변경될 때마다 증가하는 변경 버전을 사용합니다.이 변경 버전을 사용하여 SQL Server 특정 변경 버전 이후 발생한 변경 내용을 다시 보내도록 요청할 수 있습니다.이 _lastVersion 변수는 이전 동기화가 성공적으로 완료되었을 때 사용된 변경 버전을 추적하는 데 사용됩니다.이 경우 처음으로 앱을 실행하므로 애플리케이션에 첫 번째 동기화를 위해 모든 데이터를 동기화하도록 지시하는 -1로 설정합니다.


  이 애플리케이션에 대해 수행할 수 있는 선택적 향상된 기능은 이 _lastVersion 값을 어딘가에 저장하고 애플리케이션이 실행되면 로드하는 것입니다.이렇게 하면 애플리케이션을 닫더라도 중단한 위치를 선택할 수 있습니다.


  이 함수의 다음 줄은 SQL Server 데이터베이스에서 변경 내용 추적을 초기화하고 데이터를 수신할 Azure Search 인덱스도 만듭니다.


  while(true) 루프로 이동하면 이 애플리케이션이 5초마다 변경 내용을 확인하는 것을 볼 수 있습니다[Thread.Sleep(5000)].


  이 루프 내에서 ChangeEnumeratorSql이 만들어지는 것을 볼 수 있습니다.이 쿼리는 처음으로 SQL Server Azure Search로 데이터를 전체 업로드하는 데 사용됩니다.


  다음으로 changeEnumerator.ComputeChangeSet(_lastVersion)이 호출됩니다.이 호출은 ChangeEnumerator.cs 파일을 열고 ComputeChangeSet(Int64 lastVersion) 함수로 이동하는지 확인할 수 있는 상당한 작업을 수행합니다.


  먼저 GetChangeSetVersion(con)을 호출하여 SQL Server 최신 변경 버전이 무엇인지 묻습니다.다음에 이 작업을 실행할 때 이 값을 사용하여 이 시점 이후 발생한 변경 내용을 찾으려고 하므로 이 점을 기억하겠습니다.


  다음으로, 모든 데이터 변경 내용을 IEnumerableDictionary&lt;&gt;로 수집하는 EnumerateUpdatedDocuments(con, lastVersion)에 대한 호출이 표시됩니다.이 EnumerateUpdatedDocuments 함수를 드릴인하면 처음(_lastVersion -1인 경우) 데이터의 전체 선택을 수행합니다._lastVersion -1이 &gt; 면 변경 내용만 가져옵니다.CHANGETABLE 테이블이 변경 내용을 가져올 수 있는 핵심임을 알 수 있습니다.이 테이블은 SQL Server 유지 관리되는 내부 테이블입니다.제품 테이블에 발생한 삽입 및 업데이트만 받으려는 다음 줄도 확인할 수 있습니다.

  <blockquote>

  <p style="padding-left: 30px;">sqlCmd += "and(CT. SYS_CHANGE_OPERATION = 'U' ";</p>

  <p style="padding-left: 30px;">sqlCmd += "또는 CT. SYS_CHANGE_OPERATION = 'I') ";</p>

  </blockquote>

  삭제를 동기화하는 기능을 추가하려는 경우 CT를 요청하는 유사한 방식으로 이 테이블을 호출할 수도 있습니다. SYS_CHANGE_OPERATION = 'D'.


  SQL Azure 현재 통합 변경 내용 추적을 지원하지 않으므로 다른 변경 내용 추적 방법(예: rowversions + 삭제 표시)을 구현하기 위해 이 애플리케이션을 변경해야 합니다.


  &nbsp;

  <h3><strong>Azure Search에 변경 내용 푸시</strong></h3>

  변경 내용을 가져오는 데 사용되는 메서드를 검토했으므로 Program.cs의 Main(string[] args) 함수에서 while(true) 루프로 돌아가 보겠습니다.중단한 위치를 선택하여 ApplyChanges(변경 내용)에 대한 호출을 볼 수 있습니다. 이렇게 하면 Azure Search에 업로드할 데이터의 ChangeSet이 수신됩니다.이 함수를 자세히 살펴보면 999의 일괄 처리로 변경 내용이 업로드되는 것을 볼 수 있습니다."mergeOrUpload"라는 작업도 사용합니다.그러면 문서 키가 없는 경우 수신되는 데이터를 삽입하고 키가 있는 경우 해당 문서의 값을 업데이트해야 한다는 것을 Azure Search에 알릴 수 있습니다.키 필드는 Azure Search에서 문서를 고유하게 식별하는 데 사용됩니다.이 경우 productID 필드가 키 필드로 사용됩니다.


  한 가지 선택적 개선 사항은 새 행을 업로드하고 새 행이 새로 추가된 경우 업로드가 병합 및 mergeOrUpload보다 빨라야 한다는 것입니다.


  &nbsp;

  <h3><strong>동기화 예약</strong></h3>

  이 애플리케이션은 5초마다 변경 내용을 확인하기 위해 while 루프를 사용하고 실행되는 매우 간단한 콘솔 애플리케이션입니다.온-프레미스 프로덕션 환경에서는 이를 Windows 서비스로 만들거나 일정 작업의 일종을 구현하는 것이 좋습니다.클라우드에서 이 기능을 실행하는 경우(예: SQL Server VM에 대해) Webjob 또는 WebRole이 이 기능을 구현하는 가장 좋은 방법일 것입니다.


  &nbsp;

  <h3><strong>애플리케이션을 실행하여 SQL Server Azure Search로 데이터 변경 업로드</strong><!--?xml:namespace prefix = "o" ns = "urn:schemas-microsoft-com:office:office" /--></h3>

  이 시점에서 애플리케이션을 시작할 준비가 된 것입니다.애플리케이션을 단계별로 실행할 수 있도록 Program.cs 파일 내에 있는 Main 함수에 중단점을 추가할 수 있습니다.콘솔에 다음과 같은 텍스트가 표시됩니다.

  <p style="padding-left: 30px;">동기화 처리가 시작되었습니다...</p>

  <p style="padding-left: 30px;">Products 테이블을 사용하여 SQL Server 데이터베이스 만들기...</p>

  <p style="padding-left: 30px;">제품 테이블에 대한 변경 내용 추적 사용...</p>

  <p style="padding-left: 30px;">294개 변경 내용 업로드 중...</p>

  <p style="padding-left: 30px;">동기화 완료, 5초 대기 중...</p>

  <p style="padding-left: 30px;">동기화 완료, 5초 대기 중...</p>

  애플리케이션의 첫 번째 실행이 294개 행을 모두 업로드하는 방법을 확인합니다.5초 간격으로 애플리케이션에서 변경 내용을 확인한 다음 업로드합니다.


  행 중 하나를 변경하고 어떤 일이 일어나는지 살펴보겠습니다.애플리케이션을 계속 실행하는 동안 SQL Server 데이터베이스 AzureSearchSyncTest에 연결하고 다음을 실행합니다.

  <p style="padding-left: 30px;">UPDATE [Products] set Color = 'Green' where ProductID = 680</p>

  콘솔 창으로 돌아가면 다음 메시지가 표시됩니다.

  <p style="padding-left: 30px;">1 변경 내용 업로드 중...</p>

  애플리케이션은 하나의 업데이트를 찾아서 Azure Search에 업로드했습니다.새 행을 삽입하는 경우에도 이 작업이 작동합니다.통합 변경 내용 추적은 행 삭제도 추적합니다. 그러나 이 샘플에는 추가되지 않았습니다.

  <h3>Azure Search 인덱스에서 데이터 확인</h3>

  이제 Azure Search 인덱스까지 데이터가 동기화되었으므로 인덱스 쿼리를 수행하고 모든 데이터가 있는지 확인합니다.이렇게 하려면 <a href="https://www.telerik.com/download/fiddler">Fiddler를</a> 사용합니다.

  <ul>
   <li>Fiddler에서 "Composer" 탭을 선택한 다음, "구문 분석" 탭을 선택합니다.</li>
   <li>콤보 상자에서 다음을 선택합니다.</li>
   <li>URL에 다음을 입력하고 Azure Search Service 이름으로 바꿉니다. <a href="https://[AZURESEARCH_SERVICENAME].search.windows.net/indexes/catalog/docs('680')?api-version=2014-07-31-Preview">https://[AZURESEARCH_SERVICENAME].search.windows.net/indexes/catalog/docs('680')?api-version=2014-07-31-Preview</a></li>
   <li>요청 헤더 섹션에서 api-key 값을 유효한 API 키로 바꿔서 다음을 입력합니다.</li>
   <li>Execute 키를 누릅니다.</li>
  </ul>

  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/24/fiddler.png"><img class="alignnone size-medium wp-image-208551" alt="fiddler" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler-636x139.png" width="636" height="139" /></a>


  왼쪽 사이드바에 다음과 같이 행이 표시됩니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler_response.png"><img class="alignnone size-full wp-image-208571" alt="fiddler_response" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler_response.png" width="306" height="93" /></a>

  <p style="padding-left: 30px;">이 행을 두 번 클릭하면 이 행에 대한 JSON 결과가 표시된 창이 열립니다.</p>

  이 행이 존재하는 방식과 녹색 색도 업로드되었습니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/24/fiddler_json.png"><img class="alignnone size-medium wp-image-208561" alt="fiddler_json" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fiddler_json-636x308.png" width="636" height="308" /></a>


  이 시점에서 SQL Server Azure Search 간에 동기화가 실행됩니다.

  <h3>샘플에 대한 선택적 개선 사항</h3>

  다음은 이 샘플에서 수행할 수 있는 몇 가지 향상된 기능입니다.

  <ol>
   <li>Azure Search에 삭제 업로드에 대한 지원을 추가합니다.Azure Search에서 삭제를 실행하는 방법에 대한 자세한 내용은 <a href="https://msdn.microsoft.com/en-us/library/azure/dn798930.aspx">이 항목에 대한 Azure Search API Docs를</a> 참조하세요.</li>
   <li>애플리케이션이 _lastVersion 값을 시작할 때마다 -1로 설정됩니다.그러면 애플리케이션에서 Azure Search에 대한 데이터 변경 내용의 전체 업로드를 실행하도록 지시합니다.마지막으로 성공한 변경 버전을 데이터베이스에 저장하고 애플리케이션이 시작될 때 이를 검색하여 애플리케이션이 중단된 위치를 선택할 수 있도록 할 수 있습니다.</li>
   <li>이 콘솔 애플리케이션을 Windows 서비스로 수정하는 것이 좋습니다.</li>
  </ol>

  &nbsp;


  <a href="https://feedback.azure.com/forums/263029-azure-search/suggestions/6328649-localization">피드백을</a> 계속 보내주세요.


  Liam Cavanagh는 자신의 블로그 또는 <a href="https://twitter.com/liamca" target="_blank">트위터를</a> 통해 연락할 수 있습니다.
