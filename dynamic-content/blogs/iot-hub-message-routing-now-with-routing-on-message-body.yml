### YamlMime:Yaml
ms.openlocfilehash: 1a141d9df698a29744716426fa03298469bd9d27
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910979"
Slug: iot-hub-message-routing-now-with-routing-on-message-body
Title: 'IoT Hub 메시지 라우팅: 이제 메시지 본문에서 라우팅 사용'
Summary: 이제 메시지 본문에서 IoT Hub 메시지 라우팅을 수행할 수 있습니다. 메시지 본문에 따라 메시지를 라우팅할 수 있는 기능을 요청하는 고객의 피드백이 넘쳐나기 때문에 팀은 작업의 우선 순위를 지정했으며 이제 모든 사용자가 사용할 수 있습니다.
Content: "<p>이제 메시지 본문에서 <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-d2c\">IoT Hub 메시지 라우팅을</a> 수행할 수 있습니다. 메시지 본문을 기반으로 메시지를 라우팅할 수 있는 기능을 요청하는 고객의 피드백이 넘쳐나자 팀은 작업 우선 순위를 지정했으며&rsquo; 이제 모든 사용자가 사용할 수 있게 되었습니다.</p>\n\n<p>12월에는 IoT 솔루션 개발을 간소화하기 <a href=\"https://azure.microsoft.com/en-us/blog/azure-iot-hub-message-routing-enhances-device-telemetry-and-optimizes-iot-infrastructure-resources/\">위해 IoT Hub에 대한 메시지 라우팅</a> 을 릴리스했습니다. 메시지 라우팅을 통해 고객은 IoT Hub 자체의 고객 정의 쿼리에 따라 메시지를 다른 서비스로 자동으로 라우팅할 수 있으며, 어려운 구현 아키텍처를 모두 처리합니다. 메시지 라우팅은 처음에 메시지 헤더를 기반으로 제공되었으며, 오늘 현재 사용할 수 있는 JSON 메시지의 메시지 본문을 기반으로 메시지를 라우팅할 수 있음을 발표하게 되어 기쁩니다.</p>\n\n<p>헤더를 기반으로 하는 메시지 라우팅을 통해 고객은 서비스를 해독하지 않고도 메시지를 사용자 지정 엔드포인트로 라우팅할 수 있지만, 이를 통해 흐르는 원격 분석을 열 수 있지만, 고객이 달리 포함하지 않은&rsquo; 정보를 헤더에 추가해야 하므로 유용성이 저하되었습니다. 많은 고객은 흥미로운 정보가 이미 있는 메시지 본문&rsquo;의 내용에 따라 직접 라우팅할 수 있기를 원했습니다. 메시지 본문에 대한 라우팅은 직관적이며 고객이 메시지 라우팅을 완전히 제어할 수 있도록 합니다.</p>\n\n<p>메시지 본문을 기반으로 라우팅하는 것은&rsquo; 매우 간단합니다. 경로 쿼리에서 $body 사용하여 메시지 본문에 액세스하기만 하면 됩니다. 예를 들어 내 디바이스는 C# 디바이스 SDK를 사용하여 다음 예제 코드를 사용하여 메시지를 보냅니다.</p>\n\n<pre class=\"prettyprint\">\nDeviceClient deviceClient = DeviceClient.CreateFromConnectionString(deviceClientConnectionString); \n \nstring messageBody = @&quot;{ \n                            &quot;&quot;Weather&quot;&quot;:{ \n                                &quot;&quot;Temperature&quot;&quot;:50, \n                                &quot;&quot;Time&quot;&quot;:&quot;&quot;2017-03-09T00:00:00.000Z&quot;&quot;, \n                                &quot;&quot;PrevTemperatures&quot;&quot;:[ \n                                    20, \n                                    30, \n                                    40 \n                                ], \n                                &quot;&quot;IsEnabled&quot;&quot;:true, \n                                &quot;&quot;Location&quot;&quot;:{ \n                                    &quot;&quot;Street&quot;&quot;:&quot;&quot;One Microsoft Way&quot;&quot;, \n                                    &quot;&quot;City&quot;&quot;:&quot;&quot;Redmond&quot;&quot;, \n                                    &quot;&quot;State&quot;&quot;:&quot;&quot;WA&quot;&quot; \n                                }, \n                                &quot;&quot;HistoricalData&quot;&quot;:[ \n                                    { \n                                    &quot;&quot;Month&quot;&quot;:&quot;&quot;Feb&quot;&quot;, \n                                    &quot;&quot;Temperature&quot;&quot;:40 \n                                    }, \n                                    { \n                                    &quot;&quot;Month&quot;&quot;:&quot;&quot;Jan&quot;&quot;, \n                                    &quot;&quot;Temperature&quot;&quot;:30 \n                                    } \n                                ] \n                            } \n                        }&quot;; \n \n// Encode message body using UTF-8 \nbyte[] messageBytes = Encoding.UTF8.GetBytes(messageBody); \n \nusing (var message = new Message(messageBytes)) \n{ \n    // Set message body type and content encoding. \n    message.ContentEncoding = &quot;utf-8&quot;; \n    message.ContentType = &quot;application/json&quot;; \n \n    // Add other custom application properties.  \n    message.Properties[&quot;Status&quot;] = &quot;Active&quot;;    \n \n    await deviceClient.SendEventAsync(message); \n}\n</pre>\n\n<p>예제 메시지에 제공된 정보를 기반으로 메시지를 라우팅하는 다양한 방법이 있습니다. 실행할 수 있는 몇 가지 유형의 쿼리는 다음과 같습니다.</p>\n\n<ul>\n    <li>단순 본문 참조 <ul>\n        <li>$body. Weather.Temperature = 50</li>\n        <li>$body. Weather.IsEnabled</li>\n        <li>$body.message.Weather.Location.State = &#39;WA&#39;</li>\n    </ul>\n    </li>\n    <li>본문 배열 참조 <ul>\n        <li>$body. Weather.HistoricalData[0]. 월 = &#39;2월&#39;</li>\n    </ul>\n    </li>\n    <li>여러 본문 참조 <ul>\n        <li>$body. Weather.Temperature &gt;= $body. Weather.PrevTemperatures[0] + $body. Weather.PrevTemperatures[1]</li>\n        <li>$body. Weather.Temperature = 50 AND $body.message.Weather.IsEnabled</li>\n    </ul>\n    </li>\n    <li>기본 제공 함수와 결합 <ul>\n        <li>length($body. Weather.Location.State) = 2</li>\n        <li>lower($body. Weather.Location.State) = &#39;wa&#39;</li>\n    </ul>\n    </li>\n    <li>메시지 헤더와 조합 <ul>\n        <li>$body. Weather.Temperature = 50 AND Status = &#39;활성&#39;</li>\n    </ul>\n    </li>\n</ul>\n\n<p>IoT Hub가 본문 내용에 따라 메시지를 라우팅할 수 있는지 여부를 확인하려면 메시지에 본문의 콘텐츠 및 인코딩을 설명하는 특정 헤더가 포함되어야 합니다. 특히 메시지 본문의 라우팅이 작동하려면 메시지에 다음 헤더가 모두 있어야 합니다.</p>\n\n<ol>\n    <li>애플리케이션/json의 &quot;콘텐츠 형식&quot;</li>\n    <li>콘텐츠 인코딩은 다음 중 하나와 일치해야 합니다. <ul>\n        <li>&quot;utf-8&quot;</li>\n        <li>&quot;u t f-16&quot;</li>\n        <li>&quot;utf-32&quot;</li>\n    </ul>\n    </li>\n</ol>\n\n<p>Azure IoT 디바이스 SDK를 사용하는 경우 메시지 헤더를 필수 속성으로 설정하는 것은 매우 간단합니다. 타사 프로토콜 라이브러리를 사용하는 경우 이 테이블을 사용하여 IoT Hub에서 지원하는 각 프로토콜에서 헤더가 어떻게 매니페스트되는지 확인할 수 있습니다.</p>\n\n<table>\n    <tbody>\n        <tr>\n            <td>&nbsp;</td>\n            <td>AMQP</td>\n            <td>HTTP</td>\n            <td>MQTT</td>\n        </tr>\n        <tr>\n            <td>내용 유형</td>\n            <td>content-type</td>\n            <td>iothub-contenttype</td>\n            <td>$.ct</td>\n        </tr>\n        <tr>\n            <td>콘텐츠 인코딩</td>\n            <td>content-encoding</td>\n            <td>iothub-contentencoding</td>\n            <td>$.ce</td>\n        </tr>\n    </tbody>\n</table>\n\n<p>HTTP를 사용하려면 일괄 처리된 메시지를 설명하기 위해 사용자 지정 헤더가 필요합니다. well&rsquo;은 앞으로 몇 달 안에 패치되지 않은 메시지에 대한 표준 헤더에 대한 지원을 추가할 예정입니다.</p>\n\n<p>IoT Hub가 메시지 본문을 기반으로 라우팅하려면 메시지 본문이 올바른 형식의 JSON이어야 합니다. 콘텐츠 형식/콘텐츠 인코딩이 있는지 여부에 관계없이 메시지 헤더를 기반으로 메시지를 계속 라우팅할 수 있습니다. 콘텐츠 형식 및 콘텐츠 인코딩은 IoT Hub가 메시지 본문에 따라 라우팅하는 데만 필요합니다.</p>\n\n<p>이 기능은 메시지 본문을 기반으로 메시지를 라우팅하는 기능을 요청하는 피드백이 쏟아져 나오면서 일부 사용자에게 제공되었으며, 기능을 요청한 모든 사용자에게 큰 감사를 전하고 싶습니다. 언제나처럼 Azure IoT <a href=\"https://feedback.azure.com/forums/321918-azure-iot/\">User Voice 포럼</a>을 통해 제안을 계속 제출하거나 <a href=\"https://www.yammer.com/azureadvisors/\">Azure IoT Advisors Yammer 그룹에</a> 참여하세요.</p>"
