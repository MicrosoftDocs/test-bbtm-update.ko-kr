### YamlMime:Yaml
ms.openlocfilehash: 2f480daf5366a7ef1f39f6cd8c0693cb9cce1b65
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902757"
Slug: azure-cosmos-now-supports-cross-origin-resource-sharing-cors
Title: Azure Cosmos DB는 이제 CORS(원본 간 리소스 공유)를 지원합니다.
Summary: Azure Cosmos DB는 이제 핵심 SQL API에 대한 CORS(원본 간 리소스 공유) "allowedOrigins" 헤더를 지원합니다. 포털 또는 ARM 템플릿을 통해 이 설정을 구성할 수 있습니다.
Content: "<p>이제 Azure Cosmos DB는 코어 SQL API에 대해 CORS(원본 간 리소스 공유) &ldquo;allowedOrigins&rdquo; 헤더를 지원합니다. 포털 또는 ARM 템플릿을 통해 이 설정을 구성할 수 있습니다. CORS 지원을 사용하면 JavaScript 라이브러리를 사용하여 <a href=\"https://www.npmjs.com/package/@azure/cosmos\" target=\"_blank\">@azure/cosmos</a> 브라우저에서 DB를 Cosmos 웹앱에 직접 대화하고 중간 계층을 통한 추가 홉을 방지하여 보다 반응성이 뛰어난 최종 사용자 환경을 얻을 수 있습니다.</p>\n\n<h2>Azure Cosmos DB란?</h2>\n\n<p>Azure Cosmos DB는 모든 Azure 지역에서 데이터를 읽고 쓸 수 있는 전역적으로 분산된 다중 모델 데이터베이스 서비스입니다. 턴키 전역 배포를 제공하고, 99번째 백분위수에서 한 자리 밀리초 대기 시간을 보장하며, 처리량 및 스토리지의 탄력적 크기 조정을 보장합니다.</p>\n\n<p>Azure Cosmos DB 코어 SQL API의 경우 Node.js 및 브라우저 환경 모두에서 작동하는 JavaScript 라이브러리를 제공합니다. 이제 이 라이브러리는 CORS 지원을 활용할 수 있습니다. 이 기능을 사용하기 위해 필요한 클라이언트 쪽 구성은 없습니다. 이제 브라우저에서 Cosmos DB와 직접 통신할 수 있으므로 웹앱을 통한 추가 홉을 방지하여 웹 시나리오에 대해 더 높은 성능을 얻을 수 있습니다. 아래&rsquo; 링크 샘플에서는 websockets와 같은 항목을 사용하여 중간 서버를 설정하지 않고도 Cosmos DB의 변경 내용을 직접 수신할 수 있습니다.</p>\n\n<pre>\nimport {CosmosClient} from &quot;@azure/cosmos&quot;;\n\nconst client= new CosmosClient({\n   endpoint: &quot;<a href=\"https://&lt;your-cosmos-account\">https://&lt;your-cosmos-account</a>&gt;documents.azure.com&quot;,\n   auth: {} /* Permission token or read only key. Avoid master Key */\n});\n\nconst todos = client.database(&quot;TodoApp&quot;).container(&quot;Todo&quot;).items;\n\ntodos.readAll().toArray()\n     .then(({result})=&gt;{\n         for(const item of result) {\n             const e = document.createElement(&quot;div&quot;)\n             e.innerText = item.text;\n             document.body.prepend(e);\n         }\n     });</pre>\n\n<p>다음은 TypeScript 및 Webpack이 라이브러리와 함께 <a href=\"https://www.npmjs.com/package/@azure/cosmos\" target=\"_blank\">@azure/cosmos</a> 작동하여 모든 클라이언트에서 실시간 업데이트가 포함된 익명 게시판 앱을 빌드하는 <a href=\"https://github.com/christopheranderson/cosmos-browser-sample\" target=\"_blank\">간단한 샘플</a>이며, Cosmos DB에서 전적으로 구동됩니다.</p>\n\n<h3>CORS 사용</h3>\n\n<p>CORS를 사용하도록 설정하려면 포털 또는 ARM 템플릿을 사용할 수 있습니다. 와일드카드 &ldquo;*&rdquo; 를 사용하여 모든 원본을 허용하거나 쉼표로 구분된 정규화된 도메인을 지정할 수 있습니다(예<a href=\"https://www.mydomain.com\" target=\"_blank\">https://www.mydomain.com</a><a href=\"https://mydomain.com\" target=\"_blank\">https://mydomain.com</a>: , . <a href=\"https://api.mydomain.com)\" target=\"_blank\">https://api.mydomain.com)</a> 현재는 도메인 이름(즉, <a href=\"https://*.mydomain.net\" target=\"_blank\">https://*.mydomain.net)</a>의 일부로 와일드카드를 사용할 수 없습니다.</p>\n\n<p>포털에서 CORS를 사용하도록 설정하려면 Cosmos DB 계정으로 이동하고 설정 목록에서 <strong>CORS</strong> 옵션을 선택합니다. 여기에서 허용된 원본을 지정한 다음 <strong>저장</strong> 을 선택하여 계정을 업데이트할 수 있습니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/05fff13a-0fba-4e97-8832-fb4e0216a07a.png\"><img alt=\"Enabling CORS\" border=\"0\" height=\"784\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b2ce73e8-a9e4-443e-a672-899fae46dc2c.png\" style=\"margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;\" title=\"CORS 사용\" width=\"2103\"></a></p>\n\n<h2>브라우저에서 @azure/cosmos 라이브러리 사용</h2>\n\n<p>현재는 @azure/cosmos 패키지에 제공되는 라이브러리의 CommonJS 버전만 있습니다. 브라우저&rsquo;에서 라이브러리를 사용하려면 Rollup 또는 Webpack과 같은 도구를 사용하여 브라우저 호환 라이브러리를 만들어야 합니다. 특정 노드 라이브러리에는 브라우저 모의 항목이 제공되어야 합니다. 다음은 필요한 모의 설정이 있는 webpack 구성 파일의 예입니다.</p>\n\n<pre>\nconst path = require(&quot;path&quot;);\n\nmodule.exports = {\n   entry: &quot;./src/index.ts&quot;,\n   devtool: &quot;inline-source-map&quot;,\n   node: {\n     net: &quot;mock&quot;,\n     tls: &quot;mock&quot;\n   },\n   output: {\n     filename: &quot;bundle.js&quot;,\n     path: path.resolve(__dirname, &quot;dist&quot;)\n   }\n};\n \nAnother thing to consider in the browser is that you don&rsquo;t want to use your master key for most situations. It is best to use Resource Tokens or Readonly keys instead. You can refer to <a href=\"https://github.com/christopheranderson/tokenprovider\" target=\"_blank\">this sample on Github</a> to get started understanding how Resource Tokens work and how you can use something like Azure Functions to authenticate and authorize your users before giving them a Resource Token. We will have more blogs soon about how to use these more advanced authentication patterns with your browser based applications.</pre>\n\n<h2>시작</h2>\n\n<p>시작하려면 npm에서 라이브러리를 살펴보고 <a href=\"https://www.npmjs.com/package/@azure/cosmos\" target=\"_blank\">@azure/cosmos</a> 브라우저 기반 앱에서 사용하기 시작합니다. Wed&rsquo; love to hear your feedback! GitHub 리포지토리의 전자 메일 <a target=\"_blank\">askcosmosdb@microsoft.com</a> 또는 로그 문제</p>\n\n<p>Twitter에서 팔로우하여 최신  <a href=\"https://twitter.com/search?q=%23cosmosdb\" target=\"_blank\">AzureCosmosDBnews#</a>  및 기능을 최신 상태로 유지하세요 <a href=\"https://twitter.com/azurecosmosdb\" target=\"_blank\">@AzureCosmosDB</a>. Azure Cosmos DB를 사용하여 빌드할 내용을 확인하게 되어 정말 기쁩니다.</p>"
