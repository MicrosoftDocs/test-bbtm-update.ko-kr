### YamlMime:Yaml
ms.openlocfilehash: 3a0033cfe8e9b43cbc931fc8f67ccdfa3bd75db3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899623"
Slug: now-available-the-service-bus-september-2011-release
Title: '지금 사용 가능: Service Bus 2011년 9월 릴리스'
Summary: 이번 주 빌드에서 발표되었듯이 Service Bus 2011년 9월 릴리스를 사용할 수 있습니다. 이는 서비스가 2010년 1월에 출시된 이후 프로덕션 환경에서 가장 큰 기능 업데이트입니다.
Content: '<p>이번 주 <a target="_blank" href="https://www.buildwindows.com/">빌드</a>에서 발표된 대로 Service Bus 2011년 9월 릴리스를 사용할 수 있습니다. 이는 2010년 1월 서비스가 출시된 이후 프로덕션 환경에서 가장 큰 기능 업데이트입니다.</p>  <p>이 Service Bus 클라우드에서 분산되고 느슨하게 결합된 애플리케이션뿐만 아니라 온-프레미스와 클라우드 모두에서 하이브리드 애플리케이션을 빌드할 수 있도록 하는 보안 연결 및 메시징 기능을 제공합니다. 이를 통해 다양한 통신 및 메시징 프로토콜과 패턴을 사용할 수 있으며, 개발자가 배달 보증, 신뢰할 수 있는 메시징 및 규모에 대해 걱정할 필요가 없습니다. 여기에서 Service Bus 대해 자세히 알아볼 수 있습니다.</p>  <p>이 릴리스에서는 큐, 토픽 및 구독 및 규칙과 같은 기능을 지원하여 펍/하위 메시징을 개선하는 Service Bus 향상된 기능을 소개합니다. 또한 이 릴리스에서는 다음과 같은 Windows Azure 플랫폼에서 새로운 시나리오를 사용할 수 있습니다.</p>  <ul>  <li>가끔 연결된 클라이언트(예: 휴대폰, 원격 작업자, 키오스크 등)에 비동기 클라우드 이벤트 &ndash; 배포 이벤트 알림</li>  <li>시간이 지남에 따라 쉽게 발전할 수 있는 느슨하게 결합된 시스템 빌드(SOA) &ndash; 이벤트 기반 서비스 지향 아키텍처</li>  <li>확장성이 뛰어나고 복원력이 뛰어난 애플리케이션을 빌드하기 위한 고급 Intra-App 메시징 &ndash; 부하 평준화 및 부하 분산</li>  </ul>  <p><a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx">큐</a> 및 <a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/25/an-introduction-to-service-bus-topics.aspx">토픽</a>에서 구체화되는 새로운 메시징 기능은 <a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/13/introducing-the-windows-azure-appfabric-service-bus-may-2011-ctp.aspx">2011년 5월 CTP에서 서비스</a> 미리 보기로 처음 제공되었으며 현재 Service Bus 프로덕션 환경에 있습니다.&nbsp; 세션 처리 상태를 추적하는 기능과 함께 세션에 대한 고유한 지원과 같은 새로운 메시징 기능의 몇 가지 자세한 기능은 얼리어답터 프로그램 및 Service Bus 대한 장기적인 아키텍처 내기를 수행하는 기타 Microsoft 개발 노력에 따른 고객 프로젝트의&rsquo; 요구 사항에 직접 통보되었습니다.</p>  <h3>변경된 내용</h3>  <p>개발자가 설명서를 살펴보고 샘플을 탐색한 후 즉시 알 수 있는 것은 새로운 메시징 기능에 대한 API가 고객 피드백에 대한 직접적인 응답으로 2011년 5월 CTP 릴리스 &ndash;이후 상당히 변경되었다는 것입니다. API 변경의 한 가지 주요 목표는 API를 간소화하고 새 Service Bus 기능을 사용하는 데 필요한 코드 줄 수를 줄이는 것이었습니다. Ill&rsquo;은 아래에 몇 가지 예를 제공합니다.</p>  <p>또 다른 목표는 API의 런타임 부분을 훨씬 더 강력한 &ndash; 예제로 만드는 것이었습니다. 개발자는 CTP에서 명시적으로 손상된 네트워크 연결로 인해 예외를 처리하고 결함이&rsquo; 있는 수신기 또는 보낸 사람 개체를 교체&lsquo;하는 명시적 단계를 수행해야 했습니다. 이 프로덕션 릴리스에서 메시징 클라이언트 API는 Service Bus 및 클라이언트 개체&lsquo;&lsquo;의 릴레이 수신기가 오류가&rsquo; 발생한 것처럼 자동으로 다시 연결하려고 시도합니다.  애플리케이션에서 명시적 복구가 필요한 상태입니다.</p>  <h3>변경하지 않은&rsquo; 내용</h3>  <p>개발자가 볼 수 없는 것은 서비스의 불연속성 또는 프로덕션의 Service Bus 동작에 대한 중단적인 변경입니다. 웹은 증명적으로 모든 사람 아래에서 테이블 보를 뽑아 매우 확장 기능 세트 &ndash; 와 함께 새로운 하나를 &ndash; 넣어에도 불구하고&rsquo;, 테이블에 크리스탈, 중국, 또는 실버 웨어의 아무도 이동. Service Bus 사용하는 기존 앱은 계속 실행되며 이전 프로덕션 SDK &lsquo;&rsquo; &ndash; 의 Microsoft.ServiceBus.dll 어셈블리 1.0.x.x는 기존 앱을 새 릴리스에 적용하는 데 필요한 작업이 없습니다.</p>  <h3>새 기능을 사용하는 방법</h3>  <p>그러나 .NET의 모든 새로운 Service Bus 기능을 활용하려면 새 메시징 API가 포함된 새 Microsoft.ServiceBus.dll 버전 1.5.x.x와 함께 새 SDK를 사용해야 합니다. 릴레이 기능만 사용하는 애플리케이션도 이 최신 어셈블리에 대해 다시 컴파일되고 테스트되며, 1.0.x.x 어셈블리의 고객 배포는 정기적인 업그레이드 및 배포 주기의 일부로 단계적으로 시작되는 것이 좋습니다.</p>  <p>새로운 1.5.x.x 어셈블리는 Silverlight, 새로운 Windows 8 클라이언트 프로필, .NET 4.0 클라이언트 프로필 또는 .NET 3.5가 필요한 애플리케이션에서 새로운 메시징 기능에 액세스하기 위해 전체 .NET 4.0 프레임워크 &ndash; 에서만 사용할 수 있으며, 개발자는 Silverlight에 제공된 클라이언트 샘플을 활용하여 Service Bus RESTPI를 통해 대부분의 기능에 액세스할 수 있습니다. 이러한 Silverlight 샘플은 물론 Java, PHP 및 기타 플랫폼에서 Service Bus 액세스하기 위한 코드뿐만 아니라 앞으로 몇 주 동안 &ndash;&nbsp; 사용할 수 있게 될 각 샘플은 적절한 네이티브 런타임 API를 사용하지만 용어 및 패턴 측면에서 .NET API를 에코합니다.</p>  <p>이 릴리스에서는 Service Bus 큐 및 토픽에 따라 애플리케이션이 아웃바운드 HTTPS 액세스가 가능하지만 아웃바운드 트래픽에 대해 TCP 9354를 사용할 수 없는 긴밀하게 관리되는 네트워킹 환경에서 액세스해야 하는 경우에도 REST API를 사용하는 것이 좋습니다.</p>  <p>새 .NET API를 직접 사용하면 새 Microsoft.ServiceBus.dll 클라이언트 비트에서 사용하는 TCP 프로토콜이 HTTP보다 훨씬 효율적이라는 장점이 있습니다. 또한 현재 TCP 프로토콜은 세션 및 트랜잭션 지원과 같은 몇 가지 고급 기능에 대한 필수 구성 요소입니다. &nbsp;</p>  <h3>기존 애플리케이션에 대한 새로운 기회</h3>  <p>이전 버전과의 호환성을 위해 노력했지만&rsquo;, 기존 Service Bus 앱을 사용하는 개발자가 향후 몇 개월 동안 살펴보는 것을 고려할 수 있는 몇 가지 사항이 있습니다. 향후 게시물에서 보다 구체적인 지침을 제공할 예정이지만, 지금은 다음과 같은 몇 가지 개략적인 예가 있습니다.</p>  <ul>  <li>대부분의 사용 사례에서 새 큐 기능은 메시지 버퍼보다 더 나은 선택입니다. 애플리케이션이 메시지 버퍼를 사용하거나(자동으로 만료되고 사라짐) 애플리케이션이 메시지 버퍼 오버플로 정책에 의존하여 대부분의 다른 경우에서 보낸 사람에게 &ndash; 백프레서를 적용하는 경우처럼 메시지 버퍼&rsquo;가 선호될 수 있는 몇 가지 특별한 사용 사례가 있습니다. 큐로 이동하는 것은 훌륭한 아이디어입니다.&nbsp;</li>  <li>NetEventRelayBinding은 최대 25개의 동시 수신기의 다소 좁은 제한 내에서 릴레이된 멀티캐스트 단방향 메시징 &ndash; 을 제공합니다. 대부분의 경우&rsquo; 이러한 경로를 모든 대상에 자체 구독이 있고 새 NetMessagingBinding을 사용하여 메시지를 받는 토픽으로 바꾸는 것이 좋습니다. 이렇게 하면 더 많은 규모(최대 2,000개의 동시 구독)를 제공하고 구독을 필터링할 수도 있습니다. NetEventRelayBinding의 나머지 다른 점은 수신기가 이론적으로 가능한 전송&rsquo; 속도보다 수신 속도가 느린 경우 모든 직접 TCP 기반 연결 메커니즘과 마찬가지로 클라이언트에 백프레서를 적용한다는 것입니다.&nbsp;&nbsp;&nbsp;</li>  </ul>  <h3>5월 CTP와 비교한 API 변경 내용</h3>  <p>5월에&rsquo; 다시 제시된 API 웹&rsquo;을 사용하여 앱을 빌드하는 고객 피드백 및 자체 경험을 바탕으로, Weve는 상당한 수의 API를 개선했으며, 그 중 일부는 기존 코드와 호환되는 동안 기존 Service Bus Relay 기능에 &ndash; 도 도움이 됩니다.</p>  <p>가장 명백한 변경 사항 중 하나는 자격 증명을 API에 직접 공급하는 대신 토큰 공급자&rsquo;의 &lsquo;개념을 도입한 보안&rsquo;에 관한 것입니다. 릴레이에는 여전히 자격 증명 클래스를 사용하고 TransportClientEndpointBehavior에서 자격 증명을 설정할 수 있지만 이제는 사용되지 않는 것으로 레이블이 지정됩니다.&nbsp; Service Bus Windows Azure AppFabric ACS(Access Control Service)에서 발급한 액세스 토큰과 페더레이션된 보안을 사용합니다. 이제 API 팩터링에는 페더레이션된 특성이 반영되며, 토큰 공급자는 필요에 따라 토큰을 획득하고 Service Bus 클라이언트 인프라에 분배하는 독립 엔터티입니다. 이 새로운 팩터링을 통해 고객 코드는 자격 증명을 획득하고 Access Control 서비스와 상호 작용하는 API에 새 토큰 공급자를 연결할 수 있으며, Facebook 로그인을 요청하는 웹 브라우저 컨트롤을 호스트하는 대화 상자 창을 터뜨린 다음 결과 Facebook 토큰을 ACS에 전달한 다음 애플리케이션에 Service Bus 액세스 토큰을 반환할 수 있습니다.</p>  <p>관리 API 표면도 약간 착신 전환되었습니다. ServiceBusNamespaceClient는 이제 <i>NamespaceManager</i> 라고 하며 특정 &ndash; 큐, 토픽 또는 구독이 이미 있는지 여부를 확인할 수 있는 물론 &ndash; 메서드가 있습니다. 이제 네임스페이스 관리자에서 구독 규칙을 직접 관리할 수도 있습니다. 구독에 대한 규칙 만들기는 필터를 사용하여 수행되며 해당 클래스도 약간 재구성되었습니다. 예를 들어 SqlFilterExpression은 이제 <i>SqlFilter</i>에 불과합니다.</p>  <p>가장 중요한 변경 내용 &ndash; 과, 우리가 바라는 대로, 개선 &ndash; 은 핵심 메시징 API에서 수행되었으며, 여기서 Weve&rsquo;는 내부&rsquo;적으로 여러 가지 사항을 &lsquo;변경하여 API 표면에서 상당히 복잡성을 털어내도록 했습니다.</p>  <p>새 샘플을 탐색할 때는 <i>MessagingFactory</i> 와 이 샘플에서 배포된 모든 개체에 훨씬 더 간단한 상태 관리 모델이 있다는 것을 알 수 있습니다. 더 이상 사용할 개체를 &lsquo;열&rsquo; 필요가 없으며 더 이상 오류가 발생한 상태로 전환되지 않습니다. 이러한 변경 내용이 사소한 세부 정보처럼 보일 수 있는 만큼, 여러 발신자 및 수신자 간에 연결 공유를 허용하는 기본 이진 프로토콜의 개선의 직접적인 결과이며 &ndash; , 아마도 가장 중요한 것은 &ndash; 앞에서 설명한 대로 연결이 끊어질 때 세션을 자동으로 다시 연결합니다. 즉, 이제 애플리케이션에 보류 중인 &lsquo;수신&rsquo; 요청이 있거나, 연결이 끊어지거나, OS와 함께 최대 절전 모드로 전환될 수 있으며, 네트워크를 다시 사용할 수 있게 되면 메시지를 다시 연결하고 자동으로 다시 시도합니다.</p>  <p><i>NetMessagingBinding</i> 은 WCF와의 전체 통합을 제공하는 큐 및 토픽에 대한 바인딩의 새 이름이며, 사촌인 NetMsmqBinding과 기능적으로 유사합니다. 서비스 쪽에서 NetMessagingBinding은 큐 또는 구독에서 메시지를 끌어오고 WCFs&rsquo; ReceiveContext 메커니즘과&rsquo; 통합된 자동 메시지 펌프를 제공합니다.</p>  <h3>어디서? 방법은?</h3>  <p>위에서 설명한 것처럼 새 릴리스는 지금 바로 사용할 수 있으며 이러한 모든 기능을 즉시 사용할 수 있습니다. 필요한 클라이언트 어셈블리 및 샘플은 여기에서 다운로드할 수 있습니다. Windows Azure SDK의 일부로 NuGet 또는 웹 플랫폼 설치 관리자를 통해 런타임 어셈블리를 쉽게 설치하고 애플리케이션 빌드를 시작할 수도 있습니다.</p>  <p>2011년 9월 릴리스는 이전에 사용했던 CTP 환경(&ldquo;appfabriclabs.com)이 아니라 Service Bus&rdquo; 일반 프로덕션 환경에서만 사용할 수 있습니다. CTP 환경에 대해 실행되는 애플리케이션은 해당 날짜 이후에 환경이 변경될 수 있으므로 2011년 10월 31일까지 일반 Service Bus 서비스로 마이그레이션해야 합니다.</p>  <p>이 릴리스에 대해 자세히 알아보기 위한 리소스 목록은 다음과 같습니다.</p>  <ul>  <li>Service Bus 개요</li>  <li>비디오: Service Bus 소개</li>  <li>비디오: Service Bus Relay 소개</li>  <li>비디오: Service Bus 큐 소개</li>  <li>비디오: Service Bus 항목 소개</li>  <li>비디오 &amp; 코드 샘플: <a target="_blank" href="https://appfabricdemos.codeplex.com/releases/view/67597">Service Bus Relay를 사용하는 방법</a></li>  <li>비디오 &amp; 코드 샘플: <a target="_blank" href="https://appfabricdemos.codeplex.com/releases/view/66576">Service Bus 큐를 사용하는 방법</a></li>  <li>비디오 &amp; 코드 샘플: <a target="_blank" href="https://appfabricdemos.codeplex.com/releases/view/66577">Service Bus 토픽을 사용하는 방법</a></li>  <li>블로그 게시물: <a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/25/an-introduction-to-service-bus-topics.aspx">Service Bus 항목 소개</a></li>  <li>블로그 게시물: <a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx">Service Bus 큐 소개</a></li>  <li>블로그 게시물:<b> </b><a target="_blank" href="https://blogs.msdn.com/b/appfabric/archive/2011/05/18/using-the-service-bus-via-rest-http.aspx">REST/HTTP를 통해 Service Bus 사용</a></li>  <li>Service Bus 자세한 FAQ</li>  <li>업데이트된 SDK</li>  <li><a target="_blank" href="https://msdn.microsoft.com/en-us/library/ee732537.aspx">MSDN에 대한 설명서</a></li>  </ul>  <p>BUILD에서 Windows 모든 Azure 관련 공지 사항에 대해 자세히 알아보려면 블로그 게시물 "JUST ANNOUNCED @ BUILD: new Windows Azure Toolkit for Windows 8, Windows Azure SDK 1.5, Windows Azure Storage Geo-Replication 등"을 읽어보세요.&nbsp;  BUILD에 대한 자세한 내용을 확인하거나 키노를 시청하려면 BUILD Virtual Press Room을 방문하세요.&nbsp; 그리고 빌드에 대한 최신 뉴스 및 실시간 이야기를 따라 <a target="_blank" href="https://twitter.com/windowsazure">@WindowsAzure</a> <a target="_blank" href="https://twitter.com/#%21/STBNewsBytes">@STBNewsBytes</a> 가세요.<i>&nbsp;</i></p>  <p><i>클레멘스 바터스는 Service Bus 주요 기술 책임자입니다. 클레멘스를 <a target="_blank" href="https://twitter.com/clemensv">@clemensv</a>따르십시오. <br></i></p>'
