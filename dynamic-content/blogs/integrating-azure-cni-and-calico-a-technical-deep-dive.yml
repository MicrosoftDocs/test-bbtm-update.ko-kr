### YamlMime:Yaml
ms.openlocfilehash: 7e3abe38738ff69f75b9028f8f5d3b45f6db1b38
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898908"
Slug: integrating-azure-cni-and-calico-a-technical-deep-dive
Title: 'Azure CNI 및 Calico 통합: 기술 심층 분석'
Summary: Calico 정책을 사용하면 Kubernetes Pod를 오가는 트래픽 흐름을 제어하는 필터링 규칙을 정의할 수 있습니다. 이 블로그 게시물에서는 Azure Kubernetes Service가 네트워킹을 위한 Azure CNI와 네트워크 정책용 Calico의 조합으로 작업할 수 있도록 하는 엔지니어링 작업을 보다 기술적인 세부 정보로 살펴봅니다.
Content: >-
  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;"><em>이 게시물은 앤디 랜달, 비즈니스 개발 부사장, Kinvolk Gmbh에 의해 공동 저술되었다</em></b></p>


  <p><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">AKS(Azure Kubernetes Service)에서 Calico 네트워크 정책의 가용성을 공유하게 되어 기쁘게 생각합니다. Calico 정책을 사용하면 Kubernetes Pod를 오가는 트래픽 흐름을 제어하는 필터링 규칙을 정의할 수 있습니다. 이 블로그 게시물에서는 Azure Kubernetes Service가 네트워킹을 위한 Azure CNI와 네트워크 정책용 Calico의 조합으로 작업할 수 있도록 하는 엔지니어링 작업을 보다 기술적인 세부 정보로 살펴봅니다. </b></p>


  <p><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">첫째, 일부 배경. <b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">컨테이너 네트워킹에는 다음과 같은 세 가지 부분이</b> 있습니다.</b></p>


  <ol dir="ltr">
   <li>
   <div style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b style="font-weight: normal;"><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">IP 주소를 만들 때&rsquo; 각 컨테이너에 할당하는 것은 IP 주소 관리 또는 IPAM.</b></b></div>
   </li>
   <li>
   <div style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">컨테이너 엔드포인트 간에 패킷을 라우팅하면 다음으로 분할됩니다.</b> </b></b></div>

   <ul>
    <li>
    <div style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">호스트에서 호스트로 라우팅(노드 간 라우팅)</b></b></b></b></b></div>
    </li>
    <li>
    <div style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">외부 네트워크 인터페이스와 컨테이너 간의 호스트 내 라우팅뿐만 아니라 동일한 호스트의 컨테이너 간 라우팅(노드 내 라우팅)입니다.</b></b></b></b></b></b></b></b></b></div>
    </li>
   </ul>
   </li>
   <li>
   <div style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">허용해서는 안 되는 패킷이 차단되도록 합니다(네트워크 정책).</b></b></b></b></b></b></b></b></b></b></b></b></b></div>
   </li>
  </ol>


  <p><b id="docs-internal-guid-53316075-7fff-2aeb-8d79-fb91b42ab14b" style="font-weight: normal;">일반적으로 단일 네트워크 플러그 인 기술은 이러한 모든 측면을 해결합니다. 그러나 Kubernetes CNI(Container Network Interface)에서 사용하는 개방형 API를 사용하면 실제로 다른 구현을 결합할 수 있습니다. </b></p>


  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;">구성을 선택하면 기회를 얻을 수 있지만 선택한 메커니즘이 호환되는지 확인하고 네트워킹 목표를 달성할 수 있도록 계획을 요구합니다. 이러한 세부 정보를 좀 더 자세히 살펴보겠습니다&rsquo;.</p>


  <h2>네트워킹: Azure CNI</h2>


  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">Azure와 같은 클라우드 네트워크는 원래 일반적으로 하나 또는 적은 수의 상대적으로 고정된 IP 주소만 있는 가상 머신용으로 빌드되었습니다. 컨테이너는 이 모든 것을 변경하고, 수십 또는 수백 개의 워크로드가 정기적으로 빠르게 생성 및 제거되므로 클라우드 네트워킹 계층에 대한 새로운 과제의 호스트를 도입합니다. 각 워크로드는 기본 네트워크의 자체 IP 엔드포인트입니다.</b></p>


  <p><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">클라우드에서 컨테이너 네트워킹을 사용하도록 설정하는 첫 번째 방법은 VXLAN과 같은 오버레이를 활용하여 호스트 IP만 기본 네트워크에 노출되도록 합니다. 플란넬 또는 AKSs&rsquo; kubenet(기본) 네트워킹 모드와 같은 오버레이 네트워크 솔루션은 컨테이너에서 기본 네트워크를 숨기는 데 유용합니다. 아쉽게도 컨테이너는 실제로 기본 VNET에서 실행되지 않으므로 일반 엔드포인트처럼 해결할 수 없으며 NAT(네트워크 주소 변환)를 통해서만 클러스터 외부에서 통신할 수 있습니다.</b></p>


  <p><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">AKS에서 고급 모드 네트워킹을 사용하도록 설정된 Azure CNI를 사용하여 각 컨테이너가 호스트와 동일한 VNET 내에서 자체 실제 IP 주소를 가져오는 기능을 추가했습니다. 컨테이너를 만들 때 Azure CNI IPAM 구성 요소는 VNET에서 IP 주소를 할당하고 Azure 소프트웨어 정의 네트워크 계층의 마법을 통해 기본 네트워크에서 주소가 구성되도록 하며 노드 간 라우팅 부분을 처리합니다.</b></p>


  <p><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">따라서 IPAM 및 노드 간 라우팅을 처리하므로 이제 노드 내 라우팅을 고려해야 합니다. 노드 내 라우팅, 즉 두 컨테이너 간의 패킷을 얻거나 호스트&rsquo; 네트워크 인터페이스(일반적으로 eth0)와 컨테이너의 가상 이더넷(veth) 인터페이스 간에 패킷을 가져오는 방법</b></p>


  <p><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">Linux 커널은 네트워킹 기능이 풍부하며 이 목표를 달성하는 방법에는 여러 가지가 있습니다. 가장 간단하고 쉬운 것 중 하나는 가상 브리지 디바이스를 사용하는 것입니다. 이 방법을 사용하면 모든 컨테이너가 이더넷 스위치를 통해 연결된 물리적 컴퓨터와 마찬가지로 로컬 계층 2 세그먼트에 연결됩니다.</b></p>


  <ul>
   <li><b style="font-weight: normal;"><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">&lsquo;실제&rsquo; 네트워크의 패킷은 표준 계층 2 기술(ARP 및 주소 학습)을 통해 브리지를 통해 적절한 컨테이너로 전환됩니다.</b></b></li>
   <li><b style="font-weight: normal;"><b style="font-weight: normal;"><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">실제 네트워크에 대한 패킷은 브리지를 통해 원격 노드로 라우팅되는 NIC로 전달됩니다.</b></b></b></li>
   <li><b style="font-weight: normal;"><b style="font-weight: normal;"><b style="font-weight: normal;"><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">한 컨테이너에서 다른 컨테이너로의 패킷도 이더넷 스위치에 연결된 두 대의 PC와 마찬가지로 브리지를 통해 흐릅니다.</b> </b></b></b></li>
  </ul>


  <p><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;">그림 1에 설명된 이 방법은 고성능이고 유지 관리하기 위해 컨트롤 플레인 논리가 거의 필요하지 않으며 견고성을 보장하는 데 도움이 된다는 장점이 있습니다.</b></p>


  <p align="center" dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;"><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;"><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c25a40d5-8f2d-424d-9454-ab1c911efd76.png"><img alt="An image showing an example of Azure CNI networking." border="0" height="462" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/db6d89f7-fc2f-4759-b360-78609cd6f381.png" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="Azure CNI 네트워킹의 예를 보여 주는 이미지입니다." width="484"></a></b></b></p>


  <p align="center"><b id="docs-internal-guid-48ccc678-7fff-dea4-309c-aeee8456b08c" style="font-weight: normal;"><em>그림 1: Azure CNI 네트워킹</em></b></p>


  <h2><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">Azure를 사용하는 네트워크 정책 </b></h2>


  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">Kubernetes에는 Kubernetes 네트워크 정책 API에 정의된 대로 다른 컨테이너와 통신할 수 있는 컨테이너를 정의하기 위한 풍부한 정책 모델이 있습니다. 최근 Ignite에서 설명한 것처럼 이 API는 이제 <a href="https://docs.microsoft.com/en-us/azure/aks/use-network-policies" style="text-decoration: none;" target="_blank">AKS의 Azure CNI와 함께 작동하거나 AKS</a> 엔진을 사용하거나 사용하지 않고 <a href="https://docs.microsoft.com/en-us/azure/virtual-network/kubernetes-network-policies" style="text-decoration: none;" target="_blank">Azure의 자체 관리형 Kubernetes 클러스터에서 작동합니다</a>. </b></p>


  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">Kubernetes 네트워크 정책 모델을 허용된 IP 주소 쌍 집합으로 변환한 다음 Linux 커널 iptables 모듈에서 규칙으로 프로그래밍합니다. 이러한 규칙은 브리지를 통과하는 모든 패킷에 적용됩니다. 그림 2에 나와 있습니다.</b></p>


  <p align="center"><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;"><img alt="An image showing how this Azure networking policy works in conjunction with Kubernetes." height="462" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fQiiOwQGqDZ2L0_K2v6MSlHDRYRlQ7Z31GMsBR2GOiq2VUM3dvrhuhTCP0d--6kqpbovNy-LK8FFMO1t12FGlp7cvlKIy_q3f5YgF6og_Owu848HJGae6TqEoRHyBtMuz6cJAORE" style="border: currentcolor; border-image: none; transform: rotate(0rad); -webkit-transform: rotate(0.00rad);" title="이 Azure 네트워킹 정책이 Kubernetes와 함께 작동하는 방식을 보여 주는 이미지입니다." width="484"></b></p>


  <p align="center"><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;"><em>그림 2: Azure Policy Manager를 사용하는 Azure CNI</em></b></p>


  <h2>Calico를 사용하는 네트워크 정책</h2>


  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">Kubernetes는 개방형 에코시스템이기도 하며 Tigeras&rsquo; Calico는 클라우드 및 온-프레미스 환경에서 네트워크 정책의 첫 번째 및 가장 널리 배포된 구현으로 잘 알려져 있습니다. 기본 Kubernetes API 외에도 글로벌 네트워크 정책, 네트워크 집합, 보다 유연한 규칙 사양, 비 Kubernetes 노드에서 정책 적용 에이전트를 실행하는 기능 및 Istio와의 통합을 통해 애플리케이션 계층 정책과 같은 다양한 기능을 지원하는 강력한 확장 정책 모델도 있습니다. 또한 Tigera는 다양한 엔터프라이즈 관리, 컨트롤 및 규정 준수 기능을 추가하는 Calico, Tigera Secure를 기반으로 하는 상업용 제품을 제공합니다.</b></p>


  <p><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">앞서 언급한 Kubernetes&rsquo; 모듈식 네트워킹 모델을 고려할 때 Azure CNI와 함께 네트워크 정책용 Calico를 배포할 수 있다고 생각할 수 있으며 모두 작동해야 합니다. 불행하게도, 그것은이 간단하지 않습니다.</b></p>


  <p>&nbsp;</p>


  <p>Calico는 정책에 iptable을 사용하지만 미묘하게 다른 방식으로 사용합니다. 컨테이너는 별도의 커널 경로로 설정되어야 하며 특정 컨테이너&rsquo; 가상 이더넷 인터페이스의 각 컨테이너에 적용되는 정책을 적용합니다. 이렇게 하면 모든 컨테이너 간 통신이 동일하고(항상 호스트 내부 또는 기본 네트워크를 통해 계층 3 라우트된 홉) 보안 정책이 특정 컨테이너&rsquo; 컨텍스트에 더 좁게 적용된다는 장점이 있습니다.</p>


  <p>Azure CNI가 Calico 작동 방식과 호환되도록 하기 위해 투명&rsquo; 모드라고 하는 &lsquo;CNI에 새로운 노드 내 라우팅 기능을 추가했습니다. 이 모드에서 실행되도록 구성된 경우 Azure CNI는 가상 브리지 디바이스를 만드는 대신 컨테이너에 대한 로컬 경로를 설정합니다. 그림 3에 나와 있습니다.<br>

  &nbsp;&nbsp; <b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;"><img alt="An image showing Azure CNI and it's compatability with Calico programs." height="462" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/NqSDUhQmtYD7LsPPZLdkdNi5CSyiqKzoFPwC6ebjeawZpcDQvJtLG_zFJ29o0OJwhxhfnqmd22wsef_zxt7VRaKfMbLR_G_rnThW6Z5fgDFZjyE3Kv3LZ_ZBjRyQ0ZI4Rogf3Poz" style="border: currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; transform: rotate(0rad); -webkit-transform: rotate(0.00rad);" title="Azure CNI 및 Calico 프로그램과의 호환성을 보여 주는 이미지입니다." width="484"></b></p>


  <p align="center" dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;"><em>그림 3: Calico 네트워크 정책을 사용하는 Azure CNI</em></b></p>


  <h2><b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">이후 및 업스트림</b></h2>


  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;">향상된 Azure CNI 및 Calico 정책을 사용하는 Kubernetes 클러스터는 클러스터 정의 파일에서 다음 구성을 지정하여 AKS-Engine 사용하여 만들 수 있습니다.</p>


  <pre dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;">

  <b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">&quot;properties&quot;: {</b>


  <b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">&quot;orchestratorProfile&quot;: {</b>


  <b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">&quot;orchestratorType&quot;: &quot;Kubernetes&quot;,</b>


  <b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">&quot;kubernetesConfig&quot;:</b>


  <b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">{ &quot;networkPolicy&quot;: &quot;calico&quot;, &quot;networkPlugin&quot;: &quot;azure&quot; }</b></pre>


  <p dir="ltr" style="line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;">또한 이러한 옵션은 AKS 자체에 통합되어 클러스터 <b id="docs-internal-guid-97d5c792-7fff-3d58-e707-1310e7eb2acc" style="font-weight: normal;">생성 시 네트워크 <strong>플러그 인 azure --network-policy</strong> Calico 옵션을&nbsp; 간단히 지정하여 Azure 네트워킹 및 Calico 네트워크 정책을 사용하여 클러스터를 프로비전할 수 있습니다.</b></p>


  <p><b style="font-weight: normal;">설명서인 &ldquo;<a href="https://docs.microsoft.com/en-us/azure/virtual-network/kubernetes-network-policies" target="_blank">Azure Kubernetes 네트워크 정책 개요</a>를 방문하여 자세한 내용을 확인하세요.&rdquo;</b></p>
