### YamlMime:Yaml
ms.openlocfilehash: 61fc5b02e9fd4511e2e1eb232d2b56f541bc7c61
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900237"
Slug: success-almost-ruined-sleeve-music-but-savvy-developers-with-the-right-tools-had-another-idea
Title: 성공은 거의 소매 음악 망쳤다. 그러나 올바른 도구를 사용하는 정통한 개발자는 또 다른 아이디어를 가지고 있었습니다.
Summary: 모바일 앱 슬리브 음악 오렌지 부족의 정통한 개발자의 비전과 재능과 Microsoft Azure 사용 덕분에 국제적인 센세이션이 되고 있습니다.
Content: >-
  <i><a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/12/Maarten-Jan-Vermeulen.png"><img class=" alignleft" style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="Maarten-Jan 베르멜렌" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Maarten-Jan-Vermeulen_thumb.png" alt="Maarten-Jan Vermeulen" width="211" height="233" align="left" border="0" /></a>모바일 앱 슬리브 음악 오렌지 부족의 정통한 개발자의 비전과 재능과 Microsoft Azure 사용 덕분에 국제적인 센세이션이 되고 있습니다. 확장성이 필요할 때 Azure App Service로 전환했습니다. 더 저렴한 비용으로 확장성이 필요한 경우 Microsoft는 캐시 기반 아키텍처를 고안하는 데 도움을 주었습니다. Azure App Service로의 이동도 빨라졌습니다. 오렌지 부족은 하루에 그것을 구현.</i><b><i></i></b>

  <p style="text-align: left;"><b><i>마틴 얀 베르멜렌, 설립자 &amp; 오렌지 부족의 CEO</i></b><i>는 발리의 해변을 즐긴 후 슬리브 음악 대한 아이디어를 내놓았습니다. 그러나 개발 노력이 항상 해변에서 하루가 아니었습니다. 우리는 그와 함께 해결하려는 문제, 그 과정에서 그가 겪은 문제, 그리고 그가 어떻게 그들 모두를 정복했는지에 대해 이야기했습니다.</i></p>

  &nbsp;

  <h3>해결하려는 문제는 무엇인가요?</h3>

  <b>Vermeulen: </b> 우리는 모든 곳에서 음악 애호가들에게 좋아하는 아티스트를 따르고, 최신 업데이트를 보고, 한 곳에서 새로운 음악을 발견할 수 있는 방법을 제공하고 싶었습니다. 그것은 단순히 전에 가능하지 않았다. 우리는 음악 애호가들이 일상적인 음악 수정을 위해 인터넷을 수색할 필요가 없도록 하고 싶었습니다. 우리의 큐레이터는 항상 음악 애호가의 모든 분위기와 일치하는 새롭고 흥미로운 음악을 찾고 있습니다. 이 응용 프로그램은 음악 애호가를위한 필수입니다!

  <h3>개발 관점에서 이 문제를 해결하는 데 어떤 어려움이 있었나요?</h3>

  <b>Vermeulen: </b> 첫째, 우리는 페이스 북, 트위터, 인스 타 그램, Last.fm, 사운드 클라우드, 유튜브, 스포티 파이 등 다양한 사이트에서 120,000 명의 음악 아티스트의 대규모 시간당 크롤링 업데이트를 지원해야 할 필요성에 직면했습니다. 또한 Windows Phone, iOS 및 Android에서 아티스트 그룹의 최신 업데이트를 표시하는 대기 시간을 최소화하는 방법이 필요했습니다.


  슬리브 음악 개념 증명 버전에서 앱은 Windows Phone 모든 소셜 미디어 공급자에게 음악 아티스트의 업데이트를 직접 호출합니다. 그러나 허용되는 호출 수 측면에서 타사 API 제한으로 인해 이 솔루션을 확장할 수 없음을 발견했습니다. 또한 응답성을 향상시키기 위해 앱의 대역폭 사용량과 대기 시간을 줄여야 했습니다.

  <h3>Azure App Service를 선택한 이유는 무엇인가요?</h3>

  <b>Vermeulen: </b> 비용 효율이 뛰어난 확장 가능한 클라우드 플랫폼으로 마이그레이션해야 했습니다. 이는 두 가지 마이그레이션이었습니다. 크롤링 프로세스를 Windows Phone 클라우드에서 실행되는 백 엔드로 마이그레이션해야 했으며 사용자 기반을 iOS 및 Android로 확장해야 했습니다. Azure App Service는 각 형식의 빠른 마이그레이션을 허용했습니다. 타사 소셜 네트워크 공급자에 대한 액세스와 같은 모든 논리는 Azure의 모바일 앱 백 엔드에 원활하게 맞는 C#으로 작성됩니다. 또한 해당 모바일 앱 백 엔드에는 Windows Phone, iOS 및 Android용 즉시 사용할 수 있는 플랫폼 간 클라이언트가 있습니다. Azure App Service는 정확히 우리가 찾고 있던 것이었습니다.

  <h3>App Service 사용은 지금까지 어떻게 진행되었나요?</h3>

  <b>Vermeulen: </b> Azure로 마이그레이션한 이후 100,000명의 아티스트와 300,000개의 피드를 모니터링하고 있으며, Azure SQL Database 1,000만 개의 업데이트를 수집했습니다. Table Storage 및 Azure Redis Cache와 같은 캐싱 메커니즘을 사용하여 시간당 최대 20,000개의 호출을 500,000명의 사용자에게 제공합니다.


  우리는 모니터링 도구가 빠른 해상도를 허용하고 App Service의 모듈식 설정이 확장의 짧은 반복을 허용한다는 것을 발견, 예를 들어 우리는 몇 일 만에 우리의 크롤러에 스포티 파이를 추가 할 때. App Service를 사용하는 것이 아주 잘 진행되었습니다.

  <h3>App Service 이전에 이 문제를 어떻게 해결했나요?</h3>

  <b>Vermeulen: </b> Azure 또는 경쟁사의 서비스 중 하나를 사용하여 가상 머신에서 크롤러, 캐싱 및 API 서비스를 호스팅했을 것입니다. App Service를 사용하여 설정, 마이그레이션, 모니터링, 유지 관리, 확장 및 확장성에 필요한 리소스를 줄여 줍니다.

  <h3>당신은 길을 따라 어떤 놀라움이 있었습니까?</h3>

  <b>Vermeulen: </b> 예 - 꽤 큰 하나. 앱은 원래 Azure 작업자 역할을 사용하여 외부 원본에서 피드 및 업데이트를 검색하고 수신한 다음 해당 데이터를 Microsoft Azure SQL Database 저장했습니다. Azure Mobile Services 앱에서 쿼리를 받으면 데이터베이스를 쿼리하고 원하는 정보를 소비자의 휴대폰에 전달했습니다.


  소비자가 매일 아침 깨어나 업데이트를 받기 위해 앱에 로그온했을 때 부하가 시간당 최대 20,000개의 API 요청으로 최고조에 달한 것으로 나타났습니다. 우리는 그 볼륨을 예상하지 못했고, 모멘텀이 구축되는 것처럼 소비자를 몰아낼 수 있는 성능 저하를 위협했습니다. Azure 고객 자문 팀이 부하를 모니터링하고, 문의하고, 문제 해결을 제안했습니다. 또한 팀은 가장 자주 액세스하는 정보가 Azure Redis Cache에서 유지 관리되고, 자주 액세스하지 않는 데이터가 Table Storage 있고, 관리 데이터가 Azure SQL 있는 데이터 계층 구조를 제안하여 비용이 높은 Azure SQL Database 미치는 영향을 최소화했습니다. 잘됐어요.

  <h3>App Service에 대한 경험에 따라 신발에 다른 사람에게 어떤 조언을 제공하시겠습니까?</h3>

  <b>Vermeulen: </b> App Service를 사용하여 쉽게 확장성을 달성할 수 있지만 확장성은 Azure-모바일 구현 이상이라는 점을 명심하세요. 테이블 Storage 및 Redis와 같은 캐싱 메커니즘을 사용하여 SQL 예상 부하를 줄입니다. 또한 사용 가능한 도구를 사용하여 만든 솔루션의 확장성을 테스트해야 합니다.

  <h3>솔루션의 최종 영향은 무엇인가요?</h3>

  <b>Vermeulen: </b> 스타트업의 리소스가 제한되어 있으므로 슬리브 음악 현재의 성공적인 제품으로 멋지게 성장시킬 수 있었습니다. Azure App Service가 중요한 역할을 했습니다.


  Azure 구독, 무료 및 약정 없이 <i>최대 </i><a href="https://tryappservice.azure.com/"><i>1시간 동안 임시 샌드박스가 적용된 Azure App Service</i></a> 환경을 위한 게스트가 됩니다 <i> . Azure 평가판 구독을 사용하여 전체 Azure App Service 환경을 더 오래 유지 </i><a href="https://azure.microsoft.com/en-us/pricing/free-trial/?WT.mc_id=try_websites"><i></i></a> 합니다<i>.</i>
