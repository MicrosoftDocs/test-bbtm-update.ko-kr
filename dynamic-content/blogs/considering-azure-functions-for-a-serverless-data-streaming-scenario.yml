### YamlMime:Yaml
ms.openlocfilehash: f0b8962028afd6b5a44d80738f7d53a51b526d0c
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906494"
Slug: considering-azure-functions-for-a-serverless-data-streaming-scenario
Title: 서버리스 데이터 스트리밍 시나리오에 대한 Azure Functions 고려
Summary: 최근에 은행 고객에게 전달된 사기 감지 솔루션에 대한 블로그를 게시했습니다. 이 솔루션은 서버리스 아키텍처를 사용하여 원격 분석 데이터에 대한 스트리밍 파이프라인을 실시간으로 완전히 처리해야 했습니다. 이 블로그에서는 Microsoft Azure Functions를 사용하기 위한 평가 프로세스 및 결정에 대해 설명합니다.
Content: >-
  <p>블로그 게시물&ldquo;<a href="https://azure.microsoft.com/en-us/blog/a-fast-serverless-big-data-pipeline-powered-by-a-single-azure-function/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">에서 단일 Azure Function으로 구동되는 빠르고 서버리스 빅 데이터 파이프라인</a>에서 은행 고객에게 전달되는 사기 탐지 솔루션에 대해 설명 &rdquo; 했습니다. 이 솔루션은 서버리스 아키텍처를 사용하여 실시간으로 원격 분석 데이터에 대한 스트리밍 파이프라인의 완전한 처리가 필요했습니다. 이 블로그 게시물에서는 Microsoft Azure Functions를 사용하기 위한 평가 프로세스 및 결정에 대해 설명합니다.</p>


  <h2>시나리오</h2>


  <p>대형 은행은 모바일 뱅킹 채널을 통해 제출된 사기성 거래를 감지하는 솔루션을 빌드하고자 했습니다. 이 솔루션은 대량의 실시간 데이터가 클라우드 서비스로 수집되고 일련의 데이터 변환 및 추출 작업이 발생하는 일반적인 빅 데이터 파이프라인 패턴을 기반으로 합니다. 이로 인해 <a href="https://docs.microsoft.com/en-us/azure/machine-learning/team-data-science-process/create-features?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">기능 매트릭스</a> 가 생성되고 고급 분석이 사용됩니다. 은행의 경우 파이프라인은 매우 빠르고 확장 가능해야 하므로 각 트랜잭션에 대한 엔드투엔드 평가가 2초 미만 안에 완료될 수 있었습니다.</p>


  <p>파이프라인 요구 사항에는 다음이 포함됩니다.</p>


  <ul>
   <li>수집된 이벤트 활동의 극단적인 버스트에 대해 확장 가능하고 반응성이 뛰어납니다. 매일 최대 400만 개의 이벤트와 800만 개 이상의 트랜잭션이 있습니다.</li>
   <li>이벤트는 각각 2~5개의 개별 은행 거래를 포함하는 복잡한 JSON 파일로 수집되었습니다. 각 JSON 파일을 구문 분석하고 사기 행위를 위해 개별 트랜잭션을 추출, 처리 및 평가해야 했습니다.</li>
   <li>중복이 처리되지 않도록 하려면 이벤트 및 트랜잭션을 처리해야 했습니다. 이 요구 사항의 이유는 고객 및 계정 프로필을 만들기 위해 각 트랜잭션에서 동작 데이터를 추출했기 때문입니다. 이벤트가 순차적으로 처리되지 않은 경우 사기 예측에 대한 프로필 및 기능 집합을 만드는 데 사용되는 계산 및 집계는 유효하지 않으며 기계 학습 모델의 정확도에 영향을 줍니다.</li>
   <li>참조 데이터와 동적 조회를 수행하는 기능은 파이프라인 처리에서 중요한 구성 요소였습니다. 이 시나리오의 경우 참조 데이터는 하루 중 언제든지 업데이트될 수 있습니다.</li>
   <li>ARM 템플릿을 사용하여 배포할 수 있는 아키텍처로 CI/CD 및 DevOps 프로세스와의 통합이 더 쉬워질 수 있습니다. 템플릿 아키텍처는 테스트를 용이하게 하거나 인터넷 뱅킹과 같은 추가 뱅킹 채널로 은행&rsquo; 사기 탐지 기능을 신속하게 확장하기 위해 전체 사기 탐지 파이프라인 아키텍처를 쉽게 다시 배포할 수 있다는 것을 의미합니다.</li>
  </ul>


  <p>이러한 요구 사항을 충족하기 위해 실시간, 빅 데이터 스트리밍 및 다음 기능에 적합하기 때문에 <a href="https://azure.microsoft.com/services/functions/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">Azure Functions</a> 를 평가했습니다.</p>


  <ul>
   <li>간편한 구성 및 설정</li>
   <li>실시간 대규모 이벤트 처리를 처리하도록 설계되었습니다.</li>
   <li>Event Hubs, Azure SQL Database(SQL Database), Azure Machine Learning 및 기타 관리형 서비스와 기본 통합</li>
  </ul>


  <h2>우리는 어떻게 했는가?</h2>


  <p>기술을 탐색하면 이러한 특정 상황에 적합한지 확인하는 데 도움이되었습니다. 솔루션의 두 가지 측면에는 심층적인 유효성 검사가 필요했습니다. 단일 메시지를 엔드 투 엔드(end-to-end)로 처리하는 데 얼마나 걸리나요? 그리고 엔드 투 엔드로 처리할 수 있는 동시 메시지 수는 몇 개입니까?</p>


  <p>이 워크플로는 Event Hubs의 단일 인스턴스로 데이터 스트리밍으로 시작하여 아래와 같이 단일 Azure Function에서 사용됩니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0c4b40f0-c992-470d-b32d-f59764fc8c0f.png"><img alt="Azure Function and Event Hub data streaming workflow chart" border="0" height="331" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/634cbe55-48cc-4a09-9ee3-f6b750e2f322.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure Function 및 Event Hub 데이터 스트리밍 워크플로 차트" width="1022"></a></p>


  <p>테스트 하네스는 이벤트 허브에 이벤트를 보내기 위해 메시지 다시 플레이어를 사용하여 구동되었습니다. 이 시나리오에 특정한 데이터를 사용하도록 수정하여 Microsoft에서 다운로드할 수 있는 호출 이벤트 생성 앱인 <a href="https://download.microsoft.com/download/8/B/D/8BD50991-8D54-4F59-AB83-3354B69C8A7E/TelcoGenerator.zip" target="_blank">TelcoGenerator</a>를 사용했습니다. 소스 코드는 <a href="https://github.com/Azure/azure-stream-analytics/tree/master/Samples/TelcoGenerator" target="_blank">GitHub</a>에서 사용할 수 있습니다.</p>


  <h2>어떤 점을 학습했나요?</h2>


  <p>Azure Functions는 구성하기 쉽고 몇 분 내에 Azure Event Hubs에서 대량의 원격 분석 데이터를 사용하도록 설정할 수 있습니다. 부하 테스트가 수행되었고 <a href="https://azure.microsoft.com/services/monitor/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">Azure Application Insights</a> 통해 원격 분석이 캡처되었습니다. 주요 메트릭은 Azure Functions가 이 특정 워크플로에 필요한 성능 및 처리량을 제공했음을 분명히 보여 줍니다.</p>


  <table border="1" cellpadding="2" cellspacing="0">
   <tbody>
    <tr>
     <td valign="top"><strong>아키텍처</strong></td>
     <td valign="top"><strong>이벤트 허브 1개 + Azure 함수 1개</strong></td>
    </tr>
    <tr>
     <td valign="top">단일 메시지 종단 간을 처리하는 최소 시간(더 낮을수록 좋습니다).</td>
     <td valign="top">69밀리초</td>
    </tr>
    <tr>
     <td valign="top">분당 처리되는 평균 이벤트 수(더 높아집니다).</td>
     <td valign="top">8,300</td>
    </tr>
   </tbody>
  </table>


  <p align="center"><em>표: 부하 테스트 결과</em></p>


  <p>부하 테스트 성능 외에도 Azure Functions 선택을 구동하는 데 도움이 되는 다른 기능에는 다음이 포함되었습니다.</p>


  <ul>
   <li>대기 시간(밀리초)을 사용하여 한 번에 하나의 이벤트를 평가하고 실행할 수 있으며 이벤트가 순서대로 처리되는지 확인할 수 있습니다.</li>
   <li>Azure Functions는 C#, JavaScript, Python 및 기타 언어를 지원하므로 파이프라인 처리 내에서 복잡한 비즈니스 논리를 적용할 수 있습니다.</li>
   <li>SQL Database 통합된 Azure Function은 다음과 같은 여러 이점을 제공합니다. <ul>
    <li>
    <ul>
     <li>이벤트 및 트랜잭션 처리에 대한 트랜잭션 제어입니다. 이벤트의 트랜잭션에서 처리 오류가 발견되면 이벤트에 포함된 모든 트랜잭션을 롤백할 수 있습니다.</li>
    </ul>

    <ul>
     <li>SQL Database 메모리 내 처리 및 네이티브 저장 프로시저를 사용하여 대량의 데이터 준비를 수행하는 것은 매우 빠릅니다.</li>
    </ul>
    </li>
   </ul>
   </li>
   <li>참조 데이터 또는 비즈니스 논리에 대한 동적 변경 내용은 Azure Functions를 통해 쉽게 수용할 수 있습니다. 참조 테이블 및 저장 프로시저는 SQL Database 쉽고 빠르게 업데이트할 수 있으며 파이프라인&rsquo;을 다시 배포할 필요 없이 후속 실행에서 즉시 사용할 수 있습니다.</li>
   <li>JSON 파일 처리는 각 JSON 파일에서 추출된 최대 5개의 개별 은행 트랜잭션으로 집약적이고 복잡했습니다. Azure Functions를 사용하면 .NET Framework 네이티브 JSON 기능을 활용할 수 있으므로 JSON 구문 분석이 빨라졌습니다.</li>
   <li>처음에 서비스는 크기 조정 시 Event Hubs 소비자 그룹을 잠그는 데 문제가 있었습니다. <a href="https://azure.microsoft.com/en-us/blog/a-fast-serverless-big-data-pipeline-powered-by-a-single-azure-function/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">단일 Azure Function으로 구동되는 빠르고 서버리스 빅 데이터 파이프라인</a>에 &ldquo; 설명된 구성 매개 변수를 실험한 후에는 이 솔루션에 대한 빅 데이터 볼륨 요구 사항을 충족하는 데 필요한 단일 함수가 모두 필요했습니다.&rdquo;</li>
   <li>Azure Function을 사용하면 처리 작업 간에 상태를 쉽게 저장할 수 있습니다.</li>
   <li>DevOps 릴리스 프로세스의 경우 Azure Functions 파이프라인을 통합하고 Azure Functions 메서드에 대한 단위 테스트를 개발하는 것이 간단합니다. 이 시나리오에서는 Azure Function에 대한 데이터 값 및 데이터 형식 검사에 대한 단위 테스트를 개발하는 것이 도움이 됩니다.</li>
  </ul>


  <h2>권장하는 다음 단계</h2>


  <p>솔루션 요구 사항이 구체화됨에 따라 기술 의사 결정권자는 이벤트 및 데이터 볼륨의 급격한 변동으로 데이터 파이프라인이 어떻게 수행되는지 아는 것이 중요해질 수 있습니다. 데이터 파이프라인 솔루션에 대한 기술을 고려할 때 파이프라인 부하 테스트를 고려합니다. 시작하기 위해 도움이 될 수 있는 몇 가지 링크는 다음과 같습니다.</p>


  <ul>
   <li><a href="https://github.com/jeffhollan/functions-csharp-eventhub-ordered-processing" target="_blank">Event Hub 및 Azure Functions 솔루션</a>(모바일 뱅크 솔루션은 아님)을 사용하여 이벤트를 순서대로 처리하는 예제를 찾습니다.</li>
   <li>&ldquo; 단일 Azure Function&rdquo;으로 <a href="https://azure.microsoft.com/en-us/blog/a-fast-serverless-big-data-pipeline-powered-by-a-single-azure-function/?WT.mc_id=streamfunction-acomblog-kbaroni" target="_blank">구동되는 빠르고 서버리스 빅 데이터 파이프라인을</a> 읽습니다.</li>
   <li><a href="https://download.microsoft.com/download/0/1/5/0150425C-14C7-41F4-97EA-3DE57B678C51/IndSG_FraudDetection.pdf" target="_blank">모바일 은행 사기 솔루션 가이드</a>&rdquo; 블로그 게시물 &ldquo; 에서 참조되는 은행 사기 솔루션에 대한 전체 아키텍처를 찾을 수 있습니다.</li>
  </ul>


  <p>이 블로그에서 공동 작업해 주신 <a href="https://www.linkedin.com/in/cedza/" target="_blank">세드릭 라부샤뉴</a>, <a href="https://www.linkedin.com/in/chris-cook-49b88457/" target="_blank">크리스 쿡</a>, <a href="https://www.linkedin.com/in/eujon-sellers/" target="_blank">유종 셀러스에</a> 감사드립니다.</p>
