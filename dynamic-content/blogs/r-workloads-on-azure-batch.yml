### YamlMime:Yaml
ms.openlocfilehash: b2bac8efe1edffd03b0949a64aed866eb876bc99
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897232"
Slug: r-workloads-on-azure-batch
Title: Azure Batch의 R 워크로드
Summary: 이 게시물에서는 Batch를 통해 다양한 VM에서 Azure에서 간단한 R 스크립트를 실행할 수 있는 방법에 대해 설명합니다.
Content: "R은 다양한 통계 및 그래픽 기법을 제공하는 오픈 소스 소프트웨어 환경 및 언어로, 확장성이 뛰어나며 모든 플랫폼에서 실행됩니다. 오늘날 R은 일상적인 비즈니스에서 다양한 조직에서 사용됩니다. 그 중 일부는 은행, 자동차 회사, 항공사 제조업체 및 기술 회사를 포함합니다. 대규모로 실행되는 예측 및 통계 분석 형식에 R을 사용합니다. 이로 인해 대규모 계산 및 대규모 처리가 발생하므로 대규모 리소스가 필요합니다.\n\nAzure Batch가 들어오는 위치입니다. 2014년 10월부터 공개 미리 보기로 제공되는 서비스로, Microsoft Azure 관리 서비스로 소싱, 예약 및 작업 실행을 제공합니다. 클러스터에서 대규모 R 스크립트 및 워크로드를 실행하는 데 적합합니다. 모델 및 분석을 제공하고 Azure Batch는 VM을 소싱 및 예약한 다음 R을 실행하여 스크립트를 실행하여 직접 결과를 얻고 출력을 올바른 대상으로 푸시합니다.\n\nBatch를 통해 다양한 VM에서 Azure에서 간단한 R 스크립트를 실행할 수 있는 방법에 대해 설명합니다. 서비스는 작업을 분할하여 생성되는 모든 작업에 대해 각 VM에서 \"RScript.exe\"(<a href=\"https://cran.r-project.org/mirrors.html\" target=\"_blank\">여기서</a> R을 다운로드하고 Windows 설치에 대한 지침을 <a href=\"https://cran.r-project.org/bin/windows/base/rw-FAQ.html#Introduction\" target=\"_blank\">찾을</a> 수 있음)를 실행합니다. R 실행 파일은 Azure Portal을 통해 일괄 처리 계정을 통해 액세스할 수 있는 Batch 앱 포털을 사용하여 Batch 계정에 패키지되고 업로드됩니다. R 스크립트를 실행하는 코드도 동일한 리소스를 사용하여 패키지되고 업로드됩니다.\n\n솔루션에는 두 가지 주요 부분이 있습니다.\n\n<strong>1) 클라우드 –</strong> 작업의 분할을 수많은 작업으로 실행한 다음 태스크 실행 코드를 실행하는 서버 쪽 코드입니다.\n<pre class=\"prettyprint\">public static readonly CloudApplication Application = new ParallelCloudApplication\n        {\n            ApplicationName = \"RWorkload\",\n            JobType = \"RWorkload\",\n            JobSplitterType = typeof(RWorkloadJobSplitter),\n            TaskProcessorType = typeof(RWorkloadTaskProcessor)\n        };</pre>\n이 코드는 내 워크로드를 설명합니다. 애플리케이션 이름은 포털에서 업로드해야 하는 애플리케이션 이미지 zip에 해당합니다. 여기에는 R 스크립트 실행 파일이 포함됩니다. 작업 유형은 워크로드를 제출하기 위해 클라이언트에서 참조하는 형식입니다.\n<pre class=\"prettyprint\">protected override IEnumerable&lt;TaskSpecifier&gt; Split(IJob job, JobSplitSettings settings)\n        {\n            var taskList = new List&lt;TaskSpecifier&gt;();\n            var task = new TaskSpecifier\n            {\n                RequiredFiles = job.Files,\n                Parameters = job.Parameters\n            };\n\n            taskList.Add(task);\n\n            return taskList;\n        }</pre>\n이 코드는 단일 작업을 만들지만 파일 수 또는 스크립트 구문 분석, 워크로드 분할 고급 사례 구성 등의 매개 변수 호스트에 따라 여러 작업을 만들도록 확장할 수 있습니다. 또한 클라이언트를 통해 전달되는 모든 파일 및 매개 변수를 전달합니다. 여기에는 다른 여러 스크립트를 호출하거나 호출하지 않을 수 있는 기본 R 스크립트를 포함한 모든 스크립트가 포함됩니다. 매개 변수에는 기본 스크립트인 R 스크립트를 식별하는 데 도움이 되는 기본 R 스크립트 파일 이름이 포함되어 있습니다.\n<pre class=\"prettyprint\">protected override TaskProcessResult RunExternalTaskProcess(ITask task, TaskExecutionSettings settings)\n        {\n            //R input script\n            var inputFile = task.Parameters[\"inputFile\"];\n\n            const string outputFile = \"output.txt\";\n\n            //std output directed to this file\n            string standardOutput = string.Format(\"std_task{0}.out\", task.TaskId);\n\n            var process = new ExternalProcess\n            {\n                CommandPath = ExecutablePath(@\"R-3.1.2\\bin\\Rscript.exe\"),\n                Arguments = string.Format(\"{0} &gt; {1}\", inputFile, standardOutput),\n                WorkingDirectory = LocalStoragePath\n            };\n\n            try\n            {\n                var processOutput = process.Run();\n                return TaskProcessResult.FromExternalProcessResult(processOutput, standardOutput, outputFile);\n            }\n            catch (Exception ex)\n            {\n                Log.Error(\"Error in task processor: {0}\", ex.ToString());\n            }\n\n            return new TaskProcessResult { Success = TaskProcessSuccess.RetryableFailure };\n        }</pre>\n태스크 프로세서는 입력 스크립트를 사용하여 R 스크립트 실행 파일을 실행하고 출력을 표준 출력 파일로 전달하고 실행 파일에 의해 독립적으로 생성되는 텍스트 파일의 출력을 캡처합니다. 그런 다음 이러한 출력은 작업의 결과로 전달됩니다. 즉, Blob Storage에 업로드되고 포털에서 작업/작업 다운로드를 통해 사용할 수 있습니다.\n\n<strong>2) 클라이언트 –</strong> 필요한 파일과 함께 작업을 제출한 다음 작업 상태를 모니터링하고 마지막으로 생성된 출력을 다운로드하는 클라이언트 쪽 코드입니다.\n<pre class=\"prettyprint\">var parameters = new Dictionary&lt;string, string&gt;\n            {\n                { \"Rscript\", \"&lt;your main R script&gt;.r\" },\n                { \"inputFile\", \"&lt;your r scripts&gt;.r\" }\n            };\n\n            return new JobSubmission\n            {\n                Name = \"R\",                             \n                Type = \"RWorkload\",                     \n                RequiredFiles = userInputFilePaths,     \n                Parameters = parameters,                \n                InstanceCount = 1,         \n            };</pre>\n클라이언트는 작업 제출 개체를 포함하는 작업 사양을 빌드합니다. 위의 샘플에서 작업에 클라우드 코드의 작업 유형에 해당하는 작업 유형, 입력 파일로 전달되어야 하는 스크립트 목록이 포함된 이름을 지정했습니다. 이러한 파일은 로컬 스토리지 위치를 사용하여 참조할 수 있으며 백그라운드에서 Storage Azure Blob에 업로드됩니다(업로드는 작업을 제출하기 전에 발생하지만 동일한 호출에서 수행됨) 및 스크립트 이름과 마지막으로 작업을 실행하려는 인스턴스 수를 포함하는 매개 변수입니다.\n<pre class=\"prettyprint\">var job = await client.Jobs.SubmitAsync(jobSpec);</pre>\n마지막으로 작업 제출 개체는 SDK의 Submit 호출을 통해 전달되고 워크로드는 포털을 사용하여 생성된 서비스에 제출됩니다. 이제 제출 시 반환된 작업 ID를 사용하여 작업의 세부 정보를 가져오면 포털 또는 클라이언트를 통해 작업을 모니터링할 수 있습니다.\n\n따라서 많은 노력 없이 클라우드에서 R 스크립트를 실행하는 것이 얼마나 간단한지 쉽게 확인할 수 있습니다. 워크로드 요구 사항에 따라 이를 여러 가상 머신으로 확장하는 것은 간단합니다. 우리는 사람들이 이러한 아이디어를 가지고 놀고 피드백, 질문 및 의견과 연락하는 것이 좋습니다.\n\n&nbsp;\n<h2>추가 리소스</h2>\n<a title=\"기술 개요\" href=\"https://azure.microsoft.com/en-us/documentation/articles/batch-technical-overview/\"> 기술 개요</a>\n\n<a title=\".NET용 Azure Batch 라이브러리로 시작하는 .NETGet\" href=\"https://azure.microsoft.com/en-us/documentation/articles/batch-dotnet-get-started/\">용 Azure Batch 라이브러리 시작</a>\n\n<a title=\"Batch 개발 라이브러리 및 도구\" href=\"https://azure.microsoft.com/en-us/documentation/articles/batch-development-libraries-tools/\"> 가져오기Get Batch 개발 라이브러리 및 도구</a>"
