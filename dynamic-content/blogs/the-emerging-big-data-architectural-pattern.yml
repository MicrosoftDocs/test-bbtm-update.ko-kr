### YamlMime:Yaml
ms.openlocfilehash: 49eab3131faaeaebc405ca2466bf6f46f21e70d6
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907027"
Slug: the-emerging-big-data-architectural-pattern
Title: 새로운 빅 데이터 아키텍처 패턴
Summary: 람다 아키텍처는 빅 데이터 아키텍처 파이프라인으로 널리 사용되고 있으며 일괄 처리 계층(콜드 계층이라고도 함)을 모두 활용하여 대량의 데이터를 처리하도록 설계되었습니다.
Content: >-
  <h2>왜 람다?</h2>


  <p>람다 아키텍처는 빅 데이터 파이프라인을 빌드하는 데 널리 사용되는 패턴입니다. <a href="https://en.wikipedia.org/wiki/Batch_processing">일괄 처리</a> 계층(콜드 계층이라고도 함) 및 <a href="https://en.wikipedia.org/wiki/Stream_processing">스트림 처리</a> 계층(핫 또는 속도 계층이라고도 함)을 모두 활용하여 대량의 데이터를 처리하도록 설계되었습니다.</p>


  <p>다음은 특히 빅 데이터 처리 파이프라인에서 람다 아키텍처의 인기와 성공을 이끈 몇 가지 이유입니다.</p>


  <h3>속도 및 비즈니스 과제</h3>


  <p>트랜잭션 처리 및 실시간 보고와 같은 운영 요구 사항에는 스트리밍 컨텍스트에서 고속으로 데이터를 처리하는 기능이 필요합니다. 오류/사기 감지, 연결된/스마트 자동차/공장/병원/도시, 감정 분석, 재고 제어, 네트워크/보안 모니터링 등이 있습니다.</p>


  <p>일반적으로 대량의 데이터와 관련된 일괄 처리 및 관련 상관 관계 및 집계는 비즈니스 보고에 중요합니다. 이는 비즈니스의 수행 방식, 추세 및 비즈니스 또는 고객 환경을 개선하기 위해 실행할 수 있는 수정 또는 추가 측정값을 이해하기 위한 것입니다.</p>


  <h3>제품 과제</h3>


  <p>람다 아키텍처의 존재로 이어지는 트리거 중 하나는 기술과 도구 집합을 최대한 활용하는 것이었습니다. 데이터 웨어하우스, 데이터 레이크, Spark/Hadoop 등과 같은 기존 일괄 처리 시스템은 페타바이트 크기 조정 데이터 작업을 쉽게 처리할 수 있지만 운영 요구 사항에 따라 충분히 빠르게 처리할 수 없었습니다&rsquo;.</p>


  <p>마찬가지로 캐시 데이터베이스, NoSQL, 스트리밍 기술과 같은 매우 빠른 계층은 더 작은 데이터 집합에서 빠른 운영 분석을 허용하지만 대규모 상관 관계 및 집계 및 일괄 처리 시스템과 같은 기타 분석 작업(예: <a href="https://en.wikipedia.org/wiki/Online_analytical_processing">온라인 분석 처리</a>)을 수행할 수는 없습니다.</p>


  <h3>기술 과제</h3>


  <p>또한 시장에서는 일괄 처리 시스템에서 고도로 숙련 된 사람들을 찾을 수 있으며 스트림 처리에서 동일한 깊이의 기술을 갖지 못하는 경우가 많으며 그 반대의 경우도 마찬가지입니다.</p>


  <h3>Azure의 람다</h3>


  <p>다음은 빅 데이터 파이프라인을 빌드하기 위한 Azure의 많은 대표적인 람다 아키텍처 중 하나입니다.</p>


  <p align="center"><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4fd6d1cc-0834-4d6c-a7e9-7d8c22c1804a.png"><img alt="Figure 1" border="0" height="713" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/38f819e8-b707-442e-9374-97b57c5d5742.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="그림 1" width="1541"></a><br>

  &nbsp;<br>

  <em>그림 1: Azure 제품 및 서비스에서 나타내는 빅 데이터 처리를 위한 람다 아키텍처입니다. 특정 요구 사항에 따라 필요한 경우 다른 Azure 및(또는) ISV 솔루션을 혼합에 배치할 수 있습니다.</em></p>


  <h2 align="left">람다는 어떤 문제를 해결하고 어떤 문제가 발생하나요?</h2>


  <p>이전 섹션에서 설명한 것처럼 람다 아키텍처는 몇 가지 비즈니스 문제를 해결합니다. 비즈니스의 다양한 부분에는 속도, 세분성 수준 및 데이터 소비 메커니즘 측면에서 요구 사항이 다릅니다. 또한 속도 계층과 일괄 처리 계층의 최고를 함께 사용하고, 한 제품을&rsquo; 확장하지 않음으로써 기술 선택의 과제를 해결합니다. 마지막으로, 트랜잭션 및 속도 계층을 다루는 기술을 가진 사람들이 일괄 처리 기술을 가진 사람들과 병렬로 작업할 수 있도록 합니다.</p>


  <p>많은 산업에서 대단히 성공적이고 널리 채택되고 빅 데이터 파이프라인에 대한 사실상 아키텍처 패턴이지만 자체 과제가 있습니다. 몇 가지 예를 들면 다음과 같습니다.</p>


  <ul>
   <li>
   <p><strong>일시적인 데이터 사일로:</strong> 람다 파이프라인은 비즈니스에서 몇 가지 문제를 일으킬 수 있는 사일로를 만드는 경우가 많습니다. 운영 팀이 처리하는 속도 계층의 보고는 관리 팀이 작업하는 집계 일괄 처리 계층과 다를 수 있습니다. 이러한 주름은 결국 다림질 될 수 있지만 일부 불일치를 일으킬 가능성이 있습니다.</p>
   </li>
  </ul>


  <ul>
   <li><strong>더 많은 관리 오버헤드: </strong> 또한 유지 관리 시간 동안 관리 및 유지 관리가 필요한 많은 하위 시스템 수가 증가합니다. 이것은 잠재적으로 깊고 넓은 기술 세트를 가진 더 큰 팀이 필요할 수 있음을 의미할 수 있습니다.</li>
  </ul>


  <h2>새로운 빅 데이터 디자인 패턴</h2>


  <p>별도의 속도 또는 일괄 처리 계층이 필요하지 않은&rsquo; 기술의 적절한 조합을 활용하는 방법이 있는 경우 단일 계층만 있고 속도 계층과 일괄 처리 계층의 특성을 모두 허용하는 시스템을 빌드할 수 있습니다. Microsoft, 특히 <a href="https://azure.microsoft.com/en-gb/services/cosmos-db/">Azure Cosmos DB</a>에서 기술 혁신을 통해 이제 이 작업을 수행할 수 있습니다.</p>


  <p>Azure Cosmos DB는 전 세계에 배포된 다중 모델 데이터베이스입니다. Cosmos DB를 사용하면 여러 Azure&#39;지리적 지역에서 처리량 및 스토리지를 독립적으로 확장할 수 있습니다. 포괄적인 SLA( <a href="https://aka.ms/acdbsla">서비스 수준 계약</a> )를 통해 처리량, 대기 시간, 가용성 및 일관성을 보장합니다.</p>


  <p>다음은 이후 속도와 일괄 처리 계층이 단일 계층으로 병합되는 제안된 참조 아키텍처를 구현하기 위한 적합한 후보로 Cosmos DB를 렌더링하는 몇 가지 주요 기능입니다.</p>


  <h3>Cosmos DB 변경 피드</h3>


  <ul>
   <li>가장 중요한 것은 이러한 새로운 빅 데이터 아키텍처 패턴을 빌드하는 데 중요한 핵심 기능은 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed">Cosmos DB 변경 피드</a>입니다. 변경 피드 지원은 Azure Cosmos DB 컬렉션에서 변경 내용을 수신 대기하여 작동합니다. 그런 다음, 수정된 순서대로 변경된 정렬된 문서 목록을 출력합니다. 변경 사항은 지속적이며, 비동기적 및 증분적으로 처리할 수 있고 출력을 하나 이상의 소비자 사이에 분산하여 병렬 처리가 가능합니다.</li>
  </ul>


  <h3>속도/핫 계층에 대한 기능</h3>


  <ul>
   <li>Azure Cosmos DB&rsquo; 데이터베이스 엔진은 스키마 &ndash; 또는 인덱스를 요구하지 않고 수집한 모든 데이터를 자동으로 인덱싱하고 빠른 쿼리를 제공합니다.</li>
   <li>Cosmos DB를 사용하면 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/request-units">초당</a> 세분성으로 데이터베이스 처리량의 크기를 쉽게 조정하고 언제든지 변경할 수 있습니다.</li>
   <li><a href="https://docs.microsoft.com/en-us/azure/cosmos-db/tutorial-global-distribution-sql-api">단추를 클릭</a>하여 원하는 수의 <a href="https://azure.microsoft.com/regions/">Azure 지역</a>에 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/distribute-data-globally">데이터를 배포</a>할 수 있습니다. 이렇게 하면 사용자가 있는 위치에 데이터를 배치하여 고객에게 가장 짧을 대기 시간을 보장할 수 있습니다.</li>
   <li>Azure Cosmos DB는 고객에게 백분위 99의 엔드투엔드 대기 시간을 보장합니다. 일반적인 1KB 항목의 경우 Cosmos DB는 동일한 Azure 지역 내에서 99번째 백분위수로 10ms 미만의 엔드투엔드 읽기 대기 시간, 15ms 미만의 인덱싱된 쓰기를 보장합니다. 중간 대기 시간이 크게 낮아집니다(5ms 미만).</li>
  </ul>


  <h3>일괄 처리/콜드 계층에 대한 기능</h3>


  <ul>
   <li><a href="https://docs.microsoft.com/en-us/azure/cosmos-db/documentdb-introduction">SQL</a>, <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-introduction">MongoDB</a>, <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/cassandra-introduction">Cassandra API</a> 및 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/table-introduction">Table</a> API와 같은 원하는 API를 사용하고 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/graph-introduction">Gremlin API</a>를 통해 그래프를 사용하여 데이터에 액세스할 수 있습니다. 모든 API는 모두 기본적으로 지원됩니다.</li>
   <li>스토리지 크기를 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data">투명하고 자동으로</a> 조정하여 크기 요구 사항을 영원히 처리할 수도 있습니다.</li>
   <li>잘 정의되고 실용적이며 직관적인 5개 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels">일관성 모델</a>은 중간 형태의 일관성을 포함하여 완화된 NoSQL 형태의 최종 일관성에서 강력한 SQL 형태의 일관성까지 모두 제공합니다.</li>
   <li>데이터베이스 스키마 및/또는 인덱스 관리에 대한 걱정 없이 애플리케이션의 스키마를 신속하게 반복합니다.</li>
   <li>위에서 설명한 기능을 사용하면 다음과 같은 새로운 아키텍처 패턴이 구현됩니다.</li>
  </ul>


  <p>다음은 이 블로그에서 설명한 새로운 빅 데이터 파이프라인의 다이어그램 표현입니다.</p>


  <ul>

  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/470f387e-5aa4-4c0f-a40c-7cf35b87feda.png"><img alt="Figure 2" border="0" height="666" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/eb7a5666-1040-454f-a535-84c1d219389a.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="그림 2" width="1723"></a></p>


  <p align="center"><em>그림 2: 기존 람다 아키텍처의 진화로 빅 데이터 파이프라인용 Cosmos DB를 사용하여 구현된 새로운 아키텍처 패턴입니다.</em></p>


  <p>따라서 Cosmos DB 기능, 특히 변경 피드 아키텍처를 활용하여 이러한 새로운 패턴은 많은 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/use-cases">일반적인 사용 사례를</a> 해결할 수 있습니다. 따라서 람다 아키텍처의 모든 이점을 제공하고 람다에서 도입하는 몇 가지 복잡성을 해결합니다. 점점 더 많은 고객이 이를 채택하여 성공적인 커뮤니티를 만들고, 이 새로운 패턴의 성공과 Azure Cosmos DB의 채택을 증가했습니다.</p>


  <h2>다음 단계는 무엇입니까&rsquo;?</h2>


  <p>다음은 신속하게 시작하는 데 도움이 될 수 있는 리소스 목록입니다.</p>


  <ul>
   <li>아직&#39;않은 경우 <a href="https://github.com/Azure/azure-cosmosdb-spark">azure-cosmosdb-spark</a> GitHub 리포지토리에서 Azure Cosmos DB 커넥터로 Spark를 다운로드합니다.</li>
   <li>새 데이터를 Azure Cosmos DB로 푸시하는 메커니즘인 <a href="https://github.com/tknandu/TwitterCosmosDBFeed">Twitter에서 CosmosDB로의 스트림 피드</a>입니다.</li>
   <li>Cosmos DB TTL(Time-to-Live) 기능뿐만 아니라 설정된 기간 후에 문서가 자동으로 삭제되도록 구성할 수 있습니다. Azure Cosmos DB TTL 기능에 대한 자세한 내용은 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/time-to-live">TTL 시간이 있는 Azure Cosmos DB 컬렉션의 데이터 만료를 자동으로</a> 참조하세요.</li>
   <li>Azure Cosmos DB <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/bulk-executor-overview">BulkExecutor 라이브러리</a> 개요입니다.</li>
   <li>Azure Services를 사용하여 실제 및 시뮬레이션된 디바이스<a href="https://github.com/rangv/AzureIoTLabs">를 Azure IoT Hub에 연결하는 Azure IoT 엔드-엔드 솔루션을</a> 빌드하는 랩을 직접 수행합니다.</li>
   <li><a href="https://docs.microsoft.com/en-us/azure/cosmos-db/spark-connector-graph">Spark 및 Apache TinkerPop Gremlin을 사용하여 그래프 분석을</a> 수행합니다.</li>
   <li>ODBC 드라이버와 함께 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/odbc-driver">BI 분석 도구를 사용하여 Azure Cosmos DB</a>에 커넥트.</li>
  </ul>
