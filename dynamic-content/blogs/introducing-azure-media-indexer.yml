### YamlMime:Yaml
ms.openlocfilehash: c439e57924c54cf1e4fc0b1d2c07f347814f30c1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907154"
Slug: introducing-azure-media-indexer
Title: '소개: Azure Media Indexer'
Summary: Azure Media Indexer는 Microsoft Research의 음성 인식 기술을 사용하여 오디오 및 비디오 파일에서 의미 있는 메타데이터를 추출합니다.  이 블로그 게시물은 인덱서로 Azure Media Services 작업을 실행하는 방법을 설명하는 시리즈의 첫 번째 게시물입니다.
Content: "<h2>소개</h2>\n\n<p>인터넷 비디오는 놀라운 속도로 &ndash; 성장하고 <i>있습니다 Cisco VNI 예측</i> 은 모든 소비자 인터넷 트래픽의 70 %가 2014 년에 비디오 콘텐츠가 될 것으로 예상하며 2018 년까지 79 %로 증가할 것으로 예상합니다. 이미 전 세계에서 볼 수 있는 인터넷 트래픽의 대부분을 차지하는 비디오 콘텐츠는 World Wide Web을 점령하고 있으며, 이러한 성장으로 인해 콘텐츠를 검색하는 문제가 발생합니다. 인터넷은 텍스트 기반 문서를 중심으로 설계되었으며, 따라서 전체 웹에서 텍스트를 검색하고 검색할 수 있도록 하는 성숙한 인프라가 있습니다. 반면에 비디오 파일은 기본적으로 &ldquo;검색할 수&rdquo; 없으며 일반적으로 대량의 <i>수동 태그</i> 가 지정된 메타데이터로 구동되는 복잡한 분류 시스템이 필요합니다. 그러나 이러한 종류의 의미 있는 메타데이터를 자동으로 추출하는 방법이 있다면 어떨까요? Azure Media Indexer는 Microsoft Research의 NLP(자연어 처리) 기술을 활용하여 이 의미 있는 메타데이터를 XML(키워드 파일), SAMI/TTML(선택 자막 파일) 및 강력한 AIB(이진 인덱스 파일) 형식으로 최종 사용자에게 자동으로 노출하여 미디어 파일 및 콘텐츠를 검색할 수 있도록 하는 미디어 프로세서입니다. 멀티미디어의 성장으로 청각 장애가 있는 사용자에게 비디오 콘텐츠의 접근성에 대한 초점이 증가합니다. 현재 상태는 모든 비디오가 선택 자막 트랙을 만들기 위해 높은 비용으로 수동으로 전사되는 것입니다. Azure Media Indexers&rsquo; 음성 인식 엔진은 입력 미디어 파일의 모든 영어 음성 단어에 대한 시간 정렬 자막 트랙을 자동으로 만듭니다. 이렇게 하면 수많은 인력을 필요로 하는 힘들고 수동적인 프로세스를 자동화된 작업으로 전환합니다. 개발자는 azure Media Indexer의 출력 파일을 SQL Server 또는 Apache Lucene/Solr과 같은 검색 엔진과 함께 활용하여 전체 텍스트 검색 환경을 만들 수 있습니다. 그러면 사용자는 텍스트 쿼리를 사용하여 콘텐츠 라이브러리를 검색하고 단어가 발화되는 타임스탬프를 검색할 수 있는 결과 페이지를 다시 가져올 수 있습니다.&nbsp; 이러한 메타데이터와 비디오의 긴밀한 통합은 방대한 콘텐츠 라이브러리 검색과 원하는 결과 간의 마찰을 줄이는 고품질 시나리오를 가능하게 합니다.&nbsp; 이 검색 계층의 구현은 이 블로그 게시물의 범위를 벗어나지만 Azure Media Indexer를 사용하여 미디어 파일에 대한 검색 포털을 만드는 방법을 자세히 설명하는 Azure 블로그에서 예정된 게시물을 찾습니다. &nbsp;</p>\n\n<h2>첫 번째 자산 인덱싱</h2>\n\n<p>Azure Media Indexer를 사용하면 사용자는 로컬 파일 시스템 또는 Azure Media Services 다양한 파일 형식에서 인덱싱 작업을 실행할 수 있습니다. 첫 번째 Azure Media Indexer 작업의 경우 로컬 디스크의 파일로 시작하여 Azure Media Services 업로드하고 Azure 클라우드에서 처리합니다. 이 자습서에서는 이 <a href=\"https://channel9.msdn.com/Blogs/Windows-Phone/Integrative-Mom-and-Windows-Phone-App-Studio\">샘플 Channel9 비디오를</a> 사용하겠습니다&rsquo;.&nbsp; MP4 파일을 컴퓨터에 저장하고 이름을 Index.mp4.&nbsp; 이 자습서의 목적을 위해 대상 비디오 파일을 다음 경로&ldquo;에서 찾을 수 있다고 가정해 보겠습니다&rsquo;. C:\\Userslt;&lt;\\& USERNAME&gt;&gt;\\Videos\\Index.mp4&rdquo;. 완성된 샘플 프로젝트는 여기에서 다운로드할 수 있습니다.</p>\n\n<blockquote><strong>참고: </strong> 이 자습서에서는 이미 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/media-services-create-account/\">Azure Media Services 계정이</a> 있다고 가정합니다.</blockquote>\n\n<h3>Project 설정</h3>\n\n<p>먼저 Visual Studio 2013 새 C# 콘솔 애플리케이션 Project 만듭니다(새 &gt; 파일 &gt; Project 또는 Ctrl+Shift+N)&nbsp;. <a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/08/1-1.png\"><img alt=\"Creating a project\" border=\"0\" height=\"646\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1-1_thumb.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none;\" title=\"1-1\" width=\"933\"></a> &nbsp; 다음으로 솔루션 탐색기에서 프로젝트 참조 폴더를 마우스 오른쪽 단추로 클릭하고 NuGet 패키지 관리를 클릭하여 NuGet 사용하여 Azure Media Services SDK를 &ldquo;설치합니다&rdquo;. 검색 상자에 미디어 서비스를&rdquo; 입력&ldquo;하고 .NET SDK&rdquo;에 Windows Azure Media Services 설치&ldquo;합니다. &nbsp; <a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/08/1-2.png\"><img alt=\"Installing SDK via NuGet\" border=\"0\" height=\"760\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1-2_thumb.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none;\" title=\"1-2\" width=\"1009\"></a> &nbsp; 마지막으로 <span style=\"font-family: Consolas;\">App.config </span>파일을 열고 아래와 같이 <span style=\"font-family: consolas;\">appSettings 섹션을 추가합니다</span> . 적절한 키-값 쌍에 Azure Media Services 자격 증명을 입력해야 합니다.</p>\n\n<blockquote><strong>&nbsp;<span style=\"color: rgb(255, 0, 0);\">참고: 이 초기 릴리스 이후 작업 구성 스키마가 변경되었습니다. &nbsp; 자세한 내용은</span> Azure Media Indexer 1.2Azure Media Indexer v1.2\"> 릴리스 정보를 <a href=\"https://aka.ms/indexerblog4\" title=\"참조하세요.</a></strong></blockquote>\n\n<p style=\"padding-left: 30px;\"><span style=\"line-height: 1.5;\">&nbsp;</span></p>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;configuration&gt;\n    &lt;startup&gt; \n        &lt;supportedRuntime version=&quot;v4.0&quot; sku=&quot;.NETFramework,Version=v4.5&quot; /&gt;\n    &lt;/startup&gt;\n\n  &lt;!-- YOUR SETTINGS GO HERE --&gt;--&gt;\n  &lt;appSettings&gt;\n    &lt;add key=&quot;accountName&quot; value=&quot;&lt;&lt;YOUR_ACCT_NAME&gt;&gt;&quot;/&gt;\n    &lt;add key=&quot;accountKey&quot; value=&quot;&lt;&lt;YOUR_ACCT_KEY&gt;&gt;&quot;/&gt;\n  &lt;/appSettings&gt;\n  &lt;!-- REPLACE &lt;&lt;YOUR_ACCT_NAME&gt;&gt; AND &lt;&lt;YOUR_ACCT_KEY&gt;&gt; &ndash; --&gt;\n\n&lt;/configuration&gt;</pre>\n\n<h3>&nbsp;</h3>\n\n<h3>자산 만들기</h3>\n\n<p><a href=\"https://msdn.microsoft.com/en-us/library/azure/hh974277.aspx\">자산</a>은 미디어 파일에 대한 Azure Media Services 컨테이너입니다. 자산에는 미디어 파일 자체와 스트리밍을 위한 매니페스트 파일 또는 미리 보기용 미리 보기 파일과 같은 기타 필수 파일이 포함됩니다. 이 경우 .NET SDK를 사용하여 비디오 파일을 보유하는 자산 파일을 만듭니다. <a href=\"https://manage.windowsazure.com\">Azure 관리 포털</a>을 사용하여 자산을 업로드할 수도 있습니다. 미디어 처리 작업은 입력 자산을 사용하고 결과를 지정된 출력 자산에 저장합니다. 먼저 일부 종속성을 가져오고 편리한 <span style=\"font-family: consolas;\">inProgram.cs</span>에 제공되는 일부 상수는 선언해야 합니다. &nbsp;</p>\n\n<pre class=\"prettyprint\">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing Microsoft.WindowsAzure.MediaServices.Client;\nusing System.Configuration;\nusing System.IO;\nusing System.Threading;\n\nnamespace MyFirstIndexingJob\n{\n    class Program\n    {\n\n        private static CloudMediaContext _context = null;\n        private const string _mediaProcessorName = &quot;Azure Media Indexer&quot;;\n        private const string _configurationFile = &quot;&lt;&lt;PLACEHOLDER&gt;&gt;&quot;;\n        private static readonly string _accountName =\n            ConfigurationManager.AppSettings[&quot;accountName&quot;];\n        private static readonly string _accountKey =\n            ConfigurationManager.AppSettings[&quot;accountKey&quot;];</pre>\n\n<p>&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/jj129571.aspx\">CloudMediaContext</a> 개체를 인스턴스화하여 Media Services 클라우드에 프로그래밍 방식으로 연결해야 합니다. 이렇게 하면 먼저 새 자산을 만든 다음 자산 내에서 AssetFile으로 파일을 업로드하여 파일을 업로드할 수 있습니다. 먼저 Main 함수에 다음 줄을 추가하여 비디오를 찾을 위치와 출력 파일을 배치할 위치를 지정합니다.</p>\n\n<blockquote>참고: 이 예제 프로젝트와 동일한 경로를 사용하려면 USERNAME&gt;&gt;을 로컬 Windows 사용자 이름으로 바꿉&lt;&lt;니다.<span style=\"color: rgb(255, 0, 0);\">&nbsp;</span></blockquote>\n\n<p><span style=\"color: rgb(255, 0, 0);\">&nbsp;</span></p>\n\n<pre class=\"prettyprint\">\nstatic void Main(string[] args)\n{\n    _context = new CloudMediaContext(_accountName, _accountKey);\n    var inputFile = @&ldquo;C:\\Users\\&lt;&lt;USERNAME&gt;&gt;\\Videos\\Index.mp4&rdquo;;\n    var outputFolder = @&ldquo;C:\\Users\\&lt;&lt;USERNAME&gt;&gt;\\Desktop&rdquo;;\n    RunIndexingJob(inputFile, outputFolder, _configurationFile);\n}</pre>\n\n<p>&nbsp; Then, you can begin your RunIndexingJob function, and add the first few lines: <!-- HTML generated using hilite.me --> &nbsp;</p>\n\n<pre class=\"prettyprint\">\nstatic bool RunIndexingJob(string inputFilePath, string outputFolder, string configurationFile = &ldquo;&rdquo;)\n{\n    IAsset asset = _context.Assets.Create(&ldquo;Indexer_Asset&rdquo;, AssetCreationOptions.None); \n    var assetFile = asset.AssetFiles.Create(Path.GetFileName(inputFilePath));\n    assetFile.Upload(inputFilePath);\n}</pre>\n\n<p>&nbsp; &nbsp;</p>\n\n<h3>인덱싱 작업 제출</h3>\n\n<p>이제 파일을 Azure Media Services 클라우드에 자산으로 사용하여 다음 단계는 Azure Content Indexer 미디어 프로세서에 대한 참조를 얻고 작업 자체를 만드는 것입니다. Media Services 작업은 처리 작업(인코딩, 패키징 등)의 세부 정보를 지정하는 하나 이상의 작업으로 구성됩니다. 필요에 따라 태스크 자체에 대한 세부 정보를 지정하는 작업 구성 파일을 사용합니다. 이 경우 아래에 설명된 몇 가지 유용한 메타데이터를 포함하는default.config&rdquo; 이라는 &ldquo; 선택적 구성 파일을 사용하여 새 자산에 인덱싱 작업을 만듭니다. &nbsp;</p>\n\n<h4>작업 구성</h4>\n\n<blockquote><strong>&nbsp;<span style=\"color: rgb(255, 0, 0);\">참고: 이 초기 릴리스 이후 작업 구성 스키마가 변경되었습니다. &nbsp; 자세한 내용은</span> Azure Media Indexer 1.2Azure Media Indexer v1.2\"> 릴리스 정보를 <a href=\"https://aka.ms/indexerblog4\" title=\"참조하세요.</a></strong></blockquote>\n\n<p>Azure Content Indexer에 대한 작업 구성 파일은 음성 인식 정확도를 향상시키는 키-값 쌍을 포함하는 XML 파일입니다. 이 Azure Media Indexer 릴리스에서 구성 세부 정보는 입력 미디어 파일의 제목과 설명을 설명할 수 있으므로 적응 자연어 처리 엔진이 현재 진행 중인 특정 주제에 따라 어휘를 보강할 수 있습니다.&nbsp; 예를 들어 Geico에 대한 비디오가 있는 경우 작업 구성 파일에 이 용어를 포함하는 것이 유용할 수 있습니다.&nbsp; 이것은 원하는 적절한 명사 &ldquo;게이코 대신 남자 공동&rdquo;의 전사&ldquo;의 가능성을 줄일 수 있습니다&rdquo;.&nbsp; 또한 예를 들어 하이퍼텐션&rdquo;이라는 용어&ldquo;가 포함된 제목이 있는 경우 엔진은 인터넷에서 언어 모델을 추가로 보강할 수 있는 관련 문서를 검색합니다. 이렇게 하면 A 또는 틱 캐너&rdquo;와 같이 &ldquo;이해할 수 없는 것으로 말하는 용어 &ldquo;대동맥류&rdquo;가 잘못 해석될 가능성이 줄어들어 출력 파일의 정확도가 크게 높아집니다.</p>\n\n<blockquote>참고: <span style=\"font-family: Consolas;\">최상의 결과는 제목</span> 및 <span style=\"font-family: Consolas;\">설명</span> 키에 걸친 4-5개의 문장을 사용하여 달성됩니다.</blockquote>\n\n<p>Project 마우스 오른쪽 단추로 클릭하고 새 항목 추가 &gt; 를 클릭한 다음 XML 파일을 선택하여 새 구성 파일을 만듭니다.&nbsp; 다음 텍스트를 새 파일에 붙여넣고default.config&rdquo;저장합니다 &ldquo; .&nbsp; 이 경우 Channel9 웹 사이트의 정보를 사용하여 구성 파일에 선택적 &ldquo;제목&rdquo; 및 &ldquo;설명&rdquo; 키를 추가하여 정확도를 높입니다.&nbsp;</p>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;configuration version=&quot;2.0&quot;&gt; \n  &lt;input&gt;\n    &lt;!-- [Optional] Metadata of the input media file(s) --&gt;\n    &lt;!-- Format: &lt;metadata key=&quot;...&quot; value=&quot;...&quot; /&gt; --&gt;\n    &lt;metadata key=&quot;title&quot; value=&quot;Integrative Mom and Windows Phone App Studio&quot; /&gt;\n    &lt;metadata key=&quot;description&quot; value=&quot;Holly Shore discusses her experience building her own app for Integrative Mom using Windows Phone App Studio, a free, web-based app builder that can help many small business owners like Holly get up and running quickly to extend their reach with a Windows Phone app.&quot; /&gt;\n  &lt;/input&gt;  \n  &lt;settings&gt;\n  &lt;/settings&gt;  \n&lt;/configuration&gt;</pre>\n\n<h4>&nbsp;</h4>\n\n<p>Program.cs 파일의 맨 위로 돌아가서 PLACEHOLDER _configurationFile 문자열을 새 default.config 파일의 경로로 변경&ldquo;&lt;&lt;해야 합니다.&gt;&gt;&rdquo; &nbsp;</p>\n\n<blockquote><span style=\"color: rgb(79, 129, 189);\"><strong>팁</strong></span>: 파일을 편집기에 끌어서 놓아 솔루션 탐색기에서 rile의 절대 경로를 쉽게 붙여넣을 수 있습니다.</blockquote>\n\n<p>&nbsp;</p>\n\n<h4>작업 만들기</h4>\n\n<p>구성 파일이 있는 상태에서 <span style=\"font-family: consolas;\">RunIndexingJob</span> 메서드에서 계속 작업하고 이제 해당 구성 요소 작업과 함께 작업 자체를 만들기 시작합니다. &nbsp;</p>\n\n<pre class=\"prettyprint\">\n    IMediaProcessor indexer = GetLatestMediaProcessorByName(_mediaProcessorName);\n    IJob job = _context.Jobs.Create(&quot;My Indexing Job&quot;);\n    string configuration = &quot;&quot;;\n    if (!String.IsNullOrEmpty(configurationFile))\n    {\n        configuration = File.ReadAllText(configurationFile);\n    }\n    ITask task = job.Tasks.AddNew(&quot;Indexing task&quot;,\n             indexer,\n             configuration,\n             TaskOptions.None);\n\n    // Specify the input asset to be indexed.\n    task.InputAssets.Add(asset);\n\n    // Add an output asset to contain the results of the job.\n    task.OutputAssets.AddNew(&quot;Indexed video&quot;, AssetCreationOptions.None);</pre>\n\n<p>&nbsp; 다음으로, 파일 맨 아래에 이 유용한 도우미 메서드를 정의하여 지정된 미디어 프로세서의 최신 버전을 검색합니다. &nbsp;</p>\n\n<pre class=\"prettyprint\">\nprivate static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n{\n    var processor = _context.MediaProcessors\n       .Where(p =&gt; p.Name == mediaProcessorName)\n       .ToList()\n       .OrderBy(p =&gt; new Version(p.Version))\n       .LastOrDefault();\n\n    if (processor == null)\n        throw new ArgumentException(string.Format(&quot;Unknown media processor&quot;, mediaProcessorName));\n\n    return processor;\n}</pre>\n\n<p>&nbsp; 이 작업을 제출할 준비가 되었지만 먼저 <a href=\"https://msdn.microsoft.com/en-us/library/edzehd2t.aspx\">EventHandler</a> 인스턴스를 작업에 연결하여 실시간으로 진행 상황을 추적할 수 있습니다. &nbsp;</p>\n\n<pre class=\"prettyprint\">\n    job.StateChanged += new EventHandler&lt;JobStateChangedEventArgs&gt;(StateChanged);\n    job.Submit();\n    // Check job execution and wait for job to finish. \n    Task progressPrintTask = new Task(() =&gt;\n    {\n        IJob jobQuery = null;\n        do\n        {\n            var progressContext = new CloudMediaContext(_accountName, \n       _accountKey);\n            jobQuery = progressContext.Jobs.Where(j =&gt; j.Id == job.Id).First();\n            Console.WriteLine(string.Format(&quot;{0}\\t{1}\\t{2}&quot;, \n         DateTime.Now, \n         jobQuery.State, \n         jobQuery.Tasks[0].Progress));\n            Thread.Sleep(10000);\n        }\n        while (jobQuery.State != JobState.Finished &amp;&amp;\n               jobQuery.State != JobState.Error &amp;&amp;\n               jobQuery.State != JobState.Canceled);\n     });\n     progressPrintTask.Start();\n\n    // Check job execution and wait for job to finish. \n    Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\n    progressJobTask.Wait();\n\n    // If job state is Error, the event handling \n    // method for job progress should log errors.  Here you check \n    // for error state and exit if needed.\n    if (job.State == JobState.Error)\n    {\n        Console.WriteLine(&quot;Exiting method due to job error.&quot;);\n        return false;\n    }\n\n    // Download the job outputs.\n&nbsp;   DownloadAsset(job.OutputMediaAssets.First(), outputFolder);\n    return true;\n}\n\n// helper function: event handler for Job State\nstatic void StateChanged(object sender, JobStateChangedEventArgs e)\n{\n    Console.WriteLine(&quot;Job state changed event:&quot;);\n    Console.WriteLine(&quot;  Previous state: &quot; + e.PreviousState);\n    Console.WriteLine(&quot;  Current state: &quot; + e.CurrentState);\n    switch (e.CurrentState)\n    {\n        case JobState.Finished:\n            Console.WriteLine();\n            Console.WriteLine(&quot;Job finished. Please wait for local tasks/downloads&quot;);\n            break;\n        case JobState.Canceling:\n        case JobState.Queued:\n        case JobState.Scheduled:\n        case JobState.Processing:\n            Console.WriteLine(&quot;Please wait...\\n&quot;);\n            break;\n        case JobState.Canceled:\n            Console.WriteLine(&quot;Job is canceled.\\n&quot;);\n            break;\n        case JobState.Error:\n            Console.WriteLine(&quot;Job failed.\\n&quot;);\n            break;\n        default:\n            break;\n    }\n}\n\n// helper method to download the output assets\nstatic void DownloadAsset(IAsset asset, string outputDirectory)\n{\n    foreach (IAssetFile file in asset.AssetFiles)\n    {\n        file.Download(Path.Combine(outputDirectory, file.Name));\n    }\n}</pre>\n\n<h4>&nbsp;</h4>\n\n<p>&nbsp;</p>\n\n<h4>출력</h4>\n\n<p>모든 인덱싱 파일에는 4개의 출력이 있습니다.</p>\n\n<ol>\n <li>SAMI 형식의 선택 자막 파일</li>\n <li>TTML(Timed Text Markup Language) 형식의 선택 자막 파일</li>\n <li>키워드 파일(XML)</li>\n <li>SQL 서버에서 사용할 AIB(오디오 인덱싱 Blob 파일)</li>\n</ol>\n\n<p>이 게시물에서는 이러한 모든 파일을 로컬 폴더에 다운로드하기만 하면 됩니다. 이후 블로그 게시물에서는 이러한 다양한 출력의 특정 사용 시나리오를 살펴봅니다. 높은 수준에서 SAMI 및 TTML 파일은 비디오의 타임스탬프와 함께 말한 단어에 대한 구조화된 데이터를 포함하며 비디오의 대략적인 초안 캡션으로 사용할 수 있습니다. 키워드 파일에는 신뢰도 수준과 함께 입력 비디오를 형성하는 알고리즘으로 결정된 키워드가 포함되어 있습니다. AIB 파일에는 SAMI 및 TTML 파일과 동일한 데이터를 설명하는 이진 데이터 구조와 전사가 100% 신뢰하지 않은 단어에 대한 광범위한 단어 대안이 포함되어 있습니다. 이렇게 하면 다양한 검색 기능을 사용할 수 있으며 출력의 정확도가 크게 높아질 수 있습니다. AIB 파일을 사용하려면 Azure Media Indexer SQL 추가 기능이 있는 SQL Server 인스턴스가 필요합니다. 에서 질문이나 의견을 <a href=\"mailto:indexer@microsoft.com\">indexer@microsoft.com</a>보내 주시기 바랍니다&nbsp;. 이 시나리오에 대해 자세히 알아보려면 Azure Media Indexer에서 이 블로그 시리즈의 <a href=\"https://aka.ms/indexerblog2\">2부</a> 를 참조하세요. &nbsp;</p>\n\n<h4>기타 정보</h4>\n\n<ul>\n <li>이 블로그 게시물은 Azure Media Indexer를 도입하도록 설계되었지만 모든 사용 시나리오를 다루지는 않습니다. 예를 들어 매니페스트 파일이 있는 작업을 제출하여 여러 파일의 인덱싱을 지원할 수 있습니다.</li>\n <li>인덱서는 속도보다는 정확도를 최적화하는 시나리오에 가장 적합하며, 약 3 x(입력 기간)를 사용합니다. 이는 거의 실시간 결과가 필요한 시나리오에서 최적이 될 수 없습니다.</li>\n <li>완성된 샘플 프로젝트는 여기에서 다운로드할 수 있습니다.</li>\n <li>최소 작업 기간은 5분이며, 더 짧은 작업은 반올림되고 그에 따라 청구됩니다.</li>\n <li>사진 제공&nbsp;<a href=\"https://www.flickr.com/photos/miguelangelrt/\" title=\"미겔 앙헬 리아뇨 트루히요의 포토스트림\">미구엘 엔젤 리아&ntilde;오 트루히요</a>&nbsp;(풀 컬러 원본 사진) <div id=\"yui_3_16_0_1_1412712522172_1490\">&nbsp;</div>\n\n <div id=\"yui_3_16_0_1_1412712522172_776\">&nbsp;</div>\n </li>\n</ul>"
