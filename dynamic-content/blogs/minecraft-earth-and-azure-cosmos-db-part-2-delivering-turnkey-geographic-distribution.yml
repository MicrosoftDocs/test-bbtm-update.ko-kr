### YamlMime:Yaml
ms.openlocfilehash: 72baa44cc5c11ee97d5531f123ea8d54138ee1a4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905376"
Slug: minecraft-earth-and-azure-cosmos-db-part-2-delivering-turnkey-geographic-distribution
Title: 'Minecraft 지구 및 Azure Cosmos DB 2부: 턴키 지리적 배포 제공'
Summary: 이 게시물은 조직이 실제 요구 사항을 충족하기 위해 Azure Cosmos DB를 사용하는 방법과 이러한 요구 사항을 충족하는 차이점에 대한 두 부분으로 구성된 시리즈의 2부입니다.
Content: >-
  <p><i>이 게시물은 조직이 실제 요구 사항을 충족하기 위해 Azure Cosmos DB를 사용하는 방법과 이러한 요구 사항을 충족하는 차이점&rsquo;에 대한 두 부분으로 구성된 시리즈의 2부입니다. <a href="https://azure.microsoft.com/blog/minecraft-earth-and-azure-cosmos-db-part-1-extending-minecraft-into-our-real-world" target="_blank">1부</a>에서는<strong> </strong> 서비스 개발자가 Minecraft Earth에서 Azure Cosmos DB를 선택하도록 유도한 과제와 이를 사용하여 전 세계의&mdash; 모든 플레이어가 수행한 거의 모든 작업을 매우 짧은 대기 시간으로 캡처하는 방법을&rsquo; 알아차렸습니다. 2부에서는 솔루션&rsquo; 워크로드 및 Minecraft 지구 서비스 개발자가 Azure Cosmos DB에서 빌드를 통해 어떻게 이점을 얻었는지 살펴봅니다.</i></p>


  <h2>지리적 배포 및 다중 지역 쓰기</h2>


  <p>Minecraft 지구 서비스 개발자는 Azure Cosmos DB의 턴키 지리적 배포 기능을 사용하여 내결함성, 재해 복구 및 최소 대기 시간&mdash;이라는 세 가지 목표를 달성했습니다. 후자는 Azure Cosmos DB의 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-multi-master" target="_blank">다중 마스터 기능을</a> 사용하여 다중 지역 쓰기를 사용하도록 설정했습니다. 지원되는 각 지역에는 두 개 이상의 서비스 인스턴스가 있습니다. 예를 들어 북미에서 Minecraft 지구 서비스는 미국 서부 및 미국 동부 Azure 지역에서 실행되며, Azure의 다른 구성 요소는 사용자와 더 가까운 것을 확인하고 그에 따라 트래픽을 라우팅하는 데 사용됩니다.</p>


  <p>Minecraft 지구 서비스 개발 팀의 선임 소프트웨어 엔지니어인 Nathan Sosnovske는 다음과 같이 설명합니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;많은 글로벌 지역에서 Azure를 사용할 수 있으므로 글로벌 규모에서 대기 시간이 짧은 게임 환경을 보장하는 전 세계 공간을 쉽게 설정할 수 있었습니다. 즉, 사람들은 대부분 하나의 지리 내에서 여행하므로 각 지역의 모든 서비스 인스턴스 간에 다중 마스터 쓰기 설정이 있습니다. 즉&rsquo;, 샌프란시스코에 살고있는 선수는 유럽으로 여행하고 여전히 이러한 경우 왕복 대기 시간을 최소화하기 위해 다른 메커니즘을 사용하여 were&rsquo; 것을 지구와 Minecraft&mdash;&rsquo; 재생할 수&rsquo; 없습니다.&rdquo;</em></p>


  <h2>초당 요청 단위(RU/s) 사용량</h2>


  <p>Azure Cosmos DB에서 초당 요청 단위(RU/s)는 보장된 데이터베이스 처리량을 예약하는 데 사용되는 통화&rdquo;입니다&ldquo;. Minecraft 지구의 경우 Azure Service Bus 구동되는 추가 전용 이벤트 로그의 백그라운드 처리에 2-3RU/s를 추가로 사용하는 약 10RU/s의 일반적인 쓰기 요청 소비자<a href="https://azure.microsoft.com/en-us/services/service-bus" target="_blank">입니다.</a></p>


  <p style="margin-left: 40px;"><em>&ldquo;Weve&rsquo;는 RU/s 사용량이 매우 선형적으로 확장된다는 것을 발견했습니다. 초당 쓰기 요청이 상당히 증가하는 경우에만 용량을 늘려야 합니다. 처음에는 더 많은 처리량이 필요하다고 생각했지만, 수행해야&rdquo; 할 최적화가 많이 있었다고 Sosnovske는 말합니다. &ldquo; 원래 디자인은 요청 볼륨과 복잡성을 비교적 잘 처리했지만 시스템이 분할되는&mdash; 경우를 처리하지 못했습니다&rsquo;. 물리적으로 전체 데이터 볼륨을 내부적으로&mdash; 다시 분할합니다.&rdquo;</em></p>


  <p>그 이유는 할당된 RU/s가 실제 파티션에 동일하게 분산되고 가장 최신 데이터가 있는 실제 파티션이 나머지 파티션보다 훨씬 더 뜨겁게 실행되었기 때문입니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;다행히 시스템은 클라이언트의 보기로 구체화되는 추가 전용 로그로 모델링되므로 Azure Cosmos DB&rdquo;에서 직접 오래된 데이터를 직접 읽는 경우는 거의 없습니다. Sosnovske는 설명합니다. &ldquo; 데이터 모델은 이벤트를 뷰로 처리한 후 콜드 스토리지에 보관한 다음 Time <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/time-to-live" target="_blank">to Live 기능을</a> 사용하여 Azure Cosmos DB에서 삭제할 수 있을 만큼 유연했습니다.&rdquo;</em></p>


  <p>현재 서비스&rsquo; 아키텍처를 사용하는 Sosnovske는 확장성에 대해 전혀 걱정하지 않습니다&rsquo;.</p>


  <p style="margin-left: 40px;"><em>&ldquo;개발 중에 Azure Cosmos DB의 확장성을 최대 100만 RU/s까지 테스트했으며, 문제&rdquo; 없이 처리량을 제공했다고 Sosnovske는 말합니다.</em></p>


  <h2>Minecraft 지구의 초기 발사</h2>


  <p>Minecraft 지구는 2019년 10월 한 지역에서 공식적으로 출시되었으며, 그 다음 몇 주 동안 다른 모든 지역에서 글로벌 출시가 완료되었습니다. Minecraft 팬들을 위해, Minecraft 지구는 증강 현실의 세계에서 완전히 새로운 수준에서 그들이 알고 사랑하는 게임을 경험하는 수단을 제공합니다.</p>


  <p>그리고 Sosnovske와 Minecraft 지구에 생명을 불어넣는 데 도움을 준 다른 모든 개발자들에게는 역대 가장 인기 있는 게임 중 하나를 증강 현실의 영역으로 확장할 수 있는 기회도 똑같이 보람이 있었습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;우리 중 많은 사람들이 우리 자신 게이머이며 모든 것의 일부가 될 수있는 기회에 뛰어,&rdquo; Sosnovske 회상. &ldquo; 돌이켜 보면, 모든 것이 꽤 잘&mdash; 갔고&rsquo; 결과에 매우 만족했습니다.&rdquo; </em></p>


  <h2>Azure Cosmos DB 사용의 이점</h2>


  <p>Azure Cosmos DB는 Minecraft Earth를 지원하는 여러 Azure 서비스 중 하나일 뿐이지만 중요한 역할을 합니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;나는 우리가 처음부터 완전히 믿을 수 없을만큼 복잡한 무언가를 구축하지 않고 우리가 한 일을 제공 할 수있는 다른 방법을 생각할 수&rsquo; 없다,&rdquo; Sosnovske는 말한다. &ldquo; Azure Cosmos DB는 짧은 대기 시간, 전역 배포, 다중 마스터 쓰기 등을 포함하여 필요한 모든 기능을 제공했습니다. 우리가해야 할 일은 제대로 사용하기 위해 넣어했다.&rdquo; </em></p>


  <p>Azure Cosmos DB를 사용하여 Minecraft Earth 서비스를 빌드할 때의 특정 이점은 다음과 같습니다.</p>


  <p><b>쉽게 채택하고 구현할 수</b> 있습니다. Sosnovske에 따르면 Azure Cosmos DB는 쉽게 채택할 수 있었습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;Azure Cosmos DB를 시작하는 것은 특히 .NET 에코시스템</em>&rdquo;<em>&nbsp;의 컨텍스트 내에서 매우 쉬웠다고 Sosnovske는 말합니다. &ldquo; Nuget 패키지를 설치하고 적절한 엔드포인트를 가리키기만 하면 됩니다. 서비스에 대한 설명서는 매우 철저합니다. SDK의 작동 방식에 대한 오해로 인해 주요 문제가 발생하지 않았습니다&rsquo;.&rdquo;</em></p>


  <p><strong>유지 관리가 없습니다</strong>. Microsoft Azure 일환으로 Azure Cosmos DB는 완전히 관리되는 서비스이므로 Minecraft 지구 서비스 팀의 누구도 서버 패치, 백업 유지 관리, 데이터 센터 오류 등에 대해 걱정할 필요가 없습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;일상적인 운영을 처리할 필요가 없다는 것은 엄청난 보너스&rdquo; 라고 Sosnovske는 말합니다. &ldquo; 그러나 이는 일반적으로 Azure에서 빌드할 때의 이점입니다.&rdquo;</em></p>


  <p><b>짧은 대기 시간이 보장됩니다.</b> 개발자가 Azure Cosmos DB를 선택한 가장 큰 이유는 전 세계 어디서나 99번째 백분위수에서 읽기 및 쓰기에 대해 <a href="https://azure.microsoft.com/en-us/support/legal/sla/cosmos-db/v1_3/" target="_blank">보장된 한 자리(&lt;10ms) 대기 시간 SLA</a>를 제공하기 때문입니다. 이에 비해 테이블 스토리지 대기 시간은 보장된 상한 없이 더 높았&mdash;을 것입니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;Azure Cosmos DB는 평균 7밀리초의 읽기&rdquo; 대기 시간을 볼 수 있다는 측면에서&rsquo; 약속대로 제공되고 있다고 Sosnovske는 말합니다.</em></p>


  <p><b>탄력적 확장성. </b> Azure Cosmos DB에서 제공하는 탄력적 확장성 덕분에 이 게임은 마찰 없는 출시를 즐겼습니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;Azure Cosmos DB가 서비스&rdquo; 스케일링에 병목 현상이 발생한 것은 전혀 없었다고 Sosnovske는 말합니다. &ldquo; Weve&rsquo;는 초기 릴리스 이후 성능을 최적화하기 위해 많은 작업을 수행했으며, 해당 작업처럼 확장성 제한에 도달하지 않을 것이라는&rsquo; 사실은 큰 이점이었습니다. 처음에는 처리량에 대해 조금 더 많은 비용을 지불했을 수도 있지만&rsquo; 사용자 수요 증가를 따라잡을 수&rsquo; 없는 서비스를 사용하는 것보다 훨씬 더 나은 것입니다.&rdquo;</em></p>


  <p><b>턴키 지리적 분포입니다.</b> Azure Cosmos DB에서 지리적 배포는 Minecraft Earth 서비스 개발자에게 사소한 작업이었습니다. Azure Cosmos DB는 모든 지역에서 필요한 내부 작업을 투명하게 수행하여 단일 시스템 이미지를 계속 제공하기 때문에 프로비전된 처리량(RU/s)에 대한 조정은 간단합니다.</p>


  <p style="margin-left: 40px;"><em>&ldquo;Sosnovske는 턴키 지역 배포가 큰 이점&rdquo; 이라고 말합니다. &ldquo; 다중 마스터 지원을 켠 경우 시스템을 모델링하는 방법에 대해 좀 더 신중하게 생각해야 했지만 문제를 직접 해결하는 것보다 훨씬 적은 작업 순서였습니다.&rdquo; </em></p>


  <p><b>준수.</b> 개발자는 Azure Cosmos DB 내에서 Time to Live를 사용하여 유럽&rsquo; GDPR(일반 데이터 보호 규정)과 같은 규정 준수 의무를 위반하는 것에 대해 걱정할 필요 없이 짧은 시간 동안 위치 기반 게임 플레이 데이터를 안전하게 저장할 수 있습니다.</p>


  <p><em>&ldquo;이 플레이어와 같은 &lsquo;워크플로를 구동할 수 있도록 지정된 기간에 한 번만 이 위치를 사용할 수 있어야 하며,&rsquo; 그 후에는 Azure Cosmos DB가 설정된 TTL&rdquo; 내에서 데이터를 자동으로 정리한다고 Sosnovske는 설명합니다.</em></p>


  <p>Azure Cosmos DB에 대한 자신의 경험을 요약하면 Sosnovske는 매우 긍정적이라고 말합니다.</p>


  <blockquote>

  <p><em>&ldquo;Azure Cosmos DB는 매우 신뢰할 수 있고, 기본적인 개념을 이해하는 데 시간이 소요된 후 사용하기 쉬울 수 있으며, 무엇보다도 코드를 작성할&rsquo; 때 방해가 됩니다. 우리 팀의 주니어 개발자가 기능을 작업하는 경우 데이터베이스 또는 데이터가 저장되는 방식에 대해 생각할 필요가 없습니다&rsquo;. 도메인에 대한 코드를 작성하고 작동하도록 할 수 있습니다.&rdquo;</em></p>

  </blockquote>


  <h2>Azure Cosmos DB 시작</h2>


  <ul>
      <li><a href="https://azure.microsoft.com/en-us/services/cosmos-db/" target="_blank">Azure Cosmos DB</a>를 방문합니다.</li>
      <li><a href="https://azure.microsoft.com/en-us/solutions/gaming/" target="_blank">Azure for Gaming</a>에 대해 자세히 알아보세요.</li>
  </ul>
