### YamlMime:Yaml
ms.openlocfilehash: 4f2c3b822825abd105eae3944b94dce1cd72bad2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906684"
Slug: mesosphere-dcos-azure-docker-vmware-and-everything-between-architecture-and-ci-cd-flow
Title: Mesosphere DCOS, Azure, Docker, VMware 및 아키텍처와 CI/CD 간의 모든 Flow
Summary: 요즘에는 컨테이너, DevOps, 자동화 등에 참여하려고 노력합니다. 내 역할의 일부는 Azure에서 컨테이너 플랫폼 및 오케스트레이션 도구를 설계하는 방법에 대해 고객에게 문의하는 것입니다. 하지만 Mesosphere DC/OS, Azure Container Service, Azure Container Registry, Docker 및 VMware vSphere를 포함하는 솔루션을 설계하는 것과 같은 멋진 작업을 수행할 기회가 있으면 어떻게 되나요?
Content: >-
  <p>요즘에는 컨테이너, DevOps, 자동화 등에 참여하려고 노력합니다. 내 역할의 일부는 Azure에서 컨테이너 플랫폼 및 오케스트레이션 도구를 설계하는 방법에 대해 고객에게 문의하는 것입니다. 하지만 Mesosphere DC/OS, Azure Container Service, Azure Container Registry, Docker 및 VMware vSphere를 포함하는 솔루션을 설계하는 것과 같은 멋진 작업을 수행할 기회가 있으면 어떻게 되나요? 알아보기&rsquo;&hellip;</p>


  <p>이 첫 번째 여러 부분으로 구성된 블로그 게시물 시리즈에서는 그 뒤에 동기 부여, 요구 사항 및 제약 조건, 아키텍처 및 물론 &ldquo;시작하는 방법을&rdquo; &ndash;&rsquo;설명합니다.</p>


  <h2>동기 부여, 요구 사항 &amp; 제약 조건</h2>


  <p>이 컨테이너에 대한 동기 부여는 Docker 컨테이너를 살펴보고 여러 애플리케이션을 통합하는 매우 간단한 &ndash; 시작이었습니다.</p>


  <p>세부 정보를 너무 많이 사용하지 않고 한 가지 주요 제약 조건이 &ndash; 있었습니다. DevOps 팀은 vSphere를 기반으로 프로덕션 환경을 배포하고&rsquo; Azure에서 개발/QA/통합 환경을 배포했습니다. 이것이 질문할 수 있는 제약 조건인 이유는 무엇인가요?! 글쎄, 당신은 곧 알게 될 것입니다.</p>


  <p>요구 사항에 관해서는 다음과 같은 주요 사항이 있습니다.</p>


  <ul>
   <li>DC/OS에서 Azure Container Service 사용</li>
   <li>모든 당사자가 개발/QA/통합/Prod에서 사용할 동일한 프라이빗 컨테이너 레지스트리에 Docker 이미지를 저장합니다 &ndash; .</li>
   <li>모든 스택에서 통합 컨테이너 오케스트레이션 플랫폼</li>
  </ul>


  <p>잠시 제약 조건 부분으로 돌아가서 이것이 제약 조건이라고 생각하는 이유는 프로덕션이 Azure&rsquo;의 일부인 경우 vSphere와 관련하여 아무 것도 할 필요가 없으며 모든 것이 순수한 &ldquo;흐림&rdquo;이었기 때문입니다.</p>


  <h2>Dev to Production CI/CD Flow</h2>


  <p>아래에 제시된 연속 통합 및 배포 흐름은 다음과 같습니다.</p>


  <ul>
   <li>개발자는 워크스테이션에 로컬로 배포된 컨테이너에서 코딩을 수행합니다.</li>
   <li>그런 다음, Integration Ready&rdquo; docker 이미지를 프라이빗 컨테이너 레지스트리에 푸시&ldquo;합니다.</li>
   <li>통합 팀은 이미지를 Azure의 DC/OS 클러스터 배포로 끌어와 몇 가지 추가 통합 및 테스트 작업을 수행합니다. 완료되면 새 &ldquo;프로덕션 준비&rdquo; 이미지가 컨테이너 레지스트리로 푸시됩니다.</li>
   <li>&ldquo;프로덕션 준비&rdquo; 컨테이너는 vSphere에 배포된 DC/OS 프로덕션 클러스터로 끌어오고 있습니다.</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/07d65214-848d-4884-ad0d-87281b11de25.jpg"><img alt="01" border="0" height="464" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/929bb693-1c49-4af8-a868-b3c8f17f25ce.jpg" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="01" width="825"></a></p>


  <h2>아키텍처</h2>


  <p>다음은 앞에서 설명한 프로세스를 제공하는 배포를 위한 인프라 논리적 디자인입니다. 이 시리즈의 Visual Studio Team Services(VSTS) 또는 Team Foundation Server(TFS)를 건드리지 않을 것입니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4c8658d0-8bc5-43e1-92ec-3c2acbf0eb8d.png"><img alt="02" border="0" height="457" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7d6df60f-3365-4d34-b92c-9e88b6deaee3.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="02" width="825"></a></p>


  <p>이 시리즈의 다음 블로그 게시물에서 vSphere를 기반으로 DC/OS 1.9 배포에 대해 알아보겠습니다. 이러한 배포에 필요한 구성, 주의 사항 및 단계에 대한 지식을 공유할 수 있도록 고급 방식으로 작업을 수행했습니다.</p>
