### YamlMime:Yaml
ms.openlocfilehash: eda7bc7d6769baac660868e85249027161b31e22
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908478"
Slug: dal-sharding-of-rdbms
Title: DAL – RDBMS 분할
Summary: '편집자 주: 이 게시물은 숀 틴린 존스와 크리스 클레이튼에 의해 작성되었습니다.&nbsp; 클라우드 및 Enterprise 그룹의 선임 AzureCATProgram&nbsp; 관리자&nbsp;.  "클라우드 서비스...'
Content: '<p><strong>편집기 참고 사항: </strong> 이 게시물은 <a href="https://social.msdn.microsoft.com/profile/shauntj/">숀 틴린 존스</a>, <a href="https://social.technet.microsoft.com/profile/chris%20clayton%20(azurecat)/?ws=usercard-inline">크리스 클레이튼</a>에 의해 작성되었습니다.&nbsp; 클라우드 및 Enterprise 그룹의 선임 AzureCATProgram&nbsp; 관리자&nbsp;.</p>  <p>"CSFundamentals"라고 하는 "<a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">클라우드 서비스 기본</a> 사항" 애플리케이션은 데이터베이스 지원 Azure 서비스를 빌드하는 방법을 보여 줍니다.&nbsp; 여기에는 로깅, 구성 및 데이터 액세스를 위한 시나리오, 구현 아키텍처 및 재사용 가능한 구성 요소에 대한 설명이 포함됩니다.&nbsp; 코드 베이스는 Windows Azure 고객 자문 팀의 프로덕션 배포를 기반으로 Azure에서 확장 가능하고 사용 가능한 서비스를 제공하기 위한 모범 사례에 대한 실질적인 탐색을 위한 것입니다.</p>  <p>요즘 대부분의 기업이 클라우드 이니셔티브를 추진하고자 하는 가운데, 특정 솔루션에 대한 비즈니스 동인은 비용 절감에서 민첩성 및 규모 증가에 이르기까지 매우 다양합니다.&nbsp; 솔루션이 클라우드 규모를 달성&ldquo;하려고 할 때 하드웨어를 업그레이드하여 용량을 늘리는 수직 확장성&rdquo; 전략은 &ldquo;수평적 확장성&rdquo;으로 &ldquo;대체되어 특정 작업을 공유하는 컴퓨터의 수가 증가합니다.&nbsp;&rdquo; 이 절충의 좋은 예는 많은 서버가 동일한 웹 사이트 콘텐츠를 제공하는 웹 팜을 만드는 것과 단일 모놀리식 컴퓨터가 부하를 처리하려고 시도하는 웹 팜을 만드는 것입니다.</p>  <p>컴퓨팅 노드에서 수평적 확장성을 위해 이 경로를 시작하는 대부분의 사람들은 RDBMS(관계형 데이터베이스 관리 시스템) 및 캐시와 같이 더 복잡하고 잠재적으로 더 중요한 상태 계층을 무시합니다.&nbsp; 이러한 서비스는 종종 IO를 많이 사용하며 단일 인스턴스에 의해 바인딩됩니다.&nbsp; 상태 계층에서 수평 확장성을 구현하는 한 가지 기술을 <em>분할</em>이라고 합니다.&nbsp; 분할은 RDBMS 데이터를 일반적으로 동일한 스키마를 사용하여 여러 데이터베이스로 논리적으로 분리하는 경우입니다. 예를 들어 직원 테이블은 각 데이터베이스가 다른 부서&rsquo; 직원을 저장하는 세 개의 고유한 데이터베이스로 분할될 수 있습니다.</p>  <p>분할의 이점은 용량 관련 시나리오 그 이상을 지원합니다.&nbsp; 이 게시물의 목적을 위해 Azure SQL Database 플랫폼에서 구현되는 RDBMS를 분할하는 데 중점을 두고 주로 OLTP 시나리오를 제공합니다.&nbsp; 분할된 데이터베이스 구조를 활용할 수 있는 몇 가지 예제 시나리오는 다음과 같습니다.</p>  <ul>  <li>제한 임계값 또는 처리량 제한이 너무 자주 적중됩니다.</li>  <li>데이터베이스의 크기가 다루기 어려워집니다(인덱스 다시 작성, 백업).</li>  <li>사용할 수 없는 단일 데이터베이스는 단일 분할된 데이터베이스가 아니라 모든 사용자에게 영향을 줍니다.</li>  <li>수요에 대응하여 정상적으로 확장 및 축소하는 데 어려움이 있는 데이터베이스입니다.</li>  <li>다중 테넌트 또는 Software as a Service 제품과 같은 특정 비즈니스 모델</li>  </ul>  <p>Windows Azure SQL Database 같은 다중 테넌트 데이터베이스를 서비스 솔루션으로 사용하는 경우 일반적으로 다양한 조건에서 클라이언트를 제한하는 QOS(서비스 품질) 컨트롤이 배치됩니다. 제한은 일반적으로 리소스 압력이 올라갈 때 발생합니다.&nbsp; 분할은 일반적으로 단일 서버에 영향을 주는 부하를 가져와서 각각 분할된 데이터베이스를 포함하는 여러 서버로 분산하여 리소스 압력을 줄이는 데 도움이 되는 핵심 전략입니다. 예를 들어 짝수 배포를 가정할 때 5개의 분할된 데이터베이스를 만들면 각 데이터베이스의 부하가 약 20%로 줄어듭니다.&nbsp;</p>  <p>더 큰 힘을 부여하는 모든 것과 마찬가지로, 희생이 이루어져야 합니다.&nbsp; 분할은 여러 주요 영역의 복잡성을 증가하므로 더 많은 계획이 필요합니다. 여기에는 다음이 해당합니다.</p>  <ul>  <li>향후 비즈니스 요구 사항이 분할된 데이터베이스 수를 줄여야 하는 경우 ID 열은 모든 분할된 데이터베이스에서 전역적으로 고유해야 합니다.&nbsp; ID가 모든 분할된 데이터베이스에서 고유하지 않은 경우 두 분할된 데이터베이스를 병합하면 충돌이 발생할 수 있습니다.</li>  <li>참조 무결성은 독립 데이터베이스이므로 다른 분할된 데이터베이스의 행에 대한 관계를 참조하거나 적용할 수 없습니다.</li>  <li>분할된 데이터베이스를 교차하는 쿼리는 각 분할된 데이터베이스를 쿼리하고 결과를 병합해야 하므로 가능하면 피해야 합니다.&nbsp; 분할된 데이터베이스 전체에서 쿼리를 팬아웃&rdquo;해야 하는 &ldquo;경우 성능 관점에서 비용이 많이 들 뿐만 아니라 이를 지원해야 하는 분할 프레임워크의 복잡성이 증가합니다.&nbsp; 분할된 데이터베이스 간 쿼리가 필요한 경우 일반적인 전략은 각 분할된 데이터베이스를 비동기적으로 쿼리하는 것입니다.&nbsp; 그러나 동기 접근 방식을 통해 결과 집합 크기를 더 많이 제어할 수 있는 경우가 있습니다. &nbsp; &nbsp;</li>  </ul>  <p>대부분의 경우 분할은 DAL(데이터 액세스 계층) 개념으로, 상위 수준 애플리케이션 논리에서 대부분의 복잡성을 추상화합니다.&nbsp;</p>  <p>테넌&rdquo;트 &ldquo;정의 방법은 분할된 아키텍처를 빌드할 때 수행할 수 있는 가장 중요한 결정 중 하나입니다.&nbsp; 테넌트는 동일한 분할된 데이터베이스에 있다고 보장되는 가장 큰 고유 데이터 분류입니다.&nbsp; 일반적으로 단일 테넌트에 제한된 쿼리는 정상 작동 상태에서 팬아웃 작업을 실행할 필요가 없으므로 성능이 향상됩니다.&nbsp; 적절한 테넌트 정의의 결정에 영향을 주는 몇 가지 요인은 다음과 같습니다.</p>  <ul>  <li>식별자의 상위 수준 애플리케이션 코드에 대한 인식 수준입니다.</li>  <li>이 수준에서 수행할 대부분의 핵심 비즈니스 트랜잭션의 기능입니다.</li>  <li>테넌트 세분성에서 일반적인 일상적인 작업에서 제한을 방지하는 기능입니다.</li>  </ul>  <p>이러한 개념과 고려 사항을 개략적으로 살펴보기 위해 Windows Azure 고객 자문 팀은 CSF(Cloud Services Fundamentals) 패키지()에서 DAL(<a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649</a>기본 분할 데이터 액세스 계층)을 구축했습니다.</p>  <p>CSF에서 테넌트는 개별 사용자로 정의됩니다.&nbsp; 이 테넌트 선택으로 이어진 몇 가지 요인은 다음과 같습니다.</p>  <ul>  <li>대부분의 핵심 비즈니스 요구 사항은 여러 사용자에 대한 쿼리가 필요하지 않습니다.</li>  <li>사용할 수 없는 분할된 데이터베이스는 정의된 사용자 집합에만 영향을 미치며, 다른 모든 사용자는 시스템의 일반적인 사용을 계속할 수 있습니다.&nbsp; 단일 분할된 데이터베이스에 있는 사용자의 수량은 비즈니스에 허용되는 수로 제어할 수 있습니다.</li>  </ul>  <p>테넌트는 데이터베이스 간 트랜잭션이 필요하지 않도록 정의되고 구현됩니다.&nbsp; 그림 1에서는 이 데이터 집합을 데이터 모델 트랜잭션 경계인 shardlet이라고 합니다.</p>  <p>&nbsp;<a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2783.data-model-transaction-boundary.png" alt="" border="0"></a>&nbsp;</p>  <p><em><span style="font-size: x-small;">그림 1 - 데이터 모델 트랜잭션 경계</span></em></p>  <p>사용자가 세션에서 처음으로 데이터베이스에 연결할 때 오프라인 분할로 인해 사용할 수 없는 기능이 있는지 파악하기 위해 실행할 수 있는 일련의 간단한 쿼리가 있습니다.&nbsp;</p>  <p>CSF에서 보여지는 분할 기술을 간소화하기 위해 가까운 미래에 용량 요구를 충족하기에 충분한 스토리지가 있는 분할된 데이터베이스 집합을 만들기로 결정했습니다. 이 크기를 선택하면 테넌트 이동과 같은 작업도 포함하는 분할된 데이터베이스 수를 늘리고 줄이는 방법을 보여 줄 필요가 없습니다.&nbsp; 정수는 테넌트&rsquo; 이름을 해시하여 생성되며 이 ID는 분할된 데이터베이스 맵&rdquo;에서 &ldquo;일치하는 범위를 조회하는 데 사용됩니다.&nbsp; CSF는 범위 기반 메커니즘을 사용합니다. 여기서 이러한 숫자의 범위는 특정 분할된 데이터베이스에 할당됩니다(분할된 데이터베이스 맵&rdquo;에서 &ldquo;캡처됨).&nbsp;</p>  <p>분할된 데이터베이스를 분할된 데이터베이스 집합에서 추가하거나 제거해야 하는 경우 새 분할된 데이터베이스로 전환될 때까지 테넌트가 사용할 수 없게 되어야 합니다. 이러한 중요한 제한으로 인해 분할된 데이터베이스 집합은 복잡한 분할 관리를 수행할 필요성을 줄이거나 제거하기 위해 처음 생성될 때 프로비전이 상당히 초과될 것으로 예상됩니다.&nbsp;</p>  <p>이 솔루션을 사용하려면 DAL(데이터 액세스 계층)이 테넌트 ID를 인식하여 분할된 데이터베이스 집합에 테넌트의 배치를 결정해야 합니다.&nbsp; 사용할 수 없는 분할된 데이터베이스를 포함하는 쿼리가 실행되면 전체 쿼리가 실패합니다.&nbsp; DAL에 테넌트 ID가 포함되지 않은 경우 모든 분할된 데이터베이스를 쿼리하여 실패 가능성을 높이고 성능을 줄여야 합니다.&nbsp;</p>  <p>현재 더 고급 분할 기술을 보여주는 추가 코드 샘플을 제공하기 위한 몇 가지 예비 작업이 진행 중입니다.&nbsp; 샘플은 다음 영역에서 개선 사항을 제공합니다.</p>  <ul>  <li>사후 대응 및 사전 분할 관리.</li>  <li>전역 고유성 및 ID 관리.</li>  <li>집합 내의 분할된 데이터베이스 간에 테넌트 마이그레이션</li>  <li>분할 집합의 확장 및 축소입니다.</li>  <li>테넌트에서 인식하지 못하는 쿼리가 개선되었습니다.</li>  </ul>  <p>결론적으로 Cloud Services 기본 코드 샘플은 클라우드 확장&rdquo; 애플리케이션을 만들기 &ldquo;위한 중요한 기술인 분할의 기본 개념을 살펴보는 좋은 방법입니다. &nbsp;</p>'
