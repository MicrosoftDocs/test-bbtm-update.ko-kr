### YamlMime:Yaml
ms.openlocfilehash: 023d9c0b886cbb0530a524473e3c9e1a35dfdc1a
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900748"
Slug: serverless-computing-recipes-for-your-cloud-applications
Title: 클라우드 애플리케이션에 대한 서버리스 컴퓨팅 레시피
Summary: 이제 Azure Functions와 같은 서버리스 컴퓨팅 클라우드 서비스를 사용하여 실제 코드로 실제로 수행할 수 있는 작업을 살펴볼 준비가 되셨나요? 그렇다면 풍부한 코드 예제와 서버리스 Azure Functions를 사용하여 일반적인 문제를 해결하는 방법을 설명하는 무료 Azure Serverless Computing Cookbook을 다운로드하여 읽어야 합니다.
Content: >-
  <p>서버리스 컴퓨팅에 대한 과대 광고를 듣고, 그 이점에 대한 수많은 온라인 기사를 읽었으며, 업계 전문가들은 경로가 깨지는 특성을 자주 설명하기 위해 새로운 형용사를 찾는 것을 들었습니다. 이제 Azure Functions와 같은 서버리스 컴퓨팅 클라우드 서비스를 사용하여 <strong>실제 코드</strong>로 <strong>실제로 수행할</strong> 수 있는 작업을 살펴볼 준비가 되셨나요? 그렇다면 풍부한 코드 예제, 서버리스 Azure Functions를 사용하여 일반적인 문제를 해결하는 방법을 설명하는 무료 <a href="https://azure.microsoft.com/en-us/resources/azure-serverless-computing-cookbook/" target="_blank">Azure Serverless Computing Cookbook</a> 을 다운로드하여 읽어야 합니다.</p>


  <p><a href="https://azure.microsoft.com/en-us/resources/azure-serverless-computing-cookbook/" target="_blank"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8e549fd4-0062-4da0-bb50-a621f55fdf3e.png" style="margin-right: auto; margin-left: auto; float: none; display: block;"></a></p>


  <p><br>

  그러나 좀 더 동기 부여가 필요한 경우 계속 읽으십시오.</p>


  <p>먼저 기본 사항을 살펴보겠습니다. 서버리스 컴퓨팅을 사용하면 다음을 수행할 수 있습니다.</p>


  <ul>
   <li><strong>서버의 전체 추상화</strong>: 코드를 실행하는 서버가 아닌 애플리케이션 코드에 집중합니다.</li>
   <li><strong>인스턴트 이벤트 기반 확장성</strong>: 트래픽이 증가함에 따라 인프라를 확장하는 것에 대해 걱정하지 마세요.</li>
   <li><strong>사용당 지불</strong>: 코드가 실행되는 시간 및 사용하는 리소스에 대해서만 지불</li>
  </ul>


  <p>그러나 개발자로서 훨씬 더 많은 것을 신경써야 합니다.</p>


  <h2>클라우드 여정은 작게 시작할 수 있습니다.</h2>


  <p>당신은 정말 한 번에 소프트웨어를 구축하는이 새로운 방법에 전체 애플리케이션 포트폴리오를 내기 할 필요가 없습니다&rsquo;. Azure Functions에서 제공하는 FaaS(Functions-as-a-Service) 모델의 좋은 점은 기존 앱에 대한 확장 또는 시도하려는 순 새 시나리오로 작은 작업 집합을 수행할 수 있다는 것입니다. 자동화된 데이터베이스 정리 유틸리티, 소셜 미디어 모니터링 서비스 또는 원하는 파일 보관 도구를 빌드하고 서버리스가 적합한 모델인지 확인합니다. 한 가지 방법이 작동하지 않는&rsquo; 경우 이 실험 중에 지출한 몇 센트를 적어 두고 다시 시작합니다. 클라우드를 훨씬 더 쉽게 만들 수 있습니다.</p>


  <h2>서버 수가 적지만 코드가 적을수록 더 좋습니다.</h2>


  <p>코드가 클라우드에 있으면 데이터베이스, Storage, 메시징, IoT 등과 같은 다른 많은 클라우드 서비스와 상호 작용할 가능성이 높습니다. 이러한 모든 클라우드 서비스 및 해당 API, SDK 등을 학습해야 하는 것은 어려울 수 있습니다. Azure Functions는 <strong>트리거 </strong>및 <strong>바인딩 </strong>과 같은 혁신적인 기능을 제공하므로 코드가 다른 모든 Azure 서비스를 매우 쉽게 사용할 수 있으므로 이러한 서비스와 통신하는 데 필요한 배관이 아닌 비즈니스 논리만 포함하도록 코드를 간소화할 수 있습니다. 또한 FaaS 모델은 소규모 독립 마이크로 서비스를 빌드하는 방향으로 자연스럽게 연결되므로 코드 재사용이 향상됩니다.</p>


  <h2>클라우드 애플리케이션의 스위스 육군 칼</h2>


  <p>실험을 완료하고 서버리스의 경제적, 생산성적 이점을 확인했습니다. 이제 큰 게임에 참가할 준비가 되었으며 서버리스 아키텍처로 해결할 수 있는 문제 종류가 궁금할 것입니다. 가변 트래픽을 사용하여 웹, 모바일 또는 IoT와 같은 애플리케이션 백 엔드를 빌드하고, 사용자 지정 처리, IT 및 운영 작업을 자동화하고, 다른 서비스 또는 SaaS 애플리케이션과 통합해야 하는 실시간 데이터 처리 파이프라인을 모두 서버리스 아키텍처가 적합한 경우의 좋은 예입니다. 이러한 모든 시나리오에서 Azure Functions는 이러한 시나리오에 필요한 다른 서비스와의 특수한 통합을 통해 특별한 이점을 제공합니다.</p>


  <h2>DESKTOP 컴퓨터에서 클라우드 애플리케이션 디버그</h2>


  <p>개발자가 클라우드로 이동할 때 생산성 장애에 대해 불평하는 것을 들어본 적이 있습니다. 디버그하는 방법 배포하는 가장 좋은 방법은 무엇인가요? 모니터링하는 방법 방식으로 계속됩니다. Azure에서는 그렇지 않습니다. Visual Studio, Visual Studio Code 같은 세계적 수준의 도구를 통해 또는 명령줄 환경을 통해 기존 애플리케이션에 사용하는 서버리스 애플리케이션에 대해 동일한 편집, 빌드, 테스트 및 디버그 혜택을 얻을 수 있습니다. 로컬 개발 머신에서 실행하는 동안 이 모든 것을 얻을 수 있습니다. 브라우저 기반 포털 환경을 통해 완전히 개발하는 것이 사용자의 경우 Azure Functions도 이를 제공합니다.</p>


  <h2>한 단계 위로 올라가기</h2>


  <p>클라우드에서 서버리스 애플리케이션이 실행되고 나면 연속 통합, 지속적인 배포 및 애플리케이션 모니터링에 대한 표준 사례를 설정하려면 어떻게 해야 할까요? Azure Functions는 Visual Studio Team Services 및 GitHub 대한 일류 지원뿐만 아니라 Azure Application Insights 기본 제공 통합을 제공하여 애플리케이션의 작업 및 성능을 잘 처리할 수 있도록 합니다. 더 깊이 들어가고 상태 관리 및 복잡한 오케스트레이션이 필요한 고급 클라우드 시나리오를 빌드하려는 경우 복잡성을 숨기면서 이러한 작업을 수행하기 위한 코드 친화적 메커니즘을 제공하는 Durable Functions 기능을 사용할 수 있습니다.</p>


  <p>이제 서버리스 컴퓨팅의 가능성에 대해 좀 더 활기를 느끼는 경우 무료 <a href="https://azure.microsoft.com/en-us/resources/azure-serverless-computing-cookbook/" target="_blank">Azure Serverless Computing Cookbook</a> 을 다운로드하여 읽어 위의 모든 작업을 직접 수행하는 방법을 확인하세요.</p>
