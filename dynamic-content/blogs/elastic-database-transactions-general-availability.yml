### YamlMime:Yaml
ms.openlocfilehash: d68a95946055fde01029c57801144e43bbbd26c2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897688"
Slug: elastic-database-transactions-general-availability
Title: 탄력적 데이터베이스 트랜잭션은 이제 일반적으로 Azure SQL Database
Summary: 이제 Azure SQL Database 대한 탄력적 데이터베이스 트랜잭션을 일반 공급합니다. 탄력적 데이터베이스 트랜잭션은 이제 여러 논리 서버의 Azure SQL Database에서 분산 트랜잭션을 지원합니다.
Content: >-
  <p>Were&rsquo;는 Azure SQL Database 대한 Elastic Database 트랜잭션의 일반 공급에 대해 발표하게 되어 기쁩니다. 탄력적 데이터베이스 트랜잭션을 사용하면 데이터베이스 전체의 상태가 일관되게 유지되도록 해야 하는 경우 친숙한 원자성 및 격리 속성을 사용할 수 있습니다. 예를 들어 이러한 속성은 데이터베이스 간에 재무 트랜잭션을 처리하거나 한 데이터베이스의 인벤토리와 다른 데이터베이스의 주문을 업데이트할 때 필수적입니다.</p>


  <p>일반 공급으로 탄력적 데이터베이스 트랜잭션은 논리 서버에서 분산 트랜잭션에 대한 지원을 추가합니다. 서버 경계를 넘어가는 것 외에도 SQL Database 탄력적 트랜잭션은 이제 Azure 지역에 걸쳐 있습니다.</p>


  <p><img alt="transactions" border="0" height="357" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1b75ba9a-f464-4e29-9d43-c90b79408d5a.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="트랜잭션" width="610"><br>

  잠재적으로 다른 Azure 지역에 있는 서로 다른 서버 간에 트랜잭션을 구현하려면 탄력적 트랜잭션에 참여하는 논리 서버가 먼저 통신 관계를 입력해야 합니다. 이렇게 하면 분산 트랜잭션 조정을 위한 메시지가 논리 서버 간에 흐를 수 있습니다. 서버 쌍 간의 통신 관계를 만들고 검색하고 삭제하는 PowerShell cmdlet을 통해 탄력적 트랜잭션에 대한 통신 관계를 관리할 수 있습니다.</p>


  <p>탄력적 트랜잭션에 참여하는 논리 서버에 대한 통신 관계가 추가되면 System.Transactions의 TransactionScope 클래스와 같은 친숙한 프로그래밍 추상화로 애플리케이션에서 분산 트랜잭션의 경계를 제어할 수 있습니다. 탄력적 데이터베이스 트랜잭션은 .NET 4.6.1 이상을 사용하는 .NET 애플리케이션에서만 사용할 수 있습니다. BEGIN DISTRIBUTED TRANSACTION과 같은 T-SQL 통한 분산 트랜잭션 조정은 SQL Database 지원되지 않습니다.</p>


  <h2>서버 간 트랜잭션</h2>


  <p>탄력적 데이터베이스 트랜잭션에 대한 공개 미리 보기를 발표한 <a href="https://azure.microsoft.com/en-us/blog/elastic-database-transactions-with-azure-sql-database/">이전 블로그 게시물</a>은 Azure SQL Database 동일한 논리 서버에 두 개의 데이터베이스가 있는 예제를 보여 줍니다. 다음 예제에서는 SQL Database 여러 논리 서버에 있는 데이터베이스 간에 동일한 분산 트랜잭션을 실행하는 방법을 보여 줍니다.</p>


  <h2>서버 간 통신 링크 설정</h2>


  <p>첫 번째 부분은 New-AzureRmSqlServerCommunicationLink cmdlet을 사용하여 두 서버 간의 통신 관계를 설정하는 것입니다. 통신 관계를 관리하는 cmdlet 및 기타 cmdlet은 PowerShell 갤러리에서 사용할 수 있습니다. PowerShell 갤러리에서 <a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/">최신 cmdlet을 설치하는</a> 방법에 대한 지침을 따릅니다.</p>


  <p>다음 PowerShell 문은 Azure SQL Database myserver1과 myserver2 논리 서버 간의 통신 관계를 만듭니다.</p>


  <pre>

  -AzureRmSqlServerCommunicationLink `
   -LinkName etlaunch `
   -PartnerServer myserver02 `
   -ServerName myserver01 `
   -ResourceGroupName myrg
  </pre>


  <h2>개발 환경</h2>


  <p>다음 예제에서는 <a href="https://azure.microsoft.com/en-us/blog/elastic-database-transactions-with-azure-sql-database/">이전 블로그 게시물</a> 에서 서버 간 시나리오로 코드 샘플을 확장합니다. 코드 샘플의 연결 문자열은 이전 단계에서 새 Azure PowerShell cmdlet을 사용하여 등록한 논리 서버 이름을 참조하기만 하면 됩니다.</p>


  <pre class="prettyprint">

  SqlConnectionStringBuilder scsbDb1 = new SqlConnectionStringBuilder

  {
      DataSource = &quot;myserver01.database.windows.net&quot;,
      InitialCatalog = &quot;db01&quot;,
      &hellip;
  };


  SqlConnectionStringBuilder scsbDb2 = new SqlConnectionStringBuilder

  {
      DataSource = &quot;myserver02.database.windows.net&quot;,
      InitialCatalog = &quot;db02&quot;,
      &hellip;
  };


  using (var scope = new TransactionScope())

  {
      using (var conn1 = new SqlConnection(scsbDb1.ConnectionString))
      {
          conn1.Open();
          SqlCommand cmd1 = conn1.CreateCommand();
          cmd1.CommandText = string.Format(&quot;insert into T1 values(1)&quot;);
          cmd1.ExecuteNonQuery();
      }

      using (var conn2 = new SqlConnection(scsbDb2.ConnectionString))
      {
          conn2.Open();
          var cmd2 = conn2.CreateCommand();
          cmd2.CommandText = string.Format(&quot;insert into T1 values(2)&quot;);
          cmd2.ExecuteNonQuery();
      }

      scope.Complete();
  }

  </pre>


  <h2>다음 단계</h2>


  <p><a href="https://blogs.msdn.microsoft.com/dotnet/2015/11/30/net-framework-4-6-1-is-now-available/">.NET 4.6.1</a>을 다운로드하고 현재 SQL Database 탄력적 데이터베이스 트랜잭션 사용을 시작하는 것이 좋습니다. SQL Database 및 .NET 4.6.1의 탄력적 데이터베이스 트랜잭션에 대한 자세한 내용은 <a href="https://azure.microsoft.com/en-us/documentation/articles/sql-database-elastic-transactions-overview/">탄력적 데이터베이스 트랜잭션 설명서 </a>및 <a href="https://blogs.msdn.microsoft.com/dotnet/2015/11/30/net-framework-4-6-1-is-now-available/">.NET 4.6.1 릴리스 공</a>지 사항을 참조하세요.</p>
