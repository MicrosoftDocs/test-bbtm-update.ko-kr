### YamlMime:Yaml
ms.openlocfilehash: 181a2850f041e8f5b7b0b5c0e60a0ef067d8a4a1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906676"
Slug: microservices-an-application-revolution-powered-by-the-cloud
Title: '마이크로 서비스: 클라우드가 지원하는 애플리케이션 혁명'
Summary: 우리는 비즈니스 현실이 개발자가 "마이크로 서비스"라는 애플리케이션 아키텍처 모델을 채택하도록 유도하는 클라우드에 의해 주도되는 애플리케이션 개발 및 IT 시스템 관리 혁명의 한가운데에 있습니다.
Content: >-
  <p>우리는 클라우드에 의해 구동되는 애플리케이션 개발 및 IT 시스템 관리 혁명의 한가운데에 있습니다. 완전 셀프 서비스 및 종량제 청구를 제공하는 빠르고 민첩하고 저렴하며 확장성이 뛰어난 인프라는 운영 효율성을 개선하고 산업 전반에 걸쳐 더 빠른 가치 창출을 가능하게 합니다. 빠른 시작, 표준화된 애플리케이션 패키징 및 격리 모델을 사용하는 <a href="https://azure.microsoft.com/en-us/blog/containers-docker-windows-and-trends/">컨테이너</a>의 등장은 효율성과 민첩성에 더욱 기여하고 있습니다.</p>


  <p>그러나 많은 회사에서 애플리케이션을 고가용성, 확장성 및 민첩성으로 만드는 것은 여전히 어려운 일임을 알게 되었습니다. 경쟁적인 비즈니스 압력은 애플리케이션이 지속적으로 발전해야 하며, 24x7을 유지하면서 새로운 기능과 기능을 추가해야 합니다. 예를 들어, 은행 웹 사이트에서 유지 관리 기간을 갖는 것은 더 이상 허용되지 않지만 몇 년 전에도 표준이었습니다. 마찬가지로, 짧은 시간 동안 아래로 전자 상거래 사이트는&rsquo; 그 순간에 그들을 제공 할 수있는 많은 경쟁 업체 중 하나에 고객을 구동한다. 이러한 요구를 충족하지 못하면 관련성 유지와 비즈니스 손실의 차이를 의미할 수 있습니다.</p>


  <p>이러한 비즈니스 현실은 개발자가 <a href="https://martinfowler.com/articles/microservices.html">제임스 루이스와 마틴 파울러</a>가 대중화한 용어인&rdquo; 마이크로 서비스라는 &ldquo;애플리케이션 아키텍처 모델을 채택하도록 유도하고 있습니다. 이 게시물에서는 마이크로 서비스 아키텍처가 애플리케이션 개발 및 수명 주기 작업에 도움이 되는 방법과 이유에 대해 이야기하고 플랫폼이 이러한 아키텍처를 지원하기 위해 제공할 수 있는 기능을 설명할&#39;있습니다. 그런 다음 Ill&rsquo;은 개발자가 일반적으로 Azure에서 지원하는 마이크로 서비스 기반 애플리케이션의 기초로 사용하는 플랫폼 중 일부를 나열하고, 마지막으로 Ill&rsquo;은 마이크로 서비스 수명 주기 관리에 대한 포괄적인 지원을 제공하는 Service Fabric라는 마이크로 서비스 애플리케이션 플랫폼을 간략하게 설명합니다.</p>


  <h2>모놀리식 애플리케이션 모델</h2>


  <p>수십 년 동안 물리적이든 가상이든 관계없이 새 하드웨어를 프로비전하는 데 드는 비용, 시간 및 복잡성은 애플리케이션 개발에 큰 영향을 미쳤습니다. 이러한 요인은 이러한 애플리케이션이 중요 업무용일 때 더욱 두드러집니다. 고가의 가동 시간에는 SAN 및 하드웨어 부하 분산 장치와 같은 고가의 하드웨어를 포함하여 고가용성 인프라가 필요하기 때문에 더욱 두드러집니다. IT 인프라는 정적이므로 애플리케이션은 가상화된 경우에도 특정 하드웨어용으로 정적으로 크기 조정 및 설계되도록 작성되었습니다. 전체 하드웨어 요구 사항을 최소화하고 어느 정도의 민첩성과 독립적인 크기 조정을 제공하기 위해 애플리케이션을 분해한 경우에도 아래 그림과 같이 웹, 비즈니스 논리 및 데이터 계층이 있는 클래식 3계층 모델로 일반적으로 사용되었습니다. 그러나 각 계층은 여전히 고유한 모놀리식으로, 최대 부하를 위해 미리 크기가 조정된 하드웨어에 배포된 단일 패키지로 결합된 다양한 기능을 구현했습니다. 부하로 인해 애플리케이션이 하드웨어를 능가하는 &ldquo;경우 일반적으로 데이터 센터 재구성 및 소프트웨어 다시 아키텍처를 방지하기 위해 애플리케이션&rsquo; 하드웨어를 확장&rdquo;하거나 업그레이드하여 용량을 추가하는 것이 답이었습니다.</p>


  <p>&nbsp;</p>


  <p style="margin-left: 80px;"><img alt="Three-tier monolithic application" border="0" height="128" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/24d49135-5217-4611-b969-22ee42c8caf3.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="3계층 모놀리식 애플리케이션" width="480"></p>


  <p style="margin-left: 160px;"><em>그림 1. 모놀리식 애플리케이션 Three-Tier</em></p>


  <p>모놀리식 애플리케이션 모델은 인프라 민첩성의 제한으로 인한 자연스러운 결과였지만 비효율성을 초래했습니다. 정적 인프라와 긴 개발 주기는 몇 가지 계층을 넘어 애플리케이션을 분해하는 데 거의 이점이 없다는 것을 의미했기 때문에 개발자는 계층 내에서 관련없는 애플리케이션 서비스 간에 긴밀한 결합을 만들었습니다. 모든 애플리케이션 서비스(작은 애플리케이션 서비스)를 변경하려면 전체 계층을 다시 테스트하고 다시 배포해야 했습니다. 간단한 업데이트는 계층의 나머지 부분에 예기치 않은 영향을 미칠 수 있으므로 변경이 위험하고 개발 주기가 길어지므로 더 엄격한 테스트를 수행할 수 있습니다. 정적으로 할당된 리소스와 고가용성 하드웨어에 의존하여 애플리케이션이 부하 및 하드웨어 성능의 변화에 취약하여 표준 운영 영역 외부로 푸시하고 성능이 심각하게 저하될 수 있습니다. 하드웨어 오류가 완전히 발생하면 전체 애플리케이션을 tailspin으로 보낼 수 있습니다.</p>


  <p>마지막으로 계층화된 접근 방식을 활용한 모놀리식 애플리케이션이 직면한 또 다른 과제는 백 엔드 계층에 저장된 데이터를 사용하여 빠른 성능을 제공하는 것이었습니다. 일반적인 방법은 컴퓨팅과 데이터를 분리하여 발생하는 비효율성에 대해 버퍼에 중간 캐시를 도입하는 것이었지만, 사용되지 않는 하드웨어 리소스를 추가하여 비용을 발생시키고 추가 개발 및 업데이트 복잡성을 생성했습니다.</p>


  <p>&nbsp;</p>


  <p style="margin-left: 80px;"><img alt="Three-tier monolithic application with caches" border="0" height="257" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2a791874-26bd-40e1-b500-64a8c2ea2231.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="캐시가 있는 3계층 모놀리식 애플리케이션" width="610"></p>


  <p style="margin-left: 160px;"><em>그림 2. 캐시를 사용하여 모놀리식 애플리케이션 Three-Tier</em></p>


  <h2>마이크로 서비스 아키텍처</h2>


  <p>모놀리식 아키텍처가 여전히 적합한 간단하고 제한된 규모의 애플리케이션이 있지만 마이크로 서비스는 애플리케이션 개발 및 배포에 대한 다른 접근 방식이며, 이는 많은 최신 클라우드 애플리케이션의 민첩성, 규모 및 안정성 요구 사항에 완벽하게 적합합니다. 마이크로 서비스 애플리케이션은 마이크로 서비스&rdquo;라는 &ldquo;독립적인 구성 요소로 분해되어 애플리케이션 전체 기능을 제공하기&rsquo; 위해 함께 작동합니다. 마이크로 서비스&rdquo;라는 용어&ldquo;는 각 마이크로 서비스가 단일 함수를 구현하도록 독립적인 문제를 진정으로 반영할 수 있을 만큼 작은 서비스로 애플리케이션을 구성해야 한다는 사실을 강조합니다. 또한 다른 마이크로 서비스에서 데이터를 통신하고 공유할 수 있도록 각 계약에는 일반적으로 잘 정의된 계약(API 계약) &ndash; 이 있습니다. 마이크로 서비스는 서로 독립적으로 버전 관리 및 업데이트할 수도 있어야 합니다. 이 느슨한 결합은 애플리케이션의 신속하고 신뢰할 수 있는 진화를 지원하는 것입니다. 그림 3에서는 모놀리식 애플리케이션이 다른 마이크로 서비스로 분할되는 방법을 보여 줍니다.</p>


  <p style="margin-left: 80px;"><img alt="Breaking the monolith in microservices" border="0" height="372" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f05a4c2f-753a-408a-9732-d76d06c70604.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="마이크로 서비스에서 모놀리식 중단" width="480"></p>


  <p style="margin-left: 160px;"><em>그림 3. 모놀리스를 마이크로 서비스로 분리</em></p>


  <p>마이크로 서비스 기반 애플리케이션을 사용하면 애플리케이션을 실행하는 기본 인프라와 분리할 수도 있습니다. 개발자가 IT에 리소스 요구 사항을 선언하는 모놀리식 애플리케이션과 달리 마이크로 서비스는 고가용성 및 데이터 복제에 대한 각 마이크로 서비스&rsquo; 요구 사항을 준수하면서 클러스터&rsquo; 전체 리소스 사용률을 최대화하기 위해 클러스터 관리자 &ldquo;&rdquo;&rdquo; 로 알려진 &ldquo;분산 소프트웨어 시스템에 리소스 요구 사항을 선언합니다.  그림 4와 같습니다. 마이크로 서비스는 일반적으로 컨테이너로 패키징되고 많은 서비스가 일반적으로 단일 서버 또는 가상 머신 내에 적합하기 때문에 배포가 빠르며 클러스터&rsquo; 크기 조정 요구 사항을 최소화하기 위해 조밀하게 압축할 수 있습니다.</p>


  <p style="margin-left: 80px;"><img alt="Cluster of servers with deployed microservices" border="0" height="250" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8cd6d006-5210-49d5-a425-288410a2f045.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="배포된 마이크로 서비스를 사용하는 서버 클러스터" width="610"></p>


  <p style="margin-left: 160px;"><em>그림 4. 배포된 마이크로 서비스를 사용하는 서버 클러스터</em></p>


  <p>이 모델을 사용하면 마이크로 서비스 스케일 아웃이 거의 즉각적일 수 있으므로 애플리케이션이 변화하는 부하에 적응할 수 있습니다. 느슨한 결합은 마이크로 서비스가 독립적으로 확장할 수 있음을 의미합니다. 예를 들어 애플리케이션의 웹 연결 기능에서 하나의 마이크로 서비스인 퍼블릭 엔드포인트 HTTP 수신기는 들어오는 트래픽을 추가로 처리하기 위해 확장되는 애플리케이션의 유일한 마이크로 서비스일 수 있습니다.</p>


  <p>마이크로 서비스 기반 애플리케이션의 독립적이고 분산된 특성은 롤링 업데이트를 가능하게 하며, 단일 마이크로 서비스 인스턴스의 하위 집합만 지정된 시간에 업데이트됩니다. 문제가 감지되면 모든 인스턴스가 잘못된 코드 또는 구성으로 업데이트되기 전에 버그 업데이트를 롤백&rdquo;하거나 취소할 &ldquo;수 있습니다. 업데이트 시스템이 자동화된 경우 CI(연속 통합) 및 CD(지속적인 업데이트) 파이프라인과의 통합을 통해 개발자는 가용성에 영향을 주지 않고도 애플리케이션을 안전하고 자주 발전할 수 있습니다.</p>


  <p>애플리케이션 확장성을 위한 클래식 모델은 영구 상태를 저장하기 위해 공유 외부 데이터 저장소 또는 데이터베이스가 있는 부하 분산 상태 비지방 계층을 가지는 것이지만 상태 저장 마이크로 서비스는 더 높은 성능, 낮은 대기 시간, 대규모를 달성하고 서비스 업데이트에 대한 개발자 민첩성을 유지할 수 있습니다. 상태 저장 마이크로 서비스는 영구 데이터를 관리하며, 일반적으로 네트워크 액세스의 오버헤드와 서비스 간 작업의 복잡성을 방지하기 위해 배치되는 서버에 로컬로 저장합니다. 이렇게 하면 가능한 가장 빠른 처리가 가능하며 캐시가 필요하지 않습니다. 또한 단일 서버가 지원할 수 있는 데이터 크기를 관리하고 처리량을 전송하기 위해 확장 가능한 상태 저장 마이크로 서비스는 인스턴스 간에 데이터를 분할하고, 클라이언트가 통신하는 마이크로 서비스 인스턴스에 관계없이 업데이트 중에도 일관된 버전을 볼 수 있도록 스키마 버전 관리를 구현합니다.</p>


  <h2>마이크로 서비스 애플리케이션 플랫폼</h2>


  <p>Bing, Cortana 및 Intune과 같은 클라우드 규모 Microsoft 서비스 내부적으로 실행한 경험을 통해 클라우드 규모에서 대규모 애플리케이션을 설계, 개발 및 배포하는 것과 관련된 복잡성에 대한 깊은 이해를 제공했습니다. 애플리케이션을 얼마나 잘 설계했는지에 관계없이 대규모의 항상 애플리케이션을 자주 업데이트하는 것은 어려운 일입니다. 마이크로 서비스를 가상 머신 또는 컨테이너에 삭제하는 것만으로는 마이크로 서비스 접근 방식의 잠재력을 최대한 발휘할 수 없으며, DevOps 중심 도구를 사용하는 마이크로 서비스 애플리케이션 플랫폼이 필요합니다.</p>


  <p>완전한 기능을 갖춘 마이크로 서비스 애플리케이션 플랫폼은 비용 효율성, 확장성 및 24x7 가용성의 이전에 언급한 모든 마이크로 서비스 아키텍처 이점을 제공합니다. 또한 이러한 단계를 한 단계 더 진행합니다. 앞에서 설명한 대로 확장 가능한 상태 모델 및 자동 롤백을 사용하여 안전하고 신뢰할 수 있는 업그레이드를 안무해야 합니다. 또한 마이크로 서비스가 명명 서비스를 제공하여 서로를 검색하고 상태를 모니터링하고 유지 관리하는 데 도움이 됩니다. 예를 들어 크기 조정 또는 복구 시 마이크로 서비스 플랫폼은 신속하게 통신을 설정하거나 다시 설정할 수 있도록 명명 서비스를 통해 업데이트된 배치 정보를 다른 마이크로 서비스에 전달합니다.</p>


  <p>마이크로 서비스를 정상 상태로 유지하기 위해 플랫폼은 실행 중인 소프트웨어 또는 하드웨어가 실패하거나 업그레이드를 위해 다시 시작해야 할 때 인스턴스를 정상 VM 또는 서버로 자동으로 이동합니다. 또한 마이크로 서비스 플랫폼은 프라이빗 및 퍼블릭 클라우드에 배포할 수 있어야 합니다. 이는 워크로드가 프라이빗 클라우드에서 퍼블릭 클라우드로 버스트되는 하이브리드 시나리오를 지원하고 프라이빗 클라우드에서 프로덕션 배포를 통해 퍼블릭 클라우드 개발/테스트를 사용하도록 설정하는 데 필요합니다. 여러 클라우드를 지원하면 애플리케이션 플랫폼을 선택할 때 인프라에서 플랫폼을 분리하는 공급업체 잠금에 대한 우려도 해결됩니다.</p>


  <p>&nbsp;</p>


  <p style="margin-left: 120px;"><img alt="Microservices platform" border="0" height="364" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/eb5cdd36-4b0e-45be-97a3-827871519e15.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="마이크로 서비스 플랫폼" width="480"></p>


  <p style="margin-left: 240px;"><em>그림 5. 마이크로 서비스 플랫폼</em></p>


  <p>이 섹션에서는 개발자가 현재 마이크로 서비스 애플리케이션을 빌드하고 배포하는 몇 가지 인기 있는 플랫폼에 대해 간략하게 설명합니다. 아래의 모든 항목은 Azure 인프라에서 실행되어 요구 사항에 따라 선택할 수 있습니다.</p>


  <h4>Docker Swarm 및 Docker Compose</h4>


  <p>Docker 컨테이너의 표준 패키징 형식 및 리소스 격리로 인해 마이크로 서비스 아키텍처에 자연스럽게 적합합니다. Docker Compose는 여러 Docker 패키지 마이크로 서비스를 지원하는 애플리케이션 모델을 정의하며, <a href="https://www.docker.com/products/docker-swarm">Docker Swarm</a> 은 단일 노드 Docker 설치와 동일한 프로토콜을 노출하는 인프라 집합에서 클러스터 관리자 역할을 하므로 광범위한 Docker 도구 에코시스템에서 작동합니다. Azure Container Service는 Docker Swarm 및 Docker Compose를 모두 지원합니다. Azure에서 이 작업을 실행하는 자세한 내용은 여기에서 확인할 수 <a href="https://azure.microsoft.com/en-us/documentation/templates/101-acs-swarm/">있습니다</a>.</p>


  <h4>Kubernetes</h4>


  <p>Kubernetes는 컨테이너화된 애플리케이션의 배포, 작업 및 크기 조정을 자동화하기 위한 오픈 소스 시스템입니다. 간편한 관리 및 검색을 위해 애플리케이션을 구성하는 컨테이너를 논리 단위로 그룹화합니다. 원래 구글에 의해 개발, 그것은 검색 및 Gmail 같은 대규모 서비스를 실행 하는 그들의 경험을 기반으로. 일부 기존 PaaS 솔루션도 <a href="https://apprenda.com/blog/apprenda-kubernetes/">Apprenda</a>와 같은 Kubernetes와 병합됩니다. Azure에서 Kubernetes를 실행하는 자세한 내용은 <a href="https://kubernetes.io/docs/getting-started-guides/coreos/azure/">여기에서</a> 확인할 수 있습니다.</p>


  <h4>Apache Mesos 및 Marathon을 사용하는 Mesosphere DCOS</h4>


  <p>Microsoft와 Mesosphere는 Apache <a href="https://mesosphere.com/">Mesos 및 Marathon을 포함한 Mesosphere DCOS(데이터 센터 운영 체제)</a> 의 오픈 소스 구성 요소를 Azure로 가져오기 위해 파트너로 협력했습니다. Mesos에서 제공하는 Mesosphere DCOS는 프로덕션 등급 컨테이너 오케스트레이션 도구인 Mesospheres&rsquo; Marathon을 포함하는 확장 가능한 클러스터 관리자입니다. <a href="https://azure.microsoft.com/en-us/services/container-service/">Azure Container Service</a>의 일부로 사용할 수 있습니다. Azure에서 실행되는 Mesosphere에서 사용할 수 있는 엔터프라이즈 버전도 있습니다. Mesosphere DCOS는 서비스 검색, 부하 분산, 상태 검사, 배치 제약 조건 및 메트릭 집계를 포함한 마이크로 서비스 플랫폼 기능을 제공합니다. 마지막으로 Mesosphere는 Kafka, Chronos, Cassandra, Spark 등과 같은 추가 기능을 제공하는 인증된 서비스 라이브러리를 제공합니다. 이 라이브러리는 모두 단일 명령으로 설치할 수 있습니다. Azure에서 이 작업을 실행하는 자세한 내용은 여기에서 확인할 수 <a href="https://azure.microsoft.com/en-us/documentation/articles/container-service-deployment/" target="_blank">있습니다</a>.</p>


  <h4>OpenShift</h4>


  <p><a href="https://www.openshift.com/">OpenShift</a> by Red Hat은 Docker 컨테이너 기반 패키징을 활용하여 Kubernetes용 컨테이너 오케스트레이션 및 컴퓨팅 관리 기능을 배포하고 사용자가 컨테이너화된 JBoss 미들웨어, 여러 프로그래밍 언어, 데이터베이스 및 기타 애플리케이션 런타임을 실행할 수 있도록 하는 서비스로서의 플랫폼 제품입니다. OpenShift Enterprise 3은 개발자가 안전한 엔터프라이즈급 애플리케이션 인프라 내에서 애플리케이션 빌드 및 배포 프로세스를 자동화할 수 있는 devops 환경을 제공합니다. Azure에서 Red Hat Enterprise Linux 이미지에 대한 최근 지원을 통해 OpenShift는 Azure에서 지원됩니다. 이 항목에 대한 몇 가지 설명서를 곧 찾아보세요.</p>


  <h4>Pivotal Cloud Foundry</h4>


  <p><a href="https://pivotal.io/platform">Pivotal Cloud Foundry </a>는 Cloud Foundry의 워크플로 및 컨테이너 예약을 서비스 검색, 클라이언트 쪽 부하 분산, 회로 차단기 및 분산 추적과 같은 마이크로 서비스 패턴에 대한 통합과 결합하여 Spring Cloud 및 NetflixOSS를 활용하여 마이크로 서비스 아키텍처를 가능하게 합니다. Pivotal Cloud Foundry는 자동 크기 조정, 청록색 업데이트, 상태 모니터링, 애플리케이션 메트릭, 스트리밍 로그 등과 같은 배포 및 서비스 관리 기능을 통해 지속적인 마이크로 서비스 작업을 지원합니다. 여기에서 Azure에서 Pivotal Cloud Foundry를 실행하는 방법에 대해 자세히 알아봅니 <a href="https://azure.microsoft.com/en-us/blog/general-availability-of-cloud-foundry-and-preview-access-of-pivotal-cloud-foundry/">다</a>.</p>


  <h4>Service Fabric</h4>


  <p>온-프레미스에서 클라우드로, 모놀리식에서 마이크로 서비스 기반 애플리케이션으로의 내부 진화를 지원하기 위해 10년 전에 Service Fabric 개발했습니다. Service Fabric SQL DB, DocDB, Intune, Cortana 및 비즈니스용 Skype 포함하여 많은 대규모 클라우드 서비스와 많은 내부 Azure 인프라 서비스를 제공합니다. Weve&rsquo;는 정확히 동일한 기술을 사용하고 Azure에서 Service Fabric 서비스로 릴리스했으며 독립 실행형 SDK를 사용하면 온-프레미스 클러스터 및 기타 클라우드에서 Service Fabric 애플리케이션을 배포할 수 있습니다. 초기 공개 릴리스에서 Service Fabric .NET 언어를 사용하여 Windows 실행되며 Linux 및 Java 지원이 개발 중입니다. Service Fabric 수명 주기 관리, 하이브리드 배포 및 Visual Studio 사용하는 통합 개발 환경을 통해 24x7 가용성을 기본적으로 지원합니다. 이 플랫폼은 인프라 및 마이크로 서비스 모두에 확장 가능한 상태 모델을 제공하여 자동화된 상태 기반 업그레이드 및 자동 롤백을 사용하도록 설정하여 DevOps 간소화합니다. 또한 Service Fabric 데이터 일관성을 지원하기 위해 리더십 선거와 상태 저장 마이크로 서비스 및 상태 저장 데이터 보장을 위한 트랜잭션을 지원하는 상태 복제 프레임워크를 모두 지원합니다. Azure에서 이 작업을 실행하는 자세한 내용은 <a href="https://azure.microsoft.com/en-us/services/service-fabric/">여기에서</a> 확인할 수 있습니다.</p>


  <h2>결론</h2>


  <p>컴퓨팅 환경은 클라우드의 출현으로 영원히 변했습니다. 클라우드를 사용하면 개발자가 인프라에 즉시, 저렴하게, 거의 무한 규모로 액세스할 수 있습니다. 클라우드의 민첩성과 최신 비즈니스의 지속적인 민첩성 요구는 모놀리식 아키텍처에 부담을 주고 마이크로 서비스 기반 애플리케이션의 증가를 초래했습니다. 포괄적인 마이크로 서비스 플랫폼을 통해 개발자는 퍼블릭 클라우드 및 프라이빗 클라우드에서 고성능, 고가용성, 비용 효율성 및 독립적인 수명 주기 관리를 통해 대규모로 지원하는 애플리케이션을 만들 수 있습니다. 마이크로 서비스는 클라우드에서 제공하는 애플리케이션 혁명입니다.</p>


  <p>아래 비디오를 확인하여 Channel9s&rsquo; Seth Juarez와 마이크로 서비스에 대해 이야기해 보세요.</p>


  <p><iframe allowfullscreen="" frameborder="0" height="315" src="https://channel9.msdn.com/Blogs/Seth-Juarez/An-Introduction-to-Microservices-with-Mark-Russinovich/player" width="560"></iframe></p>
