### YamlMime:Yaml
ms.openlocfilehash: bc10185ac637f563f484ddf815d1bf9d7feb89de
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902064"
Slug: monitoring-azure-services-and-external-systems-with-azure-automation
Title: Azure Automation을 사용하여 Azure 서비스 및 외부 시스템 모니터링
Summary: 이 게시물에서는 특정 이벤트가 발생할 때 작업을 수행할 수 있도록 Azure 또는 외부 시스템에서 서비스를 모니터링하도록 Azure Automation을 설정하는 방법을 안내합니다.
Content: "이 블로그 게시물에서는 특정 이벤트가 발생할 때 작업을 수행할 수 있도록 Azure 또는 외부 시스템에서 서비스를 모니터링하도록 Azure Automation을 설정하는 방법을 안내합니다. Azure Automation을 사용하여 이 작업을 수행하는 방법에 대해 고객과 꽤 많은 논의를 했으므로 대부분의 시나리오에서 작동하는 것처럼 보이는 접근 방식에 대해 논의할 것이라고 생각했습니다.\n\n자동화를 활용하여 프로세스를 트리거하는 이벤트에 대한 다른 시스템을 모니터링하는 것은 매우 일반적입니다.이는 외부 시스템을 변경할 필요가 없으며 모든 이벤트 반응 논리를 한 곳에 유지할 수 있기 때문에 널리 사용되는 방법입니다.\n\n모니터를 사용하면 폴링 메커니즘이 필요합니다. 이 게시물의 뒷부분에서 설명하겠습니다. 폴링 메커니즘은 Azure Automation의 일정 및 워크플로 기능을 활용하여 실제로 실행되는 시간을 최소화하여 리소스를 절약하는 동시에 폴링을 통해 비용을 절감합니다.\n<h3>기본 모니터링</h3>\n시작하려면 Azure 서비스를 모니터링해야 하는 시나리오부터 시작해 보겠습니다. 특정 이벤트 ID를 찾는 이벤트 로그를 모니터링하려는 일부 가상 머신이 Azure 환경에 배포되어 있을 수 있습니다.  예를 들어 인증서가 곧 만료되는 경우 인증서를 갱신하고 모든 사람에게 변경이 발생했음을 알리는 전자 메일을 보내려고 합니다.\n\nRunbook은 VM에서 모니터링하는 모든 이벤트에 대한 아래 다이어그램과 같을 수 있습니다.\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"Azure Automation Monitor Runbook\" alt=\"Azure Automation Monitor Runbook\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/MonitorVM.png\" width=\"600\" height=\"465\" border=\"0\" />\n\n&nbsp;\n\n인증서 만료 샘플의 경우 단계는 다음과 같을 수 있습니다.\n<ol>\n <li>Azure에서 지난 24시간 동안 발생한 이벤트 ID 64(인증서가 곧 만료됨)를 찾는 VM을 모니터링합니다.</li>\n <li>이벤트 ID가 발견되면 새 Runbook 작업을 시작하여 조직의 프로세스에 따라 인증서를 갱신합니다.</li>\n <li>인증서가 갱신되면 전자 메일 보내기</li>\n <li>인증서 만료에 대한 VM 모니터링 계속(이벤트 ID 64)</li>\n</ol>\n모든 VM에서 하루에 한 번 이 검사를 실행해야 하는 요구 사항이 있다고 가정해 보겠습니다. 클라우드 서비스에서 VM을 호출하고 이 이벤트 ID가 발견되었는지 확인하는 Runbook을 빌드할 수 있습니다. true이면 자식 Runbook을 호출하여 인증서를 갱신합니다.\n\n요구 사항은 하루에 한 번만 만료되는 인증서를 확인하는 것이므로 절전 모드로 계속 폴링할 필요가 없으며, 대신 매일 일정을 사용하여 Azure Automation 내의 스케줄러 기능을 사용하여 쉽게 예약할 수 있습니다.\n\n일정에서 시작 시간을 매일 밤 11시 55분으로 설정하여 전날의 모든 이벤트를 살펴보고 약 5분 동안 또는 자정에 도달할 때까지 실행됩니다.\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"Azure Automation Monitor Runbook\" alt=\"Azure Automation Monitor Runbook\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Schedule.png\" width=\"590\" height=\"465\" border=\"0\" />\n<h3></h3>\n<h3>고급 모니터링</h3>\n이제 기본 모니터링 솔루션이 준비되었으므로 더 빈번한 설문 조사를 위해 이 작업을 수행하는 방법을 살펴보겠습니다.\n\nAzure Automation은 Runbook이 매시간 실행되도록 예약할 수 있으므로 기본 모니터링에서 다루는 것과 동일한 방법을 사용하여 모니터링을 1시간으로 세분화할 수 있습니다. 그러나 15분마다 폴링하려는 경우를 가정해 보겠습니다. 각 일정이 시간의 다른 15분 표시에서 실행되는 4개의 별도 일정을 만든 다음 Watch-EventID Runbook에 연결하여 수행할 수 있습니다.\n\n다음 실행 열을 보면 이 Runbook이 15분마다 실행된다는 것을 아래 이미지에서 확인할 수 있습니다.\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"Runbook의 여러 일정\" alt=\"Multiple schedules on runbook\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ScheduleMonitor.png\" width=\"600\" height=\"220\" border=\"0\" />\n\n&nbsp;\n<h3>상태 관리를 사용하여 모니터링</h3>\n위에서 설명한 접근 방식은 모니터링 Runbook에 대한 대부분의 요구 사항을 충족하지만 다음과 같은 두 가지 단점이 있습니다. 즉, 일정을 각 Runbook과 연결해야 하며 중복 이벤트가 트리거되지 않도록 Runbook 외부(Automation 변수)에서 상태 관리를 유지 관리해야 합니다. 예를 들어 인증서 만료 이벤트 로그 시나리오를 다시 생각해 보면 인증서 만료 이벤트를 찾는 Runbook의 향후 작업이 계속해서 새 인증서를 생성하지 않도록 할 수 있습니다. 15분 전에 실행된 작업을 인식하지 못했기 때문에 동일한 이벤트를 기반으로 인증서가 이미 다시 생성되었습니다.\n\n이러한 문제를 해결하는 방법은 미리 정의된 간격으로 실행되도록 모니터 Runbook을 트리거하는 별도의 예약된 Runbook을 갖는 것입니다. 연결된 특정 태그가 있는 모니터 Runbook을 시작하기 때문에 이를 \"Manage-MonitorRunbook\"이라고 부르겠습니다. 이렇게 하면 각 Runbook에 연결된 일정을 요구하지 않을 수 있다는 장점이 있으며 필요한 경우 모니터를 쉽게 끌 수 있습니다.\n\n상태 관리 단점을 해결하기 위해 PowerShell <a href=\"https://technet.microsoft.com/en-us/library/jj733586.aspx\">워크플로의 Suspend-Workflow</a> 작업을 활용할 수 있습니다. 모니터 Runbook이 단일 설문 조사만 수행한 다음 완료하는 대신, 이제는 지속적으로 반복되지만 모니터링하는 시스템의 단일 폴링을 수행한 후 자체를 일시 중단합니다. 그런 다음 Manage-MonitorRunbook Runbook은 Resume-AzureAutomationJob cmdlet을 사용하여 Runbook 작업을 다시 시작합니다.\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"MonitorEvents\" alt=\"MonitorEvents\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/MonitorEvents.png\" width=\"600\" height=\"308\" border=\"0\" />\n\n단일 모니터 Runbook 작업에서 설문 조사 간의 상태를 유지할 수 있는 것 외에도 이 방법의 또 다른 이점은 Runbook 작업이 지속적으로 실행되지 않으므로 실제로 작업을 수행하지 않을 때 추가 비용이 발생하지 않는다는 것입니다. 일시 중단 워크플로 대신 Start-Sleep 사용하여 일시 중단한 경우입니다. 일시 중단된 워크플로는 요금이 청구되지 않으며, 절전 모드 워크플로는 실행 중 상태이므로 실행 비용이 발생합니다.\n\n위의 Watch-EventID Runbook에 이 방법을 적용하면 다음과 같습니다. 아래 워크플로에서 새 이벤트를 찾아야 하는 시간을 말하기 위해 Runbook 내에서 상태를 유지하고, 이벤트를 찾을 때마다 해당 값을 업데이트하여 다음 설문 조사가 동일한 이벤트에 대해 트리거되지 않도록 하는 방법을 알아봅니다.\n<pre class=\"prettyprint\">&lt;#\n.SYNOPSIS \n    Sample runbook to search for a specific event id in an Azure VM\n\n.DESCRIPTION\n    This runbook looks for a specific event ID in an Azure VM so that an action\n    could be taken when this event happens.\n    It is designed to be used with the Manage-MonitorRunbook utility runbook so that\n    it will get resumed on specific intervals defined by the schedules on the Manage-MonitorRunbook\n    runbook. This runbook should have a tag to indicate that it should get resumed by\n    that runbook.\n\n This runbook depends on the Connect-AzureVM utility runbook that is available from the gallery.\n\n.PARAMETER ServiceName\n    Name of the Azure Cloud Service where the VM is located\n\n.PARAMETER VMName\n    Name of the Azure VM\n\n.PARAMETER AzureCredentialSetting\n    A credential asset name containing an Org Id username / password with access to this Azure subscription.\n\n.PARAMETER SubscriptionName\n    The name of the Azure subscription\n\n.PARAMETER EventID\n    The specific event ID to search for. This sample looks for this event ID\n\n.PARAMETER LogName\n    The event log name. Example System\n\n.PARAMETER Source\n    The event log source. Example EventLog\n\n.PARAMETER VMCredentialSetting\n    A credential asset name that has access to the Azure VM \n\n.EXAMPLE\n    Watch-EventID -ServiceName \"Finance\" -VMName 'FinanceWeb1' -AzureCredentialSetting 'FinanceOrgID' -SubscriptionName \"Visual Studio Ultimate with MSDN\" -EventID \"63\" -LogName \"System\" -Source \"EventLog\" -VMCredentialSetting \"FinanceVMCredential\"\n#&gt;\nworkflow Watch-EventID\n{\n  Param ( \n        [String] $ServiceName,\n        [String] $VMName,\n        [String] $AzureCredentialSetting,\n        [String] $SubscriptionName,\n        [String] $EventID,\n        [String] $LogName,\n        [String] $Source,\n        [String] $VMCredentialSetting\n    )\n\n # The start time is used to ensure we only look for events after this specific time.\n # This would be a common pattern in any monitor runbooks that are developed.\n    $StartTime = Get-Date\n    Try\n    {\n        While (1)\n        {         \n            $OrgIDCredential = Get-AutomationPSCredential -Name $AzureCredentialSetting\n            if ($OrgIDCredential -eq $null)\n            {\n                throw \"Could not retrieve '$AzureCredentialSetting' credential asset. Check that you created this first in the Automation service.\"\n            }\n\n            $Credential = Get-AutomationPSCredential -Name $VMCredentialSetting\n            if ($Credential -eq $null)\n            {\n                throw \"Could not retrieve '$VMCredential' credential asset. Check that you created this first in the Automation service.\"\n            }     \n\n            # Get the uri of the Azure VM to connect to by calling the Connect-AzureVM utility runbook                 \n            $Uri =  Connect-AzureVM `\n                -AzureOrgIdCredential $OrgIDCredential `\n                -AzureSubscriptionName $SubscriptionName `\n                -ServiceName $ServiceName `\n                -VMName $VMName\n\n   # Script to run on the remote VM looking for an event ID\n            $ScriptBlock = {Param($EventID, $StartTime,$LogName,$Source) Get-EventLog -LogName $LogName -Source $Source -InstanceID $EventID -After $StartTime -Newest 1} \n\n   # Run this ScirptBlock on the remote VM\n            $EventResult = InlineScript {\n                 Invoke-command -ConnectionUri $Using:Uri -Credential $Using:Credential -ScriptBlock $Using:ScriptBlock -ArgumentList $Using:EventID, $Using:StartTime, $Using:LogName, $Using:Source\n            }\n\n            if ($EventResult)\n            {\n                # Set new start time to be after this event. This is to ensure that only new events are looked for.\n                $StartTime = $EventResult.TimeGenerated\n\n                # Take whatever action is required when this event happens...\n                # You should use the Start-AzureAutomationRunbook cmdlet to trigger a new runbook asynchrously\n                # so that this runbook returns immediately and this runbook can suspend itself looking for new work\n                # at the next call from the Manage-MonitorRunbook runbook\n                # Start-AzureAutomationRunbook -AutomationAccountName &lt;System.String&gt; -Name &lt;System.String&gt; [-Parameters &lt;System.Collections.IDictionary&gt;] \n\n                Write-Output \"Event ID found... Taking action\"\n            }\n\n            # Suspending workflow so Automation minutes are not used up continously\n            # This workflow will be resumed by a separate monitor runbook (Manage-MonitorRunbook) on a specific schedule\n            Write-Verbose \"Suspending workflow...\"\n\n            # Clearing credentials since these can't be persisted with suspend currently\n            $Credential = $Null\n            $OrgIDCredential = $Null\n            Suspend-Workflow\n        }\n    }\n    Catch\n    {  \n        # This runbook should never suspend due to an error as it will\n        # get resumed by the monitor runbook when it shouldn't. You should not set Erroractionpreference  =  stop for this runbook\n  # as it will cause the runbook to suspend when it shouldn't for monitor runbooks.\n        # Writing out an error in this case \n        Write-Error ($_)\n    }\n\n}</pre>\n그런 다음 특정 간격으로 이 Runbook을 다시 시작하려면 Manage-MonitorRunbook Runbook이 필요하므로 해당 간격에 따라 폴링할 수 있습니다.다음은 해당 Runbook의 모양에 대한 예입니다. 모니터를 관리하는 것처럼 이 Runbook을 사용할 수 있어야 합니다.\n<pre class=\"prettyprint\">&lt;#\n.SYNOPSIS \n    Utility runbook to control monitor runbooks to run at specific intervals\n\n.DESCRIPTION\n    This runbook is designed to run on scheduled intervals and resume any monitor runbooks\n    that have a specific tag that are suspended\n\n.PARAMETER AccountName\n    Name of the Azure automation account name\n\n.PARAMETER AzureCredentialSetting\n    A credential asset name containing an Org Id username / password with access to this Azure subscription.\n\n.PARAMETER Tag\n    Value of the tag for monitor runbooks in the service that should be resumed. Only this specific tag should be set on monitor runbooks\n to avoid other runbooks from getting resumed if they are suspended. \n\n.PARAMETER SubscriptionName\n    The name of the Azure subscription. This is an optional parameter as the default subscription will be used if not supplied.\n\n.EXAMPLE\n    Manage-MonitorRunbook -AccountName \"Finance\" -AzureCredentialSetting 'FinanceOrgID' -Tag \"Monitor\" -SubscriptionName \"Visual Studio Ultimate with MSDN\"\n\n#&gt;\nworkflow Manage-MonitorRunbook\n{\n    Param ( \n        [Parameter(Mandatory=$true)]\n        [String] $AccountName,\n\n        [Parameter(Mandatory=$true)]\n        [String] $AzureCredentialSetting,\n\n        [Parameter(Mandatory=$true)]\n        [String] $Tag,\n\n        [Parameter(Mandatory=$false)]\n        [String] $SubscriptionName\n    )\n\n    $AzureCred = Get-AutomationPSCredential -Name $AzureCredentialSetting\n    if ($AzureCred -eq $null)\n    {\n        throw \"Could not retrieve '$AzureCredentialSetting' credential asset. Check that you created this first in the Automation service.\"\n    }\n\n    # Set the Azure subscription to use\n    $Null = Add-AzureAccount -Credential $AzureCred \n\n    # Select the specific subscription if it was passed in, otherwise the default will be used  \n    if ($SubscriptionName -ne $Null)\n    {\n       $Null = Select-AzureSubscription -SubscriptionName $SubscriptionName\n    }\n\n    # Get the list of runbooks that have the specified tag\n    $MonitorRunbooks = Get-AzureAutomationRunbook -AutomationAccountName $AccountName | where -FilterScript {$_.Tags -match $Tag}\n\n    foreach ($Runbook in $MonitorRunbooks)\n    {\n        Write-Verbose (\"Checking \" + $Runbook.Name + \" for suspended jobs to resume\")\n        # Get the next suspended job if there is one for this Runbook Id\n        $SuspendedJobs = Get-AzureAutomationJob -AutomationAccountName $AccountName `\n      -RunbookName $Runbook.Name | Where -FilterScript {$_.Status -eq \"Suspended\"}\n\n       if ($SuspendedJobs.Count -gt 1)\n        {\n            Write-Error (\"There are multiple jobs for \" + $Runbook.Name + \" running. This shouldn't happen for monitor runbooks\")\n            # Select the oldest job and resume that one\n            $SuspendedJobs = $SuspendedJobs | Sort-Object -Property CreationTime  | Select-Object -First 1\n        }\n\n        if ($SuspendedJobs)\n        {    \n   Write-Verbose (\"Resuming the next suspended job: \" + $SuspendedJobs.Id)\n            Resume-AzureAutomationJob -AutomationAccountName $AccountName -Id $SuspendedJobs.Id   \n        }\n    }\n}</pre>\n위의 Runbook은 모니터임을 나타내는 특정 태그 집합이 있는 Runbook을 찾은 다음, 검사를 수행한 다음 다시 일시 중단할 수 있도록 해당 Runbook을 다시 시작합니다. 아래 이미지에서 내 환경에서 이 Runbook이 30분마다 실행되도록 예약되어 있음을 확인할 수 있습니다.\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"30MinSchedule\" alt=\"30MinSchedule\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/30MinSchedule.png\" width=\"600\" height=\"99\" border=\"0\" />\n\n&nbsp;\n\n모니터 관리자 Runbook이 연결된 일정에 대한 Runbook 매개 변수 값을 보면 태그 매개 변수에 \"monitor\" 값이 설정되어 이 태그가 있고 일시 중단된 Runbook이 다시 시작되도록 할 수 있습니다. 이 시나리오에서는 구성 페이지의 Watch-EventID Runbook에 \"monitor\" 태그를 추가하여 30분마다 모니터 관리자 Runbook에서 호출합니다.\n\n&nbsp;\n\n<img style=\"float: none; padding-top: 0px; padding-left: 0px; padding-right: 0px; border: 0px;\" title=\"ScheduleValues\" alt=\"ScheduleValues\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ScheduleValues.png\" width=\"539\" height=\"465\" border=\"0\" />\n\n&nbsp;\n\n다양한 일정에 따라 Manage-MonitorRunbook Runbook을 구성한 다음 적절한 시간 기반 간격 태그를 사용하여 Runbook에 태그를 지정하여 다양한 시간 간격의 모니터를 처리하도록 이 솔루션을 확장할 수 있습니다. 예를 들어 Runbook이 15분마다 실행되도록 예약하고 \"monitor15\" 태그를 사용하여 Runbook을 시작하거나 5분마다 예약하고 태그 매개 변수의 경우 \"monitor5\" 태그를 사용할 수 있습니다.\n\n위의 Runbook은 <a href=\"https://azure.microsoft.com/blog/2014/10/07/introducing-the-azure-automation-runbook-gallery\">Automation Runbook 갤러리</a> 에서 사용할 수 있으므로 모니터 관리자를 사용하여 사용자 고유의 모니터 Runbook을 빌드하고 여러 시스템에 통합하여 운영 작업을 자동화된 방식으로 결합할 수 있습니다.\n\n<a href=\"https://go.microsoft.com/fwlink/p/?linkid=392861&amp;clcid=0x409\">Automation 페이지</a>로 이동하여 Automation 및 시작 방법에 대해 자세히 알아보세요."
