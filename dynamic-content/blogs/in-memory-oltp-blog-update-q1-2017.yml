### YamlMime:Yaml
ms.openlocfilehash: baa153b3cd2b8feaa38848a4d9f65dde3ccafbc9
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898940"
Slug: in-memory-oltp-blog-update-q1-2017
Title: OLTP 업데이트 In-Memory
Summary: 2016년 11월에는 전 세계 Azure SQL Database In-Memory OLTP 기술의 GA(일반 공급)를 발표했습니다. 그 때부터 우리는 ...
Content: >-
  <p>2016년 11월에는 전 세계 Azure SQL Database <a href="https://docs.microsoft.com/en-us/sql/relational-databases/in-memory-oltp/in-memory-oltp-in-memory-optimization" target="_blank">메모리 내 OLTP</a> 기술의 GA(일반 공급)를 발표했습니다. 그 때부터 우리는 이 기술을 애플리케이션에 보다 효율적으로 활용하는 데 크게 도움이 될 것으로 믿는 몇 가지 더 유용한 기능을 잠금 해제하기 위해 노력해 왔습니다.</p>


  <p>오늘 우리는 여러 도로에 걸쳐 T SQL 노출 영역을 잠금 해제하고 확장하고 전반적인 관리 효율성을 개선하기 위해 계속 Azure SQL Database OLTP 기술을 In-Memory 개선의 문자열을 발표하게 된 것을 기쁘게 생각합니다.</p>


  <p>새로운 기능 개선 사항은 아래에 나열되어 있으며 <u>현재</u> Azure SQL Database 제공되며 <a href="https://docs.microsoft.com/en-us/sql/sql-server/what-s-new-in-sql-server-vnext" target="_blank">SQL Server vNext</a>에서도 사용할 수 있습니다.&nbsp;&nbsp;</p>


  <h2>메모리 최적화 테이블에 대한 인덱스 수 증가</h2>


  <p>메모리 최적화 테이블에 대한 인덱스 8개 제한 사항이 제거되었습니다. 이제 디스크 기반 테이블에서 만들 수 있는 한 많은 인덱스를 메모리 최적화 테이블에 만들 수 있습니다.</p>


  <p>이 제한으로 인해 이전에 마이그레이션할 수 없었던 데이터베이스의 모든 디스크 기반 테이블은 이제 메모리 최적화가 가능하므로 In-Memory OLTP 기술의 성능 이점을 활용할 수 있습니다.&nbsp;&nbsp;</p>


  <h2>OLTP 스키마 관리 In-Memory</h2>


  <p>Azure SQL Database In-Memory OLTP의 GA에는 메모리 최적화 개체에 대한 ALTER 작업에 대한 지원이 포함되어 있습니다. 이렇게 하면 열 추가 또는 삭제, 인덱스 관리 및 고유하게 컴파일된 저장 프로시저 업데이트와 같은 대부분의 스키마 관리 작업을 수행할 수 있습니다. 당시에는 아직 지원되지 않는 작업 중 하나는 개체 이름을 바꾸는 것이었습니다.</p>


  <p>이제 메모리 최적화 테이블과 고유하게 컴파일된 T-SQL 모듈을 <a href="https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-rename-transact-sql" target="_blank">사용하여 시스템</a> 저장 프로시저 sp_rename 대한 지원을 추가하여 이 문제를 해결했습니다. 이를 통해 Azure SQL Database 이제 In-Memory OLTP에 대한 모든 기본 스키마 관리 작업을 지원합니다.</p>


  <ul>
      <li><strong>Sp_rename</strong> - sp_rename 현재 데이터베이스에서 사용자 개체의 이름을 변경하는 데 사용됩니다. 테이블, 테이블 열, 고유하게 컴파일된 프로시저 등과 같은 OLTP 개체를 In-Memory 이제 이 저장 프로시저를 사용하여 모두 이름을 바꿀 수 있습니다.</li>
  </ul>


  <blockquote>

  <p><em>고유하게 컴파일된 T-SQL 모듈은 스키마 바인딩된 모듈로 만들어야 합니다. 스키마 바인딩된 모듈에서 참조되는 테이블, 열 및 모듈의 이름을 바꿀 수 없습니다. 따라서 고유하게 컴파일된 T-SQL 모듈에서 참조되는 테이블 또는 열의 이름을 바꾸려면 먼저 모듈을 삭제한 다음 이름을 바꾸고 마지막으로 새 이름을 참조하는 모듈을 다시 만듭니다.</em></p>

  </blockquote>


  <h2>최대 커밋 종속성 제한이 제거됨</h2>


  <p>지정된 트랜잭션에 따라 달라지는 최대 트랜잭션 수에 대한 제한 또는 지정된 트랜잭션에 의존하는 트랜잭션 수가 제거됩니다.&nbsp;</p>


  <p>따라서 더 이상 해당 오류 메시지가 표시되지 않습니다. &quot;41839:&nbsp;<em>트랜잭션이 커밋 종속성의 최대 수를 초과했습니다</em>&quot;.</p>


  <h2>In-Memory OLTP에 대한 확장된 T-SQL 지원</h2>


  <p>GA의 Azure SQL Database In-Memory OLTP는 DISTINCT, SUBQUERIES, IN, EXISTS, OR, NOT, OUTER JOIN 등과 같은 구문에 대한 지원을 포함하여 2016년 SQL Server 완전한 패리티에 있던 T-SQL 노출 영역을 지원했습니다.</p>


  <p>T-SQL 지원을 추가로 연장하고 다음을 추가했습니다.</p>


  <ul>
      <li><strong>경우</strong> &ndash; CASE 식은 이제 고유하게 컴파일된 T-SQL 모듈의 SELECT 문에서 완전히 지원됩니다. 이 전에 단일 결과 집합을 생성하기 위해 테이블 변수를 만들어야 하며, 이 테이블 변수에서 CASE를 정의하는 조건자에 따라 SELECT합니다.</li>
      <li><strong>계산 열</strong> &ndash; 계산 열과 계산 열의 인덱스는 이제 메모리 최적화 테이블에서 지원됩니다. 또한 이제 메모리 최적화 테이블에서 이러한 계산 열에 대한 인덱스를 만들 수도 있습니다.</li>
      <li><strong>CROSS APPLY 및 JSON</strong> &ndash; CROSS APPLY 연산자는 이제 고유하게 컴파일된 T-SQL 모듈에서 지원됩니다. 또한 모든 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-json-features" target="_blank">JSON 함수</a> 및 절은 이제 고유하게 컴파일된 T-SQL 모듈 및 메모리 최적화 테이블의 제약 조건에서 지원됩니다. 계산 열의 인덱스를 사용하면 JSON 데이터를 인덱싱할 수 있습니다. <a href="https://docs.microsoft.com/en-us/sql/relational-databases/json/optimize-json-processing-with-in-memory-oltp">In-Memory OLTP를 사용하여 JSON 처리를 최적화하는</a> 방법에 대해 자세히 알아봅니다.</li>
  </ul>


  <p>언급할 만한 또 다른 기능은 <a href="https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-spaceused-transact-sql" target="_blank">sp_spaceused</a> 대한 지원입니다. Azure SQL Database 스토리지는 플랫폼에서 관리되지만 sp_spaceused 메모리 최적화 테이블에 저장된 데이터의 스토리지 특성에 대한 유용한 인사이트를 제공합니다.</p>


  <ul>
      <li><strong>Sp_spaceused</strong> - 이제 sp_spaceused 사용하여 In-Memory OLTP와 연결된 스토리지 공간을 이해할 수 있습니다. &#39; &#39;@include_total_xtp_storage 새 매개 변수가 저장 프로시저에 추가되었습니다. <a href="https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-spaceused-transact-sql#a-namebkmk2016a-includesssql15includessssql15-mdmd-and-later">자세한 내용은&nbsp; sp_spaceused</a>.</li>
  </ul>


  <p>현재 애플리케이션에서 In-Memory OLTP 기술을 활용하고 있거나 나중에 사용할 계획인 경우 이러한 향상된 기능을 통해 애플리케이션에서 이 기술을 더 쉽게 활용할 수 있는 동시에 새로운 시나리오를 구현할 수 있기를 진심으로 바랍니다.</p>
