### YamlMime:Yaml
ms.openlocfilehash: 253a4ac28c90c65ffcf9748456b7535adeebf989
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906875"
Slug: bot-conversation-history-with-azure-cosmos-db
Title: Azure Cosmos DB를 사용하여 봇 대화 기록
Summary: Bot Framework는 Bot Framework 상태라는 대화의 컨텍스트를 추적하기 위한 서비스를 제공합니다. 이를 통해 대화 컨텍스트 내에서 사용자, 대화 또는 특정 사용자와 연결된 데이터를 저장하고 검색할 수 있습니다.
Content: "<p>Bot Framework는<strong> Bot Framework 상태</strong>라는 대화의 컨텍스트를 추적하기 위한 서비스를 제공합니다. 이를 통해 대화 컨텍스트 내에서 사용자, 대화 또는 특정 사용자와 연결된 데이터를 저장하고 검색할 수 있습니다.</p>\n\n<p>이 문서에서는 <a href=\"https://github.com/Microsoft/BotBuilder\" target=\"_blank\">이전에 Bot Builder SDK</a> (C# 또는 Node.js)를 사용하여 봇을 개발한 경험이 있다고 가정하므로 봇 구현에 대한 세부 정보는 알아보지 않습니다.</p>\n\n<p>Cosmos DB&rsquo;를 사용하기 전에 대화 데이터 저장의 중요성과 대화 데이터가 Bot Framework 상태에 저장되는 방식을 이해하는 것이 좋습니다.</p>\n\n<h2>대화 데이터를 저장하는 이유</h2>\n\n<p>대화 데이터가 유용할 수 있는 몇 가지 시나리오는 다음과 같습니다.</p>\n\n<ul>\n <li><strong>분석:</strong> 사용자 데이터 및 대화를 거의 실시간으로 분석하려는 경우 Machine Learning 모델 및 도구(예: <strong>Microsoft Cognitive Services API</strong>)를 적용할 수도 있습니다.<br>\n몇 가지 예는 다음과 같습니다. <ul>\n  <li>대화의 품질을 추적하기 위한 감정 분석&nbsp;&nbsp;</li>\n  <li>봇에서 메시지를 깔때기 분석하여 <a href=\"https://www.luis.ai/\" target=\"_blank\">LUIS</a>(자연어 처리)가 실패한 위치를 식별하거나 입력 메시지를 더 잘 처리하도록 개선할 수 있습니다.</li>\n  <li>메트릭: 활성 또는 새 사용자 수 및 메시지 수(봇이 사용자와 가진 참여 수준을 결정)</li>\n </ul>\n </li>\n <li><strong>감사:</strong> 감사 목적으로 모든 사용자의 데이터를 저장해야 하는 경우 솔루션에 따라 요구 사항이 될 수도 있습니다.</li>\n</ul>\n\n<h2>대화 데이터가 저장되는 방법</h2>\n\n<p>대화 데이터는 속성 모음이라고 하는 세 가지 구조체(JSON 형식)에 저장됩니다.</p>\n\n<ul>\n <li><strong>Userdata:</strong> id가 사용자 <strong>ID</strong>인 사용자 속성 모음이&#39;. 모든 대화에서 사용자 데이터를 전역적으로 저장합니다. &#39;특정 대화에 종속되지&#39;사용자에 대한 데이터를 저장하는 데 유용합니다. 예를 들어 특정 사용자의 모든 대화를 추적하고 추가 정보(사용자 이름, 생년월일 등)를 가져올 수 있습니다.</li>\n</ul>\n\n<pre>\n{\n     &quot;id&quot;: &quot;emulator:userdefault-user&quot;,\n     &quot;botId&quot;: &quot;&lt;your Bot ID&gt;&quot;,\n     &quot;channelId&quot;: &quot;emulator&quot;,\n     &quot;conversationId&quot;: &quot;&lt;your conversation ID&gt;&quot;,\n     &quot;userId&quot;: &quot;&lt;user ID&gt;&quot;,\n     &quot;data&quot;: {\n         &quot;username&quot;: &quot;Fernando de Oliveira&quot;\n     },\n     &quot;_rid&quot;: &quot;9G5GANrnJQADAAAAAAAAAA==&quot;,\n     &quot;_self&quot;: &quot;dbs/9G5GAA==/colls/9G5GANrnJQA=/docs/9G5GANrnJQADAAAAAAAAAA==/&quot;,\n     &quot;_etag&quot;: &quot;\\&quot;01008737-0000-0000-0000-5993a11d0000\\&quot;&quot;,\n     &quot;_attachments&quot;: &quot;attachments/&quot;,\n     &quot;_ts&quot;: 1502847257\n}</pre>\n\n<p>다음은 C#에서 UserData에 데이터를 저장하는 방법의 예입니다.</p>\n\n<pre>\nprivate bool userWelcomed;\n\npublic virtual async Task MessageReceivedAsync(IDialogContext context, IAwaitable&lt;IMessageActivity&gt; result)\n{\n         var message = await result;\n\n        string userName;\n\n        if (!context.UserData.TryGetValue(&quot;username&quot;, out userName))\n         {\n             PromptDialog.Text(context, ResumeAfterPrompt, &quot;Before get started, please tell me your name?&quot;);\n             return;\n         }\n\n        if (!userWelcomed)\n         {\n             userWelcomed = true;\n             await context.PostAsync($&quot;Welcome back {userName}!&quot;);\n\n            context.Wait(MessageReceivedAsync);\n         }\n}\n\nprivate async Task ResumeAfterPrompt(IDialogContext context, IAwaitable&lt;string&gt; result)\n{\n     try\n     {\n         var userName = await result;\n         userWelcomed = true;\n\n        await context.PostAsync($&quot;Welcome {userName}!&quot;);\n\n        context.UserData.SetValue(&quot;username&quot;, userName);\n     }\n     catch (TooManyAttemptsException ex)\n     {\n         await context.PostAsync($&quot;Oops! Something went wrong :( Technical Details: {ex}&quot;);\n     }\n\n    context.Wait(MessageReceivedAsync);\n}</pre>\n\n<ul>\n <li><strong>ConversationData:</strong> id가 대화 <strong>ID</strong>인 대화 속성 모음이&#39;. 단일 대화와 관련된 데이터를 전역적으로 저장합니다. 이 데이터는 대화 내의 모든 사용자에게 표시됩니다. 예를 들어 기본 언어를 봇으로 설정할 수 있는 그룹 대화(봇이 그룹 구성원을 이해하고 상호 작용하는 언어).</li>\n</ul>\n\n<pre>\n{\n     &quot;id&quot;: &quot;emulator:conversation&lt;your conversation ID&gt;&quot;,\n     &quot;botId&quot;: &quot;&lt;your Bot ID&gt;&quot;,\n     &quot;channelId&quot;: &quot;emulator&quot;,\n     &quot;conversationId&quot;: &quot;&lt;your conversation ID&gt;&quot;,\n     &quot;userId&quot;: &quot;default-user&quot;,\n     &quot;data&quot;: {\n         &quot;defaultLanguage&quot;: &quot;pt-BR&quot;\n     },\n     &quot;_rid&quot;: &quot;9G5GANrnJQAEAAAAAAAAAA==&quot;,\n     &quot;_self&quot;: &quot;dbs/9G5GAA==/colls/9G5GANrnJQA=/docs/9G5GANrnJQAEAAAAAAAAAA==/&quot;,\n     &quot;_etag&quot;: &quot;\\&quot;0800357b-0000-0000-0000-598b52060000\\&quot;&quot;,\n     &quot;_attachments&quot;: &quot;attachments/&quot;,\n     &quot;_ts&quot;: 1502302725\n}</pre>\n\n<p>다음은 ConversationData에 데이터를 저장하는 방법의 예입니다.</p>\n\n<pre>\npublic async Task StartAsync(IDialogContext context)\n{\n     string language;\n\n    if (!context.ConversationData.TryGetValue(&quot;defaultLanguage&quot;, out language))\n     {\n         language = &quot;pt-BR&quot;;\n         context.ConversationData.SetValue(&quot;defaultLanguage&quot;, country);\n     }\n\n    await context.PostAsync($&quot;Hi! I&#39;m currently configured for {language} language.&quot;);\n\n    context.Wait(MessageReceivedAsync);\n}</pre>\n\n<ul>\n <li>PrivateConversationData: ID가 <strong>사용자 ID</strong> 및 대화 <strong>ID</strong>의 병합인 개인 대화 속성 모음을&#39;. 단일 대화와 관련된 데이터를 전역적으로 저장하며, 여기서 데이터는 대화 내의 현재 사용자에게만 표시됩니다. 이&#39;대화가 종료될 때 정리하려는 임시 데이터(예: 브라우저 캐시)를 저장하는 데 유용합니다. 예를 들어 주문 ID를 저장할 수 있는 온라인 구매를 위한 봇:</li>\n</ul>\n\n<pre>\n{\n     &quot;id&quot;: &quot;emulator:private&lt;your conversation ID&gt;:default-user&quot;,\n     &quot;botId&quot;: &quot;&lt;your Bot ID&gt;&quot;,\n     &quot;channelId&quot;: &quot;emulator&quot;,\n     &quot;conversationId&quot;: &quot;&lt;your conversation ID&gt;&quot;,\n     &quot;userId&quot;: &quot;default-user&quot;,\n     &quot;data&quot;: {\n         &quot;ResumptionContext&quot;: {\n             &quot;locale&quot;: pt-BR&quot;,\n             &quot;isTrustedServiceUrl&quot;: false\n         },\n         &quot;DialogState&quot;: &quot;&lt;dialog state ID&gt;&quot;,\n         &quot;orderId&quot;: &quot;&lt;order ID&gt;&quot;\n     },\n     &quot;_rid&quot;: &quot;9G5GANrnJQAXAAAAAAAAAA==&quot;,\n     &quot;_self&quot;: &quot;dbs/9G5GAA==/colls/9G5GANrnJQA=/docs/9G5GANrnJQAXAAAAAAAAAA==/&quot;,\n     &quot;_etag&quot;: &quot;\\&quot;0100f938-0000-0000-0000-5993ab090000\\&quot;&quot;,\n     &quot;_attachments&quot;: &quot;attachments/&quot;,\n     &quot;_ts&quot;: 1502849796\n}  </pre>\n\n<p>다음은 PrivateConversationData에 데이터를 저장하는 방법의 예입니다.</p>\n\n<pre>\nstring orderId;\n\nif (!context.PrivateConversationData.TryGetValue(&quot;orderId&quot;, out orderId))\n{\n     // Generic method to generate an order ID\n     orderId = await GetOrderIdAsync();\n\n    context.PrivateConversationData.SetValue(&quot;orderId&quot;, orderId);\n\n    await context.PostAsync($&quot;{userName}, this is your order ID: {orderId}&quot;);\n}</pre>\n\n<h2>Bot Framework 상태가 아닌 DB Cosmos</h2>\n\n<p>기본적으로 Bot Framework는 Bot Framework 상태를 사용하여 대화 데이터를 저장합니다. 프로토타입 생성용으로 설계되었으며 개발 및 테스트 환경에 유용합니다. 이 작성 당시에는 크기 제한이 32KB에 불과합니다. <a href=\"https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-state\" target=\"_blank\">데이터 관리에</a> 대해 자세히 알아봅니다.</p>\n\n<p>프로덕션 환경의&rsquo; 경우 NoSQL 데이터베이스를 사용하여 <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/introduction\" target=\"_blank\">Azure Cosmos DB</a>와 같은 <strong>문서</strong>로<strong> </strong> 데이터를 저장하는 것이 좋습니다. &#39;다음과 같은 몇 가지 주요 이점을 제공할 수 있는 다중 모델 데이터베이스(예: 문서, 그래프, 키-값, 테이블 및 열 패밀리 모델)입니다.</p>\n\n<ul>\n <li><strong>전역 배포:</strong>&#39;여러 <a href=\"https://azure.microsoft.com/regions/\" target=\"_blank\">Azure 지역에</a> 데이터를 배포하여 사용자에게 짧은 대기 시간을 보장할 수 있습니다.</li>\n <li><strong>수평 확장성:</strong> 초당 <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/request-units\" target=\"_blank\">세분성</a> 으로 데이터베이스 크기를 쉽게 조정하고 필요에 따라 스토리지 크기를 자동으로 확장 및 축소할 수 있습니다.</li>\n <li><strong>가용성:</strong> 단일 지역에서 데이터베이스의 가용성이 99.99% 이상인지 확인할 수 있습니다.</li>\n</ul>\n\n<p>문서 모델의 경우 <strong>Azure DocumentDB</strong> 및 <strong>MongoDB</strong>와 같은 옵션이 있습니다. 이 문서에서는 <a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/documentdb-introduction\" target=\"_blank\">DocumentDB API</a>를 사용합니다.</p>\n\n<h2>대화 데이터 저장</h2>\n\n<p>봇 대화 데이터 스토리지를 사용자 지정하려면 <a href=\"https://github.com/Microsoft/BotBuilder-Azure\" target=\"_blank\">Bot Builder SDK Azure 확장을</a> 사용할 수 있습니다. C#에서 <strong>Bot Builder SDK</strong> 를 사용하여 봇을 개발하는 경우 Global.asax 파일을 편집해야 합니다.</p>\n\n<pre>\nprotected void Application_Start()\n{\n     // Adding DocumentDB endpoint and primary key\n     var docDbServiceEndpoint = new Uri(&quot;&lt;your documentDB endpoint&gt;&quot;);\n     var docDbKey = &quot;&lt;your documentDB key&gt;&quot;;\n\n    // Creating a data store based on DocumentDB\n     var store = new DocumentDbBotDataStore(docDbServiceEndpoint, docDbKey);\n\n    // Adding Azure dependencies to your bot (documentDB data store and Azure module)\n     var builder = new ContainerBuilder();\n\n    builder.RegisterModule(new AzureModule(Assembly.GetExecutingAssembly()));           \n    \n     // Key_DataStore is the key for data store register with the container\n     builder.Register(c =&gt; store)\n         .Keyed&lt;IBotDataStore&lt;BotData&gt;&gt;(AzureModule.Key_DataStore)\n         .AsSelf()\n         .SingleInstance();\n\n    // After adding new dependencies, update the container\n     builder.Update(Conversation.Container);\n\n    GlobalConfiguration.Configure(WebApiConfig.Register);\n}</pre>\n\n<p>봇을 실행하고 Azure Portal에서 Cosmos DB 서비스를 열면 저장된 모든 문서를 볼 수 있습니다(<strong>데이터 탐색기</strong> 클릭).</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a99e5cb7-d42f-4f9f-b0b4-f0528391eaae.jpg\"><img alt=\"data-explorer\" border=\"0\" height=\"548\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0516f02d-e2fd-43ac-ab92-fa5eec24642f.jpg\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"data-explorer\" width=\"1024\"></a></p>\n\n<h2>참조</h2>\n\n<ul>\n <li><a href=\"https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-concepts\" target=\"_blank\">.NET용 Bot Builder SDK의 주요 개념</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/bot-framework/dotnet/bot-builder-dotnet-state\" target=\"_blank\">Bot Builder: 상태 데이터 관리</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/bot-framework/troubleshoot-general-problems#where-is-conversation-state-stored\" target=\"_blank\">대화 상태는 어디에 저장되나요?</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/cosmos-db/introduction\" target=\"_blank\">Azure Cosmos DB 설명서</a></li>\n <li><a href=\"https://github.com/Microsoft/BotBuilder-Samples\" target=\"_blank\">Bot Builder 샘플</a></li>\n</ul>"
