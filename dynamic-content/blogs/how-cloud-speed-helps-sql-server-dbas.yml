### YamlMime:Yaml
ms.openlocfilehash: 7df79774a9684f608f5218cdd945a6d72ec1a9e2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139901678"
Slug: how-cloud-speed-helps-sql-server-dbas
Title: 클라우드 속도가 DBA를 SQL Server 데 도움이 되는 방법
Summary: '이 블로그 게시물은 클라우드 요구 사항에 기반한 엔지니어링 모델 변환으로 인해 SQL Server 빌드, 배송 및 서비스 방법을 몇 가지 개선한 방법을 검토합니다. '
Content: >-
  <p>몇 년 전 Microsoft SQL Server 제품 팀은 SQL Server 코드 베이스를 공유하는 새로운 클라우드 PaaS(Platform-as-a-Service) Azure SQL Database 도입했습니다.&nbsp; 클라우드 우선 서비스를 실행하려면 레거시 SQL Server 엔지니어링 모델을 크게 변경해야 했으며, 이를 완전히 사용하도록 설정하려면 수년간의 투자가 필요했습니다. 이러한 엔지니어링 모델 변경으로 인해 Azure SQL Database 및 SQL Server 모두에 긍정적인 영향을 미치는 큰 이점이 생겼습니다.</p>


  <p>현재&rsquo; Azure SQL Database 사용하지 않는&rsquo; SQL Server 데이터베이스 관리자인 경우에도 클라우드에 대한 Microsofts&rsquo; 투자의 이점을 볼 수 있습니다. 이 블로그 게시물은 클라우드 요구 사항에 기반한 엔지니어링 모델 변환으로 인해 SQL Server 빌드, 배송 및 서비스 방법을 몇 가지 개선한 방법을 검토합니다.&nbsp;</p>


  <h2>기능이 더 빠르게 도착</h2>


  <p>SQL Server 초(2005년에서 2012년)에 SQL Server 약 3년의 엔지니어링 주기를 가졌습니다. 계획된 SQL Server 릴리스마다 다양한 팀에서 조정된 폭포와 유사한 소프트웨어 개발 프로세스를 사용하여 상당한 양의 계획이 선행 설계에 들어갑니다.&nbsp; 여기에는 프로그램 관리자의 기능 사양 설명서 생성, 개발자의 디자인 사양 및 테스터가 개발한 자동화된 테스트 코드가 포함되었습니다.&nbsp;</p>


  <p>SQL Server 마침내 배송되면 고객은 관련 새 기능을 업그레이드하거나 채택하는 데 수년이 걸릴 수 있습니다. 이 레거시 엔지니어링 모델과 원래 계획과 실제 고객 채택 간의 연장된 기간을 통해 기능이 &ldquo;제대로 착륙&rdquo; 하고 원래 의도한 시나리오의 요구를 충족하는지 이해하는 데는 전반적으로 수년이 걸릴 것입니다. 논의되는 새로운 기능에 대해 SQL Server 엔지니어링 팀은 시장보다 몇 년 앞서 생각해야 했습니다.&nbsp;</p>


  <p>Azure SQL Database Platform-as-a-Service의 개발로 SQL Server 엔지니어링 팀은&rsquo; 훨씬 짧은 시간 내에 작업하는 데 집중하게 됩니다. SQL Server 엔지니어링 팀은 이를 위해 몇 가지 주요 변경을 수행했습니다.</p>


  <ul>
      <li>SQL Server 빌드 및 테스트 루프는 수천 대의 컴퓨터를 사용하여 테스트를 병렬로 실행하는 자동화되었습니다. 테스트는 항상 실행됩니다. 이렇게 하면 레거시 엔지니어링 모델의 몇 주에서 새 모델의 평균 사례에 대한 몇 시간까지 빌드 및 테스트 프로세스가 진행되었습니다.</li>
      <li>SQL Server 엔지니어링 팀은 원래 SQL Server 코드 노출 영역이 매우 크고 모놀리식 상태로 배포하기가 어렵다는 것을 깨달았습니다. 따라서 팀은 가능한 경우 아키텍처를 전반적으로 더 작은 마이크로 서비스로 분리하는 방법을 모색했습니다. 이러한 아키텍처 변경으로 각 구성 요소에 대해 별도의 배포 및 서비스가 허용되었습니다.</li>
      <li>이제 기능을 더 증분 방식으로 빌드하고 월별 Community CTP(Technical Preview)를 통해 제공해야 합니다.</li>
  </ul>


  <p>이러한 변경으로 릴리스 주기를 단축하고 기능을 Azure SQL Database 이전보다 빠르게 SQL Server 수 있습니다. 가장 최근에 SQL Server 엔지니어링 팀은 2016년 SQL Server 출시된 지 15개월 만에 새로운 플랫폼 간 지원과 함께 2017년 SQL Server 배송할 수 있었습니다. 과거의 레거시 3년에서 5년 SQL Server 배송 주기와 대조를 이룹니다.&nbsp;</p>


  <h2>기능이 더 빨리 테스트되고 고객 유효성 검사가 필요합니다.</h2>


  <p>SQL Server 2017의 일반 공급에 앞서 Microsoft는 새로운 기능을 테스트하기 위해 대중에게 초기 및 지속적인 액세스를 제공하는 <em>월간</em> 커뮤니티 CTP(기술 미리 보기)를 제공했습니다. 프로덕션 품질 빌드를 제공하는 기능은 오늘날 Azure SQL Database 사용되는 연속 릴리스 프로세스에 의해 크게 좌우되었습니다. 새로운 기능에 대한 이러한 초기 액세스로 인해 초기 고객 피드백이 발생하여 SQL Server 엔지니어링 팀에서 즉시 사용했습니다. SQL Server 엔지니어링 팀은 완료를 선언하기 전에 기능이 제대로 작동하는지 여부를 측정하기 위해 엔지니어링 주기 동안 고객의 기능을 테스트해야 합니다.</p>


  <h2>준비가 되면 기능이 제공됩니다.</h2>


  <p>이전 버전의 SQL Server 일부 개선 사항은 배송 전에 SQL Server 릴리스로 가득&rdquo; 차는 &ldquo;위험이 있습니다.&nbsp; 배송 기간을 놓친 경우 3년 동안 제품에 기능이 켜지지 않을 수 있기 때문입니다.&nbsp; 이제 SQL Server 엔지니어링 팀이 생산 품질 릴리스를 자주 배송할 수 있기 때문에 더 이상 문제(또는 유혹)가 아닙니다. 기능이 준비되지 않은&rsquo; 경우 문제가 해결될 때까지 보류된 다음 기능이 이후 월별 릴리스에 포함됩니다.&nbsp;</p>


  <h2>기능 개발은 반복적입니다.</h2>


  <p>계획은 여전히 엔지니어링 프로세스의 중요한 부분이지만 SQL Server 엔지니어링 팀은 이제 약간 다르게 수행합니다. 새로운 기능 아이디어를 위해 팀의 설계자, 프로그램 관리자 및 엔지니어링 관리자는 문제 공간을 살펴본 다음 적절한 기간 내에 제공될 수 있는 기본 솔루션을 살펴봅니다. 제안된 모든 기능에는 노력과 엔지니어링 자금 조달을 정당화하기 위해 관련 주요 고객도 있어야 합니다. 그런 다음 SQL Server 엔지니어링 팀은 고객의 요구 사항을 반복한 다음, 완료되고 배송 준비가 될 때까지 버전을 릴리스합니다.&nbsp;</p>


  <p>예를 들어 2017년 SQL Server 새로운 자동 튜닝 기능인 <a href="https://docs.microsoft.com/en-us/sql/relational-databases/automatic-tuning/automatic-tuning">자동 계획 수정</a> 기능이 있습니다. 이 기능은 계획 회귀를 식별하고 이전의 좋은 계획을 적용하여 수정합니다. 이 기능은 Azure SQL Database 처음 배포되었으며 내부 고객 및 옵트인 프라이빗 미리 보기 고객이 상당한 양의 실제 테스트를 수행했습니다. 이로 인해 2017년 SQL Server 현재 형태로 출시되기 전에 많은 피드백과 몇 가지 변경 사항이 발생했습니다.</p>


  <p>초기 버전의 MVP(최소 실행 가능 제품)의 피드백은 빌드된 내용을 구체화(또는 재설정)하는 데 사용됩니다. 고객 피드백은 엔지니어링 주기 전반에 걸쳐 사용되며 기존 기능에 대한 새로운 기능 및 변경 내용을 정당화하는 데 사용됩니다. 더 민첩하게, 우리는 증분 가치를 제공하고 마케팅 큰 상자&rdquo; 기능에 초점을 맞출&ldquo;뿐만 아니라 크고 작은 기능을 모두 해제 할 수 있습니다.</p>


  <h2>마찰 없는 업그레이드</h2>


  <p>Azure SQL Database 지속적으로 업그레이드됩니다. 수정 사항은 분기 간에 시간이 지남에 따라 스트리밍되며, 이러한 업그레이드에는 버그 수정 및 새로운 개선 사항이 포함될 수 있습니다. 이러한 지속적인 변경으로 자동 업그레이드를 최대한 원활하고 마찰 없이 만들어야 한다는 요구 사항이 있었습니다. 그 결과<em>, SQL Server 엔지니어링 팀은 대부분의 기능을 더 이상 사용하지 않고 제거하는</em> 대신 이전 버전과의 호환성을 유지하여 원활하고 자동 업그레이드를 허용하는 정책으로 전환했습니다. 이 사용 중단 정책은 SQL Server 및 Azure SQL Database 모두 적용됩니다.&nbsp;</p>


  <p>SQL Server 엔지니어링 팀은 서비스가 투명하게 업그레이드할 수 있도록 이전 버전과의 호환성을 강력한 목표로 유지하려고 합니다. 호환성이 손상되는 경우(예: 서비스의 보안을 유지하는 데 필요한 변경) 엔지니어링은 영향을 받은 고객에게 사전에 연락하여 해결 방법을 찾거나 호환성 수준을 사용하여 고객이 애플리케이션을 충분히 테스트하고 준비가 되면 새 코드에 옵트인할 수 있도록 합니다.</p>


  <p>호환성 수준의 주제에 따라 새 쿼리 실행 계획에 영향을 주는 기능 및 수정 사항은 다음 데이터베이스 호환성 수준에서 발생합니다. 회귀 위험을 최소화하기 위한 것입니다. 예를 들어 2017년 SQL Server 도입된 새로운 <a href="https://docs.microsoft.com/en-us/sql/relational-databases/performance/adaptive-query-processing">적응 쿼리 처리</a> 기능 제품군에는 호환성 수준 140 이상이 필요합니다. SQL Server 2017로 업그레이드하면 명시적으로 변경하기로 결정할 때까지 기존 사용자 데이터베이스&rsquo; 호환성 수준이 유지됩니다. 예를 들어 엔진 기능이 계획에 영향을 주지 않는&rsquo; 경우(예: <a href="https://docs.microsoft.com/en-us/sql/relational-databases/graphs/sql-graph-overview">SQL Graph</a>) 호환성 수준에 연결하지 않으며&rsquo; 명시적으로 사용하도록 설정하지 않고도 자동으로 사용 가능한 기능으로 표시될 수 있습니다.</p>


  <p>또한 <a href="https://blogs.msdn.microsoft.com/sqlserverstorageengine/2017/05/17/automatic-plan-correction-in-sql-server-2017/">자동 계획 수정</a> 및 <a href="https://docs.microsoft.com/en-us/sql/relational-databases/performance/monitoring-performance-by-using-the-query-store">쿼리 저장소</a> 와 같은 기능은 업그레이드 후 백스톱 및 보험 정책으로 작동하여 회귀를 빠르고 효율적으로 처리할 수 있습니다.</p>


  <h2>원격 분석으로 품질 향상</h2>


  <p>SQL Server 엔지니어링 팀은 원격 분석을 사용하여 다음을 수행합니다.</p>


  <ol>
      <li>향후 개선에 대한 후보 시나리오 식별</li>
      <li>기능 채택 측정</li>
      <li>문제를 더 빠르게 표시하여 제품 품질 개선</li>
  </ol>


  <p>모든 원격 분석 데이터는 고객 데이터를 보호하기 위해 일반화되고 스크러빙되며 이 원격 분석은 대규모로 서비스를 관리하는 데 사용됩니다.&nbsp; Azure SQL 데이터베이스에 수백만 개의 데이터베이스가 있고 운영 직원 또는 DBA가 없으면 Azure SQL Database 매일 최대 600TB의 원격 분석이 수집되어 SQL Server 엔지니어링 팀이 자동화된 경고 및 SLA 인프라를 실행할 수 있도록 지원합니다.&nbsp;</p>


  <p>또한 SQL Server 엔지니어링 팀은 Azure SQL Database 실행되는 수백만 개의 데이터베이스에서 들어오는 모든 크래시 덤프를 감시하고 조사합니다.&nbsp;</p>


  <p>Azure SQL Database 서비스 학습은 다음과 같은 방법으로 SQL Server&rsquo; 품질로 직접 누적됩니다.</p>


  <ul>
      <li>SQL Server 엔지니어링 팀은 Azure SQL Database, 시장 내 SQL Server 버전 및 향후 개발 중인 SQL Server 버전에 이러한 수정 사항을 사전에 수정하고 배포합니다.</li>
      <li>수정 사항은 이전보다 훨씬 더 공격적인 속도로 SQL Server CPU(누적 업데이트)로 푸시됩니다.</li>
  </ul>


  <p>SQL Server 엔지니어링 팀은 이러한 엔지니어링 모델 투자로 인해 2016년 SQL Server 최신 CPU에서 실행하도록 권장합니다. 이제 고객은 과거에 핫픽스로 요청해야 했던 수정 사항을 얻게 됩니다(그런 다음 엔지니어링 팀이 출격하고 수정할 때까지 기다립니다).&nbsp; 이제 이러한 수정은 지원 티켓을 열지 않고 사전에 발생합니다.</p>


  <p>SQL Server DBA 관점에서 최신 CPU를 유지하면 알려진 문제가 발생하지 않도록 방지하고 성능, 가용성 및 SQL Server 환경의 전반적인 상태에 도움이 될 수 있습니다.</p>


  <h2>SP1 필요 제거</h2>


  <p>Azure SQL Database 대부분의 기능 및 버그 수정을 먼저 수신하며 코드 변경 내용은 수백만 개의 데이터베이스에서 증분 방식으로 적용됩니다. 또한 SQL Server 엔지니어링 팀은 많은 병렬 머신을 활용하여 테스트를 더 빠르고 자주 실행합니다. 최종 결과는 회귀 및 버그가 엔지니어링 주기의 훨씬 일찍 포착되고 수정된다는 것입니다. 그런 다음, 이러한 수정 사항은 예정된 CPU(누적 업데이트)를 통해 SQL Server 롤백됩니다.</p>


  <p>광범위한 테스트 및 프로덕션 준비 빌드로 인해 <a href="https://blogs.msdn.microsoft.com/sqlreleaseservices/announcing-the-modern-servicing-model-for-sql-server/">최신 서비스 모델</a> 블로그 게시물에 설명된 변경 내용이 발표되었습니다. SQL Server 2017부터 지역화된 CPU(누적 업데이트)는 수정을 위한 기본 배달 방법이며, 2017년 SQL Server 릴리스 후 처음 12개월 동안 매월 배달된 다음, 전체 5년 주류 주기의 나머지 4년 동안 매 분기마다 배달됩니다. 2017년 SQL Server 시작하여 누적 업데이트는 프로덕션 준비가 완료되었으며 이전 서비스 팩 릴리스로 잘 테스트되었으므로 연간 서비스 팩은 더 이상 게시되지 않습니다. SP1이 SQL Server 2017로 업그레이드될 때까지 기다릴 필요가 없습니다.</p>


  <h2>두 세계, 하나의 엔지니어링 모델</h2>


  <p>Azure SQL Database 실행은 SQL Server 엔지니어링 모델을 크게 변화시켰으며 진화는 계속됩니다. 빌드 및 배송 프로세스가 계속 간소화되고 개선됨에 따라, 우리의 목표는 Azure SQL Database 및 SQL Server 고객에게 지속적인 가치와 혁신을 제공하는 것입니다. SQL Server 보강하는 클라우드 혁신을 통해 SQL Server 다음 온-프레미스 데이터 계층 및 애플리케이션을 빌드하기에 가장 좋은 장소라고 생각합니다.</p>


  <p>Microsofts&rsquo; 엔지니어링 모델 또는 여기에 설명된 개선 사항에 대해 공유할 피드백이 있는 경우 여러분의 의견을 듣고 싶습니다. 이 주제에 대한 피드백이나 의견을 SQL Server 엔지니어링 팀에 문의하려면 이메일을 보내SQLDBArchitects@microsoft.com주세요.</p>
