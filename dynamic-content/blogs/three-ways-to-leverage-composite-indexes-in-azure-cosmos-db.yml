### YamlMime:Yaml
ms.openlocfilehash: 7b76bd13acd17f5896a6084f414e8f2844c6335d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907009"
Slug: three-ways-to-leverage-composite-indexes-in-azure-cosmos-db
Title: Azure Cosmos DB에서 복합 인덱스를 활용하는 세 가지 방법
Summary: 복합 인덱스는 Microsoft Build 2019의 Azure Cosmos DB에서 도입되었습니다. 최신 서비스 업데이트를 사용하면 추가 쿼리 형식이 복합 인덱스를 활용할 수 있습니다.
Content: >-
  <p>복합 인덱스는 Microsoft Build 2019의 Azure Cosmos DB에서 도입되었습니다. 최신 서비스 업데이트를 사용하면 추가 쿼리 형식이 복합 인덱스를 활용할 수 있습니다. 이 게시물&rsquo;에서는 복합 인덱스를 살펴보고 일반적인 사용 사례를 강조 표시합니다.</p>


  <h4>Azure Cosmos DB의 인덱스 유형</h4>


  <p>Azure Cosmos DB에는 현재 다음 유형의 쿼리에 사용되는 다음과 같은 인덱스 형식이 있습니다.</p>


  <p><b>범위 인덱스:</b></p>


  <ul>
   <li>같음 쿼리</li>
   <li>범위 쿼리</li>
   <li>단일 속성에 대한 ORDER BY 쿼리</li>
   <li>JOIN 쿼리</li>
  </ul>


  <p><b>공간 인덱스:</b></p>


  <ul>
   <li>지리 공간적 함수</li>
  </ul>


  <p><b>복합 인덱스:</b></p>


  <ul>
   <li>여러 속성에 대한 ORDER BY 쿼리</li>
   <li>필터 및 ORDER BY 절이 포함된 쿼리</li>
   <li>둘 이상의 속성에 대한 필터가 있는 쿼리</li>
  </ul>


  <h2>복합 인덱스 사용 사례</h2>


  <p>기본적으로 Azure Cosmos DB는 모든 속성에 범위 인덱스가 생성됩니다. 많은 워크로드에서 이러한 인덱스는 충분하며 추가 최적화가 필요하지 않습니다. 기본 범위 인덱스 외에도 복합 인덱스를 추가할 수 있습니다. 복합 인덱스에는 복합 인덱스 내의 각 속성에 대해 정의된 경로와 순서(ASC 또는 DESC)가 모두 있습니다.</p>


  <h3>여러 속성에 대한 ORDER BY 쿼리</h3>


  <p>쿼리에 둘 이상의 속성이 있는 ORDER BY 절이 있는 경우 복합 인덱스가 필요합니다. 예를 들어 다음 쿼리에는 연령 및 이름(age ASC, name ASC)에 정의된 복합 인덱스가 필요합니다.</p>


  <p>SELECT * FROM c ORDER BY c.age ASC, c.name ASC</p>


  <p>이 쿼리는 모든 결과를 age 속성 값으로 오름차순으로 정렬합니다. 두 문서의 나이 값이 같으면 쿼리는 문서를 이름으로 정렬합니다.</p>


  <h3>필터 및 ORDER BY 절이 포함된 쿼리</h3>


  <p>쿼리에 다른 속성에 대한 ORDER BY 절뿐만 아니라 필터가 있는 경우 복합 인덱스가 성능을 향상시킵니다. 예를 들어 이름 및 연령에 대한 복합 인덱스가 정의되고 ORDER BY 절에 이름을 포함하도록 쿼리가 업데이트되는 경우 다음 쿼리에는 더 적은 RU&rsquo;(요청 단위)가 필요합니다.</p>


  <p>범위 인덱스 사용 원래 쿼리:</p>


  <p>SELECT * FROM c WHERE c.name = &ldquo;Tim&rdquo; ORDER BY c.age ASC</p>


  <p>이름 및 연령에 대한 복합 인덱스를 활용하는 수정된 쿼리:</p>


  <p>SELECT * FROM c WHERE c.name = &ldquo;Tim&rdquo; ORDER BY c.name ASC, c.age ASC</p>


  <p>복합 인덱스가 쿼리 성능을 크게 향상하지만 복합 인덱스 없이 원래 쿼리를 성공적으로 실행할 수 있습니다. 복합 인덱스를 사용하여 수정된 쿼리를 실행하면 age 속성별로 문서를 정렬합니다. 필터와 일치하는 모든 문서는 동일한 이름 값을 가지므로 쿼리는 나이별로 오름차순으로 반환합니다.</p>


  <h3>여러 속성에 대한 필터가 있는 쿼리</h3>


  <p>쿼리에 둘 이상의 속성이 있는 필터가 있는 경우 복합 인덱스 추가는 성능을 향상시킵니다.</p>


  <p>다음과 같은 쿼리를 고려해 보세요.</p>


  <p>SELECT * FROM c WHERE c.name = &ldquo;Tim&rdquo; and c.age &gt; 18</p>


  <p>복합 인덱스(이름 ASC 및 기간 ASC)가 없으면 이 쿼리에 범위 인덱스가 사용됩니다. 이름과 연령에 대한 복합 인덱스 만들기를 통해 이 쿼리의 효율성을 향상시킬 수 있습니다.</p>


  <p>같음 필터가 여러 개 있고 범위 필터가 최대 1개인 쿼리(예: &gt;,&lt;, &lt;=, &gt;=, !=)가 복합 인덱스를 활용합니다. 경우에 따라 쿼리가 복합 인덱스를 완전히 활용할 수&rsquo; 없는 경우 정의된 복합 인덱스와 범위 인덱스의 조합을 사용합니다. 자세한 내용은 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/index-policy">인덱싱 정책 설명서를 참조하세요</a>.</p>


  <h2>복합 인덱스 성능 이점</h2>


  <p>몇 가지 샘플 쿼리를 실행하여 복합 인덱스의 성능 이점을 강조 표시할 수 있습니다. <a href="https://cosmosdb.github.io/labs/">Azure Cosmos DB 랩</a>에서 사용되는 <a href="https://github.com/CosmosDB/labs/tree/master/dotnet/setup/NutritionData.json">영양 데이터 세트를</a> 사용합니다.</p>


  <p>이 예제에서는 ORDER BY 절뿐만 아니라 필터가 있는 쿼리를 최적화합니다. 범위 인덱스를 사용하여 모든 속성을 인덱싱하는 기본 인덱싱 정책부터 시작합니다. Azure Portal의 아래 이미지에서 참조된 대로 다음 쿼리를 실행하면 쿼리 메트릭이 관찰됩니다.</p>


  <p>쿼리 메트릭:</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/25a38e68-549b-4152-be5d-580c09f41072.png"><img alt="Query which uses range index and consumes 21.8 RU’s." border="0" height="614" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/410489b7-af49-4e1e-838f-f237748ef21f.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="" width="1024"></a></p>


  <p>기본 인덱싱 정책을 사용하는 이 쿼리에는 21.8RU&rsquo;가 필요합니다.</p>


  <p>foodGroup 및 _ts 복합 인덱스를 추가하고 ORDER BY 절에 foodGroup을 포함하도록 쿼리 텍스트를 업데이트하면 쿼리&rsquo; RU 요금이 크게 감소했습니다.</p>


  <p>쿼리 메트릭:</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c0608bb3-8cee-47be-ab23-b51d0a2042e7.png"><img alt="Query which uses composite index and consumes 4.07 RU’s." border="0" height="528" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b1f0825d-7f42-4dc8-80a3-482b0e30ee87.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="" width="1024"></a></p>


  <p>복합 인덱스를 추가한 후 쿼리&rsquo; RU 요금은 21.8RU&rsquo;에서 4.07RU&rsquo;로 감소했습니다. 이 쿼리 최적화는 총 데이터 크기가 증가함에 따라 특히 영향을 줍니다. ORDER BY 절의 속성에 카디널리티가 높은 경우 복합 인덱스의 이점이 중요합니다.</p>


  <h2>복합 인덱스 만들기</h2>


  <p>이 설명서에서 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-manage-indexing-policy">복합 인덱스를 만드는</a> 방법에 대해 자세히 알아볼 수 있습니다. Azure Portal을 통해 직접 인덱싱 정책을 업데이트하는 것은&rsquo; 간단합니다. Azure Cosmos DB에 이미 있는&rsquo; 데이터에 대한 복합 인덱스를 만드는 동안 인덱스 업데이트는 일반 작업에서 남은 RU&rsquo;를 활용합니다. 새 인덱싱 정책이 정의되면 Azure Cosmos DB는 작성될 때 복합 인덱스로&rsquo; 속성을 자동으로 인덱싱합니다.</p>


  <p>복합 인덱스가 <a href="https://azure.microsoft.com/en-us/services/cosmos-db/">Azure Cosmos DB</a>의 기존 워크로드에 대한 RU 사용률을 향상시킬지 여부를 살펴봅니다.</p>
