### YamlMime:Yaml
ms.openlocfilehash: aabda2178a8ffbadb74f97347b68217dfbecac38
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900624"
Slug: simplifying-security-for-serverless-and-web-apps-with-azure-functions-and-app-service
Title: Azure Functions 및 App Service를 사용하여 서버리스 및 웹앱에 대한 보안 간소화
Summary: '서버리스 및 PaaS는 모두 관리 부담을 줄이고 가장 중요한 애플리케이션 논리에 집중할 수 있도록 하여 개발자 생산성을 향상하는 것입니다. '
Content: >-
  <p>서버리스 및 PaaS는 모두 관리 부담을 줄이고 가장 중요한 애플리케이션 논리에 집중할 수 있도록 하여 개발자 생산성을 향상하는 것입니다. &rsquo;하지만 보안 비용이 들 수 없으며 모범 사례를 쉽게 달성할 수 있어야 합니다. 다행히 App Service 및 Azure Functions 플랫폼에는 앱 보안 부담을 크게 줄이는 전체 기능이 있습니다.</p>


  <p>현재는&rsquo; 관리 중인 ID 및 비밀로 작업하기 위해 필요한 코드의 양을 줄이는 새로운 보안 기능을 발표합니다. 여기에는 다음이 해당합니다.</p>


  <ul>
   <li>애플리케이션 설정 대한 Key Vault 참조(공개 미리 보기)</li>
   <li>사용자 할당 관리 ID(공개 미리 보기)</li>
   <li>Linux/Web App for Containers의 App Service에 대한 관리 ID(공개 미리 보기)</li>
   <li>Azure Functions에 대한 ClaimsPrincipal 바인딩 데이터</li>
   <li>CORS 구성에서 Access-Control-Allow-Credentials 지원</li>
  </ul>


  <p>또한 Were&rsquo;는 구성 취약성을 catch 및 해결하거나, 위협에 대한 노출을 제한하거나, 공격에 대응할 수 있도록 공격을 탐지하는 환상적인 방법을 제공하므로 Azure 리소스 전체에서 보안을 위한 기본 허브로 Azure <a href="https://azure.microsoft.com/services/security-center/" target="_blank">Security Center</a> 에 계속 투자하고 있습니다. 예를 들어 모든 앱을 HTTPS 전용으로 제한한&#39;생각할 수 있지만 Security Center는 절대적으로 확인하는 데 도움이 됩니다. 아직 시도하지 않은&rsquo; 경우 시도해 보세요.</p>


  <p>그래서, 더 이상 ado없이, 이러한 새로운 기능의 세부 사항에 대해 이야기하자&rsquo;!</p>


  <h2>애플리케이션 설정 대한 Key Vault 참조(공개 미리 보기)</h2>


  <p>Microsoft Ignite 2018에서는 앱이 Key Vault에서 애플리케이션 설정을 소스로 만들 수 있는 새로운 기능을 미리 보았습니다. Im&rsquo;은 오늘 현재이 기능을 공개 미리 보기로 사용할 수 있음을 발표하게되어 매우 기쁩니까!</p>


  <p>점점 더 많은 조직이 비밀 관리 정책을 보호하기 위해 움직이고 있습니다. <a href="https://azure.microsoft.com/en-us/services/key-vault/" target="_blank">Azure Key Vault</a> 는 액세스 정책 및 감사 기록을 완전히 제어하여 비밀에 대한 하나의 진리 소스를 제공합니다. App Service 및 Azure Functions의 기존 애플리케이션 설정 기능은 안전한 것으로 간주되지만 미사용 비밀이 암호화되어 있으면 필요할 수 있는 이러한 관리 기능을 제공하지 않습니다&rsquo;.</p>


  <p>그러나 일반적으로 Key Vault를 사용하려면 몇 가지 새 코드를 작성해야 합니다. Weve&rsquo;는 많은 팀이 애플리케이션이 비밀, 특히 레거시 애플리케이션에서 작동하는 모든 장소를 쉽게 업데이트할 수&rsquo; 없다는 것을 발견했습니다. Azure Functions 트리거는 플랫폼에서 관리되므로 문제이기도 합니다. 이러한 두 시나리오는 모두 이 새로운 기능으로 해결됩니다.</p>


  <h3>Key Vault에서 애플리케이션 설정 소싱</h3>


  <p>Key Vault 참조 기능을 사용하면 앱이 앱 설정 사용하는 것처럼 작동할 수 있으므로 코드 변경이 필요하지 않습니다. <a href="https://aka.ms/FuncKeyVaultRef" target="_blank">Key Vault 참조 설명서</a>에서 모든 세부 정보를 가져올 수 있지만 Ill&rsquo;은 여기서 기본 사항을 간략하게 설명합니다.</p>


  <p>이 기능을 사용하려면 앱에 <a href="https://aka.ms/funcsystemassigned" target="_blank">대한 시스템 할당 관리 ID가</a> 필요합니다. 이 게시물의 뒷부분에서 Ill&rsquo;은 사용자 할당 ID에 대해 이야기하지만&rsquo; 지금은 이러한 미리 보기를 별도로 유지해야 합니다.</p>


  <p>&rsquo;그런 다음 Key Vault에서 애플리케이션에 비밀에 대한 GET 권한을 부여하는 액세스 정책을 구성해야 합니다. <a href="https://docs.microsoft.com/azure/key-vault/key-vault-secure-your-key-vault#key-vault-access-policies" target="_blank">액세스 정책을 구성하는</a> 방법을 알아봅니다.</p>


  <p>마지막으로 애플리케이션 설정의 값을 다음 형식의 참조로 설정합니다.</p>


  <p align="center"><em>@Microsoft.KeyVault(SecretUri=<strong>secret_uri_with_version</strong>)</em></p>


  <p>여기서 <em>secret_uri_with_version</em> Key Vault의 비밀에 대한 전체 URI입니다. 예를 들어 다음과 같습니다. https://myvault.vault.azure.net/secrets/mysecret/ec96f02080254f109c51a1f14cdb1931</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/efcee7cc-6d48-4100-af8e-f3016a06ee53.png"><img alt="Sourcing application settings from Key Vault" border="0" height="818" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/02f94eab-f728-42b5-a7a1-fae9e2ec0d52.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Key Vault에서 애플리케이션 설정 소싱" width="2164"></a></p>


  <p>완료되었습니다. 코드를 변경할 필요가 없습니다.</p>


  <p>이 초기 미리 보기의 경우 아직 기본 제공 회전 처리가 없&rsquo;으므로 비밀 버전을 명시적으로 설정해야 합니다. 이것은 우리가 가능한 한 빨리 사용할 수 있도록 기대 뭔가.</p>


  <h2>사용자 할당 관리 ID(공개 미리 보기)</h2>


  <p>관리 ID에 대한 기존 지원을 시스템 할당이라고 합니다. ID는 플랫폼에서 특정 애플리케이션에 대해 만들어지고 애플리케이션의 수명 주기와 연결되어 있다는 것입니다. 애플리케이션을 삭제하면 ID가 즉시 Azure Active Directory 제거됩니다.</p>


  <p>&rsquo;현재 사용자 할당 ID는 자체 Azure 리소스로 만든 다음 지정된 애플리케이션에 할당되는 미리 보기로 작성되었습니다. 사용자 할당 ID를 여러 애플리케이션에 할당할 수도 있으며 애플리케이션에는 여러 사용자 할당 ID가 있을 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b9b02ea6-cc8b-46ff-b0ea-448a238e76cd.png"><img alt="User-assignment managed identities" border="0" height="597" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9128ac22-955d-421b-b5cb-f6406a3a8f21.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="사용자 할당 관리 ID" width="1594"></a></p>


  <p>사용자 할당 ID &ldquo; 를 만들고 사용하는 방법에 대한 자세한 내용은 Azure Portal을 <a href="https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-manage-ua-identity-portal" target="_blank">사용하여 사용자 할당 관리 ID에 역할 만들기, 나열, 삭제 또는 할당을</a> 참조하세요.&rdquo; ID를 만든 후에는 해당 ID에 대한 포인터를 사용하여 앱 구성을 업데이트하여 앱에 할당할 수 있습니다. 이에 대한 자세한 내용은 <a href="https://aka.ms/funcuserassigned" target="_blank">관리 ID 설명서</a>에서 확인할 수 있습니다. 이 미리 보기는 소버린 클라우드에서 지원되지 않습니다.</p>


  <p><em><strong>빠른 팁:</strong> 여러 리소스에 대해 ID를 사용할 수 있지만 ID를 과도하게 공유하지 않도록 주의하고 필요하지 않은&rsquo; 리소스에 대한 사용 권한을 누설해야 합니다. 항상 최소 권한 원칙을 염두에 두고 기본적으로 애플리케이션의 각 구성 요소에 대해 별도의 ID를 만듭니다. 진정으로 필요한 경우에만 공유합니다.</em></p>


  <h2>Linux/Web App for Containers의 App Service에 대한 관리 ID(공개 미리 보기)</h2>


  <p>또한 Were&rsquo;는 관리 ID에 대한 지원을 Linux/Web App for Containers의 App Service로 확장하게 되어 기쁘게 생각합니다. 이제 Linux 앱은 자격 증명을 관리하지 않고도 동일한 턴키 서비스-서비스 인증 환경을 사용할 수 있습니다. 이 미리 보기에는 시스템 할당 및 사용자 할당 지원이 모두 포함됩니다. Key Vault 및 Azure Resource Manager와 같은 리소스에 대한 액세스를 쉽게 요청할 수 있는 토큰 서비스 외에도 이 새로운 지원을 통해 Linux 앱은 앞에서 언급한 Key Vault 참조 기능에 액세스할 수 있습니다.</p>


  <p>Linux 애플리케이션을 시작하려면 설명서의 구성 단계인 &ldquo;<a href="https://docs.microsoft.com/en-us/azure/app-service/app-service-managed-service-identity" target="_blank">App Service 및 Azure Functions에 관리 ID를 사용하는 방법을</a> 따를 수 있습니다.&rdquo;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fb2a9b01-b6c5-4568-bd8c-18bf8b05955c.png"><img alt="Managed identities for App Service" border="0" height="705" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3a234f9b-19d2-4bcb-b87d-1bff72c8460a.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="App Service에 대한 관리 ID" width="1383"></a></p>


  <h2>Azure Functions에 대한 ClaimsPrincipal 바인딩 데이터</h2>


  <p>Azure Functions&rsquo;의 첫 번째 미리 보기부터 App Service 인증/권한 부여를 사용하여 함수 앱에 대한 액세스를 제한할 수 있었습니다. &rsquo;오늘날 함수 코드에서 들어오는 ID를 더 쉽게 활용할 수 있습니다. 현재 배포가 완료되고 있으며, 주말까지 Azure의 모든 함수 앱에서 사용할 수 있습니다.</p>


  <p>.NET의 경우 이는 ASP.NET 표시되는 것과 유사한&rsquo; ClaimsPrincipal 개체로 노출됩니다. ILogger를 삽입하는 방법과 유사하게 ClaimsPrincipal 개체를 함수 서명에 추가하면 개체가 자동으로 삽입됩니다.</p>


  <pre>

  using System.Net;

  using Microsoft.AspNetCore.Mvc;

  using System.Security.Claims;


  public static IActionResult Run(HttpRequest req, ClaimsPrincipal principal, ILogger log)

  {
       // ...
       return new OkResult();
  }</pre>


  <p>다른 언어는 향후 업데이트에서 컨텍스트 개체를 통해 동일한 항목에 액세스할 수 있습니다. 그때까지는 다음과 같습니다. NET 전용 미리 보기입니다. 이 기능에 대한 자세한 내용은 <a href="https://aka.ms/funcclaimsprincipal" target="_blank">HTTP 트리거 참조</a>를 참조하세요.</p>


  <p>저는 이것이 ID 종속 함수를 정리하는 방법을 정말 좋아합니다. 이 기능은 <a href="https://docs.microsoft.com/azure/azure-functions/functions-bindings-microsoft-graph#token-input" target="_blank">토큰 바인딩</a>과 함께 비즈니스 논리의 핵심이 아닌&rsquo; 좋은 코드를 제거합니다.</p>


  <h2>CORS 구성에서 Access-Control-Allow-Credentials 지원</h2>


  <p>마지막으로, Access-Control-Allow-Credentials 헤더를 설정할 수 있는 CORS 기능에 대한 빠른 업데이트가 있습니다. 이 작업은 API 호출의 일부로 쿠키 또는 토큰을 보내야 할 때마다 필요합니다. 이 응답 헤더를 설정하지 않으면 브라우저가 데이터를 전달하지 않습니다.</p>


  <p>AZURE App Service에서 CORS를 사용하여 <a href="https://docs.microsoft.com/en-us/azure/app-service/app-service-web-tutorial-rest-api" target="_blank">RESTful API 호스트</a> 자습서 &ldquo; 에서 CORS 기능 및 이 새로운 설정에 대해 자세히 알아볼 수 있습니다.&rdquo; 헤더&rsquo;를 사용하려면 corS 구성을 업데이트하여 supportCredentials를 true로 설정&ldquo;하기만 하면 됩니다&rdquo;.</p>


  <p>Access-Control-Allow-Credentials 헤더는 환상적인 <a href="https://github.com/Azure/azure-functions-core-tools/pull/877" target="_blank">커뮤니티 끌어오기 요청</a> 덕분에 개발 목적으로 로컬 Functions 호스트에서 사용하도록 설정할 수도 있습니다.</p>


  <h2>요약</h2>


  <p>우리의 모든 미리 보기와 마찬가지로, 이러한 기능을 시도하고 우리가 당신이 어떻게 생각하는지 알려 당신을 위해 wed&rsquo; 사랑!</p>


  <p>새 기능에 대한 요청이 있는 경우 UserVoice( <a href="https://feedback.azure.com/forums/355860-azure-functions" target="_blank">Functions</a> 또는 <a href="https://feedback.azure.com/forums/169385-web-apps" target="_blank">App Service</a>용)에 대한 아이디어를 만드세요. Functions 관련 문제의 경우 <a href="https://github.com/Azure/Azure-Functions/issues/new" target="_blank">GitHub 리포지토리에 문제를 제출</a>하세요. Twitter <a href="https://twitter.com/AzureFunctions" target="_blank">@AzureFunctions</a>에서 팀에 연결할 수도 있습니다.</p>


  <p>Were&rsquo; 정말 당신에게서 듣고 대화를 계속 기대. 이제 해당 앱을 보호하세요!</p>
