### YamlMime:Yaml
ms.openlocfilehash: 61a1f9d2ecc3b90689719dcb695ceec469633055
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899363"
Slug: azure-automation-reliable-fault-tolerant-runbook-execution-using-checkpoints
Title: 'Azure Automation: 검사점 사용 신뢰할 수 있는 Fault-Tolerant Runbook 실행'
Summary: 'Azure Automation Runbook 작성자는 오류, 예외, 네트워크 문제 및 충돌과 같은 예기치 않은 문제에 직면하여 안정적으로 실행되는 Runbook을 만들려고 합니다. 이 게시물에서는 Automation Runbook에서 검사점 사용 이유, 시기 및 방법에 대해 설명합니다.  '
Content: >-
  <p>Azure Automation Runbook 작성자는 오류, 예외, 네트워크 문제 및 충돌과 같은 예기치 않은 문제에 직면하여 안정적으로 실행되는 Runbook을 만들려고 합니다.&nbsp; Azure Automation을 통해 이 작업을 수행할 수 있습니다.&nbsp; Azure Automation은 중단된 경우 나중에 중단 지점 또는 그 근처에서 다시 시작될 수 있도록 워크플로의 상태를 유지하는 기능을 검사점 지정 &ndash; 하는 기능을 지원하는 Windows PowerShell Workflow를 기반으로 합니다.&nbsp; 따라서 검사점은 Automation Runbook에서 활용하려는 강력한 기능입니다.&nbsp; 검사점의 신중한 사용을 사용하면 장기 실행 프로세스를 안정적으로 자동화하고, 다른 네트워크 시스템에 안정적으로 액세스하며, 반복하지 않아야 하거나(idempotent가 아님) 반복 비용이 많이 드는 작업의 반복을 보장하며, 수동 단계를 포함하기 위해 의도적으로 중단될 수 있는 Runbook을 만들 수 있습니다. 이 게시물에서는 Automation Runbook에서 검사점 사용 이유, 시기 및 방법에 대해 설명합니다.&nbsp; <a href="https://technet.microsoft.com/en-us/library/jj574114.aspx" target="_blank">PowerShell 워크플로의 검사점 지정</a> 에 대한 기존 정보는 이해에 도움이 되도록 닦을 수 있습니다.</p>


  <h3>검사점이란?</h3>


  <p>검사점은 변수의 현재 값, 출력 및 기타 직렬화 가능한 상태 정보를 포함하여 Runbook 작업의 현재 상태에 대한 스냅샷입니다.&nbsp; 각 검사점은 스토리지에 저장됩니다.&nbsp; Runbook이 의도적으로 또는 의도치 않게 일시 중단된 다음 다시 시작된 경우 워크플로 엔진은 최신 검사점의 데이터를 사용하여 Runbook을 복원하고 다시 시작합니다.</p>


  <h3>Azure Automation의 검사점</h3>


  <p>Azure Automation에서 Runbook 작업을 유지하면 검사점이 만들어지고 Azure Automation 데이터베이스에 저장됩니다.&nbsp; 각 작업에 대한 최신 검사점만 데이터베이스에 저장됩니다. 각 검사점은 이전 검사점을 대체합니다.&nbsp; Runbook이 일시 중단된 후 다시 시작되면 저장된 검사점이 Runbook을 복원하고 다시 시작하는 데 사용됩니다. 워크플로 세션을 호스트하는 컴퓨터의 하드 드라이브에 검사점을 저장하는 PowerShell 워크플로와 달리 Azure Automation은 Azure Automation 데이터베이스에 검사점을 저장합니다.&nbsp; 따라서 Runbook을 실행하는 작업자가 충돌하는 경우 다시 시작한 작업자 또는 다른 작업자가 작업을 선택하고 데이터베이스의 마지막 검사점에서 작업을 다시 시작할 수 있습니다.</p>


  <h3>검사점이란?</h3>


  <p>Runbook에서 검사점 사용을 위한 몇 가지 이유는 다음과 같습니다.</p>


  <ul>
   <li>특정 작업이 반복되지 않도록 합니다. <ul>
    <li>검사점은 Runbook이 충돌(일시 중단)한 다음 다시 시작하는 경우 반복할 수 없는 작업(비 idempotent)이 반복되지 않도록 보장하는 데 유용합니다.&nbsp; 한 가지 예는 Runbook 작업이 일시 중단된 후 다시 시작된 경우 중복된 VM이 만들어지지 않도록 VM을 만든 직후 Runbook의 검사점입니다.</li>
   </ul>
   </li>
   <li>장기 실행 작업 보호 <ul>
    <li>실제 환경에서 오류가 발생합니다. 여러 단계의 장기 실행 작업은 네트워크 문제, 컴퓨터 재부팅 또는 충돌, 시간 제한, 정전 등으로 인해 중단에 취약합니다.&nbsp; 비용이 많이 드는 작업을 다시 실행하지 않으려면 중요한 지점에서 Runbook의 검사점을 지정하고 Runbook 다시 시작이 해당 작업을 다시 실행하지 않도록 합니다.</li>
   </ul>
   </li>
   <li>장기 실행 Runbook이 완료되도록 보장 <ul>
    <li>Azure Automation에는 fairshare&rdquo;라는 &ldquo;기능이 있습니다. 여기서 3시간&nbsp; 동안 실행되는 Runbook은 다른 Runbook을 실행할 수 있도록 언로드됩니다.&nbsp; 결국 언로드된 Runbook이 다시 로드되고, 실행이 완료되면 Runbook에서 수행된 마지막 검사점에서 실행을 다시 시작합니다.&nbsp; 따라서 Runbook이 최종적으로 완료되도록 하려면 3시간 미만 동안 실행되는 간격으로 검사점이 추가되어야 합니다.&nbsp; (<a href="https://social.msdn.microsoft.com/Forums/windowsazure/en-US/2e6be10b-97cb-49e3-b871-40825fcfac45/trying-to-make-automation-automatically-rebuild-all-tables?forum=azureautomation" target="_blank">이 포럼 게시물</a>은 문제의 한 가지 예를 제공합니다.)</li>
   </ul>
   </li>
   <li>계획된 중단 또는 수동 중단 허용 <ul>
    <li>실행 중인 Runbook을 의도적으로 일시 중단하려는 시나리오가 있습니다.&nbsp; 예를 들어 승인이 계속될 때까지 기다리기 위해 Runbook 작업을 일시 중단하거나 Runbook 작업을 일시 중단하여 예기치 않거나 계획된 시스템 문제에 대한 수정을 기다리는 것이 있습니다.</li>
   </ul>
   </li>
  </ul>


  <h3>&nbsp;</h3>


  <p>&nbsp;</p>


  <h4>Runbook에 검사점 추가 방법</h4>


  <h3>Checkpoint-Workflow 활동</h3>


  <p>Checkpoint-Workflow 작업(지속 별칭)은 표준 PowerShell 워크플로 작업이며 Runbook에서 특정 지점에서 검사점을 만드는 데 사용할 수 있습니다.&nbsp; 검사점은 Checkpoint-Workflow 작업이 발생하는 Runbook의 지점에서 수행됩니다. &hellip; Download-Updates Reboot-VM Checkpoint-Workflow Email-Team Checkpoint-Workflow &hellip;</p>


  <h3>-PSPersist 작업 일반 매개 변수</h3>


  <p>활동을 호출할 때마다 PSPersist 일반 워크플로 활동 매개 변수를 포함 &ndash;할 수 있습니다.&nbsp; 이렇게 하면 작업이 완료된 직후에 검사점이 강제로 생성됩니다.</p>


  <pre class="prettyprint">

  &hellip;

  Download-Updates

  Reboot-VM &ndash;PSPersist $True

  Email-Team &ndash;PSPersist $True

  &hellip;</pre>


  <h3>$PSPersistPreference 워크플로 기본 설정 변수</h3>


  <p>Runbook에서 $PSPersistPreference = $True 문을 포함할 수 있습니다.&nbsp; 이렇게 하면 기본 설정 문을 따르는 각 작업 후에 검사점이 수행됩니다.&nbsp; Runbook의 시작 부분에 이 기본 설정을 지정하면 Runbook의 각 작업 후에 검사점이 만들어집니다.&nbsp; 자동 검사점 없이 작업이 실행되는 $PSPersistPreference = $False(Runbook 기본값)를 포함하여 자동 검사점 지정을 해제할 수 있습니다. 성능 및 전략적 이유로 각 활동을 지속하는 것이 최선의 방법이 아닐 수 있습니다.&nbsp; 각 검사점은 워크플로 상태를 직렬화하고 데이터베이스에 저장하기 위한 처리가 필요합니다.&nbsp; 또한 Runbook이 일시 중단된 경우 일부 활동을 반복하려는 시나리오(예: 이후)도 있습니다. 이러한 이유로 이 방법은 권장되지 않습니다.</p>


  <pre class="prettyprint">

  &hellip;

  Download-Updates

  $PSPersistPreference = $True

  Update-VM

  Email-Team

  $PSPersistPreference = $False

  &hellip;</pre>


  <h3>Suspend-Workflow 작업</h3>


  <p>runbook에서 Suspend-Workflow 활동을 사용하는 경우 즉시 응답은 Runbook의 검사점이 된 다음 일시 중단하는 것입니다.&nbsp; 예를 들어 Runbook에서 일부 작업을 수행하고 계속하기 전에 승인을 기다리는 데 Runbook이 필요한 경우 이 작업을 Runbook에서 사용합니다. 해당 승인을 부여하는&rdquo; 방법은 &ldquo;Runbook 작업을 다시 시작하는 것입니다.</p>


  <pre class="prettyprint">

  &hellip;

  Download-Updates

  # Get permission to apply updates

  Suspend-Workflow

  # Continue if resumed

  Reboot-VM &ndash;PSPersist $True

  Email-Team &ndash;PSPersist $True

  &hellip;</pre>


  <h3>검사점 추가 위치</h3>


  <p>일반적으로 워크플로를 유지하는 위치에 대해 명시적으로 지정하는 것이 가장 좋습니다.&nbsp; 각 활동 후에 일괄 검사점이 생성되도록 $PSPersistPreference 변수를 설정하는 대신, 일반적으로 신중하고 전략적이며 지속성이 적합한 워크플로의 해당 위치에서 Checkpoint-Workflow 또는 Suspend-Workflow 활동 또는 &ndash;PSPersist 매개 변수를 사용하는 것이 좋습니다.&nbsp; 워크플로를 확실히 유지하려는 위치가 있으며 워크플로를 유지하지 않으려는 위치가 있습니다(아래 예제).&nbsp; 또한 워크플로를 유지하려면 시스템의 작업이 필요하며 워크플로 성능에 어느 정도 영향을 미칩니다. <strong>모범 사례:</strong>&nbsp; 다음과 같은 경우 워크플로에 검사포인트를 추가할 수 있습니다.</p>


  <ul>
   <li>반복하지 않으려는 작업 후(idempotent 아님)</li>
   <li>비용 때문에 반복하지 않으려는 장기 실행 또는 비용이 많이 드는 작업 후.</li>
   <li>3시간&nbsp; 이상 실행되는 모든 Runbook 내에서 3시간&nbsp;이 지나 &ldquo;면 다른 Runbook을 실행할 수 있도록 페어쉐어&rdquo; 기능이 시작되고 일시적으로 Runbook을 언로드합니다.&nbsp; 결국 시스템은 Runbook을 다시 로드하고 마지막 검사점에서 실행을 다시 시작합니다.&nbsp; 검사점이 추가되지 않으면&rsquo; Runbook이 처음부터 다시 시작되고, 물론 페어쉐어 제한에 다시 실행됩니다. 이 작업은 계속 진행되며 Runbook은 완료되지 않습니다.</li>
   <li>오류 및 워크플로 일시 중단으로 이어질 수 있는 문제의 정상 확률보다 높은 활동을 하기 전입니다.&nbsp; 워크플로가 다시 시작될 때 활동을 반복하여 작업 작업이 완료되도록 합니다.&nbsp; 예를 들어 네트워크 문제에 취약할 수 있는 원격 시스템에 액세스하는 활동이 있습니다.</li>
  </ul>


  <p><strong>모범 사례:</strong>&nbsp; 다음과 같은 경우에는 검사점이 추가되지 않아야 합니다.</p>


  <ul>
   <li>워크플로가 일시 중단되고 다시 시작된 경우 반복하려는 작업 후</li>
   <li>작업 후 멱등성이며 검사점 만들기보다 반복 비용이 저렴합니다.</li>
   <li>InlineScript 블록에서(허용되지 않음)</li>
  </ul>


  <h4>&nbsp;</h4>


  <h3>설명 시나리오: VM 업데이트</h3>


  <ol>
   <li>Windows 업데이트에서 최신 패치 다운로드</li>
   <li>VM을 다시 시작하여 패치 적용
   <ul>
    <li>검사점</li>
   </ul>
   </li>
   <li>업데이트가 적용되었음을 보고하도록 팀에 이메일을 보내세요.
   <ul>
    <li>검사점</li>
   </ul>
   </li>
   <li>&hellip;</li>
  </ol>


  <p>이 시나리오에서는 1단계(idempotent이므로)를 반복해도 되지만 2단계 또는 3단계는 반복하지 않습니다. 따라서 검사점은 2단계와 3단계 후에 확실히 필요합니다.&nbsp; 각 작업이 작동한 후에도 자동으로 유지됩니다. 그러나 1단계 후에 검사점 추가는 불필요하게 시스템에 작업을 추가합니다.</p>


  <h4>&nbsp;</h4>


  <h3>설명 시나리오: 고객에게 알림</h3>


  <ol>
   <li>데이터베이스에서 고객 목록 가져오기</li>
   <li>고객에게 새 정책에 대한 전자 메일 보내기 <ul>
    <li>검사점</li>
   </ul>
   </li>
   <li>고객 전자 메일이 나간 전자 메일 관리 <ul>
    <li>검사점</li>
   </ul>
   </li>
   <li>&hellip;</li>
  </ol>


  <p>경우에 따라 반복하지 않으려는&rsquo; 활동 그룹이 있지만 해당 그룹의 모든 활동이 성공하는 경우에만 가능합니다.&nbsp; 이 시나리오에서는 1단계와 2단계를 항상 함께 실행하여 검색된 고객 목록이 전자 메일이 발송될 때 최신 상태인지 확인해야 합니다.&nbsp; 따라서 Runbook 작업자가 2단계(고객 전자 메일 보내기) 이전에 충돌하는 경우 Runbook 작업이 다시 시작될 때 1단계에서 다시 시작하려고 합니다(고객 목록 검색).&nbsp; 그러나 3단계 직전에 크래시 또는 일시 중단이 발생하는 경우 2단계가 반복되지 않도록 보장하려고 합니다(고객에게 다시 메일을 보내지 않음&rsquo;). <strong>모범 사례:</strong>&nbsp; InlineScript 블록 내에 검사점이나 워크플로의 함수를 추가할 수 없다는 점에 유의해야 합니다.&nbsp; InlineScript 블록 및 함수의 코드가 PowerShell 워크플로 스크립트가 아닌 PowerShell 스크립트로 실행하기 때문입니다.&nbsp; 따라서 워크플로 지속성을 활용하려면 Runbook 코드를 여러 모듈식 작업으로 분할하여 활동 간에 검사점을 추가하거나 InlineScript가 필요한 경우 여러 InlineScript 블록을 사용하여 작업 간에 검사점을 허용해야 합니다.</p>


  <h3>&nbsp;</h3>


  <h3>Runbook 일시 중단 및 다시 열기</h3>


  <p>Runbook 검사점 지정 및 일시 중단/재개는 함께 진행됩니다.&nbsp; Runbook이 일시 중단된 경우 최신 검사점에서 Runbook을 다시 시작하도록 Runbook에 검사포인트를 추가합니다. Azure Automation의 Runbook 작업은 여러 가지 방법으로 일시 중단될 수 있습니다.</p>


  <ul>
   <li>Azure Automation 포털 UI의 사용자가 의도적으로
   <ul>
    <li>Azure Automation 포털 UI를 사용하여 실행 중인 Runbook 작업을 일시 중단하도록 선택할 수 있습니다.</li>
    <li>작업은 다음 검사점에서 일시 중단됩니다.&nbsp; Runbook에 검사점이 작성되지 않은 경우 Runbook은 일시 중단&rdquo; 상태를 &ldquo;표시하는 동안 끝까지 계속 실행됩니다.</li>
   </ul>
   </li>
   <li>Suspend-Workflow 사용하여 Runbook 내에서 사용자가 의도적으로
   <ul>
    <li>runbook에 Suspend-Workflow 활동을 포함합니다.</li>
    <li>작업은 검사점이 지정된 다음 Suspend-Workflow 호출되는 위치에서 일시 중단됩니다.</li>
   </ul>
   </li>
   <li>사용자가 Suspend-AzureAutomationJob cmdlet을 사용하여 의도적으로
   <ul>
    <li>PowerShell 스크립트 또는 워크플로에서 Suspend-AzureAutomationJob cmdlet을 사용하여 실행 중인 Azure Automation Runbook 작업을 일시 중단할 수 있습니다.</li>
    <li>작업은 다음 검사점에서 일시 중단됩니다.&nbsp; Runbook에 검사점이 작성되지 않은 경우 Runbook은 일시 중단&rdquo; 상태를 &ldquo;표시하는 동안 끝까지 계속 실행됩니다.</li>
   </ul>
   </li>
   <li>Runbook이 3시간 이상 실행되는 경우 Azure Automation 워크플로 엔진에서 의도적으로
   <ul>
    <li>실행 중인 작업이 3시간&nbsp;&ldquo; 이상 실행되면 페어쉐어&rdquo; 기능이 시작되고 Runbook이 일시적으로 언로드됩니다. 작업 상태는 실행 중, 리소스 대기 중으로 &ldquo;설정됩니다&rdquo;.&nbsp; 결국 Runbook이 다시 로드되고 마지막 검사점에서 실행이 시작됩니다.</li>
   </ul>
   </li>
   <li>Runbook 예외 후 의도치 않게 Azure Automation 워크플로 엔진에 의해
   <ul>
    <li>실행 중인 작업이 예외를 throw하면 Runbook Worker에서 언로드되고 해당 상태가 일시 중단&rdquo;됨으로 &ldquo;설정됩니다.</li>
   </ul>
   </li>
   <li>Runbook 작업자 충돌로 인한 의도치 않게
   <ul>
    <li>Runbook Worker가 충돌하면 해당 작업자에서 실행 중인 작업이 즉시 종료됩니다.&nbsp; 데이터베이스에서 이러한 작업의 상태는 실행&rdquo; 중으로 &ldquo;유지됩니다. 동일하거나 대체 작업자가 다시 줄을 서면 작업이 선택되어 마지막 검사점에서 계속됩니다.</li>
   </ul>
   </li>
  </ul>


  <p>Azure Automation의 Runbook 작업은 여러 가지 방법으로 다시 시작될 수 있습니다.&nbsp; 모든 경우에 마지막 검사점에서 작업을 다시 시작하거나 검사점이 없는 경우 처음부터 다시 시작합니다.</p>


  <ul>
   <li>Azure Automation 포털 UI에서 수동으로
   <ul>
    <li>Azure Automation 포털 UI를 사용하여 일시 중단된 작업을 다시 시작하도록 선택할 수 있습니다.</li>
   </ul>
   </li>
   <li>Resume-AzureAutomationJob cmdlet 사용
   <ul>
    <li>PowerShell 스크립트 또는 워크플로에서 Resume-AzureAutomationJob cmdlet을 사용하여 일시 중단된 작업을 다시 시작할 수 있습니다.</li>
   </ul>
   </li>
   <li>Runbook 작업자 크래시가 자동으로 수행됩니다.
   <ul>
    <li>작업자가 다시 온라인 상태가 되거나 다른 작업자가 대체 작업자로 할당되면 작업자는 데이터베이스에 할당된 작업을 찾습니다.&nbsp; 실행&rdquo; 중 상태&ldquo;이고 작업자에서 아직 실행되지 않은 작업의 경우 작업자는 마지막 검사점에서 자동으로 다시 시작합니다(위의 일시 중단 목록에서 #5와 동일한 시나리오임).</li>
   </ul>
   </li>
  </ul>


  <p>Runbook이 다시 시작될 때 Runbook은 일시 중단 전과 다른 작업자에서 다시 시작될 수 있다는 점에 유의해야 합니다.&nbsp; 따라서 Runbook이 존재할 것으로 예상되는 모든 로컬 상태를 다시 만들어야 합니다. 예를 들어 이는 runbook이 검사점 이후 언제든지 Azure와 연결해야 하는 경우 로컬 파일에서 상태를 설정하는 커넥트-Azure, Add-AzureAccount, Select-AzureSubscription 또는 Set-AzureSubscription과 같은 cmdlet을 각 검사점 후에 다시 호출해야 함을 의미합니다.</p>


  <h3>요약</h3>


  <p>여기서 볼 수 있듯이 PowerShell 워크플로의 이 주요 기능을 활용하고 중단 복원력 있는 Runbook을 만들려면 Runbook에 검사점을 추가하는 것이 중요합니다.&nbsp; 검사점 추가는 쉽습니다.&nbsp; Runbook을 작성하는 동안 약간의 미리 생각으로 예기치 않은 중단으로부터 장기 실행 및 비용이 많이 드는 작업을 보호하고 강력하고 신뢰할 수 있는 Runbook을 만들 수 있습니다.</p>
