### YamlMime:Yaml
ms.openlocfilehash: 732b9932970c10916b57a209c36f300d91f9adb1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139912484"
Slug: responding-to-role-topology-changes
Title: 역할 토폴로지 변경에 응답
Summary: 채택 프로그램 Insights 시리즈에서는 고객이 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다.
Content: '<p><i>채택 프로그램 Insights 시리즈는 고객이 Windows Azure Platform에 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다. 이 게시물은 톰 홀랜더에 의해.</i></p>  <p>과거에 웹 팜에서 실행 중인 애플리케이션이 있고 더 많은 용량이 필요한 경우 추가 물리적 컴퓨터를 구입, 설치 및 구성해야 했습니다. 이 프로세스는 몇 달이 걸리고 잠재적으로 수천 달러의 비용이 들 수 있습니다. 반면, 애플리케이션을 Windows Azure에 배포하는 경우 이 동일한 프로세스에는 간단한 구성 변경이 포함되며 몇 분 안에 추가 인스턴스를 배포할 수 있으며 이러한 인스턴스를 사용하는 동안 시간당 증분 요금만 지불하면 됩니다. 가변적 또는 부하가 증가하는 애플리케이션의 경우 이는 Windows Azure 플랫폼의 엄청난 이점입니다.</p>  <p>역할 인스턴스가 상태 비주거 및 독립으로 설계된 경우 일반적으로 Azure가 환경의 구성을 처리하고 새 인스턴스를 사용할 수 있는 즉시(또는 이전 인스턴스가 제거되는 즉시) 역할을 확장 또는 축소(<i>토폴로지 변경</i>으로 Azure에서 알려짐 Windows)-하는 시간을 처리하는 코드를 작성할 필요가 없습니다.  부하 분산 장치가 다시 구성되고 애플리케이션이 정상적으로 계속 실행됩니다. 그러나 일부 고급 시나리오에서는 인스턴스가 실행 중인 전체 컨텍스트를 인식해야 할 수 있으며 역할 토폴로지 변경 시 특정 작업을 수행해야 할 수 있습니다. </p>  <p>이 게시물은 Windows Azure가 이벤트를 발생시키고 이러한 변경 중에 역할 환경에 대한 정보를 전달하는 방법을 설명하여 토폴로지 변경에 응답할 수 있는 애플리케이션을 작성하는 데 도움이 됩니다. 이 지침은 웹 포털을 통해, <a target="_blank" href="https://msdn.microsoft.com/en-us/library/ee460799.aspx">서비스 관리 API</a> 를 통해 또는 <a target="_blank" href="https://msdn.microsoft.com/en-us/magazine/gg232759.aspx">자동 성능 기반 크기 조정</a>을 사용하여 애플리케이션의 크기를 수동으로 조정하든 관계없이 적용됩니다.</p>  <h4>역할 환경 메서드 및 이벤트</h4>  <p>환경 변경에 응답하는 코드를 작성할 수 있는 5개의 주요 위치가 있습니다. 이 중 두 가지인 <b>OnStart</b> 및 <b>OnStop</b>은 기본 역할 클래스(기본적으로 <b>WebRole</b> 또는 <b>WorkerRole</b>이라고 함)에서 재정의할 수 있는 <b>RoleEntryPoint</b> 클래스의 메서드입니다. 다른 세 가지는 구독할 수 있는 <b>RoleEnvironment</b> 클래스의 이벤트입니다. <b>변경</b>, <b>변경 </b>및 <b>중지</b>.</p>  <p>이러한 메서드의 목적은 이름에서 매우 명확합니다.</p>  <ul>  <li>인스턴스가 처음 시작될 때 <b>OnStart</b>가 호출됩니다.</li>  <li><b>역할</b> 환경에 대한 내용이 변경되려고 할 때 변경이 호출됩니다.</li>  <li><b>역할</b> 환경에 대한 내용이 변경된 경우 변경된 내용이 호출됩니다.</li>  <li><b>인스턴스가 중지</b> 될 때 중지가 호출됩니다.</li>  <li>인스턴스가 중지될 때 <b>OnStop</b>이 호출됩니다.</li>  </ul>  <p>모든 경우에 해당 작업이 발생하지 않도록 코드에서 수행할 수 있는 작업은 없지만 원하는 방식으로 응답할 수 있습니다. <b>Change</b> 이벤트의 경우 <b>e.Cancel = true</b>를 설정하여 구성 변경을 처리하기 위해 인스턴스를 재활용할지 여부를 선택할 수도 있습니다. </p>  <h4>내 애플리케이션에서 변경 및 변경이 실행되지 않는 이유는 무엇인가요?</h4>  <p>이 항목을 처음 살펴보기 시작했을 때 Windows Azure Compute Emulator(이전에는 개발 패브릭이라고 함) 및 클라우드에서 다음과 같은 비정상적인 동작을 관찰했습니다.</p>  <ul>  <li><b>변경 </b>및 <b>변경된</b> 이벤트는 구성을 변경할 때 인스턴스에서 발생하지 않았습니다.</li>  <li><b>RoleEnvironment.CurrentRoleInstance.Role.Instances.Count</b> 는 역할에 많은 인스턴스가 있는 경우에도 항상 1을 반환했습니다.</li>  </ul>  <p>이 MSDN 문서에 설명된 대로 역할이 정의된 내부 엔드포인트가 없는 경우 예상되는 동작입니다. 따라서 솔루션은 다음과 같이 ServiceDefinition.csdef 파일에서 내부 엔드포인트를 정의하는 것입니다.</p>  <p>&lt;엔드포인트&gt;<br>&nbsp;&lt;InternalEndpoint name="InternalEndpoint1" protocol="http" /&gt;<br>&lt;/Endpoints&gt; </p>  <h4>어떤 이벤트가 언제 어디서 발생합니까?</h4>  <p>이벤트의 이름은 매우 설명적인 것처럼 보이지만 배포를 확장 및 축소할 때의 정확한 동작이 반드시 예상할 수 있는 것은 아닙니다. 다음 다이어그램에서는 단일 역할이 포함된 예제 시나리오에서 발생하는 이벤트를 보여 줍니다. 2개의 인스턴스가 처음에 배포되고, 배포가 4개의 인스턴스로 확장된 다음, 다시 3으로 축소되고, 마지막으로 배포가 중지됩니다.&nbsp; </p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8171.Topology1.png" border="0"></p>  <p>이 다이어그램에는 다음과 같은 몇 가지 흥미로운 사항이 있습니다.</p>  <ul>  <li>1.<b>변경</b> 및 <b>변경된</b> 이벤트는 시작하거나 중지하지 않는 인스턴스에 대해서만 발생합니다. 인스턴스를 추가하는 경우 이러한 이벤트는 새 인스턴스에서 실행되지 않으며 인스턴스를 제거하는 경우 이러한 이벤트는 종료되는 인스턴스에서 실행되지 않습니다.</li>  <li>2.<b>변경</b> 이벤트에서 <b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b>는 <i>대상</i> 역할 인스턴스가 아닌 <i>원래</i> 역할 인스턴스를 반환합니다. 현재 대상 역할 인스턴스를 찾을 수 있는 방법은 없습니다.</li>  <li>3.<b>Changed</b> 이벤트에서 <b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b>는 <i>원래</i> 역할 인스턴스가 아닌 <i>대상</i> 역할 인스턴스를 반환합니다. 원래 인스턴스에 대해 알아야 하는 경우 <b>변경</b> 이벤트가 발생할 때 이 정보를 저장하고 <b>Changed</b> 이벤트에서 액세스할 수 있습니다(이러한 이벤트는 항상 순서대로 실행되기 때문에).</li>  <li>4. 인스턴스가 시작되면 많은 인스턴스가 아직 시작되지 않은 경우에도 <b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b> 는 <i>대상</i> 역할 인스턴스를 반환합니다.</li>  <li>5. 인스턴스가 중지되면 <b>RoleEnvironment.CurrentRoleInstance.Role.Instances</b> 는 <i>원래</i> 역할 인스턴스를 반환합니다. 현재 대상 인스턴스에 대해 알아내는 방법은 없습니다. 또한 인스턴스가 종료되는 인스턴스를 확인할 수 있는 방법은 없습니다(ID 번호가 가장 높은 인스턴스일 필요는 없음). <b>중지</b> 및 <b>OnStop</b>이 호출되면 바로 그 것입니다. <b>변경이</b> 호출되면 그렇지 않습니다! </li>  </ul>  <p>위의 예제에서는 <b>변경</b> 이벤트가 취소되지 않았다고 가정했습니다( <b>예: Cancel = true</b>로 인해 구성 변경이 적용되기 전에 인스턴스가 다시 시작됨). 이 작업을 수행하도록 선택하면 발생하는 이벤트는 매우 다릅니다. <b>변경된</b> 이벤트는 전혀 발생하지 않지만 <b>중지, 중지</b> 됨 및 <b>OnStart</b> 는 발생합니다. 다음 다이어그램에서는 <b>변경</b> 이벤트가 취소된 경우 스케일 업 작업 중에 인스턴스 IN_0 수행되는 작업을 보여 있습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0675.Topology2.png" border="0"></p>  <p>이러한 이벤트에 대한 마지막 참고 사항: 다이어그램에 표시되지는 않았지만 서비스에 여러 역할이 있고 단일 역할에서 토폴로지 변경을 수행하는 경우 인스턴스 수가 변경되지 않은 모든 역할에서 <b>변경 </b>및 <b>변경된</b> 이벤트가 발생합니다. 다음과 유사한 코드를 사용하여 현재 역할에 대해 토폴로지 변경이 발생했는지 또는 다른 토폴로지 변경이 발생했는지 이벤트 데이터에서 알 수 있습니다.</p>  <p>private void RoleEnvironmentChanging(object sender, RoleEnvironmentChangingEventArgs e)<br>{<br>&nbsp;&nbsp;&nbsp;var changes = ch in e.Changes.OfTypeRoleEnvironmentTopologyChange&lt;&gt;()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 여기서 ch. RoleName == RoleEnvironment.CurrentRoleInstance.Role.Name<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select ch;<br>&nbsp;&nbsp; if(변경합니다. Any())<br>&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 현재 역할에서 토폴로지 변경이 발생했습니다.<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;다른<br>&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 다른 역할에서 토폴로지 변경이 발생했습니다.<br>&nbsp;&nbsp;&nbsp;}<br>}</p>  <h4>추가 정보 보기</h4>  <p><b>RoleEnvironment </b>및 위에 나열된 이벤트는 서비스 변경에 대한 좋은 정보를 많이 제공하지만 API가 제공하는 것보다 더 많은 정보가 필요할 수 있습니다. 예를 들어, 한 번은 각 인스턴스가 이미 시작된 다른 인스턴스와 해당 IP 주소가 무엇인지 알아야 하는 Azure 애플리케이션에서 작업했습니다. Azure 테이블을 활용하여 실행 중인 인스턴스에 대한 주요 정보를 기록하도록 선택했습니다. 인스턴스가 시작되거나 중지될 때마다 다른 모든 인스턴스에서 읽을 수 있는 이러한 세부 정보를 테이블에 기록해야 했습니다. 이 솔루션은 잘 작동했지만, 비정상적인 종료로 인해 테이블에 부실 또는 잘못된 데이터가 포함될 수 있는 경우를 처리하기 위해 신중하고 방어적인 코딩이 필요했습니다. 따라서 반드시 필요한 경우에만 이와 같은 솔루션을 빌드해야 합니다.</p>  <h3>결론</h3>  <p>필요에 따라 애플리케이션 크기를 조정하는 기능은 Azure와 패브릭 컨트롤러가 <b>RoleEntryPoint</b> 메서드 및 <b>RoleEnvironment</b> 이벤트를 통해 역할 환경의 현재 상태 및 변경 사항에 대한 자세한 정보를 제공할 수 Windows 큰 이점 중 하나입니다. 대부분의 애플리케이션에서는 크기 조정 작업을 처리하기 위해 멋진 코드를 입력할 필요가 없지만 더 복잡한 애플리케이션을 처리하는 경우 이 정보가 애플리케이션에서 토폴로지 변경을 효과적으로 처리하는 방법을 이해하는 데 도움이 되기를 바랍니다. </p>  <p><iframe scrolling="no" frameborder="0" src="https://www.facebook.com/plugins/like.php?href=https://blogs.msdn.com/b/windowsazure/archive/2011/01/04/responding-to-role-topology-changes.aspx;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50" style="width: 300px; height: 50px; visibility: hidden; overflow: hidden;"></iframe><br>트윗  <script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>  </p>'
