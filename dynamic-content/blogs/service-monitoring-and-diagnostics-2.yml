### YamlMime:Yaml
ms.openlocfilehash: c671edc2db74cb9d2075cf3df59f366bd00e2144
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900729"
Slug: service-monitoring-and-diagnostics-2
Title: 서비스 모니터링 및 진단
Summary: '메트릭을 높게 유지하려면 항상 측정해야 합니다. 이 것의 핵심은 원격 분석입니다. 앱의 성능에 대해 수집되는 데이터입니다. '
Content: >-
  기업은 소프트웨어를 실행하고 소프트웨어는 비즈니스를 실행합니다. 코드는 은행이나 서점을 만들거나 깰 수 있습니다. 그리고 그것이 다운되거나 심하게 수행되면 고객이 다른 곳으로 이동함에 따라 중단 기간뿐만 아니라 그 이후로도 잃을 수 있습니다. 사용자가 웹 사이트에 문제가 있는 경우 즉시 알고 있어야 하며 대부분의 고객이 알아차리기 전에 문제를 고정하고 해결해야 합니다.


  이것은 단지 원유 가용성에 관한 것이 아닙니다. 예, 사이트가 다운되면 매우 나쁘고 일반적인 SLA는 99.999%의 가용성을 요구합니다. 그러나 그것은 또한 응답성에 관한 것입니다. <a href="https://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales">한 연구에 따르면</a> 1s의 저하는 아마존 $1.6B의 비용이 들고 0.4s는 Google 8M 쿼리를 잃게 됩니다. 이러한 사이트는 데이터 센터 중복성, 콘텐츠 배달 네트워크, 비동기 렌더링 등 인식된 응답 시간을 높게 유지하기 위해 모든 종류의 전술을 사용합니다.


  메트릭을 높게 유지하려면 항상 측정해야 합니다. 이 것의 핵심은 원격 분석입니다. 앱의 성능에 대해 수집되는 데이터입니다. 분석 도구는 앱의 성능 및 사용자가 앱으로 수행하는 작업 및 특정 인시던트에 대한 모든 종류의 차트를 보여 줍니다. 또한 앱이 너무 많은 예외를 throw하거나, 느리게 실행하거나, 완전히 사라지는 경우 침대에서 나가는 경고를 설정할 수 있습니다.


  일반적인 <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">SCRUD</a> 애플리케이션에 대한 모니터링 시나리오는 다음 두 가지 주요 유형으로 제공됩니다.

  <blockquote><span style="text-decoration: underline;">가용성</span>:

  <ul>
   <li><b>그것은 최대인가요?</b> – 고객이 내 서비스에 액세스할 수 없는 경우 즉시 당황하고 싶습니다.</li>
   <li><b>안정성 –</b> 파이프라인에서 손실된 데이터가 있나요?</li>
  </ul>

  가용성은 최종 사용자 영향과 관련된 공용 서비스 수준 계약에 영향을 줍니다. "난 그냥 지불 하 고 당신의 시스템 내려 갔다 – 당신은 내 돈으로 무슨 짓을 했습니까?" 또는 "이 티켓을 가져와야 하지만 시스템이 다운되었습니다."


  <span style="text-decoration: underline;">성능</span>:

  <ul>
   <li><b>응답성: </b> 사용자가 페이지를 실제로 사용할 수 있는 기간(검색| 읽기 작업)?</li>
   <li><b>대기 시간이:</b> 사용자가 데이터를 처리하고 저장하는 왕복 기간(만들기| 업데이트| 삭제)?</li>
  </ul>

  </blockquote>

  <blockquote>성능은 일반적으로 운영 수준 계약에 영향을 줍니다. 예를 들어 데이터 액세스 계층 팀은 쿼리의 99%에 대해 1초 동안 응답을 &lt; 보장할 수 있습니다.</blockquote>

  그렇다면 원격 분석을 어떻게 사용하나요? 감지, 심사, 진단이라는 세 가지 프로세스의 파이프라인에 대해 살펴보겠습니다.

  <h2>Detect</h2>

  문제 감지는 예술입니다. 완전히 자동화하기는 어렵지만 일반적인 목표는 모든 LSI(라이브 사이트 인시던트)의 80%를 자동으로 검색해야 한다는 것입니다. 나머지 20%는 데이터를 분석하거나 고객 피드백을 기반으로 하는 정렬입니다.


  자동 검색은 제품 및 조직의 완성도에 따라 진행됩니다.

  <ul>
   <li><b>사이트 가용성</b>: ping 테스트는 전 세계 지점에서 정기적으로 사이트로 요청을 보내 응답 시간, 반환 코드 및 일부 콘텐츠를 측정합니다. 세 번의 테스트 실패는 심각한 일이 일어나고 있음을 시사합니다.</li>
   <li><b>리소스 가용성</b>: 좀 더 정교한 웹 테스트는 항목을 선택하고 거의 구매하는 등의 동작을 거치면서 주요 사용자 스토리를 시뮬레이션합니다. 이러한 테스트는 백 엔드 서비스가 실행되고 있는지 확인합니다. 그러나 다른 한편으로는 실제 데이터를 엉망으로 만들고 싶지 않으므로 모든 것을 테스트할 수는 없습니다.</li>
   <li><b>사용자 가용성</b>: 실제 사용자 요청의 응답 시간 및 실패율은 서버 및 클라이언트 애플리케이션의 계측을 통해 측정할 수 있습니다. 이렇게 하면 실제 사용자 환경을 훨씬 더 잘 알 수 있습니다. 그래도 결과를 주의 깊게 검토해야 합니다. 모든 HTTP 요청의 1%가 실패하면 너무 나쁘지 않을 수 있습니다. 실패하는 '결제하려면 여기를 클릭'하는 단추가 발견될 때까지.</li>
  </ul>

  하지만 80% 자동화가 목표입니다. 원격 분석의 수동 탐색부터 시작하여 시스템의 일반적인 동작, 즉 부하에서 응답 시간이 어떻게 달라지는지, 예외가 발생하는 빈도, 요청이 가장 느리거나 오류가 발생하기 쉬운 요청에 익숙해집니다. 이 기간 동안 비정상적인 동작이 어떻게 표시되는지 알아봅니다. 라이브 사이트 인시던트가 발생하면 변경된 메트릭을 분석하여 패턴 인식을 자동화하고 나중에 해당 유형의 문제를 감지하는 방법을 이해할 수 있습니다.

  <h2>심사</h2>

  LSI는 타일이 느리게 로드되는 것부터 완전한 중단까지 무엇이든 될 수 있습니다. 가장 먼저 해야 할 일은 나쁜 일이 얼마나 나쁜지 알아내는 것입니다. 아무도 홈페이지를 볼 수 없다면 그것은 재앙입니다. 일부 사용자에게 "최근에 본 항목"이 표시되지 않는 경우 버그입니다. 문제의 규모는 문제를 해결하는 데 전념하는 리소스를 결정하며, 초기 심사는 운영 비용에 큰 영향을 미칩니다. 따라서 모든 기본 비즈니스 시나리오를 완료할 수 없는 고객의 수를 알아야 합니다. 사용자 가용성 수준의 자동화는 영향을 받는 사용자 수를 계산하는 데 필요한 계측을 제공합니다.


  심각도 점수는 처음에 LSI를 검색하는 자동화에 의해 할당되고, 이후에 조사하는 DevOps 팀에서 검토할 수 있습니다. 고객 영향은 실패한 요청과 연결된 고유 사용자 수를 계산하여 확인할 수 있습니다.


  시스템에서 로그인하는 사용자에게 서비스를 제공하는 경우 로그를 분석하여 문제의 영향을 받은 사용자를 찾고 전체 사용자 모집단으로 문제를 에스컬레이션하지 않고도 긴밀한 통신 루프를 유지할 수 있습니다. 많은 사용자가 버그가 없는 서비스를 사용하는 것보다 문제에 대한 좋은 의사 소통을 소중히 여긴다.

  <h2>진단</h2>

  이제 원인에 대한 사냥이 시작됩니다. 진단은 버그 수정과 동일하지 않습니다. 코드 결함으로 인해 모든 문제가 발생하는 것은 아닙니다. 일부는 구성 또는 스토리지 또는 기타 리소스와 관련된 문제이며, 일부는 사용하는 다른 서비스의 문제입니다.


  그리고 당신은 그것이 누구의 문제인지 알아야합니다. 프런트 엔드 개발자는 큐로 가는 주문을 확인한다고 주장하고 작업자 개발자는 들어오는 주문이 성공적으로 처리되고 있다고 말합니다. 그러나 여전히 고객은 주문을 할 수 없으므로 어딘가에 문제가 있어야합니다.


  통신 경계에 대한 정확한 원격 분석이 조사를 계속해야 하는 사용자를 식별하는 데 도움이 된다는 것을 이해하는 것이 중요합니다.


  문제를 찾는 데 도움이 되도록 이 원격 분석은 매우 효과적입니다.

  <ul>
   <li><strong>요청 모니터링</strong> 은 요청 및 모든 실패 응답을 계산하고 응답 시간을 측정합니다. 요청 빈도가 증가할 때 응답 시간이 갑자기 증가하는 경우 메모리 또는 기타 리소스 문제가 의심될 수 있습니다.</li>
   <li><strong>용량</strong> – 메모리, I/O 속도 및 CPU를 측정하는 성능 카운터로, 리소스 사용량을 직접 볼 수 있습니다.</li>
   <li><strong>종속성 모니터링</strong>- 외부 서비스(데이터베이스, REST 서비스 등)에 대한 호출을 계산하고 각 호출의 성공 또는 실패와 응답하는 데 걸리는 시간을 기록합니다. 서비스에 대한 요청이 4.2초가 걸렸고 그 중 4초가 웨어하우스 서버에 있었다는 것을 알 수 있다면 문제가 어디에 있는지 알 수 있습니다.</li>
   <li><strong>로그 추적</strong> <strong>이벤트는</strong> 프로세스의 핵심 요소를 기록하고 내부 인터페이스에서 문제를 추적하는 데 특히 유용합니다. 사용자가 주문을 할 수 없는 경우 프런트 엔드 또는 백 엔드 문제인가요?</li>
   <li><strong>배포</strong> <strong>레코드</strong> 는 시스템 업데이트와 갑작스러운 문제 발생의 상관 관계를 지정하는 데 도움이 됩니다.</li>
  </ul>

  &nbsp;


  <a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-monitor-performance-live-website-now/"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="clip_image001" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image001.png" alt="clip_image001" width="504" height="152" border="0" /></a>


  진단의 역할은 ASAP를 수정, 테스트 및 해제해야 하는 코드 결함인지 여부를 식별하는 것입니다. 또는 스케일 업으로 해결할 수 있는 리소스 문제 또는 외부 서비스에 문제가 있습니다.

  <h2>요약</h2>

  라이브 서비스를 성공적으로 운영하는 것은 흥미롭고 어려운 작업입니다. 비효율성을 제거하고 민첩성을 개선하기 위해 프로세스 분야 및 도구가 필요합니다. 조직에서 지속적인 배포, A/B 테스트 및 기타 민첩한 사례를 채택함에 따라 애플리케이션 수명 주기 관리 및 애플리케이션 성능 관리 분야를 연속 DevOps 프로세스로 통합하는 솔루션이 분명히 필요합니다.


  Microsoft는 <a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-platforms/">.NET/Java/Node.JS/Python/Ruby/PHP/ObjectiveC</a>용 IDE(<a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-start-monitoring-app-health-usage/">예: Visual Studio</a>, <a href="https://azure.microsoft.com/en-us/documentation/articles/app-insights-java-eclipse/">Eclipse</a>)부터 Azure 플랫폼(<a href="https://azure.microsoft.com/en-us/documentation/articles/insights-perf-analytics/">Azure 웹 사이트, VM</a>, 모바일 및 클라우드 서비스) 및 모니터링(<a href="https://azure.microsoft.com/en-us/services/application-insights/">애플리케이션 Insights</a>)을 통해 개발 주기의 시작부터 APM 원격 분석을 통합하는 데 도움이 되는 제품을 제공합니다.


  <strong>추가 읽기: </strong> 분산 시스템 모니터링에 대한 넷플릭스의 훌륭한 블로그와 <a href="https://blogs.msdn.com/b/bharry/archive/2013/10/14/how-do-you-measure-quality-of-a-service.aspx">QoS 모니터링</a>에 대한 브라이언 해리의 블로그
