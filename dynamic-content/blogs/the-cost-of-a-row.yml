### YamlMime:Yaml
ms.openlocfilehash: 405cf3371ff708217af73c682a70e749da345dfc
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907034"
Slug: the-cost-of-a-row
Title: 행 비용
Summary: '[이 문서는 SQL Azure 팀에서 제공했습니다.] 이전 블로그 게시물에서 적용된 인덱스의 비용을 계산하여 적용된 인덱스의 성능을 평가할 수 있는 방법을 설명했습니다.'
Content: "<p>[이 문서는 SQL Azure 팀에서 제공했습니다.]</p><p>이전 블로그 게시물에서 적용된 인덱스의 비용을 계산하는 방법을 살펴보아 적용된 인덱스의 성능이 월별 비용의 가치가 있는지 평가할 수 있었습니다. 이 블로그 게시물에서는 Transact-SQL 사용하여 테이블의 행 평균 비용을 계산합니다.</p>  <p>Imagine 식당을 검토하고 웹 페이지에서 광고 공간을 판매하여 수익을 창출하는 웹 사이트를 운영하고 있음을 나타냅니다. 광고 엔진은 각 검토에 대해 매월 수익을 얼마나 벌었는지 출력할 수 있습니다. 각 리뷰가 스토리지에서 비용이 얼마나 드는지 알아내는 것이 좋지 않습니까? SQL Azure 통해 우리는 그렇게 할 수 있습니다.</p>  <h2>SQL Azure 가격 책정</h2>  <p>현재 SQL Azure 매월 기가바이트당 $9.99의 요금이 부과됩니다(공식 가격은 여기에서 확인할 수 있음). 이는 저장하려는 데이터의 실제 크기가 데이터베이스의 상한 크기가 아닌 범위의 비용입니다. 즉, 1GB 웹 버전 데이터베이스에 몇 메가바이트만 저장하는 경우 비용은 한 달에 $9.99입니다. 범위의 최상위 측면은 1, 5, 10, 20, 30, 40 및 50기가바이트입니다. 데이터를 저장하기 위해 바이트당 비용을 낮추는 크기에 가깝습니다. 다음은 바이트당 비용을 계산하는 Transact-SQL 문입니다.</p>  <pre class=\"csharpcode\"><span class=\"kwrd\">DECLARE</span> @SizeInBytes bigint  <span class=\"kwrd\">SELECT</span> @SizeInBytes =  (<span class=\"kwrd\">SUM</span>(reserved_page_count) * 8192)      <span class=\"kwrd\">FROM</span> sys.dm_db_partition_stats    <span class=\"kwrd\">DECLARE</span> @Edition sql_variant  <span class=\"kwrd\">SELECT</span>  @Edition =DATABASEPROPERTYEX ( DB_Name() , <span class=\"str\">'Edition'</span> )    <span class=\"kwrd\">SELECT</span>    (<span class=\"kwrd\">CASE</span>       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 1 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 9.99 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 5 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 49.95 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 10 <span class=\"kwrd\">THEN</span> 99.99        <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 20 <span class=\"kwrd\">THEN</span> 199.98      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 30 <span class=\"kwrd\">THEN</span> 299.97                   <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 40 <span class=\"kwrd\">THEN</span> 399.96                    <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 50 <span class=\"kwrd\">THEN</span> 499.95                        <span class=\"kwrd\">END</span>) / @SizeInBytes</pre>      <h2>행 크기 파악</h2>    <p>int, <b>bigint</b>, <b>float</b> 등과 같은 행<b>에서</b> 데이터 형식을 사용하는 경우... 이들은 모두 고정된 크기를 가지고 있으며, 사용하는 스토리지의 양을 쉽게 계산할 수 있습니다. 그러나 <b>varchar(max)</b> 와 같은 가변 크기 필드를 사용하는 경우 테이블의 모든 행에 대해 단일 행 크기가 없으므로 각 행은 저장되는 항목에 따라 달라집니다. 이러한 이유로 테이블의 평균 행 크기를 사용하여 행 비용을 계산하려고 합니다.</p>    <p>클러스터형 인덱스(테이블의 기본 스토리지)의 스토리지와 함께 해당 테이블에 비클러스터형 인덱스의 비용을 포함해야 합니다. 이러한 인덱스는 전반적인 성능을 향상하기 위해 데이터를 다시 정렬합니다. 비클러스터형 인덱스 크기에 대한 이 블로그 게시물을 참조하세요.</p>    <p>다음은 데이터베이스의 모든 테이블에 대한 행당 월별 비용을 계산하는 Transact-SQL입니다.</p>    <pre class=\"csharpcode\"><span class=\"kwrd\">DECLARE</span> @SizeInBytes bigint  <span class=\"kwrd\">SELECT</span> @SizeInBytes =  (<span class=\"kwrd\">SUM</span>(reserved_page_count) * 8192)      <span class=\"kwrd\">FROM</span> sys.dm_db_partition_stats    <span class=\"kwrd\">DECLARE</span> @Edition sql_variant  <span class=\"kwrd\">SELECT</span>  @Edition =DATABASEPROPERTYEX ( DB_Name() , <span class=\"str\">'Edition'</span> )    <span class=\"kwrd\">DECLARE</span> @CostPerByte <span class=\"kwrd\">float</span>    <span class=\"kwrd\">SELECT</span>    @CostPerByte = (<span class=\"kwrd\">CASE</span>       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 1 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 9.99 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 5 <span class=\"kwrd\">THEN</span> (<span class=\"kwrd\">CASE</span> @Edition <span class=\"kwrd\">WHEN</span> <span class=\"str\">'Web'</span> <span class=\"kwrd\">THEN</span> 49.95 <span class=\"kwrd\">ELSE</span> 99.99 <span class=\"kwrd\">END</span>)       <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 10 <span class=\"kwrd\">THEN</span> 99.99        <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 20 <span class=\"kwrd\">THEN</span> 199.98      <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 30 <span class=\"kwrd\">THEN</span> 299.97                   <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 40 <span class=\"kwrd\">THEN</span> 399.96                    <span class=\"kwrd\">WHEN</span> @SizeInBytes/1073741824.0 &lt; 50 <span class=\"kwrd\">THEN</span> 499.95                        <span class=\"kwrd\">END</span>)  / @SizeInBytes</pre>      <pre class=\"csharpcode\"><span class=\"kwrd\">SELECT</span>             sys.objects.name,        <span class=\"kwrd\">sum</span>(reserved_page_count) * 8192 <span class=\"str\">'Bytes'</span>,         row_count <span class=\"str\">'Row Count'</span>,          (<span class=\"kwrd\">CASE</span> row_count <span class=\"kwrd\">WHEN</span> 0 <span class=\"kwrd\">THEN</span> 0 <span class=\"kwrd\">ELSE</span>         (<span class=\"kwrd\">sum</span>(reserved_page_count) * 8192)/ row_count <span class=\"kwrd\">END</span>)          <span class=\"str\">'Bytes Per Row'</span>,        (<span class=\"kwrd\">CASE</span> row_count <span class=\"kwrd\">WHEN</span> 0 <span class=\"kwrd\">THEN</span> 0 <span class=\"kwrd\">ELSE</span>          ((<span class=\"kwrd\">sum</span>(reserved_page_count) * 8192)/ row_count)           * @CostPerByte <span class=\"kwrd\">END</span>)          <span class=\"str\">'Monthly Cost Per Row'</span>  <span class=\"kwrd\">FROM</span>             sys.dm_db_partition_stats, sys.objects   <span class=\"kwrd\">WHERE</span>             sys.dm_db_partition_stats.object_id = sys.objects.object_id   <span class=\"kwrd\">GROUP</span> <span class=\"kwrd\">BY</span> sys.objects.name, row_count      </pre>      <p>SQL Azure 로드된 Adventure Works 데이터베이스에 대해 이 작업을 실행하면 다음 결과를 얻을 수 있습니다.</p>    <p><a href=\"\"><img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"clip_image001\" border=\"0\" alt=\"clip_image001\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3515.clip_5F00_image001_5F00_thumb_5F00_7820BCB1.png\" width=\"571\" height=\"261\"></a></p>    <p>주의해야 할 한 가지는 데이터베이스의 각 제품이 한 달에 10센트의 저장 비용이 들고 각 판매 주문 헤더는 5센트의 비용이 든다는 것입니다. 이렇게 하면 며칠 후 오프사이트에서 판매 정보를 보관하는 방법, 스토리지를 상쇄하기 위한 판매당 트랜잭션 비용, 판매되지 않는 사이트에서 제품을 정리하는 방법에 대한 좋은 인사이트를 얻을 수 있습니다.</p>    <p>또 다른 고려 사항은 Adventure Works 데이터베이스 데이터가 약 3메그에 대해 매우 작다는 것입니다. 데이터가 증가함에 따라(1기가바이트 위쪽에 가까워지면) 각 바이트를 저장하는 비용이 감소합니다. 따라서 Adventure Works 데이터베이스에서 제품을 추가하면 1기가바이트 미만인 한 각 제품 행에 대한 스토리지 비용이 줄어듭니다. 즉, 바이트 저장소의 비용을 최소화하기 위해 데이터베이스를 최대값으로 채웁니다.</p>    <h2>고지 사항</h2>    <p>SQL Azure 가격과 향후 최대 데이터베이스 크기가 변경될 수 있습니다. 인덱스 비용이 정확한지 확인하기 위해 제공된 쿼리와 현재 비용을 비교해야 합니다.</p>    <h2>요약</h2>    <p>동일한 작업을 수행할 수 있는 더 나은 방법이 있나요? 아래의 의견에 게시합니다. 질문, 우려 사항, 의견이 있나요? 아래에 게시하고 우리는 그들을 해결하기 위해 노력할 것입니다.</p>"
