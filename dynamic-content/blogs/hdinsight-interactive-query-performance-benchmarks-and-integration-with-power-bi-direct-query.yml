### YamlMime:Yaml
ms.openlocfilehash: f0c06b4aa783793f56f2c0263cbe9e41c7543183
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905528"
Slug: hdinsight-interactive-query-performance-benchmarks-and-integration-with-power-bi-direct-query
Title: 'Azure HDInsight 성능 벤치마킹: 대화형 쿼리, Spark 및 Presto'
Summary: 대규모의 빠른 SQL 쿼리 처리&nbsp;는 종종 고객에게 중요한 고려 사항입니다. 이 블로그 게시물에서는 업계 표준 TPCDS를 사용하여 HDInsight Interactive Query, Spark 및 Presto를 비교합니다.
Content: >-
  <p>대규모의 빠른 SQL 쿼리 처리는 종종 고객에게 중요한 고려 사항입니다. 이 블로그 게시물에서는 TPC-DS 벤치마크에서 파생된 업계 표준 벤치마크를 사용하여 HDInsight Interactive Query, Spark 및 Presto를 비교합니다. 이러한 벤치마크는 특별한 최적화 없이 기본 HDInsight 구성을 사용하여 실행됩니다. 이러한 벤치마크를 실행하려는 고객의 경우 GitHub 설명된 <a href="https://github.com/hdinsight/tpcds-hdinsight" target="_blank">간편한 사용 단계를</a> 따르세요.</p>


  <h2>결과 요약</h2>


  <ul>
   <li>HDInsight 대화형 쿼리는 Spark보다 빠릅니다.</li>
   <li>HDInsight Spark는 Presto보다 빠릅니다.</li>
   <li>데이터를 ORC 또는 Parquet으로 변환하지 않고 대화형 쿼리의 텍스트 캐싱은 웜 Spark 성능과 동일합니다.</li>
   <li>대화형 쿼리는 TPC-DS 벤치마크&nbsp;에서 파생된 모든 TPCDS 99 쿼리를 100TB 규모로 수정할 수 있는 유일한 엔진이므로 대규모 데이터에서 실행하는 데 가장 적합합니다.</li>
   <li>대화형 쿼리는 높은 동시성으로 잘 구성됩니다.</li>
  </ul>


  <h2>TPCDS 정보</h2>


  <p>TPC-DS(TPC 벤치마크 DS)는 쿼리 및 데이터 유지 관리를 포함하여 의사 결정 지원 시스템의 일반적으로 적용 가능한 여러 측면을 모델로 하는 의사 결정 지원 벤치마크입니다. TPC-DSbenchmark&nbsp; 표준에 따라 벤치마크는 범용 의사 결정 지원 시스템으로 성능에 대한 대표적인 평가를 제공합니다. 벤치마크 결과는 단일 사용자 모드에서 쿼리 응답 시간을 측정하고, 다중 사용자 모드의 쿼리 처리량 및 지정된 하드웨어, 운영 체제 및 데이터 처리 시스템 구성에 대한 데이터 유지 관리 성능을 제어되고 복잡하며 다중 사용자 의사 결정 지원 워크로드에서 측정합니다. TPC 벤치마크의 목적은 업계 사용자에게 관련성이 있는 객관적인 성능 데이터를 제공하는 것입니다. TPC-DS 버전 2를 사용하면 빅 데이터 시스템과 같은 새로운 기술이 벤치마크를 실행할 수 있습니다.&nbsp; <strong>감사되지 않은 결과이므로 공식적으로 게시된 TPC-DS 결과와 비교할 수 없습니다.</strong></p>


  <h2>HDInsight 대화형 쿼리</h2>


  <p>HDInsight 대화형 쿼리를 사용하면 ZERO ETL(변환 &amp; 부하 추출)을 사용하여 빅 데이터에서 초고속 쿼리 결과를 가져올 수 있습니다.</p>


  <p>HDInsight의 대화형 쿼리는 (LLAP의 Hive) 지능형 캐싱, 핵심 엔진의 최적화 및 Azure 최적화를 활용하여 Azure Blob 및 Azure Data Lake Store와 같은 원격 클라우드 스토리지에서 매우 빠른 쿼리 결과를 생성합니다.</p>


  <h2>HDInsight에서 Spark, Presto 및 LLAP의 비교 성능</h2>


  <p>더 높은 규모의 Azure Blob Storage 계정*에서 실행되는 TPCDS 데이터에 대해 LLAP, Spark 및 Presto를 사용하여 이러한 테스트를 수행했습니다. 이러한 스토리지 계정은 이제 Blob Storage 계정 확장성에 10배 이상 증가합니다. 또한 지난 몇 개월 동안 <a href="https://hadoop.apache.org/docs/stable/hadoop-azure/index.html">WASB</a>(Windows Azure Storage Driver)의 <a href="https://issues.apache.org/jira/browse/HADOOP-14552" target="_blank">성능을 개선하는</a> 데 기여했으며, 그 결과 모든 HDInsight 워크로드의 성능이 향상되었습니다.&nbsp;</p>


  <p>표준 스토리지 계정이 용량, 수신/송신 및 요청 속도의 보급 한도를 초과하여 증가하도록 하려면 <a href="https://azure.microsoft.com/en-us/support/faq/">Azure 지원을</a> 통해 요청하세요.</p>


  <p>다양한 엔진이 동일한 데이터 및 메타데이터에 대해 발생할 수 있도록 공통 외부 Hive 메타스토어인 Azure SQL DB S2를 선택했습니다. 자세한 내용은 <a href="https://github.com/hdinsight/tpcds-hdinsight" target="_blank">데이터를 생성하고 파생된 TPC-DS 쿼리를 실행하는</a> 단계를 검토하세요.</p>


  <h2>HDInsight 구성</h2>


  <p>이러한 테스트에서는 비슷한 클러스터를 사용하여 LLAP, Spark 및 Presto를 실행했습니다.&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0fb2e92f-c136-402e-bc92-70ae802d6a7f.png"><img alt="config" border="0" height="75" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/70c3c544-630e-46f9-866c-b0d7460b1520.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="구성" width="618"></a></p>


  <p align="center"><em>참고: 기본 기본 구성을 사용하여 테스트를 수행하여 최적화, 특수 설정, 엔진에 대한 쿼리 변경 없이 수행되었습니다.&nbsp; </em></p>


  <p>아래 표에서는 모든 엔진에서 성공적으로 실행된 TPC-DS 벤치마크에서 파생된 45개의 쿼리를 사용합니다. 표시된 것처럼 LLAP는 Presto 또는 Spark보다 더 많은 쿼리를 실행할 수 있었습니다.</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/56ad4995-844e-490a-8883-d0844e25d563.png"><img alt="perfnew" border="0" height="418" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/54731fa9-f742-4b80-8fbf-0c43f2e55987.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="perfnew" width="910"></a></p>


  <p>&nbsp;</p>


  <p>위의 실행에서 볼 수 있듯이 ORC를 사용하는 LLAP는 다른 모든 엔진보다 빠릅니다. 더욱 흥미로운 관찰은<strong> 텍스트가 있는 LLAP도 매우 빠르다는 것입니다. Parquet 파일 형식의 Spark보다 훨씬 빠릅니다</strong>.&nbsp;&nbsp;&nbsp;</p>


  <p>Hadoop에 대한 빠른 분석은 항상 하나의 큰 캐치와 함께 제공되며, ORC 또는 parquet과 같은 열 형식으로 미리 변환해야 하며, 이는 주문형 컴퓨팅에 시간이 많이 걸리고 비용이 많이 들 수 있습니다. LLAP 동적 텍스트 캐시는 CSV 또는 JSON 데이터를 즉시 최적화된 메모리 내 형식으로 LLAP&rsquo;로 변환합니다. 캐싱은 동적이므로 사용자가 실행하는 쿼리에 따라 캐시되는 데이터가 결정됩니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/be58b812-92d6-4e09-ad6d-a6431d5b91c9.png"><img alt="llap" border="0" height="331" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5769fc9d-511b-41c0-8cf5-f49dd9ead18c.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="llap" width="640"></a></p>


  <p>&nbsp;</p>


  <p align="center"><em>HDInsight LLAP(대화형 쿼리) 아키텍처 </em></p>


  <p>또한 LLAP는 클러스터 메모리 DRAM 및 SSD를 활용하여 더 나은 성능을 제공했습니다. 캐시 풀은 클러스터 DRAM 및 SSD로 구성된 공동 풀입니다. 예를 들어 Azure의 D14V2 VM&rsquo;을 사용하면 112GB RAM과 800GB의 로컬 SSD를 얻을 수 있으므로 몇 개의 노드만 있으면 빠른 쿼리 성능을 위해 메모리에 테라바이트 단위의 데이터를 유지할 수 있습니다.</p>


  <h2>대화형 쿼리의 텍스트 캐싱</h2>


  <p>대화형 쿼리의 텍스트 캐싱은 빅 데이터 파이프라인에 대해 매우 다르게 생각하게 만드는 매우 흥미로운 개념입니다. 일반적으로 원시 형식으로 데이터를 수집한 후에는 데이터를 ORC, Parquet 또는 Avro와 같은 최적화된 파일 형식으로 변환해야 했습니다. 이러한 파일 형식은 사용자가 빅 데이터를 쿼리하는 동안 좋은 성능을 얻을 수 있도록 했습니다. 텍스트 캐싱을 사용하는 경우 원시 텍스트 및 json 성능은 ORC와 매우 유사하므로 빅 데이터 파이프라인에서 추가 단계를 수행할 필요가 없으므로 비용을 절감하고 더 빠르고 최신 쿼리 결과를 얻을 수 있습니다.&nbsp;&nbsp;&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5dc6af4a-d9a2-4ad0-bef1-e1cd417abc41.png"><img alt="conceptllap" border="0" height="397" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/739c51c7-b8a9-41d1-a236-d690598d7e40.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="conceptllap" width="640"></a>&nbsp;</p>


  <h2>100TB TPCDS 데이터에서 대화형 쿼리 실행</h2>


  <p>여러 공급업체가 웹을 통해 많은 벤치마크를 볼 때 한 가지 눈에 띄는 것은 해당 엔진이 최상의 결과를 생성하는 선택 쿼리 집합에만 집중한다는 것입니다. TPC-DS 벤치마크에서 파생된 99개의 쿼리를 모두 100TB 규모로 실행하기로 결정했으며 대화형 쿼리만 수정되지 않은 상태로 실행할 수 있었습니다. 쿼리의 41%가 30초 미만으로 반환되었고, 쿼리의 71%가 2분 미만으로 돌아왔습니다. 이 벤치마크는 대화형 쿼리가 빠르고 풍부한 SQL 있으며 특별한 노력 없이 훨씬 더 큰 규모 수준에서 확장된다는 것을 증명합니다.&nbsp;&nbsp;</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3e0b454e-d8b9-421d-aab7-8513e21706f5.png"><img alt="99queries" border="0" height="374" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d4cfa7c5-4ba3-461c-b748-773be1b6a9d7.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="99개 쿼리" width="640"></a></p>


  <h2>동시성</h2>


  <p>훨씬 향상된 세분화된 리소스 관리 및 선점이 도입되면서 대화형 쿼리(LLAP의 Hive)를 사용하면 동시 사용자가 더 쉽게 사용할 수 있습니다. 대화형 쿼리를 사용하는 경우 동시성에 대한 유일한 제한은 클러스터 리소스입니다. 클러스터를 확장하여 더 높은 수준의 동시성을 달성할 수 있습니다.</p>


  <p>동시성 성능을 테스트하기 위해 여러 동시성 수준을 사용했습니다. 데이터 세트의 경우 최대 동시성이 32로 설정된 32개의 작업자 노드 클러스터가 있는 1TB 데이터에 대해 99개의 TPCDS 쿼리를 다시 사용했습니다.</p>


  <p>테스트 1: 쿼리 99개 모두 실행, 한 번에 1개 - 동시성 = 1</p>


  <p>테스트 2: 쿼리 99개 모두 실행, 한 번에 2개 - 동시성 = 2</p>


  <p>테스트 3: 쿼리 99개 모두 실행, 한 번에 4개 - 동시성 = 4</p>


  <p>테스트 4: 쿼리 99개 모두 실행, 한 번에 8개 - 동시성 = 8</p>


  <p>테스트 5: 쿼리 99개 모두 실행, 한 번에 16개 - 동시성 = 16</p>


  <p>테스트 6: 쿼리 99개 모두 실행, 한 번에 32개 - 동시성 = 32</p>


  <p>테스트 7: 쿼리 99개 모두 실행, 한 번에 64개 - 동시성 = 64</p>


  <p><strong>결과:</strong> 위의 결과에 설명된 대로 대화형 쿼리는 동시 쿼리를 실행하기 위한 매우 최적화된 엔진입니다. 워크로드를 완료하는 데 가장 긴 시간은 단일 동시 쿼리를 사용한 것이었습니다.&nbsp;&nbsp;&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1350b8d3-dc8f-46b9-bfdc-d83f544ce968.png"><img alt="concurrent" border="0" height="352" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5984d784-9df3-46f2-b2bd-d5d1a4e66bbf.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="동시" width="640"></a></p>


  <h2>시간에 따른 Hive 및 성능 향상 비교</h2>


  <p>LLAP(Interactive Query) 성능을 Hive와 비교하는 것이 중요합니다. 커뮤니티에서 Hive의 성능을 높이기 위해 수행된 많은 작업과 Azure Storage 드라이버 성능을 개선하기 위해 수행한 작업 중 일부가 Windows. 2017년 1월에 Hive 1.2를 사용하여 TPC-DS 벤치마크에서 파생된 워크로드를 실행하는 데 200분이 걸렸으며, 스토리지 드라이버 개선으로 Hive는 이제 137분 만에 벤치마크를 실행할 수 있습니다. LLAP 캐시된 데이터를 사용하면 벤치마크가 49분 안에 완료됩니다. 이들은 인상적인 이득.</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ff4df44f-f013-4705-857b-3b6337c4d250.png"><img alt="hivecompare" border="0" height="330" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9bc5a196-2460-4de8-a6e1-e5912e991f38.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="hivecompare" width="640"></a></p>


  <p><strong>참고</strong>: 테스트 워크로드는 TPC-DS에서 파생됩니다.&nbsp; 얻은 모든 결과는 공식적으로 게시된 TPC-DS 결과와 비교할 수 없습니다.</p>


  <p>Power BI 직접 쿼리, Apache Zeppelin 및 기타 도구와 통합</p>


  <p>Power BI 이제 HDInsight Interactive Query 클러스터에 직접 연결하여 데이터 모델을 중간 캐시로 요구하지 않고도 데이터를 탐색하고 모니터링할 수 있습니다. 이렇게 하면 데이터에 대한 대화형 탐색이 제공되고 예약된 새로 고침 없이 시각적 개체가 자동으로 새로 고쳐집니다. 시작하는 방법에 대한 자세한 내용은 <a href="https://www.youtube.com/watch?v=5wnFzW07WNk&amp;t=93s" target="_blank">Power BI 비디오 HDInsight Interactive Query</a>를 시청하세요.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bc2c57dd-551c-4307-aa57-d261e75e676b.png"><img alt="Get Data" border="0" height="482" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4feb2c19-849b-46a4-9e61-14e43e27c90b.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="데이터 가져오기" width="444"></a></p>


  <p>HDInsight 대화형 쿼리는 많은 엔드포인트를 지원합니다. <a href="https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-connect-hive-zeppelin" target="_blank">Apache Zeppelin</a>, <a href="https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-visual-studio-tools-get-started#run-interactive-hive-queries" target="_blank">Visual Studio</a>, <a href="https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-for-vscode" target="_blank">Visual Studio Code</a>, <a href="https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-use-hive-ambari-view" target="_blank">Hive View</a> 및 <a href="https://docs.microsoft.com/en-us/azure/hdinsight/hadoop/apache-hadoop-use-hive-beeline" target="_blank">Beeline</a>을 사용하여 쿼리를 실행할 수도 있습니다.</p>


  <h2>요약</h2>


  <p>Azure HDInsight는 Microsoft의 완전 관리형 전체 스펙트럼 오픈 소스 분석 클라우드 서비스로, 대량의 데이터를 쉽고 빠르고 비용 효율적으로 처리할 수 있습니다. Hadoop, Spark, Hive, LLAP, Kafka, Storm, HBase 및 R과 같은 가장 인기 있는 오픈 소스 엔진을 사용하고 에코시스템에서 더 많은 오픈 소스 프레임워크를 설치할 수 있습니다. Azure HDInsight를 사용하여 클라우드의 강력한 기능과 결합된 완전 관리형 전체 오픈 소스 기술을 제공하는 것이 우리의 임무입니다. 오늘날 고객은 이러한 오픈 소스 기술을 사용하여 일괄 처리, ETL, 데이터 웨어하우징, 기계 학습, IoT 등과 같은 다양한 애플리케이션을 빌드하고 있습니다. 이 블로그 게시물의 목표는 Azure HDInsight 환경에서 다양한 오픈 소스 엔진의 SQL 쿼리 성능에 대한 일부 인텔리전스를 공유하는 것입니다.</p>


  <p>질문이나 의견이 있나요? 자세한 내용은 문의 <a href="mailto:AskHDInsight@microsoft.com" target="_blank">AskHDInsight@microsoft.com</a> 하세요.</p>
