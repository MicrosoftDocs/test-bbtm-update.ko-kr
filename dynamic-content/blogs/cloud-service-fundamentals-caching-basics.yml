### YamlMime:Yaml
ms.openlocfilehash: 1cb25e6c04880fda4e7b3d7fec549cd9aaa4d529
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139901315"
Slug: cloud-service-fundamentals-caching-basics
Title: 클라우드 서비스 기본 사항 – 캐싱 기본 사항
Summary: 이 문서는 AzureCAT 팀의 라마 라마니가 작성했습니다.  "CSFundamentals"라고 하는 "클라우드 서비스 기본 사항" 애플리케이션은 데이터베이스 지원 Azure를 빌드하는 방법을 보여 줍니다.
Content: '<p>이 문서는 AzureCAT 팀의 <a href="https://social.msdn.microsoft.com/profile/rama%20ramani%20(azure%20cat)/">라마 라마니가</a> 작성했습니다.</p>  <p>"CSFundamentals"라고 하는 "<a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">클라우드 서비스 기본</a> 사항" 애플리케이션은 데이터베이스 지원 Azure 서비스를 빌드하는 방법을 보여 줍니다.&nbsp; RDBMS 블로그 게시물의 이전 DAL &ndash; 분할에서 데이터베이스 계층에서 수평 확장성을 구현하는 <em>분할</em> 이라는 기술에 대해 설명했습니다. 이 게시물에서는 캐싱의 필요성, 고려해야 할 고려 사항 및 Windows Azure에서 구성하고 구현하는 방법에 대해 설명합니다.</p>  <p>분산 캐시 아키텍처는 스케일 아웃을 기반으로 하며, 워크로드를 분산하는 고유 분할 기능을 갖춘 클러스터 링의 일부로 여러 머신(물리적 또는 가상)이 참여합니다. 캐시는 &lt;키, 값&gt; 조회 패러다임이며 값은 직렬화된 개체이며 데이터베이스의 여러 테이블에 대한 JOIN과 같이 훨씬 더 복잡한 데이터 저장소 작업의 결과 집합일 수 있습니다. 따라서 데이터 저장소에 대해 여러 번 작업을 수행하는 대신 캐시에 대해 빠른 키 조회가 수행됩니다.</p>  <h4>캐시할 내용 이해</h4>  <p>먼저 워크로드를 분석하고 캐싱에 적합한 후보를 결정해야 합니다. 데이터가 캐시될 때마다 캐시와 &ldquo;진실&rdquo; 원본 간의 부실&rdquo; 허용 오차&ldquo;는 애플리케이션에 허용되는 한도 내에 있어야 합니다. 전반적으로 캐시는 사용자 프로필, 사용자 세션(단일 사용자 읽기-쓰기) 또는 리소스 데이터(잠금 API를 사용하는 모든 사용자에 대한 읽기-쓰기)와 같은 참조(모든 사용자에 대한 읽기 전용 데이터)에 사용할 수 있습니다. 경우에 따라 특정 데이터 세트가 빠르게 변경되거나 애플리케이션이 부실을 허용할 수 없거나 트랜잭션을 수행해야 하는 경우처럼 특정 데이터 세트가 캐싱 &ndash; 에 적합하지 않을 수 있습니다.</p>  <h4>용량 계획</h4>  <p>자연스러운 다음 단계는 애플리케이션의 캐싱 요구를 예측하는 것입니다. &nbsp;여기에는 캐시 크기뿐만 아니라 일련의 메트릭을 살펴보고 시작 크기 조정 가이드를 마련하는 작업이 포함됩니다.</p>  <ul>  <li><strong>캐시 크기:</strong> 필요한 메모리 양은 평균 개체 크기와 개체 수를 사용하여 대략적으로 추정할 수 있습니다.</li>  <li><strong>액세스 패턴 &amp; 처리량 요구 사항:</strong> 읽기-쓰기 조합은 새 개체가 생성되고, 기존 개체를 다시 쓰거나, 개체를 읽는 것을 나타냅니다.</li>  <li><strong>정책 설정:</strong> TTL(Time To Live), HA(고가용성), 만료 유형, 제거 정책에 대한 설정.</li>  <li><strong>물리적 리소스:</strong> 메모리 외부에서 네트워크 대역폭 및 CPU 사용률도 핵심입니다. 네트워크 대역폭은 특정 입력에 따라 추정될 수 있지만 대부분 이를 모니터링한 다음 다시 계산의 기준으로 사용해야 합니다.</li>  </ul>  <p>보다 자세한 용량 계획 스프레드시트는 에서 사용할 수 있습니다. <a href="https://msdn.microsoft.com/en-us/library/hh914129" target="_blank">https://msdn.microsoft.com/en-us/library/hh914129</a></p>  <h4>Azure 캐싱 토폴로지</h4>  <p>아래 표에서는 Azure에서 사용할 수 있는 PAAS 옵션 집합을 나열하고 빠른 설명을 제공합니다.&nbsp;</p>  <table border="1" cellspacing="0" cellpadding="0">  <tbody>  <tr>  <td valign="top" width="222">  <p>형식</p>  </td>  <td valign="top" width="402">  <p>Description</p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>전용 In-Role</p>  </td>  <td valign="top" width="402">  <p>전용 토폴로지에서 캐시 전용 작업자 역할을 정의합니다. 즉, 캐시 및 운영 오버헤드에 모든 작업자 역할의 사용 가능한 메모리가 사용됩니다.</p>  <p><a href="https://msdn.microsoft.com/en-us/library/windowsazure/hh914140.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/windowsazure/hh914140.aspx</a></p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>In-Role 공동 배치<strong></strong></p>  </td>  <td valign="top" width="402">  <p>공동 배치된 토폴로지에서 캐시에 대한 애플리케이션 역할에 사용 가능한 메모리의 백분율을 사용합니다. 예를 들어 각 웹 역할 인스턴스에서 캐시에 대한 실제 메모리의 20%를 할당할 수 있습니다.</p>  <p><a href="https://msdn.microsoft.com/en-us/library/windowsazure/hh914128.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/windowsazure/hh914128.aspx</a></p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>Azure Cache Service Windows<strong></strong></p>  </td>  <td valign="top" width="402">  <p>현재(2013년 9월) 미리 보기 상태인 Windows Azure Cache Service입니다. 유용한 링크 집합은 다음과 같습니다.</p>  <p><a href="" target="_blank"></a></p>  <p><a href="https://msdn.microsoft.com/en-us/library/windowsazure/dn386094.aspx" target="_blank">https://msdn.microsoft.com/en-us/library/windowsazure/dn386094.aspx</a></p>  </td>  </tr>  <tr>  <td valign="top" width="222">  <p>Microsoft Azure Shared Caching</p>  </td>  <td valign="top" width="402">  <p>다중 테넌트 캐싱(제한 및 할당량 포함)은 2014년 9월까지 사용 중지됩니다. 자세한 내용은 .에서 <a href="https://azure.microsoft.com/en-us/pricing/details/cache/" target="_blank">https://azure.microsoft.com/en-us/pricing/details/cache/</a>확인할 수 있습니다. 고객은 캐싱을 활용하기 위해 위의 옵션 중 하나를 사용하는 것이 좋습니다.</p>  </td>  </tr>  </tbody>  </table>  <h4>구현 세부 정보</h4>  <p><a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">CSFundamentals 애플리케이션</a>은 In-Role 전용 Azure 캐싱을 사용하여 자주 액세스하는 정보(사용자 프로필 정보, 사용자 의견)의 읽기를 간소화합니다. In-Role 전용 배포는 캐시 관련 워크로드를 격리하므로 선호되었습니다. 그런 다음, 성능 카운터(CPU 사용량, 네트워크 대역폭, 메모리 등)와 캐시 역할 인스턴스를 통해 적절하게 확장하여 모니터링할 수 있습니다.</p>  <p>참고: CSFundamentals를 구현하는 동안 새 Windows Azure Cache Service를 사용할 수 없습니다. CSFundamentals 애플리케이션 외부에서 캐시된 데이터를 사용할 수 있어야 한다는 요구 사항이 있는 경우 선호하는 선택이었을 것입니다.</p>  <p>ICacheFactory 인터페이스는 GetCache 메서드 서명을 정의합니다. ICacheClient 인터페이스는 GETT&lt;&gt; 및 PUTT&lt;&gt; 메서드 서명을 정의합니다.&nbsp;</p>  <p>공용 인터페이스 ICacheClient</p>  <p>&nbsp;<a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8508.1.JPG" alt="" border="0"></a></p>  <p>AzureCacheClient는 이 인터페이스의 구현이며 Windows Azure 캐싱 NuGet 패키지를 통해 추가된 Windows Azure 캐싱 클라이언트 어셈블리에 대한 참조를 가지고 있습니다.</p>  <p>&nbsp;<a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4162.caching.png" alt="" border="0"></a></p>  <p>DataCacheFactory 개체 만들기는 캐시 역할 인스턴스에 대한 비용이 많이 드는 연결을 설정하므로 <a href="https://msdn.microsoft.com/en-us/library/dd642331.aspx" target="_blank">LazyT&lt;&gt;</a>를 사용하여 정적이고 지연 인스턴스화됨으로 정의됩니다.</p>  <p>app.config 자동 검색을 사용하도록 설정되었으며 식별자는 캐시 작업자 역할을 올바르게 가리키는 데 사용됩니다.</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;autoDiscover isEnabled="true" identifier="CSFundamentalsCaching.WorkerRole" /&gt;</p>  <p>참고: 새 Windows Azure Cache Service를 사용하도록 솔루션을 수정하려면 식별자 특성을 Windows Azure Portal에서 만든 캐시 서비스 엔드포인트로 바꿉니다. 또한 API 키(포털에서 키 관리 옵션을 통해 검색 가능)는 app.config messageSecurity authorizationInfo&rsquo; 필드에 복사&lsquo;되어야 합니다.</p>  <p>GETT&lt;&gt; 및 PUTT&lt;&gt; 메서드의 구현은 BinarySerializer 클래스를 사용하며, 이 클래스는 직렬화 및 역직렬화를 위해 Protobuf 클래스를 활용합니다. <em>protobuf-net</em> 은 .NET 개체를 효율적이고 쉽게 직렬화할 수 있는 <a href="https://code.google.com/p/protobuf-net/" target="_blank">프로토콜 버퍼</a>의 .NET 구현입니다. 이는 protobuf-net NuGet 패키지를 통해 추가되었습니다.</p>  <p><a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3348.protobuf.png" alt="" border="0"></a></p>  <p>Serialization은 전달된 매개 변수 T에 대한 바이트[] 배열을 생성한 다음, Windows Azure Cache 클러스터에 저장됩니다. 특정 키에 대해 요청된 개체를 반환하기 위해 GET 메서드는 Deserialize 메서드를 사용합니다.</p>  <p><a href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5482.2.JPG" alt="" border="0"></a></p>  <p>이 블로그에서는 캐싱 기본 사항에 대한 개요를 제공합니다. 자세한 내용은 <a href="https://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649" target="_blank">CloudServiceFundamentals Visual Studio 솔루션</a>의 ICacheClient.cs, AzureCacheFactory.cs, AzureCacheClient.cs 및 BinarySerializer.cs를 참조하세요.</p>'
