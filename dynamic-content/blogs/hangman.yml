### YamlMime:Yaml
ms.openlocfilehash: 364e3920bb04257ff71dd147c14f5ca96c36f7ce
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911036"
Slug: hangman
Title: 사전 없이 Hangman을 재생하도록 신경망 학습
Summary: 우리는 보충 학습 및 CNTK 사용하여 신경망을 학습시켜 행맨 게임에서 숨겨진 단어를 추측했습니다. 학습된 모델은 참조 사전에 의존하지 않습니다. 이는 가변 길이, 부분적으로 가려진 단어(빈 공백 및 올바르게 추측된 문자로 구성됨) 및 이미 추측된 문자를 나타내는 이진 벡터로 사용됩니다. 이 게시물과 연결된 git 리포지토리에서 신경망을 학습시키고 게임 플레이를 위해 Azure Web App에 배포하기 위한 샘플 코드를 제공합니다.
Content: >-
  <p>저자: 메리 월, 샤힌 가우허, 피단 보일루 우즈, 캐서린 자오</p>


  <p><strong>요약</strong></p>


  <p>우리는 보충 학습 및 CNTK 사용하여 신경망을 학습시켜 행맨 게임에서 숨겨진 단어를 추측했습니다. 학습된 모델은 참조 사전에 의존하지 않습니다. 이 모델은 가변 길이, 부분적으로 가려진 단어(빈 공백 및 올바르게 추측된 문자로 구성됨) 및 이미 추측된 문자를 나타내는 이진 벡터로 사용됩니다. <a href="https://github.com/Azure/Hangman">이 게시물과 연결된 git 리포지토리</a>에서 신경망을 학습시키고 게임 플레이를 위해 Azure Web App에 배포하기 위한 샘플 코드를 제공합니다.</p>


  <p><strong>동기 부여</strong></p>


  <p>&#39;고전 어린이 행맨의 게임에서, 플레이어&#39;목표는 문자의 수만 원래 알려진 숨겨진 단어를 식별하는 것입니다. 각 라운드에서 플레이어는 알파벳 문자를 추측합니다. 문자가 단어에 있으면 문자의 모든 인스턴스가 표시됩니다. 그렇지 않으면 행맨&#39;신체 부위 중 하나가 긴팔원숭이에 그려집니다. 단어가 완전히 올바른 추측에 의해 공개되는 경우 게임은 승리로 끝나고, 대신 행맨&#39;몸이 완전히 밝혀지면 손실로 끝납니다. 플레이어를 지원하기 위해 지금까지 추측한 모든 문자의 표시 레코드가 일반적으로 유지됩니다.</p>


  <p>일반적인 행맨 전략은 부분적으로 드러난 단어를 플레이어&rsquo; 어휘의 모든 단어와 비교하는 것입니다. 고유한 일치 항목이 발견되면 플레이어는 단순히 나머지 문자를 추측합니다. 일치하는 항목이 여러 개 있는 경우 플레이어는 예상된 잘못된 추측 수를 최소화하면서 가능한 단어를 구분하는 문자를 추측할 수 있습니다. 이러한 전략은 사전 컴파일된 참조 사전을 어휘로 사용하여 알고리즘적으로(기계 학습 없이) 구현할 수 있습니다. 아쉽게도, 숨겨진 단어가 플레이어&rsquo; 어휘에 없는 경우 이 접근 방식은 최적이 아닌 추측을 제공하거나 완전히 실패할 수 있습니다. 숨겨진 단어를 선택하는 자식이 종종 적절한 명사 또는 참조 사전에 없는 맞춤법 오류를 커밋하기 때문에 이 문제는 일반적으로 실제로 발생합니다.</p>


  <p>이러한 문제에 강력한 또 다른 전략은 대상 언어의 문자 및 문자 조합의 빈도를 기반으로 추측하는 것입니다. 영어 게임의 경우 이러한 전략에는 모음 추측으로 시작, Q가 이미 공개되었을 때 문자 U 추측, 일부 문자 또는 n-그램이 다른 문자보다 더 일반적임을 인식하는 등이 포함될 수 있습니다. 학습 가능한 패턴의 광범위한 배열과 실제로 가장 유용한 <em>사전</em> 불확실성으로 인해 참조 사전에 의존하지 않고 숨겨진 단어를 추측하는 적절한 규칙을 배우도록 신경망을 학습하기로 결정했습니다.</p>


  <p><strong>모델 디자인 및 학습</strong></p>


  <p>모델에는 부분적으로 가려진 숨겨진 단어와 이미 추측된 문자를 나타내는 이진 벡터의 두 가지 주요 입력이 있습니다. Hangman에서 숨겨진 단어의 가변 길이를 수용하기 위해 부분적으로 가려진 단어( &ldquo;아직 추측되지 않은 단어의 모든 문자를 나타내는 공백&rdquo; 포함)는 최종 출력만 유지되는 LSTM(장기 메모리) 되풀이 네트워크에 공급됩니다. LSTM&rsquo; 출력은 이전 추측을 나타내는 이진 벡터와 함께 접합되며 결합된 입력은 네트워크&rsquo; 가능한 추측 문자 A-Z를 나타내는 26개의 출력 노드가 있는 단일 조밀한 계층으로 공급됩니다. 모델&rsquo; 출력 &ldquo;추측&rdquo; 은 노드가 지정된 입력에 대해 가장 큰 값을 가진 문자입니다.</p>


  <p>보충 학습을 사용하여 이 모델을 학습하기 위해 HangmanPlayer라는 래퍼 클래스를 만들었습니다. 숨겨진 단어와 모델은 HangmanPlayer 인스턴스를 만들 때 제공됩니다. 첫 번째 라운드에서 HangmanPlayer는 적절한 크기의 공백 시리즈(숨겨진 단어에 아직 문자가 표시되지 않았기 때문에)와 이전 추측의 모든 0 벡터로 모델을 쿼리합니다. HangmanPlayer는 모델에 제공된 입력뿐만 아니라 추측 품질에 대한&rsquo; 모델&rsquo; 추측 및 피드백을 저장합니다. 추측에 따라 HangmanPlayer는 입력을 업데이트합니다(올바르게 추측된 문자를 표시하고 추측된 문자를 나타내기 위해). 그런 다음 행맨 게임이 끝날 때까지 모델을 다시&hellip; 쿼리합니다. 마지막으로 HangmanPlayer는 저장된 입력, 출력 및 피드백을 사용하여 모델을 추가로 학습합니다. 학습 세트(Princetons&rsquo; <a href="https://wordnet.princeton.edu/">WordNet</a>에서 가져온)에서 숨겨진 다음 단어로 행맨의 새 게임을 만들 때 학습이 계속됩니다.</p>


  <p><strong>운영화</strong></p>


  <p><a href="https://github.com/Azure/Hangman">Git 리포지토리</a>의 지침 및 샘플 파일은 Azure Web App을 만들어 게임 플레이를 위해 학습된 CNTK 모델을 운영하는 방법을 보여 줍니다. 이 Flask 웹앱은 <a href="https://github.com/ilkarman/Azure-WebApp-w-CNTK">Python 3을 사용하여 CNTK 모델을 배포하기 위한</a> Ilia Karmanovs&rsquo; 템플릿을 기반으로 합니다. 웹앱을 방문하는 인간 사용자는 직접 &ndash; 공개하지 않는 숨겨진 단어를 &ndash; 선택하고 게임이 승패로 종료될 때까지 추측할 때마다 모델에 피드백을 제공합니다.</p>


  <p>샘플 코드 및 작업 재현 지침을 포함하여 이 프로젝트에 대한 자세한 내용은 <a href="https://github.com/Azure/Hangman">Azure Hangman git 리포지토리</a>를 참조하세요.</p>
