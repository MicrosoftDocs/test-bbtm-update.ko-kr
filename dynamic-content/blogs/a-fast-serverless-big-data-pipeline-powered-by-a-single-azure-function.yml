### YamlMime:Yaml
ms.openlocfilehash: 6ff945d019a69438e9aad4b36dc649e30e4c342e
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139901515"
Slug: a-fast-serverless-big-data-pipeline-powered-by-a-single-azure-function
Title: 단일 Azure Function으로 구동되는 빠르고 서버리스 빅 데이터 파이프라인
Summary: 단일 Azure 함수는 엔드 투 엔드, 실시간 중요 업무용 데이터 파이프라인을 완전히 구현하는 데만 걸렸습니다. 그리고 서버리스 아키텍처로 수행되었습니다. 서버리스 아키텍처는 클라우드 규모 애플리케이션의 빌드, 배포 및 관리를 간소화합니다.
Content: >-
  <p>단일 Azure 함수는 엔드 투 엔드, 실시간 중요 업무용 데이터 파이프라인을 완전히 구현하는 데만 걸렸습니다. 그리고 <a href="https://azure.microsoft.com/en-us/overview/serverless-computing/?WT.mc_id=ms-docs-kbaroni" target="_blank">서버리스</a> 아키텍처로 수행되었습니다. 서버리스 아키텍처는 클라우드 규모 애플리케이션의 빌드, 배포 및 관리를 간소화합니다. 데이터 엔지니어는 서버 조달, 구성 및 관리와 같은 데이터 인프라에 대해 걱정하는 대신 엔드 투 엔드 및 고성능 데이터 파이프라인을 보장하는 데 필요한 작업에 집중할 수 있습니다.</p>


  <p>이 블로그에서는 Azure 함수와 하루에 8백만 개 이상의 트랜잭션을 처리하는 데이터 수집 파이프라인을 효율적으로 조정하는 방법을 설명합니다.</p>


  <h2>시나리오</h2>


  <p>대형 은행은 휴대 전화 뱅킹 응용 프로그램을 통해 제출 된 사기 거래를 감지하는 솔루션을 구축하려고했습니다. 솔루션에는 빅 데이터 파이프라인 접근 방식이 필요합니다. 대량의 실시간 데이터가 일련의 데이터 변환 및 추출 작업이 발생하는 클라우드 서비스로 수집됩니다. 이로 인해 <a href="https://docs.microsoft.com/en-us/azure/machine-learning/team-data-science-process/create-features/?WT.mc_id=ms-docs-kbaroni" target="_blank">기능</a> 데이터 집합이 생성되고 고급 분석이 사용됩니다. 은행의 경우 파이프라인은 매우 빠르고 확장 가능해야 했으며, 각 트랜잭션에 대한 엔드투엔드 평가를 2초 이내에 완료해야 했습니다.</p>


  <p>은행&rsquo;의 여러 애플리케이션 게이트웨이에서 원격 분석을 사용하여 복잡한 JSON 파일에 포함된 이벤트로 스트림합니다. 수집 기술은 Azure Event Hubs입니다. 각 이벤트는 이벤트 허브로 수집되고 여러 개별 트랜잭션으로 구문 분석됩니다. 특성은 각 트랜잭션에서 추출되고 사기에 대해 평가됩니다. 서버리스 아키텍처는 다음 Azure 서비스에서 구성됩니다.</p>


  <ul>
   <li><a href="https://azure.microsoft.com/en-us/services/event-hubs/?WT.mc_id=ms-docs-kbaroni" target="_blank">Azure Event Hubs</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/functions/?WT.mc_id=ms-docs-kbaroni" target="_blank">Azure Functions</a></li>
   <li><a href="https://studio.azureml.net/?WT.mc_id=ms-docs-kbaroni" target="_blank">Azure Machine Learning Studio</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/sql-database/?WT.mc_id=ms-docs-kbaroni" target="_blank">Azure SQL Database</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/cosmos-db/?WT.mc_id=ms-docs-kbaroni" target="_blank">CosmosDB</a></li>
  </ul>


  <h2>파이프라인 아키텍처</h2>


  <p>단일 Azure Function은 전체 활동 파이프라인을 오케스트레이션하고 관리하는 데 사용되었습니다. 다음 다이어그램은 Azure Functions 파이프라인 아키텍처를 강조 표시합니다.</p>


  <ul>
   <li>엔터프라이즈 시스템 버스는 이벤트 허브에 도착하는 JSON 파일로 은행 트랜잭션을 보냅니다. 도착은 응답을 트리거하여 수집된 파일의 유효성을 검사하고 구문 분석합니다.</li>
   <li>SQL 저장 프로시저가 호출됩니다. 이 프로시저는 JSON 메시지에서 데이터 요소를 추출하고 고객 및 계정 프로필을 사용하여 집계하여 기계 학습 모델에 대한 입력인 기능 집합을 생성합니다. 집계된 메시지의 형식은 JSON 파일로 지정됩니다.</li>
   <li>유효성이 검사된 JSON 메시지는 Cosmos DB에 기록됩니다.</li>
   <li>트랜잭션을 평가하고 점수를 매기기 위해 기계 학습 모델이 호출됩니다.</li>
   <li>사기 행위 점수는 사례 관리 솔루션에 통합하기 위해 온-프레미스 API에 다시 게시됩니다.</li>
  </ul>


  <p>&nbsp;<a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/416c10f2-3876-48da-bba3-f3f6d993a334.png"><img alt="image" border="0" height="226" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/78320868-0fa7-4f1c-b0eb-3d3a68ef52bc.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="377"></a></p>


  <p align="center"><em>그림 1: Azure Function 파이프라인 아키텍처</em>&nbsp;</p>


  <h2>10단계의 파이프라인</h2>


  <p>Azure 함수는 C#으로 작성되었으며 다음 다이어그램에서 차트로 작성되는 10개의 메서드로 구성됩니다.&nbsp; 메서드는 다음과 같습니다.</p>


  <p>1. 이벤트 허브에서 이벤트를 수신할 때 메서드가 트리거됩니다.</p>


  <pre>

  public static void Run(string myEventHubMessage, ICollector&lt;string&gt; resultsCollection, TraceWriter log)</pre>


  <p>2. 메시지가 처리되고 JSON의 유효성이 검사됩니다.</p>


  <pre>

  private static void ProcessInitialMessageFromEventHub(List&lt;string&gt; jsonResults, string cnnString, TelemetryClient appInsights, dynamic d)</pre>


  <p>3.코드를 호출하여 메시지 이벤트를 삽입&nbsp;하는 SQL 명령을 실행합니다.</p>


  <pre>

  private static bool CheckRequestTypeForValidMessage(dynamic d)</pre>


  <p>4.JSON 메시지가 유효한 경우 나중에 쿼리하기 위해 Cosmos DB에 저장합니다.</p>


  <pre>

  private static void SaveDocDb(string json, TraceWriter log)</pre>


  <p>5. JSON이 구문 분석되면 관련 특성을 추출합니다.</p>


  <pre>

  private static string ProcessSQLReturnedFeaturesForAML(TraceWriter log, List&lt;string&gt;, jsonResults, TelemetryClient appInsights)</pre>


  <p>6. 저장 프로시저를 실행하여 기계 학습 모델에 대한 입력이 될 기능을 만듭니다.</p>


  <pre>

  private static string SendDataToStoredProc(dynamic d, SqlCommand spCommand, dynamic t, TelemetryClient appInsights, TransactionType transactionTypeEnum = TransactionType.Other, dynamic responseData = null)</pre>


  <p>7.Azure ML 서비스 엔드포인트에 대한 호출을 호출합니다. Azure ML 점수를 가져옵니다. 입력 매개 변수를 전달합니다.</p>


  <pre>

  private static string CallAzureMl(dynamic d, TraceWriter log, HttpClient client)</pre>


  <p>8.ML 서비스는 처리되는 점수를 반환합니다.</p>


  <pre>

  public static List&lt;string&gt; GetScoresFromAzureMl(string myEventHubMessage, TraceWriter log, TelemetryClient appInsights, HttpClient client)</pre>


  <p>9. 온-프레미스 시스템을 호출하여 메시지를 인수로 전달합니다.</p>


  <pre>

  public static List&lt;string&gt; ProcessMessagesIntoEsb(TraceWriter log, string cnnString, TelemetryClient appInsights, string cardNumber, string accountNumber, List&lt;string&gt;esbReturnMessages)</pre>


  <p>10. 점수는 임계값에 대해 평가되며, 이 임계값은 온-프레미스 사례 관리 시스템에 전달되어야 하는지 여부를 결정합니다.</p>


  <pre>

  public static string CheckScoreAndProcessEsbMessages(string&gt; myEventHubMessage, TraceWriter log, SqlCommand spCommand, TelemetryClient appInsights, string cardNumber, string accountNumber)</pre>


  <p>&nbsp; 아래 그림에서는 논리를 코드의 각 태스크에 대해 하나씩 10개 블록의 세로 집합으로 보여 줍니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2bbd46f9-71cb-4671-a788-3ea5bbda15ae.png"><img alt="image" border="0" height="367" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/03699ea0-5c37-41df-8044-277cf135ed41.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="322"></a></p>


  <p align="center"><em>그림 2: Azure Function 파이프라인 흐름</em>&nbsp;</p>


  <p>&nbsp;</p>


  <h2>파이프라인 확장성</h2>


  <p>파이프라인은 들어오는 JSON 파일의 극단적인 버스트에 응답해야 합니다. 각 파일을 개별 트랜잭션으로 구문 분석하고 사기 행위를 위해 각 트랜잭션을 처리하고 평가해야 합니다. 다른 구성 매개 변수를 실험한 후 Azure 함수가 필요에 따라 크기를 조정하고 필요한 시간 제약 조건 내에서 메시지 및 트랜잭션의 볼륨을 처리할 수 있도록 하는 데 도움이 되는 몇 가지 설정이 있었습니다.&nbsp;</p>


  <ul>
   <li><a href="https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-autoscale-get-started?toc=%2fazure%2fapp-service%2ftoc.json/?WT.mc_id=ms-docs-kbaroni" target="_blank">Azure 자동 크기 조정은 Azure</a> Functions와 같은 클라우드 서비스에 기본 제공되는 기능입니다. 규칙 기반이며 정의된 임계값에 따라 Azure Functions와 같은 서비스를 확장 또는 축소하는 기능을 제공합니다. 기본적으로 Event Hubs에 수집된 데이터의 볼륨으로 인해 Azure Functions 서비스는 너무 빠르게 확장되어 자체 인스턴스가 너무 많이 생성되었습니다. 이로 인해 이벤트 허브 파티션에 대한 잠금 문제가 발생하여 처리량에 상당한 영향을 미쳤습니다. 자동 크기 조정 기능을 실험한 후 Functions 서비스에 대한 설정이 최소 1개 및 최대 4개의 인스턴스로 설정되었습니다.</li>
   <li>두 Event Hubs 설정은 Azure 함수의 성능 및 처리량을 보장하는 데 중요했습니다.<br>
   <strong>maxBatchSize</strong>: 사용자가 수신 루프당 처리에 동의할 최대 이벤트 수를 가져오거나 설정합니다. 이 수는 이벤트 허브당 파티션 수준에 있습니다.<br>
   <strong>prefetchCount</strong>: 현재 소유한 파티션의 모든 수신기가 적극적으로 캐시할 이벤트 수를 가져오거나 설정합니다. 이 속성의 기본값은 300입니다.</li>
  </ul>


  <p>다른 설정을 실험한 후 이 솔루션에 대한 최적의 구성은 다음과 같은 것으로 밝혀졌습니다.</p>


  <pre>

  // Configuration settings for &#39;eventHub&#39; triggers. (Optional)
     &quot;eventHub&quot;: {
      // The maximum event count received per receive loop. The default is 64.
      &quot;maxBatchSize&quot;: 10,
      // The default PrefetchCount that will be used by the underlying EventProcessorHost.
      &quot;prefetchCount&quot;: 40,
      // The number of event batches to process before creating an EventHub cursor   checkpoint.
      &quot;batchCheckpointFrequency&quot;: 1
     },</pre>

  <h2>권장하는 다음 단계</h2>


  <p>서버리스 아키텍처를 사용하면 데이터 엔지니어링 팀이 데이터 흐름, 애플리케이션 논리 및 서비스 통합에 집중할 수 있습니다.&nbsp; 실시간 서버리스 데이터 파이프라인을 설계하고 다른 서비스와 통합하거나 지속적인 통합을 통해 배포하기 위해 고유한 메서드를 코딩하는 유연성을 원하는 경우 Azure Functions를 사용하여 파이프라인을 오케스트레이션하고 관리하는 것이 좋습니다. Azure 함수에 대한 추가 정보는 다음 리소스를 확인하세요.</p>


  <ul>
   <li><a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-best-practices/?WT.mc_id=ms-docs-kbaroni" target="_blank">Azure 함수의 성능 및 안정성을 최적화합니다</a>.</li>
   <li><a href="https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitoring-autoscale-get-started?toc=%2fazure%2fapp-service%2ftoc.json/?WT.mc_id=ms-docs-kbaroni" target="_blank">Azure에서 자동 크기 조정을 시작</a>합니다.</li>
   <li>이 블로그에서 참조하는 은행 사기 솔루션의 전체 아키텍처는 <a href="https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fdownload.microsoft.com%2Fdownload%2F0%2F1%2F5%2F0150425C-14C7-41F4-97EA-3DE57B678C51%2FIndSG_FraudDetection.pdf&amp;data=02%7C01%7C%7Cdb1f75f50e814905327b08d60c53078e%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636709948072813252&amp;sdata=sVMHwEWyZ%2FkpPWgNkfgmXk5TfB0tzOvkMabszoZVuH8%3D&amp;reserved=0" target="_blank">Mobile Bank 사기 솔루션 가이드</a>에서 찾을 수 있습니다.</li>
  </ul>


  <p>이 블로그에서 세 <a href="https://www.linkedin.com/in/cedza/" target="_blank">드릭 라부샤뉴</a>, <a href="https://www.linkedin.com/in/chris-cook-49b88457/" target="_blank">크리스 쿡</a>, <a href="https://www.linkedin.com/in/eujon-sellers/" target="_blank">유존 셀러스의</a> 협업에 감사드립니다.</p>
