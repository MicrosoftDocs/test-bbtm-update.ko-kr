### YamlMime:Yaml
ms.openlocfilehash: 436dde95d9dd29b9684572cad65ad963091a03f5
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910953"
Slug: isv-guest-post-series-ivotesports-scales-its-baseball-focused-mobile-game-app-with-windows-azure
Title: 'ISV 게스트 포스트 시리즈: iVoteSports는 Windows Azure를 사용하여 Baseball-Focused 모바일 게임 앱의 크기를 조정합니다.'
Summary: 편집자&rsquo; 참고:&rsquo; 오늘 게시물, 빌 데이비드하이저에 의해 작성, 수석 건축가 및 iVoteSports의 공동 설립자, 회사가 iVoteSports MLB 중심의 전원을 Windows Azure를 사용하는 방법을 설명합니다 ...
Content: '<p><b><i>편집자&rsquo; 참고: </i></b><i>iVoteSports의 수석 건축가이자 공동 창립자인 빌 데이비드하이저(Bill Davidheiser</i>)가 <i>작성한 투데이&rsquo; 포스트는 </i> 이 회사가 Windows Azure를 사용하여 iVoteSports MLB 중심의 모바일 게임에 전력을 공급하는 방법을 설명합니다.<i><img style="float: right;" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1030.Heiserhs.png" alt="" border="0" height="120" width="120"></i></p>  <p href="">우리는 야구와 같은 대부분의 스포츠가 게임 내 게임으로 세분화 될 수 있다는 매우 간단한 아이디어로 iVoteSports.com (<ins cite="mailto:Chimene%20Stewart" datetime="2012-07-24T09:39"></ins>애플, 안드로이드 및 아마존 앱 시장에서 판매)를 시작했습니다. 예를 들어 모든 야구 이닝에는 많은 타구가 있으며 각 개별 타자는 볼, 스트라이크 및 홈런과 같은 그의 타석에 대한 여러 가지 잠재적 결과를 가지고 있습니다.</p>  <p>게임의 기본 테마는 사용자가 각 이벤트의 결과를 예측하고 정확하게 추측하기 위한 포인트를 획득할 수 있도록 하는 것입니다.&nbsp; 이길 수 있는 포인트는 이벤트 결과의 확률과 같은 여러 요인을 기반으로 합니다.</p>  <p>라이브 스포츠 이벤트의 승자를 결정하는 것은 이벤트의 볼륨과 빈도로 인해 어렵습니다. 야구를 예로 들자면, 각 경기에는 이닝당 6개의 타구가 있는 9개 이상의 이닝이 있으며, 각 타석에는 최소 3개의 이벤트(스트라이크, 볼 등)가 있습니다. 이는 정규 시즌당 팀당 162경기의 양과 함께, 적어도 우리 게임의 실질적인 자원 제약 내에서는 인간 심판 &ndash; 이 관리할 수 없는 엄청난 양의 이벤트를 만듭니다.&nbsp; 이 문제를 해결하기 위해 크라우드 소싱 개념을 사용하여 프로그래밍 방식으로 결과를 결정하는 방법을 만들었습니다.</p>  <p><b>WINDOWS AZURE 디자인 및 변동 트래픽</b></p>  <p>언급 한 바와 같이, 라이브 스포츠 이벤트의 본질은 많은 사람들이 상대적으로 짧은 기간 (약 3 시간)에 함께 모여 다음 신속하게 분산된다는 것입니다. iVoteSports 애플리케이션은 라이브 게임 중에 재생되므로 이러한 급격한 사용량 급증을 지원해야 합니다.</p>  <p href="https://www.windowsazure.com/en-us/pricing/free-trial/">이러한 유형의 변동 수요는 클라우드 애플리케이션에 적합합니다. 유휴 상태에서는 두 개의 작은(단일 코어) <ins cite="mailto:Chimene%20Stewart" datetime="2012-07-24T09:40"></ins><a target="_blank" href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=cmp_pst001_blg_post0159gen">Windows Azure</a> 웹 역할 인스턴스를 유지 관리합니다. 그러나 많은 플레이어가 선상에 오면 웹 인스턴스를 빠르게 추가하여 수요가 증가함에 따라 확장할 수 있습니다. &nbsp;하루 동안 추가 인스턴스를 추가하기 위한 트리거 지점은 주로 프로세서 사용률을 기반으로 합니다. 지속적으로 80%를 초과하는 경우 추가 인스턴스를 추가합니다.</p>  <p>이후 버전에서는 관리 API를 통해 프로그래밍 방식으로 인스턴스를 추가합니다. Microsoft Enterprise Librarys&rsquo; <a target="_blank" href="https://msdn.microsoft.com/en-us/library/hh680892(v=pandp.50).aspx">WASABi(자동 크기 조정 애플리케이션 블록</a>)를 활용하지만 지금은 크기 조정이 수동으로 수행됩니다. 용량을 늘리기 위해 인기 있는 게임이 충분한 날에는 인스턴스 수를 사전에 늘릴 수 있습니다.</p>  <p>iVoteSports의 실제 빌드는 모바일 게임보다 다중 계층 엔터프라이즈 애플리케이션과 더 유사합니다. 프레젠테이션, 애플리케이션 및 데이터 계층의 고유한 개념이 있습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8345.ivote1.png" alt="" border="0"></p>  <p>데이터베이스가 다중 테넌트이므로 사용자 ID&rsquo;는 점수 유지, 예측 만들기 또는 결과 어설션과 같은 작업을 처리하는 모든 테이블과 연결됩니다. 우리의 견해, UDF 및 저장 프로시저 개발은 일반적인 .Net 애플리케이션에 대해 만들어지는 것과 거의 똑같습니다. 사용자 예측 및 결과 정보만 매일 유지되므로(통계 및 일정 데이터가 보관됨) 150GB <a target="_blank" href="https://www.windowsazure.com/en-us/home/features/data-management/?WT.mc_id=cmp_pst001_blg_post0159sto">Windows Azure SQL Database</a> 제한은 문제가 되지 않습니다.</p>  <p>SQL Database 사용하기로 한 초기 결정은 주로 코드를 다시 배포할 필요 없이 즉시 변경할 수 있는 최적화된 TSQL을 만들려는 욕구에 의해 결정되었습니다. 차세대 게임의 경우 일부 데이터 구조를 <a target="_blank" href="https://www.windowsazure.com/en-us/home/features/data-management/?WT.mc_id=cmp_pst001_blg_post0159sto">Azure Table</a> Storage 보다 비용 효율적인 Windows 마이그레이션할 가능성이 높습니다.</p>  <p>참고로, 서버에 논리가 많은 모바일 앱은 좋은 이점이 있습니다. 웹 개발자는 버그를 수정하기 위해 거의 실시간으로 핫 픽스를 푸시하는 기능에 버릇이 있습니다. 안타깝게도 모바일 코드에서 버그가 발견되면 수정에 대한 실시간 정보가 없습니다. 애플의 경우, 변경 승인을 얻기 위해 일주일 정도 걸릴 수 있습니다.</p>  <h3><b>모바일 앱</b></h3>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7750.ivote2.png" alt="" border="0"><br clear="ALL"> 프레젠테이션 계층은 모바일 장치입니다. 우리는 빠른 네트워크 통화를 할 수없는 정말 오래된 휴대폰을 포함하여 모바일 장치의 &ndash; 넓은 범위 사이의 예측할 수없는 트래픽에 대해 정말 최적화 된 경량 API를 만들어 시작했다. 테스트 케이스는 화면을 교차하는 데 약 5 초 정도 걸릴 것이다 과부하 프로세서를 가지고 <sup>골동품 1 세대</sup> 드로이드이었다.</p>  <p>보안은 게임의 주요 문제가 아니지만, 이메일 주소를 실제 디바이스 ID와 결합하여 적용된 인증을 구현했습니다. 나중에 필요한 경우 특정 함수의 역할 기반 권한 부여에 사용되는 보안 토큰을 파생할 수 있습니다.</p>  <p>모바일 디바이스에서 발생하는 모든 트래픽은 상태 비 상태이며 효과적으로 동기적입니다. 각 모바일 디바이스는 몇 초마다 간단한 세버 폴을 수행하여 대기 중인 메시지가 있는지 확인합니다. 메시지가 대기 중인 경우 더 비싼 데이터 교환 호출이 이루어집니다.</p>  <h3><b>확률 및 포인트</b></h3>  <p>확률은 게임의 핵심입니다. 플레이 결과의 확률은 역사적 이벤트 결과 (플라이 아웃은 볼보다 더 일반적), 플레이어 매치 업 (타자 - X는 투수 -Y에 대해 잘한다) 및 선수 적성 (타자 안타 .240)과 같은 주요 영향의 소수에서 구동된다. 물론 경기장, 부상 및 날씨와 같은 다른 요인이 확률에 영향을 주지만 평균적으로 이러한 요인은 최소이며 대부분 지역 스포츠 마권업자에게 적용됩니다.</p>  <p>키를 함께 매싱하면 플레이 결과의 예측자에 대해 승리 가능한 포인트로 변환할 수 있는 결합된 확률이 생성됩니다. 이 예측을 <i>iVote</i>라고 부릅니다. 예를 들어, 조 스로차드를 상대로 한 케이시 존스의 홈런은 올바른 iVote에 대해 30점을 얻게 되며, 케이시보다 약한 타자에 대한 홈런 조건자는 100점의 기회를 제공할 수 있습니다. 라스베가스 사람들은 일반적으로 포인트 확산으로 &ldquo;이것을 참조.&rdquo;</p>  <p>한 단계 더 나아가, 많은 사람들이 동일한 플레이에 참여할 때 덜 인기 있는 예측을 만들고 iVotes의 더 균등한 분포를 유지하기 위해 포인트 동기를 만들 수 있습니다. 이 개념은 스프레드 베팅이라고도 하는 &ldquo;개념에 따라 대략적으로 패턴화됩니다.&rdquo;</p>  <p>iVoteSports.com 많은 도박 개념을 다루더라도 우리는 도박 응용 프로그램이 아닙니다. 실제 돈이 전혀 관련되지 않은 &ndash; 포인트만 있습니다.</p>  <h3><b>통계 피드</b></h3>  <p>현재 통계를 추가하면 타격 라인업을 미리 로드하고, 플레이어 바이오스와 퀴즈를 보여주며, 물론 가장 최근의 통계를 사용하여 확률 계산이 좋은 데이터를 사용하게 함으로써 게임을 좀 더 흥미롭게 만들 수 있습니다.</p>  <p>Stats.com 매일 및 사전 게임이라는 두 가지 유형의 데이터를 가져옵니다. 일일 데이터에는 일정, 명단 및 선수 통계가 포함되며 매일 아침 4시 태평양 시간으로 SQL Database 로드됩니다. 경기 전 데이터는 각 야구 경기가 시작되기 약 15분 전에 로드되며 각 팀의 선발 타격 라인업과 선발 투수를 포함합니다.</p>  <h3><b>결과 결정</b><img style="float: right;" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8880.ivote3.png" alt="" border="0" height="220" width="207"></h3>  <p>이벤트&rsquo; 결과에 대한 프로그래밍 방식의 결정은 매우 어렵습니다. 신뢰할 수 있는 관계자가 각 이벤트를 기록할 때는 문제가 되지 않지만, 앞서 언급했듯이 인간 공무원을 사용하는 것은 하루 중 여러 번 동시에 수십 개의 게임을 한 번에 실행할 수 있는 모바일 앱에 대한 확장 가능한 답변이 아니었습니다.</p>  <p>크라우드소싱 디자인 패턴은 우리에게 훌륭한 대답으로 밝혀졌습니다. 많은 훌륭한 기사와 진실 스쿼드 실험과 같은 실용적인 예에 의해 문서화 된 바와 같이, 당신은 뭔가 사실이라고 말하는 충분한 사람들을 얻을 경우 아마이다. 물론 협력자에 대한 보장과 사람들의 비판적 질량보다 적은 것을 갖는 것과 같은 집단적 진실&rdquo;에 대한 주의 &ldquo;사항이 있습니다. 그러나 이러한 도전은 완화 될 수 있으며 전체 크라우드 소싱은 수학적으로 입증 된 접근 방식이며 우리의 목적을 위해 매우 효과적입니다.</p>  <p>그래프 &lsquo;의 정확도에 대한 어설션 관계와 같이,&rsquo; 결과를 어설션하는 지정된 이벤트에서 플레이어의 임계 질량에 도달하면 어설션이 결과를 정확하게 나타낸다. 예를 들어, 전체 모집단의 30%의 사용자가 특정 이벤트가 발생했다고 말하는 경우(예: 플레이어가 공격을 당한 경우) 확인된 실제 결과가 있다는 신뢰도가 50%를 초과합니다.</p>  <p>신뢰도가 60%를 초과하면 올바르게 예측한 사람들에게 보상을 줄 뿐만 아니라, 실제로 하지 않았을&rsquo; 때 iVoted를 올바르게 했다고 말함으로써 속인 것으로 보이는 사람들에게 불이익을 줄 수 있습니다.</p>  <h3><b>교훈</b></h3>  <p>우리는 우리의 전반적인 디자인에 매우 편안하게 느낀다; 특히 Windows Azure에서 게임의 큰 구성 요소를 실행하여 새로운 프레젠테이션 플랫폼으로 빠르게 개발할 수 있습니다.</p>  <p>Windows Azure SQL Database 쿼리 최적화 프로세스는 일반 SQL 서버보다 더 어렵습니다. 이제 중단된 <a target="_blank" href="https://www.red-gate.com/products/dba/sql-azure-backup">RedGate 백업 유틸리티</a>를 사용하여 DB의 로컬 복사본을 만든 다음 SQL Profiler를 실행하여 결과를 SQL DB 튜닝 관리자에 공급했습니다. SQL Management Studio 통해 SQL Database 튜닝 관리자 제안 인덱스를 수동으로 적용했습니다. Microsoft가 가까운 장래에 이 프로세스를 개선하는 도구를 제공할 수 있기를 바랍니다. 개발 프로세스 중에 배운 주요 Windows Azure 단원은 배포와 관련이 있었습니다. 처음에는 VM이 정기적으로 다시 설정된다는 사실을 깨닫지 못한 채 웹 역할&rsquo; 웹 배포 옵션을 사용했습니다.&nbsp; 웹 배포의 비영구적 특성으로 인해 웹 역할 VM이 다시 이미지화될 때 배포가 원래 상태로 되돌아갑니다. 다시 이미징이 발생하는 경우 Microsoft는 우리가 알고 있던 알림을 &ndash; 보내지 않습니다. 이로 인해 애플리케이션이 계속 이전 동작으로 되돌아갈 때 혼란이 발생했습니다. &nbsp;</p>  <p>그러나 전반적으로 우리는 Windows Azure에서 뛰어난 경험을 했습니다. 예측할 수 없고 빠른 수요 변화로 Windows Azure는 게임에 이상적인 운영 플랫폼으로 입증되었습니다. 또한 개발 도구는 짧은 학습 곡선으로 좋은 생산성을 제공했습니다.</p>  <p>본질적으로 기술적이지만 최종 결과가 사용하기 쉽고 재미있는 스포츠 게임이 되기를 바랍니다. 작업 결과를 확인하려면 www.ivotesports.com 방문하세요.</p>'
