### YamlMime:Yaml
ms.openlocfilehash: b0e7e5b7b34d49bb3a3e5688edb7fbb3feecc5b4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139901429"
Slug: automate-linux-vm-customization-tasks-using-customscript-extension
Title: CustomScript 확장을 사용하여 Linux VM 사용자 지정 작업을 자동화합니다.
Summary: 이 게시물에서는 CustomScript 확장에서 실행되는 미리 정의된 스크립트를 사용하여 Linux VM을 사용자 지정하는 방법을 알아봅니다.
Content: "<p><span style=\"font-size: small;\">Windows 확장 블로그에서 Windows VM에 대한 CustomScript 확장에 이미 익숙할 수 있습니다</span><a href=\"https://azure.microsoft.com/blog/2014/04/24/automating-vm-customization-tasks-using-custom-script-extension/\"><span style=\"font-size: small;\"></span></a><span style=\"font-size: small;\">. 좋은 소식은 현재 Linux VM에서도 확장을 사용할 수 있다는 것입니다. </span> <span style=\"font-size: small;\">Cloud-init도 </span><a href=\"https://azure.microsoft.com/blog/2014/04/21/custom-data-and-cloud-init-on-windows-azure/\"><span style=\"font-size: small;\">이전 블로그</span></a>에 도입 <span style=\"font-size: small;\"> 되어 프로비전 시간 동안 스크립트 또는 메타데이터를 Azure Linux VM에 삽입할 수 있습니다. CustomScript 확장은 VM을 사용자 지정하기 위한 더 많은 기능을 제공하며, Azure 지원 Linux VM에서 실행할 수 있습니다. </span></p>\n\n<h2><span style=\"font-size: x-large;\">CustomScript에서 수행할 수 있는 작업은 무엇인가요? </span></h2>\n\n<p><span style=\"font-size: small;\">Azure에서 Linux VM을 만든 후 VM에 워크로드(웹 서버, 데이터베이스 등)를 배포해야 할 수 있습니다. 이상적으로는 스크립트의 직렬을 통해 수행할 수 있습니다. </span></p>\n\n<ul>\n <li><span style=\"font-size: small;\">CustomScript 확장은 사용자가 입력한 매개 변수를 사용하여 지정한 위치에서&rsquo; 이러한 스크립트를 자동으로 다운로드하고 실행할 수&rsquo; 있습니다. </span></li>\n <li><span style=\"font-size: small;\">CustomScript 확장은 VM에 특파원 스크립트 인터프리터가 설치되어 있는 한 Linux(Python, Linux 셸 스크립트 등)용 스크립팅 언어로 작성된 스크립트를 지원합니다. </span></li>\n <li><span style=\"font-size: small;\">프로비전 후 언제든지 CustomScript 확장을 설치하고 구성할 수 있습니다. </span></li>\n <li><span style=\"font-size: small;\">Azure PowerShell Cmdlet,&nbsp; </span><a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">xPlat 스크립트</span></a> 또는 Azure 관리 포털을 사용하여 CustomScript 확장을 배포할 수 있습니다 <span style=\"font-size: small;\"> .&nbsp; </span></li>\n</ul>\n\n<p><strong>2015년 2월의 업데이트는 원래 블로그 게시물 이후 추가된 새로운 기능입니다.</strong><br />\n1. xPlat 스크립트를 통한 배포<br />\n2. Azure 관리 포털을 통한 배포<br />\n3. 인라인 지원 명령<br />\n4.포털 또는 Get Deployment&rdquo; cmdlet의 결과로&nbsp; &ldquo;마지막 4KB 출력(stdout, stderr)을 표시합니다.</p>\n\n<p><strong>UpdatesinDecember&nbsp;&nbsp; 2015는 마지막 업데이트 이후 <font size=\"2\">추가된 새로운 기능입니다</font>.</strong><br />\n1. Azure Resource Manager 모델에서 Linux용 CustomScript 확장을 실행하는 샘플 Powershell 및 CLI 스크립트에 대한 Azure Resource Manager 모델 지원은 github 릴리스 문서(<a href=\"https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md\"><u><font color=\"#0066cc\">https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md</font></u></a>)를 참조하세요.<br />\n2.Linux 1.4용 CustomScript Extention이 릴리스되어 보호된 구성 섹션의 commandToExecute&quot; 매개 변수에서 &quot;데이터 전달을 지원하므로 중요한 데이터를 추가로 보호할 수 있습니다. 자세한 내용은 (<a href=\"https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md\"><u><font color=\"#0066cc\">https://github.com/Azure/azure-linux-extensions/blob/master/CustomScript/README.md</font></u></a>)를 참조하세요.</p>\n\n<p>&nbsp;</p>\n\n<h2><span style=\"font-size: large;\"><span style=\"font-size: x-large;\">필수 구성 요소</span> </span></h2>\n\n<ul>\n <li><span style=\"font-size: small;\">Linux 에이전트 버전 2.0.6 이상을 Microsoft Azure. 대부분의 Azure VM Linux 갤러리 이미지에는 버전 2.0.6이 포함되어 있습니다. <b>waagent -version</b>을 실행하여 VM에 설치된 버전을 확인할 수 있습니다. VM이 2.0.6 이전 버전을 실행하는 경우 다음 </span><a href=\"https://github.com/Azure/WALinuxAgent\"><span style=\"font-size: small;\">지침</span></a>에 따라 <span style=\"font-size: small;\"> 업데이트할 </span> 수 있습니다.</li>\n <li><span style=\"font-size: small;\"> 스크립트 시나리오에 대한 </span> <a href=\"https://azure.microsoft.com/en-us/downloads/\"><span style=\"font-size: small;\">Azure PowerShell</span></a><span style=\"font-size: small;\"> 및 </span><a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">플랫폼 간 CLI</span></a>입니다.</li>\n <li><span style=\"font-size: small;\">실행할 스크립트를 준비하고 스크립트를 통해&nbsp; 확장을 배포하려는&nbsp; 경우 Azure Storage Blob 또는 Github 위치에 업로드되었는지 확인합니다. Azure&nbsp; Portal을 통해 배포하려는&nbsp; 경우 로컬 컴퓨터에 스크립트를 저장할 수 있습니다.</span></li>\n</ul>\n\n<h2><span style=\"font-size: large;\"><span style=\"font-size: x-large;\"> 스크립트를 통해</span> <span style=\"font-size: x-large;\">CustomScript 확장 배포</span></span></h2>\n\n<p><span style=\"font-size: small;\"><span style=\"font-size: small;\">배포&nbsp; Scriptinggives를&nbsp; 통한 CustomScript 확장은 여러 머신을 자동화&nbsp;할 수 있는 유연성을 제공합니다.&nbsp;&nbsp; There</span>는 사용자의&nbsp; 스크립트 위치에 대한 두 가지 옵션&nbsp;인 Azure Storage 또는 GitHub. Azure PowerShell 또는 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">플랫폼 간 CLI</span></a><a href=\"https://azure.microsoft.com/en-us/downloads/\">를 통해</a><span style=\"font-size: small;\">&nbsp; </span> 실행할 수도 있습니다.&nbsp; 또한 인&quot;라인&quot; 모드도 지원됩니다.</span></p>\n\n<p><span style=\"font-size: medium;\"><strong>Azure Storage Blob에 저장된 스크립트 실행 </strong></span></p>\n\n<ol>\n <li><span style=\"font-size: small;\">사용자가 스크립트를 작성하고 Azure Blob 위치에 업로드합니다. </span></li>\n <li><span style=\"font-size: small;\">그는 프로비전 중에 또는 프로비저닝을 게시하는 동안 VM에 확장을 추가합니다. </span></li>\n <li><span style=\"font-size: small;\">스크립트의 Azure Blob 위치와 선택적 매개 변수를 입력합니다. </span></li>\n <li><span style=\"font-size: small;\">VM 내에서 확장은 스크립트를 다운로드합니다. </span></li>\n <li><span style=\"font-size: small;\">확장은 사용자가 지정한 매개 변수를 사용하여 스크립트를 시작합니다. </span></li>\n</ol>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">Power Shell 샘플:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Sample PowerShell Script to run a Linux Shell script stored in Azure blob\n#Enter the VM name, Service name, Azure storage account name and key\n$vm = Get-AzureVM -ServiceName &quot;MyService&quot; -Name &quot;MyVM&quot;\n$PrivateConfiguration = &#39;{&quot;storageAccountName&quot;: &quot;MyAccount&quot;,&quot;storageAccountKey&quot;:&quot;Mykey&quot;}&#39; \n#Specify the Location of the script from Azure blob, and command to execute\n$PublicConfiguration = &#39;{&quot;fileUris&quot;:[&quot;https://MyAccount.blob.core.windows.net/vhds/MyShellScript.sh&quot;], &quot;commandToExecute&quot;: &quot;sh MyShellScript.sh&quot; }&#39; \n \n#Deploy the extension to the VM, always use the latest version by specify version &ldquo;1.*&rdquo;\n$ExtensionName = &#39;CustomScriptForLinux&#39;  \n$Publisher = &#39;Microsoft.OSTCExtensions&#39;  \n$Version = &#39;1.*&#39; \nSet-AzureVMExtension -ExtensionName $ExtensionName -VM  $vm -Publisher $Publisher -Version $Version -PrivateConfiguration $PrivateConfiguration -PublicConfiguration $PublicConfiguration  | Update-AzureVM</pre>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">Xplat 샘플:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Sample xPlat Script \nnode bin/azure vm extension set MyVM CustomScriptForLinux Microsoft.OSTCExtensions  1.2 -i &#39;{&quot;fileUris&quot;:[&quot;https://MyAccount.blob.core.windows.net/vhds/MyShellScript.sh&quot;], &quot;commandToExecute&quot;: &quot; sh MyShellScript.sh &quot; }&#39; -t &#39;{&quot;storageAccountName&quot;:&quot;MyAccount &quot;,&quot;storageAccountKey&quot;:&quot; Mykey&quot;}&#39;  \n</pre>\n\n<p><span style=\"font-size: medium;\"><strong>GitHub 저장된 스크립트 실행 </strong></span></p>\n\n<ol>\n <li><span style=\"font-size: small;\">사용자가 스크립트를 작성하고 GitHub 업로드합니다.</span></li>\n <li><span style=\"font-size: small;\">프로비전 또는 사후 프로비전 중에 VM에 확장을 추가합니다. </span></li>\n <li><span style=\"font-size: small;\">스크립트의 GitHub 위치와 선택적 매개 변수를 입력합니다.</span></li>\n <li><span style=\"font-size: small;\">VM 내에서 확장은 스크립트를 다운로드합니다. </span></li>\n <li><span style=\"font-size: small;\">확장은 사용자가 지정한 매개 변수를 사용하여 스크립트를 시작합니다. </span></li>\n</ol>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">PowerShell 샘플:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Identify the VM\n$vm = Get-AzureVM -ServiceName &lsquo;MyServiceName&rsquo; -Name &lsquo;MyVMName&rsquo;\n#Specify the Location of the script and the command to execute\n$PublicConfiguration = &#39;{&quot;fileUris&quot;:[&quot;https://github.com/MyProject/Archive/MyPythonScript.py&quot;], &quot;commandToExecute&quot;: &quot;python MyPythonScript.py&quot; }&#39; \n\n#Deploy the extension to the VM, pick up the latest version of the extension\n$ExtensionName = &#39;CustomScriptForLinux&#39;  \n$Publisher = &#39;Microsoft.OSTCExtensions&#39;  \n$Version = &#39;1.*&#39; \nSet-AzureVMExtension -ExtensionName $ExtensionName -VM  $vm -Publisher $Publisher -Version $Version -PublicConfiguration $PublicConfiguration  | Update-AzureVM</pre>\n\n<p><span style=\"font-size: small;\"><strong><span style=\"text-decoration: underline;\">Xplat 샘플:</span></strong></span></p>\n\n<pre class=\"prettyprint\">\n#Sample xPlat Script \nnode bin/azure vm extension set MyVM CustomScriptForLinux Microsoft.OSTCExtensions  1.2 -i &#39;{&quot;fileUris&quot;:[&quot; https://github.com/MyProject/Archive/MyPythonScript.py &quot;], &quot;commandToExecute&quot;: &quot; python MyPythonScript.py &quot; }&#39; \n</pre>\n\n<p><b><span style=\"font-size: medium;\">인라인 스크립트 실행</span> </b></p>\n\n<p><span style=\"font-size: small;\">스크립트&nbsp; 대신 명령을 실행&nbsp;하려는 경우 별도의 스크립트를 작성하지&#39;&nbsp; CommandToExecute&gt; 매개 변수를&nbsp; &lt;활용하여 명령을 배포 스크립트에 인라인으로 복사하기만 하면 됩니다. 다음은 PowerShell 스크립트 예제입니다.</span></p>\n\n<pre class=\"prettyprint\">\n#Sample PowerShell Script\n#Sample script to run a Python script inline\n#Enter the VM name and Service name\n$vm = Get-AzureVM -ServiceName &quot;MyService&quot; -Name &quot;MyVM&quot;\n#Specify the command to execute\n$PublicConfiguration = &#39;{&quot;commandToExecute&quot;: &quot; python -c \\&quot;print &quot;hello,azure!&quot;\\&quot;&quot;}&#39; \n\n#Deploy the extension to the VM\n$ExtensionName = &#39;CustomScriptForLinux&#39;  \n$Publisher = &#39;Microsoft.OSTCExtensions&#39;  \n$Version = &#39;1.*&#39; \nSet-AzureVMExtension -ExtensionName $ExtensionName -VM  $vm -Publisher $Publisher -Version $Version -PublicConfiguration $PublicConfiguration  | Update-AzureVM\n</pre>\n\n<p><span style=\"font-family: Calibri; font-size: x-large;\">Azure Portal을 통해 CustomScript 확장 배포</span></p>\n\n<p>이 시나리오에서는 사용자가 CustomScript 확장을 배포하는 스크립트를 작성할 필요가 없습니다. 사용자는 로컬 데스크톱 또는 랩톱에 스크립트를 저장하고 포털을 통해 Azure에 스크립트를 업로드할 수 있습니다. 포털에서 확장 처리기를 시작합니다.</p>\n\n<p>1.포털에 로그인하고, 확장을 실행할 가상 머신을 찾고, 설정을 클릭한 &quot;다음,&nbsp;Extension&quot; 섹션을&nbsp;&quot;&quot; 선택합니다.</p>\n\n<p>2. 그러면 확장 페이지가 표시됩니다. 추가&ldquo; 단추를 클릭합니다.&nbsp; &ldquo;</p>\n\n<p>3.Extension&nbsp;&nbsp; 목록에서 CustomScript 확장을 선택하고 페이지 아래쪽에서 만들기&rdquo; 단추를 클릭합니다&ldquo;.</p>\n\n<p>4. 이제 CustomScript 확장 페이지가 팝업되어 사용자가 두 개의 매개 변수인 1을 입력할 수 있습니다. 스크립트 2의 경로입니다. 스크립트에 대한 매개 변수</p>\n\n<p>5.로컬 컴퓨터에서 실행하려는 스크립트로 이동한 다음, 필요한 경우 스크립트에 대한 매개 변수를 입력하고, &nbsp;만들기&rdquo;를 클릭하고&ldquo;, 확장이 VM에 배포되고, 스크립이 시작됩니다.</p>\n\n<p>포털을 통한 배포에는 다음과 같은 요구 사항이 있습니다. 1.&nbsp; 하나의 스크립트만 업로드할 수 있습니다. 업로드하고 실행하려는 여러 스크립트가 있는 경우 위에 나열된 스크립트 접근 방식을 사용자로 지정할 수 있습니다. 2. UI에 Command to Execute&rdquo; 매개 변수가 없&ldquo;으므로 스크립트 &nbsp; 의 시작 부분에 인터프리터를 지정해야 합니다. 예를 들면 &quot; #!/usr/bin/env python입니다&quot;.</p>\n\n<h2>&nbsp;</h2>\n\n<h2>결과 쿼리</h2>\n\n<ul>\n <li><a name=\"OLE_LINK5\"></a><a name=\"OLE_LINK4\"></a><span style=\"color: rgb(0, 0, 0); font-size: small;\">CustomScript 확장은 확장 배포 직후 사용자&rsquo; 스크립트를 시작합니다. </span></li>\n <li><span style=\"color: rgb(0, 0, 0);\"><span style=\"font-size: small;\">실행 결과는 Azure PowerShell Cmdlet Get-AzureVM 또는 Get-Deployment를 통해 검색할 수 있습니다. </span><a href=\"https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/\"><span style=\"font-size: small;\">xPlat 스크립트</span></a><span style=\"font-size: small;\"> 및 Azure Portal &ldquo;상태 탭을 통해 상태를&rdquo; 확인할 수도 있습니다. 여기에는 마지막&nbsp; 4K 표준 출력, 표준 errorfrom&nbsp; 사용자&rsquo; 스크립트가 포함됩니다.</span></span></li>\n <li><span style=\"font-size: small;\"><span style=\"color: rgb(0, 0, 0);\">CustomScript 확장&rsquo; 로그 파일은 /var/log/azure/Microsoft.OSTCExtensions에서 찾을 수 있습니다. CustomScriptForLinux/1.0/extension.log.&nbsp; </span><span style=\"color: rgb(0, 0, 0);\">사용자&rsquo; 스크립트의 표준 출력도 이 로그 파일에 캡처됩니다. </span></span></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<h2>추가적인 참고 사항</h2>\n\n<ul>\n <li><span style=\"font-size: small;\"><span style=\"font-size: small;\">여러 스크립트가 있는 경우 종속 스크립트를 호출하는 진입점 스크립트를 작성한 다음 진입점 스크립트, 종속 스크립트 및 기타 종속 이진 파일을 스크립트 위치(Azure Storage Blob 또는 GitHub)에 업로드할 수 있습니다. fileUris&nbsp; :&nbsp; </span></span><span style=\"font-family: Calibri;\">&ldquo;[&ldquo;ScriptFileUri1&rdquo;, ScriptFileUri2&rdquo;, &ldquo;&quot;ScriptFileUri3&quot;]&rdquo;</span></li>\n</ul>\n\n<ul>\n <li><span style=\"font-size: small;\">확장은 VM을 만든 후 일회성 작업을 위해 설계되었습니다. 확장이 동일한 구성을 사용하여 두 번째로 호출되는 경우 지정한 스크립트를 실행하지 않습니다. 그러나 CustomScript 확장을 여러 번 실행해야 하는 경우 다른 구성으로 실행할 수 있습니다. 예를 들어: </span></li>\n</ul>\n\n<ol>\n <li><span style=\"font-size: small;\">스크립트의 이름을 변경합니다. </span></li>\n <li><span style=\"font-size: small;\">다음 코드를 사용하여 타임스탬프를 [PublicConfiguration] 매개 변수로 추가합니다.</span>\n <pre class=\"prettyprint\">\n#Generate the current timestamp, add to the configuration, this ensures the configuration is different every time the CustomScript extension runs\n$TimeStamp = (Get-Date).Ticks\n$PublicConfiguration =&#39;{&quot;fileUris&quot;:[&quot;MyAccount.blob.core.windows.net/vhds/MyShellScript.sh&quot;], &quot;commandToExecute&quot;: &quot;sh MyShellScript.sh&quot;, &quot;timestamp&quot;: &quot;&#39; + $TimeStamp + &#39;&quot;}&#39;</pre>\n </li>\n</ol>\n\n<p><span style=\"font-size: x-large;\">알려진 문제</span></p>\n\n<p>Linux VM에서 PowerShell 명령 &ldquo;Set-AzureVMExtension&rdquo; 을 실행하면 다음 오류가 발생할 수 있습니다. &quot;IaaS VM 액세스 확장을&quot; 설정하기 전에 VM 개체에서 게스트 에이전트 프로비저닝을 사용하도록 설정해야 합니다. 새 포털을 사용하는 경우에는 이런 일이 발생하지 않습니다. 근본 원인: 포털을 통해 이미지를 만들 때 VM의 게스트 에이전트 값이 항상&nbsp; True&rdquo;로 &ldquo;설정되지는 않습니다. PowerShell을 사용하여 VM을 만든 경우 이 문제가 표시되지 않습니다. 해결 방법: 다음 PowerShell 명령을 추가하여 ProvisionGuestAgent를 True&rdquo;로 &ldquo;설정합니다. $vm = Get-AzureVM -ServiceName &#39;MyServiceName&#39; -Name &#39;MyVMName&#39; $vm.GetInstance(). ProvisionGuestAgent = $true</p>"
