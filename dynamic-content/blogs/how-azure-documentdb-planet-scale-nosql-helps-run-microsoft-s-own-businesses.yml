### YamlMime:Yaml
ms.openlocfilehash: ffde467701454a814a691aa5347b9686b34fdc61
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902141"
Slug: how-azure-documentdb-planet-scale-nosql-helps-run-microsoft-s-own-businesses
Title: Microsoft에서 Azure Cosmos DB를 사용하여 확장성이 뛰어난 서비스를 빌드하는 방법
Summary: 이번 주 Microsoft Data Amp에서는 데이터 플랫폼에서 Microsoft의 최신 혁신을 사용하여 놀라운 데이터 기능을 활용하는 방법을 다룹니다. 데이터 플랫폼의 핵심 요소 중 하나는 다음과 같습니다.
Content: >-
  <p><strong><a href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-nosql-local-emulator">https://docs.microsoft.com/en-us/azure/documentdb/documentdb-nosql-local-emulator</a>2017년 5월 10일 현재</strong></p>


  <p><strong>Azure Cosmos DB는 전역적으로 분산된 Microsofts&rsquo; 다중 모델 데이터베이스입니다. Azure Cosmos DB는 글로벌 배포 및 수평적 확장을 핵심으로 처음부터 빌드되었습니다. 사용자가 어디에 있든 데이터를 투명하게 스케일링하고 복제하여 모든 수의 Azure 지역에 턴키 글로벌 배포를 제공합니다. 전 세계적으로 처리량 및 스토리지를 탄력적으로 확장하고 필요한 처리량 및 스토리지에 대해서만 비용을 지불합니다. Azure Cosmos DB는 전 세계 어디서나 99번째 백분위수에서 한 자리 밀리초의 대기 시간을 보장하고, 성능을 미세 조정하기 위해 잘 정의된 여러 일관성 모델을 제공하며, 업계 최고의 SLA(서비스 수준 계약)가 지원하는 멀티 호밍 기능으로 고가용성을&mdash; 보장합니다.&nbsp;</strong></p>


  <p><strong>Azure Cosmos DB는 스키마에 구애받지 않습니다. 스키마 및 인덱스 관리를 처리할 필요 없이 모든 데이터를 자동으로 인덱싱합니다. &rsquo;또한 문서, 키-값, 그래프 및 열 패밀리 데이터 모델을 기본적으로 지원하는 다중 모델도 제공합니다. Azure Cosmos DB를 사용하면 DocumentDB SQL(문서), MongoDB(문서), Azure Table Storage(키-값) 및 Gremlin(그래프)이 모두 기본적으로 지원되므로 원하는 API를 사용하여 데이터에 액세스할 수 있습니다.</strong></p>


  <hr>

  <p>이번 주 <a href="https://www.microsoft.com/dataamp">Microsoft Data Amp에서는 데이터 플랫폼에서 Microsofts</a>&rsquo; 최신 혁신을 사용하여 놀라운 데이터 기능을 활용하는 방법을 설명했습니다. 데이터 플랫폼의 핵심 요소 중 하나는 Azure Cosmos DB, Microsofts&rsquo; <a href="https://docs.microsoft.com/azure/cosmos-db/introduction">전역적으로 분산된 다중 모델 데이터베이스 서비스</a>입니다. Azure Cosmos DB는 수년 동안 자사 Microsoft 서비스 백 엔드로 거의 유비쿼터스로 사용됩니다.</p>


  <p>이 블로그에서는 Windows, 유니버설 스토어 및 Azure IoT Hub 팀이 Azure Cosmos DB의 자사 애플리케이션에 대한 사례 연구와 이러한 팀이 Azure Cosmos DB의 확장성, 짧은 대기 시간 및 유연성 이점을 활용하여 혁신하고 비즈니스 가치를 서비스에 제공하는 방법에 대해 설명합니다.</p>


  <h2>Microsoft DnA: Microsoft에서 오류 보고 및 진단을 사용하여 Windows 개선하는 방법</h2>


  <p>Microsoft의 Windows DnA(데이터 및 분석) 팀은 Windows 위한 크래시 보고 기술을 구현합니다. 해당 구성 요소 중 하나는 모든 Windows 디바이스에서 Windows 서비스로 실행됩니다. 애플리케이션이 사용자&#39;데스크톱에서 응답을 중지할 때마다 Windows 오류 후 디버그 정보를 수집하고 사용자에게 오류에 대한 해결 방법을 찾는 데 관심이 있는지&rsquo; 묻는 메시지를 표시합니다. 사용자가 수락하면 덤프가 인터넷을 통해 DnA 서비스로 전송됩니다. 덤프가 서비스에 도달하면 분석되고 솔루션이 사용 가능한 경우 사용자에게 다시 전송됩니다.</p>


  <h3>진단 정보를 보고하는 Windows 오류</h3>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fa8b07ec-f097-4fcf-bcff-a313d3c3ba35.jpg"><img alt="clip_image002" border="0" height="537" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c0b662bd-0dcb-4d1d-aa61-8f03a5b153b0.jpg" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" title="clip_image002" width="771"></a></p>


  <p>&nbsp;</p>


  <h3>빠른 키-값 조회에 대한 Windows&#39; 필요</h3>


  <p>DnAs&rsquo; 용어에서 크래시 보고서는 버킷으로 &ldquo;구성됩니다&rdquo;. 각 버킷은 애플리케이션 이름, 애플리케이션 버전, 모듈 이름, 모듈 버전 및 OS 예외 코드와 같은 주요 특성별로 문제를 분류하는 데 사용됩니다. 각 버킷에는 동일한 버그로 인해 발생하는 크래시 보고서가 포함됩니다. 하드웨어 및 소프트웨어 공급업체의 대규모 에코시스템과 오류 보고서에 대한 15년 동안 수집된 데이터를 통해 DnA 서비스는 데이터베이스 클러스터에 <strong>100억 개 이상의 고유한 버킷</strong> 을 보유하고 있습니다.</p>


  <p>DnA 팀&rsquo; 요구 사항 중 하나는 액면가에서 다소 간단했습니다. <strong>버킷의 해시가 지정된 경우 버킷/문제에 해당하는 ID를 반환합니다(사용 가능한 경우).</strong> 그러나 이 규모는 흥미로운 기술적 과제를 제기했습니다. 많은 데이터(100억 버킷, 하루에 600만 개 증가), 대량의 요청 및 글로벌 도달률(Windows 실행하는 모든 디바이스의 요청) 및 낮은 대기 시간 요구 사항(좋은 사용자 환경을 보장하기 위해)이 있었습니다.</p>


  <p>버킷 차원을&rdquo; 저장&ldquo;하기 위해 DnA 팀은 프로비전된 처리량의 초당 요청 단위가 400,000개인 단일 Cosmos DB 컨테이너를 프로비전했습니다. 모든 액세스는 기본 키에 의한 것이었기 때문에 파티션 키를 ID&rdquo;와 동일하게 &ldquo;구성하고 다양한 특성의 다이제스트를 값으로 구성했습니다. Azure Cosmos DB가 10ms 읽기 대기 시간 및 &lt;p99에서 15ms 쓰기 대기 시간을 제공&lt;함에 따라 DnA는 시간이 지남에 따라 데이터 및 요청 볼륨이 계속 증가하는 경우에도 버킷 및 조회 문제에 대해 빠른 조회를 수행할 수 있습니다.</p>


  <h3>cab 카탈로그 메타데이터 및 쿼리 Windows</h3>


  <p>DnA 팀은 빠른 실시간 조회 외에도 데이터를 사용하여 가장 영향력 있는 문제를 해결하여 Microsoft 및 기타 공급업체&rsquo; 제품을 개선하는 데 도움이 되는 엔지니어링 결정을 주도하고자 했습니다. 예를 들어, 팀은 안정성 문제의 상위 1%를 해결하면 고객&rsquo; 문제의 50%를 해결할 수 있다고 관찰했습니다. 이 분석을 위해서는 크래시 덤프 이진 파일, cabs&rdquo;를 &ldquo;저장하고 유용한 메타데이터를 추출한 다음 이 데이터에 대한 분석 및 보고서를 실행해야 했습니다. 이것은 그 자체로 흥미로운 도전의 숫자를 제시했다.</p>


  <ul>
   <li>팀은 약 <strong>600가지 유형의 안정성 인시던트 데이터를</strong> 처리합니다. 스키마 및 인덱스를 관리하려면 팀에서 상당한 엔지니어링 및 운영 오버헤드가 필요했습니다.</li>
   <li>cab 메타데이터도 대량의 데이터였습니다. 약 50억 개의 택시가 있었고 매일 3천만 개의 새로운 택시가 추가되었습니다.</li>
  </ul>


  <p>DnA 팀은 버킷 차원 및 Cab 카탈로그 저장소를 SQL Server의 온-프레미스 클러스터를 기반으로 이전 솔루션에서 Azure Cosmos DB로 마이그레이션할 수 있습니다. 데이터베이스&rsquo;를 Cosmos DB로 전환한 이후 DnA는 Cosmos DB에서 제공하는 속도, 규모 및 유연성을 활용했습니다. 더 중요한 것은 데이터베이스 유지 관리에 집중하지 않고 Windows 사용자 환경을 개선하는 데 더 집중할 수 있다는 것입니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/82376144-66ba-47fa-a4e8-6807ababfa55.jpg"><img alt="clip_image004" border="0" height="674" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a19374f3-94cb-4c06-a90c-a6b8162ad8b9.jpg" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" title="clip_image004" width="404"></a></p>


  <p><a href="https://customers.microsoft.com/en-US/story/microsoftdataandanalytics">Microsofts&rsquo; DnA 팀에서 Azure Cosmos DB를 사용하여 세계적인 규모의 빅 데이터 수집을 달성</a>한 사례 연구를 읽을 수 있습니다.</p>


  <h2>Microsoft Global Homing Service: Xbox Live 및 유니버설 스토어에서 고가용성 위치 서비스를 빌드하는 방법</h2>


  <p>Microsofts&rsquo; 유니버설 스토어 팀은 Windows Store, Xbox 및 대규모 Microsoft 서비스 집합에서 Microsoft&rsquo; 상점을 구동하는 데 사용되는 전자 상거래 플랫폼을 구현합니다. 유니버설 스토어 백 엔드의 주요 내부 구성 요소 중 하나는 GHS(Global Homing Service)입니다. 이 서비스는 다운스트림 소비자에게 1~2개의 임의 ID와 연결된 위치 메타데이터를 빠르게 검색할 수 있는 기능을 제공하는 매우 신뢰할 수 있는 서비스입니다.</p>


  <h3>4개 지역에서 Azure Cosmos DB를 사용하는 GHS(Global Homing Service)</h3>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0281f508-a27f-4db8-bba2-a3b2f50e021f.png"><img alt="GLS" border="0" height="455" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/df3ee525-fde3-40f9-8578-c3376078b25c.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" title="GLS" width="488"></a></p>


  <p><strong>GHS는 대부분의 소비자 서비스에 대한 핫 경로에 있으며 초당 수십만 개의 요청을 받습니다.</strong> 따라서 서비스에 대한 대기 시간 및 처리량 요구 사항은 엄격합니다. 이 서비스는 파트너 팀의 요구 사항을 충족하기 위해 99.9번째 백분위수에서 300ms 종단 간 99.99%의 가용성과 예측 가능한 대기 시간을 유지해야 했습니다. 대기 시간을 줄이기 위해 서비스는 지역 분산되므로 파트너 서비스를 호출하는 데 최대한 가깝습니다.</p>


  <p>GHS의 초기 디자인은 Azure Table Storage 다양한 수준의 캐시를 조합하여 구현되었습니다. 이 솔루션은 초기 부하 집합에 잘 작동했지만 GHS의 중요한 특성과 주요 파트너의 서비스 채택 증가를 감안할 때 기존 SLA가 1분 동안 99.99% 안정성을 갖춘 300ms의 &lt;파트너&rsquo; P99.9 요구 사항을 충족하지 않을 것이 분명해졌습니다. GHS 호출 경로에 대한 중요한 종속성을 가진 파트너는 전반적인 안정성이 높더라도 시간 제한 수가 허용 오차를 초과하여 파트너&rsquo; 소유 SLA가 눈에 띄게 저하되는 기간이 있음을 발견했습니다. 이러한 시간 제한 증가 기간에는 마이크로 중단이라는 이름이 &ldquo;주어졌고 주요 파트너는&rdquo; 매일 추적을 시작했습니다.</p>


  <p>LevelDB, Kafka, MongoDB 및 Cassandra와 같은 다양한 가능한 솔루션을 조사한 후 유니버설 스토어 팀은 GHSS&rsquo; Azure Table 백 엔드와 그 앞에 있는 원래 캐시를 Azure Cosmos DB 백 엔드로 바꾸기로 결정했습니다. GHS는 파트너 팀이 가장 큰 공간을 가진 4개 지리적 지역에 초당 600,000개의 요청 단위가 배포된 단일 Cosmos DB 컬렉션을 배포했습니다. Azure Cosmos DB로 전환한 결과 GHS 고객은 30ms 미만의 p50 대기 시간과 마이크로 중단의 수와 규모가 크게 감소했습니다. GHSs&rsquo; 가용성은 마이그레이션 이후 99.99% 이상으로 유지되었습니다. 서비스 가용성의 증가 외에도 대부분의 GHS 호출 패턴에서도 전반적인 대기 시간이 크게 향상되었습니다.</p>


  <h3>Azure Cosmos DB 마이그레이션 전후의 GHS 마이크로 가동 중단 수</h3>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/48f6ea9e-7d42-4894-b2aa-f51a29b0aa38.png"><img alt="clip_image006" border="0" height="229" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2e2cebf3-3d72-4fae-8509-d412887c6131.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" title="clip_image006" width="714"></a></p>


  <h2>Microsoft Azure IoT Hub: 수십억 개의 IoT 디바이스에서 방화호스를 처리하는 방법</h2>


  <p><a href="https://azure.microsoft.com/services/iot-hub/">Azure IoT Hub</a>는 조직에서 최대 수십억 개의 IoT 디바이스를 연결, 모니터링 및 관리할 수 있는 완전 관리형 서비스입니다. IoT Hub는 디바이스 간의 안정적인 통신, 디바이스 메타데이터 및 동기화된 상태 정보에 대한 쿼리 가능한 저장소를 제공하며 디바이스 연결 및 디바이스 ID 관리 이벤트에 대한 광범위한 모니터링을 제공합니다. IoT Hub는 모든 Azure의 IoT 디바이스에서 들어오는 대량의 쓰기에 대한 수집 지점에 있으므로 백 엔드에 강력하고 확장 가능한 데이터베이스가 필요했습니다.</p>


  <p>IoT Hub는 디바이스와 백 엔드가 디바이스 조건 및 구성을 동기화하는 데 사용할 수 있는 API의 일부로 디바이스 관련 정보 &ldquo; 인 디바이스 <a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-device-twins">쌍</a>&rdquo;을 제공합니다. 디바이스 쌍은 백 엔드에서 디바이스에 할당된 태그, 디바이스 구성 또는 조건을 포함하는 reported 속성&rdquo;의 &ldquo;속성 모음 및 구성 변경을 수행하도록 디바이스에 알리는 데 사용할 수 있는 원하는 속성의 &ldquo;속성&rdquo; 모음을 포함하는 JSON 문서입니다. IoT Hub 팀은 Hbase, Cassandra 및 MongoDB를 통해 Azure Cosmos DB를 선택합니다. Cosmos DB는 짧은 대기 시간, 스토리지 및 처리량의 탄력적 크기 조정, 글로벌 배포를 통한 고가용성 및 자동 인덱싱을 통한 풍부한 쿼리 기능과 같은 필요한 기능을 제공했기 때문입니다.</p>


  <p>IoT Hub는 디바이스 쌍 데이터를 JSON 문서로 저장하고 디바이스에서 보고한 최신 상태를 기반으로 거의 실시간으로 업데이트를 수행합니다. 아키텍처는 대량의 쓰기를 처리하기 위해 탄력적으로 크기를 조정하기 위해 디바이스 ID&nbsp;를 기반으로 하는 분할된 컬렉션을 사용합니다.&nbsp;&nbsp; 또한 IoT Hub는 Service Fabric 사용하여 1-N Azure Cosmos DB 파티션과 통신하는 각 서버의 여러 서버에서 디바이스를 스케일 아웃합니다. 이 토폴로지는 IoT Hub를 사용할 수 있는 각 Azure 지역에 복제됩니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8986f2f0-503c-4b6d-827c-5939df59468f.png"><img alt="clip_image001" border="0" height="317" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/11650702-4a9d-47f6-bac8-8dbad4dc72b6.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto" title="clip_image001" width="634"></a></p>


  <h2>다음 단계</h2>


  <p>이 블로그에서는 Azure Cosmos DB의 몇 가지 자사 사용 사례와 이러한 Microsoft 팀이 Azure Cosmos DB를 활용하여 사용자 환경을 개선하고 대기 시간 및 서비스의 안정성을 개선하는 방법을 살펴보았습니다.</p>


  <ul>
   <li><a href="docs.microsoft.com/azure/documentdb/documentdb-distribute-data-globally">Azure Cosmos DB를 사용한 글로벌 배포</a>에 대해 자세히 알아봅니다.</li>
   <li>Azure Portal에서 새 Azure Cosmos DB 계정을 만들거나 <a href="https://docs.microsoft.com/azure/documentdb/documentdb-nosql-local-emulator">Azure Cosmos DB Emulator 다운로드</a>합니다.</li>
   <li>Twitter <a href="https://twitter.com/AzureCosmosDB">@CosmosDB</a> 에서 팔로우하거나 <a href="https://stackoverflow.com/questions/tagged/azure-cosmos-db">Stack Overflow의 개발자 포럼</a>에서 최신 Azure Cosmos DB 뉴스 및 기능을 최신 상태로 유지하세요.</li>
  </ul>
