### YamlMime:Yaml
ms.openlocfilehash: 26a03151c62402e49869fcbe42ac1f0bc11d95d2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906853"
Slug: deep-dive-into-azure-iot-hub-notifications-and-device-twin
Title: Azure IoT Hub 알림 및 디바이스 쌍에 대한 심층 분석
Summary: Azure IoT Hub의 Rich CiapalaOverviewA 주요 기능인 Andrei Ilnitskii는 디바이스에서 게시된 데이터에 대해 SQL 기반 쿼리를 실행하는 기능입니다. 이러한 데이터는 IoT Hub 관리 저장소에 유지됩니다...
Content: "<p>Azure IoT Hub 알림은 등록, 등록 취소 또는 보고 데이터와 같은 IoT 솔루션에서 발생하는 작업에 대한 자세한 정보를 제공합니다. Device Twins와 결합된 이 도구는 IoT 솔루션을 제어하고 모니터링하는 매우 강력한 도구를 제공합니다. 다음은 Azure IoT Hub 알림을 활용하여 디바이스 Twins 속성을 외부 저장소에 복제하는 방법입니다.</p>\n\n<h2>Azure IoT 디바이스 데이터 저장 및 관리</h2>\n\n<p>Azure IoT Hub의 주요 기능은 디바이스에서 게시된 데이터에 대해 SQL 기반 쿼리를 실행하는 기능입니다. 이러한 데이터는 IoT Hub 관리 저장소에 유지되므로 IoT 솔루션은 자체 저장소를 프로비전하고, 데이터 모델을 정의하고, 저장소를 동기화된 상태로 유지하고, 사용자 지정 저장소를 빌드하고 유지 관리하는 다른 문제를 처리하지 않고도 디바이스 데이터를 간단히 쿼리할 수 있습니다.</p>\n\n<p>즉, 일부 IoT 솔루션은 디바이스 데이터를 외부 저장소에 보관해야 합니다. IoT Hub 데이터 저장소에서 지원되지 않는 방식으로 디바이스 데이터를 쿼리해야 하는 이유(예: 그래프 쿼리, 텍스트 검색 등), 디바이스 데이터를 더 광범위한 데이터 세트와 조인해야 하는 필요성 또는 데이터가 복제되는 위치를 제어해야 하는 경우가 원인일 수 있습니다.</p>\n\n<p>이를 설명하기 위해 IoT Hub 디바이스 수명 주기 및 쌍 변경 알림을 사용하여 디바이스 ID 및 쌍 속성을 외부 저장소( 특히 Azure Cosmos Graph Database)에 복제하는 방법을 보여 주는 <a href=\"https://github.com/Azure-Samples/iot-hub-notifications-sync-graphdb\" target=\"_blank\">샘플을</a> 만들었습니다. 이 샘플은 건물, 방, 바닥 및 온도 조절기의 그래프를 유지 관리합니다. 자동 온도 조절기 꼭짓점은 새로운 자동 온도 조절 장치가 프로비전되고 자동 온도 조절기에서 실내&#39;온도를 보고함에 따라 업데이트됨에 따라 그래프에 동적으로 추가됩니다. 다음 다이어그램은 샘플 프로젝트(파란색), 종속 Azure 리소스(주황색) 및 전체 데이터 흐름을 사용하여 솔루션의 아키텍처를 보여 줍니다.</p>\n\n<p><img alt=\"clip_image001[6]\" border=\"0\" height=\"412\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2862e7bb-acd3-4141-b5cf-a977308e7f4b.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"clip_image001[6]\" width=\"610\"></p>\n\n<p>샘플은 다음 프로젝트에서 구현됩니다.</p>\n\n<ul>\n <li>ThermostatAdmin.csproj - 새 자동 온도 조절기를 프로비전하는 관리 도구</li>\n <li>ThermostatDevice.csproj - IoT Hub에 연결하고 회의실&rsquo;의 현재 온도를 보고하는 자동 온도 조절기 장치</li>\n <li>SyncGraphDbApp.csproj - Azure IoT Hub 알림을 활용하여 온도 조절기 데이터를 더 넓은 그래프로 복제합니다.</li>\n</ul>\n\n<h2>디바이스 쌍 &amp; 알림 입문서</h2>\n\n<p><a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-device-twins\" target=\"_blank\">Device Twins</a> 는 IoT 솔루션&rsquo; 클라우드 서비스와 해당 디바이스 간에 상태를 동기화하는 데 사용됩니다. 각 디바이스&rsquo; 쌍은 원하는 속성 및 reported 속성 집합을 노출합니다. 클라우드 서비스는 원하는 속성을 디바이스에 보내려는 값으로 채웁니다. 디바이스가 연결되면 원하는 속성을 요청 및/또는 구독하고 해당 속성에 대해 작동합니다. 마찬가지로 디바이스는 쌍 reported 속성을 통해&rsquo; 클라우드 서비스에 보내려는 값으로 속성을 채웁니다. 클라우드 서비스는 지점 조회를 통해 또는 개요에서 설명한 대로 해당 속성에 따라 디바이스&rsquo; 집합에서 쿼리를 통해 보고되거나 원하는 디바이스를 검색할 수 있습니다. 또는 클라우드 서비스에 디바이스 수명 주기 이벤트 및 쌍 속성 변경 이벤트를 알 수 있으므로 새 디바이스가 추가되거나 기존 디바이스가 제거되거나 쌍 속성이 변경될 때 서비스가 반응할 수 있습니다.</p>\n\n<p><img alt=\"Twin\" border=\"0\" height=\"312\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b55f5e16-8877-40c3-a671-bc28ea79d6ff.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"트윈\" width=\"610\"></p>\n\n<p>&rsquo;샘플에서 사용되는 몇 가지 디바이스 쌍 기본 사항을 살펴보겠습니다. 먼저, 각 새 자동 온도 조절기를 디바이스로 IoT Hub에 등록해야 합니다. 이렇게 하면 자동 온도 조절기를 허브에 안전하게 연결할 수 있으며 클라우드 서비스가 사용자 정의 디바이스 ID를 통해 디바이스를 참조할 수 있습니다. 다음은 ThermostatAdmin의 코드 조각을&#39;.</p>\n\n<pre class=\"prettyprint\">\n        async Task AddThermostatAsync(RegistryManager registryManager, string deviceId)\n        {\n            var device = new Device(deviceId);\n \n            Console.WriteLine($&quot;Add thermostat &#39;{deviceId}&#39; ...&quot;);\n            await registryManager.AddDeviceAsync(device);\n            Console.WriteLine(&quot;Thermostat added&quot;);\n \n            Twin thermostat = await registryManager.GetTwinAsync(deviceId);\n            PrintTwin(thermostat);\n        }\n</pre>\n\n<p>자동 온도 조절기를 등록한 후에는 물리적 온도 조절기를 허브에 연결할 수 있는 연결 문자열을 작성할 수 있습니다. IoT Hub는 현재 대칭 키 및 X.509 인증서를 통한 인증을 지원합니다. ThermostatDevice는 다음과 같이 전자를 사용합니다.</p>\n\n<pre class=\"prettyprint\">\n        // create a device client to emulate therostat sending temperature update\n        Console.WriteLine(&quot;Create device client and connect to IoT Hub ...&quot;);\n        Service.Device device = await registryManager.GetDeviceAsync(deviceId);\n        if (device == null)\n        {\n            Console.WriteLine($&quot;Thermostat {deviceId} not registered. Please register the thermostat first.&quot;);\n            return;\n        }\n \n        var authMethod = new DeviceAuthenticationWithRegistrySymmetricKey(deviceId, device.Authentication.SymmetricKey.PrimaryKey);\n        var connectionStringBuilder = Device.IotHubConnectionStringBuilder.Create(iotHubConnectionStringBuilder.HostName, authMethod);\n        DeviceClient deviceClient = DeviceClient.CreateFromConnectionString(connectionStringBuilder.ToString(), Device.TransportType.Mqtt);\n \n        await deviceClient.OpenAsync();\n        Console.WriteLine(&quot;Thermostat connected&quot;);\n</pre>\n\n<p>위의 코드 조각은 인증 토큰을 생성하는 데 사용되는 디바이스 대칭 키를 얻기 위해 IoT Hub에서 이전에 등록된 디바이스&rsquo;를 가져옵니다. 일반적으로 디바이스에는 이러한 방식으로 대칭 키를 가져올 수 있는 권한이 없지만 샘플을 위해 수행됩니다. 그런 다음 이 샘플은 디바이스 대칭 키 및 ID를 전달&rsquo;하여 허브와 통신할 때 사용되는 인증 방법을 나타내는 DeviceAuthenticationWithRegistrySymmetricKey 개체의 인스턴스를 만듭니다. 그런 다음, IotHubConnectionStringBuilder 도우미 클래스를 사용하여 DeviceAuthenticationWithRegistrySymmetricKey&rsquo; 개체 및 디바이스가 등록된 IoT Hub에 대한 URI를 사용하여 디바이스 연결 문자열을 생성합니다. DeviceClient.CreateFromConnectionString은 새로 형성된 연결 문자열을 사용하여 DeviceClient를 만드는 데 사용됩니다. OpenAsync는 허브에 대한 링크를 엽니다.</p>\n\n<p>이제 자동 온도 조절기를 허브에 연결했으므로 실내&rsquo;의 현재 온도를 보고할 수 있습니다. ThermostatDevice의 다음 코드 조각은 쌍 reported 속성을 통해 현재 온도를 보고합니다.</p>\n\n<pre class=\"prettyprint\">\n        var props = new TwinCollection();\n        props[&quot;temperature&quot;] = temperature;\n \n        Console.WriteLine();\n        Console.WriteLine($&quot;Update reported properties:&quot;);\n        Console.WriteLine(props.ToJson(Newtonsoft.Json.Formatting.Indented));\n\n        await deviceClient.UpdateReportedPropertiesAsync(props);\n        Console.WriteLine(&quot;Temperature updated&quot;);\n</pre>\n\n<p>TwinCollection 클래스는 보고할 속성 집합을 지정합니다. DeviceClient.UpdateReportedPropertiesAsync는 허브&#39;기본 저장소에 유지되는 IoT Hub로 속성 집합을 보냅니다. 그런 다음 클라우드 서비스는 앞서 설명한 대로 디바이스 ID 또는 쿼리를 통해 특정 디바이스의 속성을 검색할 수 있습니다.</p>\n\n<p>디바이스 쌍 알림은 <a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-read-custom\" target=\"_blank\">경로</a>라는 다른 IoT Hub 기능을 사용하여 구현됩니다. 경로를 사용하면 다양한 IoT Hub 원본의 디바이스 메시지 및 알림을 필터에 따라 사용자 지정 엔드포인트로 전달할 수 있습니다. 예를 들어 디바이스가 IoT Hub에서 추가되거나 제거될 때마다 라우팅 가능한 알림이 발생합니다. 트윈 속성이 업데이트될 때마다 라우팅 가능한 알림이 발생합니다. 이 샘플에서 이러한 알림 유형은 모두 미리 구성된 Azure Event Hub 엔드포인트로 라우팅됩니다. SyncGraphDbApp은 이벤트 허브에서 이러한 알림을 수신 대기하고 그래프 저장소를 동기화합니다. 경로는 Azure Portal 또는 ARM 템플릿을 통해 구성할 수 있습니다.</p>\n\n<h2>전체 솔루션</h2>\n\n<p>엔드 투 엔드 샘플을 경험하려면 <a href=\"https://github.com/Azure-Samples/iot-hub-notifications-sync-graphdb\">GitHub</a> 단계별 지침을 따를 수 있습니다.</p>\n\n<p>샘플에서 SyncGraphDbApp 애플리케이션은 Azure IoT Hub 알림을 활용하여 자동 온도 조절기 데이터를 Cosmos DB 그래프에 복제하는 클라우드 서비스를 시뮬레이션합니다. SyncGraphDbApp은 디바이스 수명 주기 알림을 사용하여 ThermostatAdmin을 통해 새 자동 온도 조절기를 등록할 때마다 새로 프로비전된 각 자동 온도 조절기의 Cosmos DB Graph 자동 온도 조절기 꼭짓점을 만듭니다. ThermostatDevice가 자동 온도 조절기&#39;현재 온도 SyncGraphDbApp을 게시하면 온도 조절기 꼭짓점의 온도 필드가 업데이트됩니다.</p>\n\n<p>SyncGraphDbApp은 디바이스 수명 주기 및 쌍 변경 알림의 처리를 처리합니다. 내부적으로 TwinChangesEventProcessor 클래스는 SyncGraphDBEventHub로 라우팅된 알림을 읽고 그에 따라 그래프를 업데이트합니다. 프로세서는 일반적인 Azure Event Hub 이벤트 프로세서로 구현됩니다. 즉, 해당 팩터리 클래스(TwinChangesEventProcessorFactory)가 있고, IEventProcessor를 구현하고, EventProcessorHost에 의해 트리거됩니다. Azure Event Hub 이벤트 프로세서에 대한 자세한 내용은 <a href=\"https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-programming-guide\">Event Hubs 프로그래밍 가이드를</a> 참조하세요.</p>\n\n<p>새 알림 일괄 처리가 도착하면 TwinChangesEventProcessor.ProcessEventAsync가 호출됩니다. ProcessEventAsync는 SyncDataAsync를 호출하여 일괄 처리를 처리하고 마지막으로 성공적으로 처리된 알림을 기반으로 이벤트 허브 검사점을 업데이트합니다. 검사점을 사용하면 SyncGraphDbApp이 알림을 삭제하지 않고 처리를 다시 시작하고 다시 시작할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\n        public async Task ProcessEventsAsync(PartitionContext context, IEnumerable&lt;EventData&gt; messages)\n        {\n     List&lt;EventData&gt; messagesList = messages.ToList();\n     int lastSuccessfulIndex = -1;\n     while (messagesList.Count &gt; 0)\n     {\n  lastSuccessfulIndex = await this.SyncDataAsync(context, messagesList);\n\n  await context.CheckpointAsync(messagesList[lastSuccessfulIndex]);\n\n  // remove all succeeded messages from the list\n  for (int i = 0; i &lt; lastSuccessfulIndex + 1; i++)\n  {\n      messagesList.RemoveAt(0);\n  }\n     }\n        }\n</pre>\n\n<p>각 알림은 메시지 원본 및 작업 유형에 따라 처리됩니다. 각 알림&rsquo; eventData에서 가져옵니다. 원본 허브 이름 및 디바이스 ID와 함께 속성 헤더입니다. 다음 표에서는 각 메시지 원본 및 작업 유형 조합의 의미를 설명합니다.</p>\n\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"0\" width=\"80%\">\n <tbody>\n  <tr>\n   <td valign=\"top\" width=\"15%\">\n   <p align=\"left\"><strong>메시지 원본</strong></p>\n   </td>\n   <td valign=\"top\" width=\"15%\">\n   <p align=\"left\"><strong>작업 유형</strong></p>\n   </td>\n   <td valign=\"top\" width=\"60%\">\n   <p><strong>설명</strong></p>\n   </td>\n  </tr>\n  <tr>\n   <td valign=\"top\" width=\"15%\">deviceLifeCycleEvents</td>\n   <td valign=\"top\" width=\"15%\">createDeviceIdentity</td>\n   <td valign=\"top\" width=\"60%\">허브에 새 디바이스가 등록되었습니다.</td>\n  </tr>\n  <tr>\n   <td valign=\"top\" width=\"15%\">deviceLifeCycleEvents</td>\n   <td valign=\"top\" width=\"15%\">deleteDeviceIdentity</td>\n   <td valign=\"top\" width=\"60%\">기존 디바이스가 등록 취소되었습니다.</td>\n  </tr>\n  <tr>\n   <td valign=\"top\" width=\"15%\">twinChangeEvents</td>\n   <td valign=\"top\" width=\"15%\">updateTwin</td>\n   <td valign=\"top\" width=\"60%\">그래프의 기존 트윈에 적용할 변경 집합을 포함합니다(예: PATCH).</td>\n  </tr>\n  <tr>\n   <td valign=\"top\" width=\"15%\">twinChangeEvents</td>\n   <td valign=\"top\" width=\"15%\">replaceTwin</td>\n   <td valign=\"top\" width=\"60%\">그래프에서 기존 트윈을 대체할 전체 트윈을 포함합니다(예: PUT).</td>\n  </tr>\n </tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>SyncGraphDbApp은 각 메시지 원본 및 작업 유형 조합을 처리하는 SyncCommand 하위 클래스를 내부적으로 구현합니다. CreateDeviceIdentitySyncCommand를 시작하려면 그래프에 새 자동 온도 조절기를 나타내는 새 꼭짓점을 추가하고 새 가장자리를 통해 위치를 기반으로 자동 온도 조절기를 Room 꼭짓점과 연결합니다. 이 샘플에서는 한 번에 하나의 자동 온도 조절기만 한 방에 연결할 수 있습니다. 또한 알림에는 중복이 있을 수 있습니다. 따라서 충돌 오류를 처리해야 합니다.</p>\n\n<pre class=\"prettyprint\">\n        try\n        {\n            Console.WriteLine(&quot;Add new thermostat vertex ...&quot;);\n            vTwin = await this.AddVertexAsync(&quot;thermostat&quot;, graphTwinId, null);\n        }\n        catch (DocumentClientException ex) when (ex.Error.Code == &quot;Conflict&quot;)\n        {\n            Console.WriteLine($&quot;Thermostat vertex {graphTwinId} already exists in the graph.&quot;);\n            return;\n        }\n \n        // replace location\n        Location? location = this.ParseTaggedLocation(this.jTwin);\n        if (location != null)\n        {\n            await this.ReplaceLocationAsync(vTwin, location.Value);\n        }\n</pre>\n\n<p>DeleteDeviceIdentityCommand는 지정된 자동 온도 조절기의 기존 꼭짓점과 온도 조절기를 방과 연결한 가장자리를 제거합니다.</p>\n\n<pre class=\"prettyprint\">\n        string graphTwinId = MapGraphTwinId(this.hubName, this.twinId);\n        Console.WriteLine($&quot;Try remove twin {graphTwinId} from graph ...&quot;);\n\n        await this.ExecuteVertexCommandAsync($&quot;g.V(&#39;{graphTwinId}&#39;).drop()&quot;);\n</pre>\n\n<p>UpdateTwinSyncCommand는 두 단계를 수행합니다. 1) 자동 온도 조절기&#39;꼭짓점의 온도 필드를 업데이트하고 2) 위치가 변경된 경우 자동 온도 조절기 꼭짓점을 새 Room 꼭짓점과 연결합니다.</p>\n\n<pre class=\"prettyprint\">\n        string graphTwinId = MapGraphTwinId(this.hubName, this.twinId);\n \n        Console.WriteLine(&quot;Get thermostat vertex ...&quot;);\n        Vertex vTwin = await this.GetVertexByIdAsync(graphTwinId);\n        if (vTwin == null)\n        {\n            Console.WriteLine(&quot;Vertex does not exist. Execute Add command ...&quot;);\n            await this.AddTwinAsync(this.hubName, this.twinId, this.jTwin);\n            return;\n        }\n \n        Dictionary&lt;string, string&gt; properties = null;\n        string reportedTemperature = this.ParseReportedTemperature(this.jTwin);\n        if (!string.IsNullOrWhiteSpace(reportedTemperature))\n        {\n            properties = new Dictionary&lt;string, string&gt;\n            {\n                {&quot;temperature&quot;, reportedTemperature }\n            };\n \n            Console.WriteLine(&quot;Update vertex temperature property ...&quot;);\n            vTwin = await this.UpdateVertexAsync(graphTwinId, properties);\n        }\n \n        Location? location = this.ParseTaggedLocation(this.jTwin);\n        if (location != null)\n        {\n            await this.UpdateLocationAsync(vTwin, location.Value);\n        }\n</pre>\n\n<p>ReplaceTwinSyncCommand는 UpdateTwinSyncCommand와 동일한 구현을 갖습니다. 이 시나리오에서는 변경 집합 및 전체 대체가 동일한 방식으로 처리되므로 UpdateTwinSyncCommand와 동일합니다.</p>\n\n<ol>\n</ol>\n\n<h2>&amp; 팁 트릭</h2>\n\n<ul>\n <li>SyncGraphDbApp은 IoT Hub 알림을 사용하고 외부 저장소를 업데이트하는 방법을 보여 주는 단일 인스턴스 콘솔 애플리케이션입니다. 솔루션 크기를 조정하려면 여러 인스턴스로 확장되고 분할된 Event Hub에서 수신 대기하는 Azure 작업자 역할에서 호스트되어야 합니다. IoT Hub 알림은 알림&#39;디바이스 ID를 Event Hub 파티션 키로 사용합니다. 결과적으로 디바이스 수명 주기 및 쌍 변경 알림은 알림&#39;디바이스 ID에 따라 파티션으로 라우팅됩니다. 자세한 내용은 <a href=\"https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-features\" target=\"_blank\">설명서를</a> 참조하세요.</li>\n <li>twinChangeEvents 알림을 처리할 때 최신 변경 내용이 동기화되도록 replaceTwin 및 updateTwin opTypes를 모두 처리해야 합니다.</li>\n <li>샘플에서 IoT Hub 경로는 IoT Hub를 만들 때 만들어집니다. 결과적으로 대상 Event Hub에는 허브&#39;수명 시작부터 모든 디바이스 수명 주기 및 쌍 변경 이벤트가 포함됩니다. 이렇게 하면 SyncGraphDBApp이 그래프 DB를 완전히 동기화하는 데 필요한 모든 이벤트를 받습니다. 그러나 SyncGraphDBApp이 이전에 만든 허브를 동기화해야 하거나 Event Hub&#39;보존 정책보다 오랫동안 SyncGraphDBApp을 사용할 수 없게 된 경우 SyncGraphDBApp을 따라 잡을 방법이 필요합니다. 이러한 캐치업 절차는 다음과 같이 작동합니다. <ol>\n  <li>앞에서 설명한 대로 IoT Hub&#39;경로를 만듭니다.</li>\n  <li>모든 트윈에 대해 IoT Hub를 쿼리하고 Graph DB를 결과로 업데이트합니다. SyncGraphDBApp&#39;Program.RunSyncSampleAsync는 이 단계의 간단한 구현을 보여 줍니다.</li>\n  <li>알림 처리를 시작하고 버전이 Graph DB의 버전보다 큰 쌍 변경 알림만 커밋합니다.</li>\n </ol>\n </li>\n <li>이 샘플에서 만든 경로는 알림의 원본 및 대상을 지정하기만 하면 됩니다. IoT Hub 경로는 조건이라는 강력한 필터링 메커니즘도 지원합니다. 예를 들어 자동 온도 조절기에서 특정 임계값 이상의 온도를 보고하는 경우 이 조건을 다르게 처리하는 다른 대상으로 알림을 보낼 수 있습니다(예: 알림을 높은 우선 순위 메일로 변환). 다음 경로 구성에는 보고된 온도 속성이 100을 초과할 경우에만 지정된 대상 엔드포인트로 알림이 전달되는 조건이 포함됩니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\n              {\n                  &quot;name&quot;: &quot;TemperatureExceedsThreshold&quot;,\n                  &quot;source&quot;: &quot;TwinChangeEvents&quot;,\n                  &quot;condition&quot;: &quot;$body.properties.reported.Temperature.NewValue &gt; 100&quot;,\n                  &quot;endpointNames&quot;: [\n                    &quot;TemperatureExceedsThresholdNotifications&quot;\n                  ],\n                  &quot;isEnabled&quot;: true\n              },\n</pre>\n\n<h2>의견 제시</h2>\n\n<p>샘플을 통과한 후에는 피드백이나 제안이 있는지 알려주시고 GitHub 직접 기여를 보내주세요.</p>\n\n<h2>참조</h2>\n\n<ul>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-device-twins\">디바이스 쌍 이해</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-query-language#get-started-with-device-twin-queries\">디바이스 쌍, 작업 및 메시지 라우팅에 대한 IoT Hub 쿼리 언어</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-programming-guide\">Event Hubs 프로그래밍 가이드</a></li>\n</ul>"
