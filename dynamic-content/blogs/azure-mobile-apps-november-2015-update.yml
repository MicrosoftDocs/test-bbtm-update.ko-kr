### YamlMime:Yaml
ms.openlocfilehash: 51215a602513c91d7261409a00a3f90084bd30f3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902715"
Slug: azure-mobile-apps-november-2015-update
Title: Azure Mobile Apps 2015년 11월 업데이트
Summary: 인증 변경 내용, REST API, 새로운 포털 내 편집 환경 및 클라이언트 및 서버 SDK의 릴리스 후보에 대해 알아봅니다.
Content: >-
  <p>오늘&#39;모바일 애플리케이션 빌드를 지원하기 위해 App Service에 추가하는 몇 가지 새로운 기능을 발표하게 되어 기쁩니다. App Service Mobile은 이제 더 강력하고, 기능이 풍부하고, 사용하기 쉬울 수 있으므로 다음 모바일 백 엔드 API에 적합합니다.</p>


  <p>이 업데이트 집합에는 다음이 포함됩니다.</p>


  <ul>
   <li>모바일 애플리케이션에 대한 코드 없는 테이블 및 API</li>
   <li>턴키 인증 지원</li>
   <li>파일 동기화 기능</li>
   <li>REST API 업데이트(일부 호환성이 손상되는 변경 포함)</li>
  </ul>


  <p>이러한 항목은 오늘&#39;포털 업데이트와 다음 SDK 릴리스에서 캡처됩니다.</p>


  <ul>
   <li>Node.JS Server SDK - 2.0.0-alpha5</li>
   <li>.NET Server SDK - 0.3.36.0(릴리스 후보)</li>
   <li>iOS 클라이언트 SDK - 3.0.0-beta4(릴리스 후보)</li>
   <li>Windows 및 Xamarin 클라이언트 SDK - 2.0.0-beta3(릴리스 후보)</li>
  </ul>


  <h1>Mobile Apps용 간편 테이블 &ndash; 코드 없는 API(미리 보기)</h1>


  <p>원래 Mobile Services 대한 좋은 점 중 하나는 브라우저에서 테이블을 만들고 스크립트를 바로 편집할 수 있었다는 점입니다. 서버 프로젝트를 배포하거나 많은 코드를 유지 관리하는 것에 대해 걱정할 필요가&#39;, 어디서나 앱을 업데이트할 수 있었습니다. Weve&rsquo;는 고객이 이 기능의 사용 편의성을 정말 좋아한다는 것을 크고 분명하게 들었으며, 오늘 Azure Mobile Apps를 위해 이 경험을 다시 가져오고 있음을 발표하게 되어 기쁩&#39;.</p>


  <p><img alt="clip_image001" border="0" height="340" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/18cb0c3d-90ca-4abc-9ba6-ef78ddbec722.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="clip_image001" width="640"></p>


  <p>이제 간편한 테이블이라고 하는 &quot;SQL Azure 지원되는 모바일 친화적인 OData CRUD API를 쉽게 만들 수 있습니다&quot;. 이러한 API는 iOS, Android, Windows, Xamarin &amp; Cordova 플랫폼의 Mobile Apps 클라이언트 SDK에서 일류 지원을 받으며, 오프라인 데이터 동기화 기능으로 즉시 작동합니다. 테이블을 만든 후에는 테이블에 저장된 데이터를 보고, 스키마를 수정하고, 포털 내에서 사용자 지정 논리를 모두 추가할 수 있습니다.</p>


  <p><img alt="AppService_blog_Nov16_easydata" height="189" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/58c6a7f0-35a1-4122-83bd-ef7d497cc535.png" style="float: none; margin-left: auto; display: block; margin-right: auto" title="AppService_blog_Nov16_easydata" width="640"></p>


  <p>Weve&rsquo;는 또한 쉬운 테이블을 정말 유연하게 만들었습니다. 백그라운드에서 SQL 데이터베이스를 사용하여 Express.JS 애플리케이션을 스캐폴드하고 언제든지 원하는 사이트 및 데이터베이스를 인수하고 사용자 지정할 수 있습니다. 스토리지 계층을 교환하고 Azure Table Storage, Mongo DB 또는 기타 데이터 서비스를 사용할 수도 있습니다. 이는 노드 애플리케이션에 대해 수행할 수 있는 몇 가지 개발 방법 중 하나이기도 합니다. 원하는 경우 항상 Git 또는 App Service에서 제공하는 다른 <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/">배포 옵션</a> 중 하나를 통해 배포할 수 있습니다.</p>


  <p>이 기능은 현재 노드 SDK가 있는 사이트, 특히 포털 내에서 만든 사이트로 제한됩니다. 따라서&#39;사용해 보려는 경우 위에서 설명한 대로 빠른 시작으로 이동하여 자세히 알아봅니다. 빠른 시작이 배포되면 설정 내에서 간편한 테이블 및 간편한 API 옵션을 사용하여 엔드포인트를 만들고 관리할 수 있습니다. 스크립트 편집을 클릭하면 Visual Studio Online 편집기가 열립니다.</p>


  <h1>코드 없는 인증/권한 부여</h1>


  <p>오늘 이전에 새 <a href="https://azure.microsoft.com/en-us/blog/announcing-app-service-authentication-authorization">App Service 인증/권한 부여</a> 기능에 대한 게시물을 게시했습니다. 이 새 릴리스를 사용하면&#39;Azure Active Directory, Facebook, Google, Microsoft 계정, Twitter 또는 사용자 지정 ID 공급자와 인증을 App Service 인스턴스에 통합하는 것이 그 어느 때보다 쉬워졌습니다. Mobile Services 모든 기능과 함께 제공되지만, 범위에 대한 보다 강력한 지원과 관리의 용이성, 코드가 필요하지 않습니다.</p>


  <p>우리가 받은 피드백의 많은 부분 중 하나는 애플리케이션 수준에서 인증에 대한 더 많은 제어를 원한다는 것이었습니다. 이제 Mobile Apps는 미리 보기 초기에 사용된 App Service Gateway 대신 App Service 인증/권한 부여를 사용합니다. 게이트웨이는 더 이상 사용되지 않지만 추후 공지가 있을 때까지 계속 작동합니다. 인증/권한 부여 기능은 추가 리소스가 필요하지 않으며 모든 App Service 애플리케이션에서 즉시 사용할 수 있습니다.</p>


  <p><img alt="Authentication-Authorization" border="0" height="435" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6a2c218b-cdd2-43a1-9995-7e71f0c82183.png" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto" title="Authentication-Authorization" width="640"></p>


  <p>애플리케이션에 인증을 사용하도록 설정하려면 모바일 인증 설정 옵션을 사용하는 대신 인증/권한 부여를 선택합니다. 동일한 인증 기능이 모두 있으며 AAD 구성하는 환경이 몇 번의 클릭으로 간소화되었습니다. 이 변경의 일부로 모바일 인증 바로 가기가 제거됩니다. 기존 게이트웨이를 계속 사용하려는 경우 항상 리소스 그룹에서 액세스할 수 있습니다.</p>


  <p>이 변경으로 인해 일부 로그인 및 ID 엔드포인트가 다릅니다. 이를 반영하도록 클라이언트 SDK가 업데이트되었습니다. 자세한 내용은 <a href="https://azure.microsoft.com/en-us/blog/announcing-app-service-authentication-authorization">인증/권한 부여 게시물을</a> 참조하세요. 또한 미리 보기에서 사용자 지정 인증에 대한 지원을 릴리스하여 오랜 요청을 해결할&#39;있습니다. 자세한 내용은 아래 .NET 서버 SDK 섹션을 확인하세요.</p>


  <h1>파일 동기화 지원</h1>


  <p>App Service Mobile에는 개발자가 오프라인으로 작동하는 앱을 빌드하고 다양한 백 엔드 데이터 저장소와 동기화할 수 있는 데이터 동기화 기능이 포함되어 있습니다. 이전에는 구조화된 데이터로 제한되었지만 지금은 파일에 대한 미리 보기 지원을 다시 추가할&#39;있습니다. 이제 테이블에 의해 노출되는 엔터티에는 Blob Storage에 저장된 파일에 대한 참조도 포함될 수 있습니다.&nbsp; 클라이언트 쪽에서는 엔터티에서 참조된 파일의 변경 내용을 추적합니다. 이 기능은 클라이언트 SDK에 다음 API를 도입합니다.</p>


  <pre class="prettyprint">

  mobileClient.InitializeFileSync(new MyFileSyncHandler(this), syncStore);

  await myTable.PullFilesAsync(entity);

  await myTable.PushFileChangesAsync();

  </pre>


  <p>여기서 MyFileSyncHandler는 IFileSyncHandler의 구현입니다. 이렇게 하면 파일을 로컬로 저장해야 하는 위치를 애플리케이션에 알리고 기본 동기화 규칙을 재정의할 수 있습니다.</p>


  <p>서버 SDK는 애플리케이션이 Blob Storage에 직접 안전하게 동기화할 수 있도록 클라이언트에 대한 SAS 키 발급을 처리합니다. 또한 동기화 메타데이터 및 파일이 테이블 엔터티에 연결되는 방법을 관리하는 데 도움이 될 수 있습니다.</p>


  <p>여기에 있는 Xamarin 및 Windows 대한 클라이언트 라이브러리를 설치하여 파일 동기화 지원을 사용해 볼 수 <a href="https://aka.ms/amobile_filesync">있습니다</a>. 이 기능을 사용하는 자세한 샘플은 여기에서 확인할 수 <a href="https://aka.ms/amobile_filesync_sample">있습니다</a>.</p>


  <h1>REST API 변경 내용</h1>


  <h3>API 버전 검사</h3>


  <p>모바일 개발의 한 가지 과제는 클라이언트 및 서버 버전을 동기화 상태로 유지하는 것입니다. 이는 프로젝트 종속성의 주요 버전 업그레이드를 수행할 때 특히 중요하며, 고객이 앞으로 Mobile Apps SDK에 대한 업데이트를 더 쉽게 사용할 수 있도록 하려고 했습니다. 현재 클라이언트와 서버 간의 API 계약 불일치를 방지하는 버전 관리 시스템을 도입하고 있습니다. 이제 서버 SDK는 클라이언트 SDK가 제공하는 버전 헤더를 찾습니다. 지원되는 클라이언트 버전이 없으면 서버에서 허용할 버전을 설명하는 오류를 반환합니다.</p>


  <p>즉, 이전 버전의 Mobile Service 클라이언트 SDK는 최신 Mobile Apps 서버 SDK와 통신할 수 없습니다. 대부분의 API 동작은 동일하게 유지되지만 푸시 알림 등록을 처리하는 방법과 같은 몇 가지 차이점이 있습니다. 개발자가 이러한 변경으로 인한 놀라움을 피하기 위해 가능한 한 간단하게 만들고자 했습니다.</p>


  <p>애플리케이션에 제공된 Mobile Apps SDK를 사용하지&#39;구성 요소가 포함된 경우 REST 호출에서 버전을 지정할 수 있습니다. 값이 대상 버전인 ZUMO-API-VERSION을 헤더 또는 쿼리 문자열 매개 변수로 추가하기만 하면됩니다. 특정 버전 및 서로 상호 작용하는 방법에 대한 자세한 내용은 새 <a href="https://azure.microsoft.com/en-us/documentation/articles/app-service-mobile-client-and-server-versioning">클라이언트 및 서버 버전 관리</a> 항목을 참조하세요.</p>


  <h3>시스템 속성 이름 바꾸기</h3>


  <p><a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-september-2015-update/">9월 업데이트</a>에서는 시스템 속성이 반환되는 방식을 변경했습니다. 이 릴리스에서는 속성의 이름을 변경하여 이전에 접두사로 추가한 이중 밑줄을 제거합니다. <strong>이제 __createdAt</strong>, <strong>__updatedAt</strong>, <strong>__version</strong> 및 <strong>__deleted</strong> 속성이 <strong>만들어집니다.</strong><strong></strong><strong></strong><strong></strong> 이렇게 하면 <a href="https://github.com/AutoMapper/AutoMapper">AutoMapper</a> 와 같은 도구를 사용하여 데이터 형식 매핑을 훨씬 쉽게 작성하고 앱 전체에서 사용되는 데이터 개체를 더 잘 제어할 수 있습니다. 이는 API 계약의 호환성이 손상되는 변경입니다. 오늘 릴리스된 클라이언트 및 서버 SDK는 이 변경 사항을 적용하며 둘 다 함께 업데이트해야 합니다. 이렇게 하면 API 버전이 정렬되었는지도 확인합니다.</p>


  <h1>Node.JS Server SDK 2.0.0-alpha5</h1>


  <p>지난 달, Node.JS SDK를 <a href="https://azure.microsoft.com/en-us/blog/announcing-node-for-azure-mobile-apps/">오픈 소스로</a> 사용하여 사용자가&#39;계획을 수립하고 프로세스에 참여할 수 있도록 했습니다. 우리는 이미 몇 가지 지역 사회 기부금을받은&#39;- 그들이 오고 계속!</p>


  <p>이 SDK는 알파로 유지합니다. 사용자가 이 작업을 수행하는 것이 좋지만 이 버전으로 프로덕션으로 이동하지 마세요. 몇 가지 추가 피드백을 수집하면 베타로 전환할 예정입니다.</p>


  <p>이 버전의 SDK는 포털 기반 빠른 시작을 통해서도 사용할 수 있으며, 포털 내 편집도 소개합니다. 포털에서 Node.JS 모바일 앱을 만들려면 먼저 새로 만들기, 웹 + 모바일, 모바일 앱을 클릭하고 만들기 단계를 수행합니다. 앱이 만들어지면 앱으로 이동하여 설정 연 다음 모바일 범주에서 시작 선택합니다. 클라이언트 플랫폼을 선택하고 지침을 따릅니다. 2단계에서는 클래식 빠른 시작을 사용하여 Node.JS 사이트를 프로비전합니다.</p>


  <p>현재는 Node.JS 사용할 수 있는 엔드 투 엔드 자습서가 없습니다. 그러나 <a href="https://aka.ms/nodemobile">Node SDK를 사용하기</a> 위한 일반 문서를 작성했으며 <a href="https://github.com/Azure/azure-mobile-apps-node">GitHub 리포지토리</a>에 대한 훌륭한 설명서가 있습니다. Node SDK를 알파에서 더 강력한 미리 보기로 전환하면 azure.com 대한 전체 설명서 모음을 제공합니다.</p>


  <h1>.NET Server SDK 릴리스 후보</h1>


  <p><a href="https://azure.microsoft.com/en-us/blog/updates-to-the-mobile-apps-server-sdk/">지난</a> <a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-august-2015-update/">몇</a> <a href="https://azure.microsoft.com/en-us/blog/azure-mobile-apps-september-2015-update/">개월 동안</a> .NET SDK에 대한 몇 가지 업데이트를&#39;. &#39;피드백에 따라 릴리스 후보를 준비할&#39;있다고 생각합니다. SDK는 아직 미리 보기 상태이지만 1.0으로 예상하는 것과 매우 밀접하게 일치해야 합니다.</p>


  <p><a href="https://www.nuget.org/packages/Microsoft.Azure.Mobile.Server/0.3.36">0.3.36.0 NuGet 패키지를</a> 프로젝트에 설치하여 시작할 수 있습니다. 포털의 빠른 시작 프로젝트도 이 버전을 사용하도록 업데이트되었습니다. 다른 업데이트와 마찬가지로 주의해야 할 몇 가지 주요 변경 내용이 있습니다. 이들 중 대부분은 특히 인증과 관련해서 메서드 이름 바꾸기일 뿐입니다. MobileApp*으로 시작된 변수 및 메서드는 이제 AppService*입니다. 이러한 기능 중 상당수는 모바일 시나리오 이상에 적용됩니다.</p>


  <p><a href="https://www.nuget.org/packages/Microsoft.Azure.Mobile.Server.Login/0.3.36">Microsoft.Azure.Mobile.Server.Login</a>과 같은 사용자 지정 인증을 지원하는 새로운 미리 보기 NuGet 패키지도 도입되었습니다. 이 패키지는 지정된 사용자에 대한 토큰을 쉽게 발급할 수 있는 MobileAppLoginHandler.CreateToken() 메서드를 제공합니다. 예를 들어 내 사용자 이름/암호 저장소를 활용하려는 경우 다음과 같은 API를 작성할 수 있습니다.</p>


  <pre class="prettyprint">

  public HttpResponseMessage Post([FromBody] JObject assertion)

  {
   if (isValidAssertion(assertion)) //checks against a database
   {
    JwtSecurityToken token = MobileAppLoginHandler.CreateToken(new Claim[] { new Claim(JwtRegisteredClaimNames.Sub, assertion[&quot;username&quot;]) }, mySigningKey, myAppURL, myAppURL, TimeSpan.FromHours(24));
    return this.Request.CreateResponse(HttpStatusCode.OK, new LoginResult()
    {
     AuthenticationToken = token.RawData,
     User = new LoginResultUser() { UserId = userName.ToString() }
    });
   }
   else
   {
    return this.Request.CreateUnauthorizedResponse();
   }
  }</pre>


  <p>여기서 isValidAssertion은 사용자 지정 유효성 검사 논리를 래핑하는 방법일 뿐이며 LoginResult/LoginResultUser는 응답에서 설정되는 속성을 래핑하는 간단한 개체일 뿐입니다. 사용자 지정 인증은 매우 간단하므로 사용자 고유의 저장소 또는 타사 공급자와 매우 쉽게 통합할 수 있습니다.</p>


  <p>MobileAppUser(최근에 AppServiceUser로 이름이 변경됨)와 같은 몇 가지 불필요한 형식도 제거했습니다. 이 클래스는 실제로 GetIdentityAsync() 메서드만 제공했으며 명시적 캐스트를 수행했음을 의미합니다. 이제 GetIdentityAsync()를 IPrincipal의 확장 메서드로 이동한&#39;있으므로 다음을 작성할 수 있습니다.</p>


  <pre class="prettyprint">

  ProviderCredentials creds = await this.User.GetAppServiceIdentityAsync&lt;FacebookCredentials&gt;(this.Request);</pre>


  <p>확장 메서드가 &quot;적절하게 표시되도록 using System.Security.Principal;&quot; 문을 포함해야 합니다.</p>


  <p>또한 최근에 .NET 서버 SDK의 오픈 소싱을 <a href="https://azure.microsoft.com/en-us/blog/open-sourcing-app-service-mobile-net-server-sdk/">발표</a> 했습니다. <a href="https://github.com/Azure/azure-mobile-apps-net-server">GitHub 리포지토리</a>는 문제를 제기하고,&#39;작업을 확인하고, 프로젝트에 기여할 수 있는 좋은 장소입니다. <a href="https://go.microsoft.com/fwlink/?linkid=625009&amp;clcid=0x409">변경 로그</a>에서 변경 내용의 전체 목록을 볼 수도 있습니다.</p>


  <h1>클라이언트 SDK 릴리스 후보</h1>


  <p>버전 헤더를 제공하고 인증에 새 엔드포인트를 사용하도록 릴리스 후보 클라이언트 SDK가 업데이트되었습니다. 또한 최신 서버 SDK를 사용하는 데 필요한 시스템 속성 변경 내용도 포함됩니다. 대부분의 개발자는 생성자를 제외하고 새 클라이언트 SDK로 업데이트할 때 코드 변경에 대해 걱정할 필요가 없습니다. 이제 생성자는 애플리케이션 URL과 선택적 위임 처리기만 사용합니다. 인증 변경으로 인해 게이트웨이 URL 매개 변수가 제거되었으며, 7월부터 서버 SDK 변경 내용을 미러링하여 애플리케이션 키 매개 변수가 사라졌습니다.</p>


  <h3>iOS(Objective-C)</h3>


  <pre class="prettyprint">

  self.client = [MSClient clientWithApplicationURLString:@&quot;https://contoso.azurewebsites.net&quot;];</pre>


  <h3>iOS(Swift)</h3>


  <pre class="prettyprint">

  let client = MSClient(applicationURLString:&quot;https://contoso.azurewebsites.net&quot;)

  </pre>


  <h3>Windows 및 Xamarin(C#)</h3>


  <pre class="prettyprint">

  MobileServiceClient client = new MobileServiceClient(&quot;https://contoso.azurewebsites.net&quot;);</pre>


  <p><a href="https://www.nuget.org/packages/WindowsAzure.MobileServices/2.0.0-beta-3">관리되는 NuGet 패키지를</a> 설치하거나 <a href="https://github.com/Azure/azure-mobile-services/blob/master/CHANGELOG.ios.md#sdk-downloads">iOS 프레임워크</a>를 다운로드하여 릴리스 후보를 사용해 볼 수 있습니다. 포털의 빠른 시작 프로젝트도 이러한 프로젝트를 포함하도록 업데이트되었습니다.</p>


  <h1>HTML/JS 빠른 시작의 임시 제거</h1>


  <p>API 버전 검사, 시스템 속성 이름 바꾸기 및 인증 전환을 비롯한 몇 가지 변경 내용은 HTML/JS SDK에서 아직 구현되지 않았습니다. SDK 호환성 측면에서 혼동을 줄이기 위해 포털의 빠른 시작 옵션에서 SDK를 일시적으로 제거하도록 선택했습니다.</p>


  <p>HTML/JS SDK를 패리티로 가져오는 것은 단기적인 주요 목표이며 곧 다시 가져오는 것을 목표로 합니다. 미리 보기를 계속 진행하면서 기다려 주셔서 감사합니다.</p>


  <h1>가까운 클라우드에 곧 제공&hellip;</h1>


  <p>우리는 곧 더 많은 변화가 있을 것입니다. 여기에&#39;연말 전에 올&#39;무엇의 빠른 미리보기입니다 :</p>


  <ul>
   <li>릴리스 후보 SDK를 미리 보기 외부로 이동</li>
   <li>Mobile Apps용 Android SDK</li>
   <li>Node.JS SDK의 베타 릴리스</li>
   <li>코드 변경이 필요 없는 Mobile Services 고객을 위한 원클릭 마이그레이션</li>
   <li>이러한 모든 기능을 최대한 활용할 수 있는 추가 설명서</li>
  </ul>


  <p>그때까지 위의 업데이트를 확인하고 어떻게 생각하는지 알려주세요! 아래 의견, <a href="https://twitter.com/AzureMobile">Twitter</a>, <a href="https://social.msdn.microsoft.com/forums/azure/en-US/home?forum=azuremobile">MSDN 포럼</a> 또는 <a href="https://feedback.azure.com/forums/216254-mobile-apps-formerly-mobile-services">Azure 피드백 사이트에서</a> Mobile Apps 팀과 연결할 수 있습니다.</p>
