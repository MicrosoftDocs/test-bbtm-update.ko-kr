### YamlMime:Yaml
ms.openlocfilehash: b04c21bbc751ac454a18f294d27c60a1f3e53806
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906063"
Slug: building-a-micro-service-architecture-based-cloud-applications-on-azure
Title: Azure에서 마이크로 서비스 아키텍처 기반 클라우드 애플리케이션 빌드
Summary: 스마트 디바이스와 원클릭 어웨이 사용자 환경이 포함된 데이터 동아리 급증으로 애플리케이션 아키텍처가 개선되고 있습니다.
Content: >-
  <p>스마트 디바이스와 원클릭 어웨이 사용자 환경이 포함된 데이터 동아리 급증으로 애플리케이션 아키텍처가 개선되고 있습니다. World 2020은 40페타바이트 규모의 데이터를 처리하는 2,500만 개 이상의 애플리케이션으로 40억 명의 연결된 사용자를 처리할 것으로 예측됩니다. 소비자는 상시 서비스를 통해 다양성과 선택을 요구합니다. 이는 기존의 소프트웨어 아키텍처, 배포 모델 및 느린 릴리스 프로세스로는 충분하지 않다는 사실을 확인합니다.</p>


  <h2>아키텍처 진화</h2>


  <p>대규모 모놀리식 애플리케이션을 개발하고 패키징하려면 분산된 팀 간에 더 높은 수준의 릴리스 조정이 필요합니다. 대부분의 경우 통합 문제는 마지막 순간까지 검색되지 않으므로 릴리스를 끌 수 있습니다. 이를 위해 모놀리식 사일로를 독립적으로 개발, 테스트 및 배포할 수 있는 느슨하게 결합된 자율 서비스로 분해하는 메커니즘을 제공하는 마이크로 서비스 아키텍처가 제공됩니다. 이렇게 하면 다음과 같은 방법으로 도움이 됩니다.</p>


  <ul>
      <li><strong>의무 분리:</strong> 개발자는 특정 서비스에 집중하고 선택한 언어를 사용하여 서비스를 개발할 수 있습니다. 이렇게 하면 팀 전체에서 복잡한 조정 문제가 줄어듭니다.</li>
      <li><strong>인스턴트 릴리스 만들기:</strong> 각 서비스를 독립적으로 패키지, 유지 관리 및 배포하여 Just-In-Time 릴리스를 사용하도록 설정할 수 있습니다.</li>
  </ul>


  <p>마이크로 서비스의 분산 및 세분화된 특성으로 인해 몇 가지 문제가 발생할 수 있습니다.</p>


  <ul>
      <li><strong>서비스 간 통합 및 상호 종속성:</strong> 서비스는 격리되어 있지만 서로 기능적으로 종속될 수 있습니다. 필요한 비즈니스 목표를 달성할 수 있도록 서비스 구성을 구축해야 합니다.</li>
      <li><strong>이식 가능한 배포:</strong> 강력한 애플리케이션 배포를 사용하려면 Dev 및 QA에서 프로덕션 환경을 미러링해야 합니다. 그러나 다른 확장성 요구 사항에 따라 애플리케이션을 다시 구성해야 합니다. 인프라 종속성에서 애플리케이션 패키징을 추상화하면 다양한 환경에서 애플리케이션을 이식할 수 있으므로 번거로움이 없고 강력한 소프트웨어 릴리스가 될 수 있습니다.</li>
      <li><strong>Just-In-Time 릴리스:</strong> 인스턴트 Just-In-Time 소프트웨어 릴리스에는 빌드 버전 관리와 함께 지속적인 통합 및 배포가 필요합니다.</li>
      <li><strong>릴리스 효율성을 측정합니다.</strong> 팀 전체의 핸드오프, 코드 무결성 및 빌드 온전성 등 릴리스 효과에 대한 가시성이 부족하면 눈에 띄지 않고 헤아릴 수 없을 수 있습니다.</li>
      <li><strong>인프라의 주문형 프로비전:</strong> 컨테이너 또는 컨테이너 클러스터를 만들려면 개발자가 인프라 프로비전 및 관리에 대한 지식과 경험을 갖도록 해야 합니다.</li>
  </ul>


  <p>우리의 DevOps 파트너 중 하나, <a href="https://www.bluemeric.com/">Bluemeric</a>, DevOps 우수성&rdquo;을 달성 &ldquo;하기 위해 조직을 지원 하 고 최근 goPaddle v3의 새로운 버전을 발표 했다. goPaddle은 마이크로 서비스 아키텍처(디자인/컴퍼지션)가 첫 번째 단계로 만들어지는 통합 첫 번째 접근 방식을 제공하는 마이크로 서비스용 ALM 플랫폼입니다. Jira 또는 TFS(Microsoft Team Foundation Server)와 같은 Project 관리 도구를 사용하여 소프트웨어 릴리스를 만들고 관리할 수 있습니다. goPaddle은 활성 릴리스가 언제든지 배포할 준비가 되었는지 확인합니다. 파이프라인을 만들고 Jira/TFS에서 계획된 릴리스와 연결하는 데 도움이 됩니다. 이러한 파이프라인은 언제든지 트리거될 수 있으며 빌드 효율성을 모니터링할 수 있습니다.</p>


  <p>이제 개발자는 애플리케이션 개발에 집중할 수 있으며, goPaddle은 릴리스 파이프라인에서 미리 정의된 워크플로를 기반으로 Docker 컨테이너의 형태로 서비스를 패키지 및 빌드하고, 애플리케이션을 테스트하고 배포하는 데 도움을 줍니다.</p>


  <p>마이크로 서비스는 애플리케이션을 한 번 설계하고 어디서나 배포할 수 있도록 Docker 컨테이너로 패키지됩니다. 개발자는 기존 Azure 클라우드 계정을 활용하여 Kubernetes 또는 Docker Swarm과 같은 원하는 클러스터링 솔루션을 프로비전하고 서비스를 배포할 수 있습니다. ACS(Azure Container Service)는 VM 확장 집합을 사용하여 Azure 클라우드 위에 Docker Swarm 및 Mesos와 같은 확장 가능한 클러스터를 유연하게 만들 수 있습니다. goPaddle은 ACS와 원활한 통합을 제공하므로 개발자는 몇 번의 클릭만으로 Azure에서 클러스터를 만듭니다.</p>


  <p>Microsoft 계정을 사용하여 Single Sign-On으로 <a href="https://gopaddle.io/">goPaddle</a> 을 사용해 보고, 기존 TFS 계정을 등록하고, 소프트웨어 릴리스를 계획하고, Azure에서 Docker Swarm 또는 Kubernetes 클러스터를 만들고, 확장 가능한 애플리케이션을 원활하게 배포합니다.</p>
