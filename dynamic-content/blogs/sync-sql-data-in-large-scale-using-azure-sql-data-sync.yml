### YamlMime:Yaml
ms.openlocfilehash: 6e2801e2f999a4dc46c82d83bee70bab66255050
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900197"
Slug: sync-sql-data-in-large-scale-using-azure-sql-data-sync
Title: Azure SQL 데이터 동기화 사용하여 대규모로 SQL 데이터 동기화
Summary: 'Azure SQL 데이터 동기화 사용하면 Azure SQL 데이터베이스와 SQL Server 데이터베이스 간에 데이터를 한 방향 또는 양방향으로 동기화할 수 있습니다. '
Content: >-
  <p>Azure SQL 데이터 동기화 사용하면 Azure SQL 데이터베이스와 SQL Server 데이터베이스 간에 데이터를 한 방향 또는 양방향으로 동기화할 수 있습니다. 이 기능은 2012년에 처음 도입되었습니다. 그 때까지 사람들은 Azure에서 많은 대규모 데이터베이스를 호스트하지&#39;않았습니다. 단일 동기화 그룹에 최대 30개의 데이터베이스(온-프레미스 SQL Server 데이터베이스 5개)와 동기화 그룹의 모든 데이터베이스에 최대 500개의 테이블을 포함하여 데이터 동기화 서비스를 빌드할 때 일부 크기 제한이 적용되었습니다.</p>


  <p>현재 200만 개 이상의 Azure SQL 데이터베이스가 있으며 최대 데이터베이스 크기는 4TB입니다. 그러나 데이터 동기화의 이러한 제한 사항은 여전히 존재합니다. 주로 데이터 동기화가 데이터 작업의 크기이기 때문입니다. 아키텍처 변경이 없으면 대규모로 동기화할 때 서비스가 과도한 부하를 유지할 수 있는지 확인할 수&rsquo; 없습니다. 우리는이 분야에서 몇 가지 개선에 노력하고 있습니다. 이러한 제한 사항 중 일부는 나중에 제기되거나 제거될 예정입니다. 이 문서에서는 데이터 동기화를 사용하여 몇 가지 모범 사례와 데이터베이스 및 테이블 제한 사항을 일시적으로 해결하는 방법을 포함하여 많은 수의 데이터베이스와 테이블 간에 데이터를 동기화하는 방법을 보여 줍니다.</p>


  <h2>여러 데이터베이스 간에 데이터 동기화</h2>


  <p>대기업과 ISV는 데이터 동기화를 사용하여 중앙 마스터 데이터베이스에서 많은 클라이언트 데이터베이스로 데이터를 배포합니다. 일부 고객은 전체 토폴로지에서 수백 또는 수천 개의 클라이언트 데이터베이스를 가지고 있습니다. 사용자가 여러 데이터베이스 간에 동기화를 시도할 때 다음 문제 중 하나가 발생할 수 있습니다.</p>


  <ol>
   <li>동기화 그룹 제한당 30개의 데이터베이스를 적중합니다.</li>
   <li>동기화 그룹 제한당 5개의 온-프레미스 SQL Server 데이터베이스에 도달합니다.</li>
   <li>모든 멤버 데이터베이스가 허브 데이터베이스와 동기화되므로 허브 데이터베이스&rsquo;에서 실행되는 워크로드에 상당한 성능 영향이 있습니다.</li>
  </ol>


  <p>동기화 그룹 제한당 30개의 데이터베이스 또는 5개의 온-프레미스 데이터베이스를 해결하려면 다단계 동기화 아키텍처를 사용하는 것이 좋습니다. 여러 멤버 데이터베이스와 master 데이터베이스를 동기화하는 동기화 그룹을 만들 수 있습니다. 또한 이러한 멤버 데이터베이스는 하위 동기화 그룹의 허브 데이터베이스가 되고 데이터를 다른 클라이언트 데이터베이스와 동기화할 수 있습니다. 비즈니스 및 비용 요구 사항에 따라 중간 계층의 데이터베이스를 클라이언트 데이터베이스 또는 전용 전달자로 사용할 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Master-Sync-Group.jpg"><img alt="" class="size-full wp-image-21685 aligncenter" height="305" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Master-Sync-Group.jpg" width="690"></a></p>


  <p>동기화 그룹 제한당 30개의 데이터베이스에 도달하지 않더라&rsquo;도 이 다단계 동기화 아키텍처의 이점이 있습니다.</p>


  <ul>
   <li>특정 특성(위치, 브랜드&hellip;)에 따라 클라이언트를 그룹화하고 다른 동기화 스키마 및 동기화 빈도를 사용할 수 있습니다.</li>
   <li>비즈니스가 성장하면 더 많은 클라이언트를 쉽게 추가할 수 있습니다.</li>
   <li>전달자(중간 계층의 멤버 데이터베이스)는 master 데이터베이스의 동기화 오버헤드를 공유할 수 있습니다.</li>
  </ul>


  <p>이 다단계 동기화 토폴로지가 시스템에서 작동하도록 하려면 단일 동기화 그룹의 클라이언트 데이터베이스 수와 전체 시스템의 수준 수 간에 적절한 균형이 필요합니다. 단일 동기화 그룹에 데이터베이스가 많을수록 허브 데이터베이스의 전반적인 성능에 더 큰 영향을 미칩니다. 시스템에 있는 수준이 많을수록 데이터 변경 내용을 모든 클라이언트에 브로드캐스트하는 데 더 오래 걸립니다.</p>


  <p>시스템에 더 많은 멤버 데이터베이스를 추가하는 경우 허브 데이터베이스의 리소스 사용량을 면밀히 모니터링해야 합니다. 일관된 높은 리소스 사용량이 표시되는 경우 데이터베이스를 더 높은 SLO로 업그레이드하는 것이 좋습니다. 허브 데이터베이스는 Azure SQL 데이터베이스이므로 가동 중지 시간 없이 쉽게 업그레이드할 수 있습니다.</p>


  <h2>여러 테이블을 사용하여 데이터베이스 간 데이터 동기화</h2>


  <p>현재 데이터 동기화는 테이블이 500개 미만인 데이터베이스 간에만 동기화할 수 있습니다. 다른 데이터베이스 사용자를 통해 여러 동기화 그룹을 만들어 이 제한 사항을 해결할 수 있습니다. 예를 들어 두 데이터베이스를 900개의 테이블과 동기화하려고 합니다. 먼저 동기화 스키마를 로드하는 데이터베이스에서 두 명의 다른 사용자를 정의해야 합니다. 각 사용자는 데이터베이스에서 450개(또는 500개 미만의 숫자) 테이블만 볼 수 있습니다. 동기화 설정에는 모든 테이블에 대한 CONTROL 권한을 의미하는 ALTER DATABASE 권한이 필요하므로 GRANT를 사용하는 대신 특정 사용자가 볼 수 없&rsquo;도록 테이블에 대한 사용 권한을 명시적으로 거부해야 합니다. 동기화 초기화에 필요한 정확한 권한은 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-best-practices-data-sync">모범 사례 지침</a>에서 찾을 수 있습니다. 그런 다음 각 사용자에 대해 하나씩 두 개의 동기화 그룹을 만들 수 있습니다. 각 동기화 그룹은 이러한 두 데이터베이스 간에 450개의 테이블을 동기화합니다. 각 사용자는 500개 미만의 테이블만 볼 수 있으므로 스키마를 로드하고 동기화 그룹을 만들 수 있습니다. 동기화 그룹을 만들고 초기화한 후에는 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-best-practices-data-sync">모범 사례 지침</a> 에 따라 사용자 권한을 업데이트하고 진행 중인 동기화에 대한 최소 권한이 있는지 확인하는 것이 좋습니다.</p>


  <p><img alt="" class="size-full wp-image-21695 aligncenter" height="333" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Data-sync.jpg" width="695"></p>


  <h2>동기화 초기화 최적화</h2>


  <p>동기화 그룹을 만든 후 동기화를 처음으로 트리거하면 모든 추적 테이블 및 저장 프로시저를 만들고 원본에서 대상 데이터베이스로 모든 데이터를 로드합니다. 초기 데이터 로드는 데이터 크기 작업입니다. 큰 데이터베이스 간에 동기화를 초기화하려면 제대로 설정되지 않은 경우 몇 시간 또는 며칠이 걸릴 수 있습니다. 초기화 성능을 최적화하기 위한 몇 가지 팁은 다음과 같습니다.</p>


  <ol>
   <li>데이터 동기화는 대상 테이블이 비어 있는 경우 대량 삽입을 사용하여 대상 테이블을 초기화합니다. 원본 및 대상 데이터베이스의 데이터가 동일하더라도 양쪽에 데이터가 있는 경우(데이터 동기화는 이를 알 수 없음), 데이터 동기화&rsquo;는 행별 비교 및 삽입을 수행합니다. 대형 테이블의 경우 매우 느릴 수 있습니다. 최상의 초기화 성능을 얻으려면 데이터 동기화를 설정하기 전에 데이터베이스 중 하나에 데이터를 통합하고 다른 데이터를 비워 두는 것이 좋습니다.</li>
   <li>현재 데이터 동기화 로컬 에이전트는 32비트 애플리케이션입니다. 최대 4GB RAM만 사용할 수 있습니다. 특히 여러 동기화 그룹을 동시에 초기화하려고 할 때 큰 데이터베이스를 초기화하려고 하면 메모리가 부족할 수 있습니다. 이 문제가 발생한 경우 먼저 동기화 그룹에 테이블의 일부를 추가하고 해당 테이블을 초기화한 다음 테이블을 더 추가하는 것이 좋습니다. 모든 테이블이 동기화 그룹에 추가될 때까지 이 작업을 반복합니다.</li>
   <li>초기화 중에 로컬 에이전트는 데이터베이스에서 데이터를 로드하고 시스템 임시 폴더에 임시 파일로 저장합니다. 큰 데이터베이스 간에 동기화 그룹을 초기화하는 경우 동기화를 시작하기 전에 임시 폴더에 충분한 공간이 있는지 확인해야 합니다. TEMP 및 TMP 환경 변수를 설정하여 임시 폴더를 다른 드라이브로 변경할 수 있습니다. 환경 변수를 업데이트한 후 동기화 서비스를 다시 시작해야 합니다. 일괄 처리로 동기화 그룹에 테이블을 추가하고 초기화할 수도 있습니다. 각 일괄 처리 간에 임시 폴더가 정리되었는지 확인합니다.</li>
   <li>온-프레미스 SQL Server Azure DB로 데이터를 초기화하는 경우 초기화 전에 Azure DB를 일시적으로 업그레이드할 수 있습니다. 초기화가 완료된 후 데이터베이스를 원래 SLO로 다운그레이드할 수 있습니다. 추가 비용은 최소입니다. 대상 데이터베이스가 SQL Server VM에서 실행되는 경우 VM에 더 많은 리소스를 추가하면 동일한 작업을 수행합니다.</li>
  </ol>


  <h2>동기화 초기화 성능 실험</h2>


  <p>다음은 간단한 실험의 결과입니다. Azure VM의 SQL Server 데이터베이스에서 Azure SQL 데이터베이스로 데이터를 동기화하는 동기화 그룹을 만들었습니다. VM 및 SQL 데이터베이스는 동일한 Azure 지역에 있으므로 네트워크 대기 시간의 영향을 무시할 수 있습니다. 하나의 테이블을 11개의 열과 약 2.1M 행으로 동기화했습니다. 총 데이터 크기는 49.1GB입니다. 다른 원본 및 대상 데이터베이스 구성을 사용하여 세 번의 실행을 수행했습니다.</p>


  <p>첫 번째 실행에서 대상 데이터베이스는 S2(50 DTU)이고 원본 데이터베이스는 D4S_V3 VM(4 vCPU, 16GB RAM)에서 실행됩니다. 임시 폴더로 데이터를 추출하는 데 50분, 임시 폴더에서 대상 데이터베이스로 데이터를 로드하는 데 471분이 걸립니다.</p>


  <p>두 번째 실행을 위해 대상 데이터베이스를 S6(400 DTU)로 업그레이드하고 Azure VM을 D8S_V3(8개 vCPU, 32GB RAM)로 업그레이드했습니다. 로드 시간을 98분으로 줄여 드립니다! 이 실행에서 데이터를 추출하는 데 놀라울 정도로 시간이 더 오래 걸렸습니다. 실행하는 동안 로컬 리소스 사용량을 캡처하지 않았기&rsquo; 때문에 회귀를 설명할 수&rsquo; 없습니다. 일부 디스크 I/O 문제일 수 있습니다. 하지만 대상 데이터베이스를 S6으로 업그레이드하면 총 초기화 시간이 521분에서 267분으로 단축되었습니다.</p>


  <p>세 번째 실행에서는 대상 데이터베이스를 S12(3000 DTU)로 업그레이드하고 로컬 SSD를 임시 폴더로 사용했습니다. 데이터 추출 시간을 39분으로, 데이터 로드 시간을 56분으로, 총 초기화 시간을 95분으로 줄입니다. 커피 한 잔의 추가 비용으로 첫 번째 구성보다 5.5 시간 더 빠릅니다!</p>


  <h3>결론</h3>


  <ol>
   <li>대상 데이터베이스(Azure DB)를 더 높은 SLO로 업그레이드하면 관리 가능한 추가 비용으로 초기화 시간을 크게 개선하는 데 도움이 됩니다.</li>
   <li>데이터 추출은 I/O 바인딩된 작업이며 32비트 로컬 에이전트는 최대 4GB RAM만 사용할 수 있으므로 원본 데이터베이스를 업그레이드해도 큰 도움이 되지 않습니다&rsquo;.</li>
   <li>연결된 SSD를 임시 폴더로 사용하면 데이터 추출 성능에 도움이 됩니다. 그러나 ROI는 대상 데이터베이스 업그레이드만큼 높지 않습니다. 또한 임시 파일이 SSD 디스크에 들어갈 수 있는지도 고려해야 합니다.</li>
  </ol>


  <table width="1290">
   <tbody>
    <tr>
     <td width="106"><strong>실행</strong></td>
     <td width="106"><strong>대상 데이터베이스 SLO(Azure DB)</strong></td>
     <td width="106"><strong>원본 데이터베이스 SLO(VM)</strong></td>
     <td width="106"><strong>총 초기화 시간</strong></td>
     <td width="106"><strong>데이터 추출 시간</strong></td>
     <td width="106"><strong>데이터 로드 시간</strong></td>
    </tr>
    <tr>
     <td width="106">1</td>
     <td width="106">S2</td>
     <td width="106">D4S_V3</td>
     <td width="106">521분</td>
     <td width="106">50분</td>
     <td width="106">471분</td>
    </tr>
    <tr>
     <td width="106">2</td>
     <td width="106">S6</td>
     <td width="106">D8S_V3</td>
     <td width="106">267분</td>
     <td width="106">*169분</td>
     <td width="106">98분</td>
    </tr>
    <tr>
     <td width="106">3</td>
     <td width="106">S12</td>
     <td width="106">D8S_V3, 연결된 SSD</td>
     <td width="106">95분</td>
     <td width="106">39분</td>
     <td width="106">56분</td>
    </tr>
   </tbody>
  </table>


  <p>이 문서에서는 여러 데이터베이스와 많은 테이블이 있는 데이터베이스 간에 Azure SQL 데이터 동기화 서비스를 사용하여 데이터를 동기화하는 방법에 대한 몇 가지 모범 사례를 제공했습니다. <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-sync-data">온라인 설명서</a>에서 데이터 동기화에 대한 자세한 내용을 확인하세요. 더 많은 데이터 동기화 모범 사례는 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-sync-data">Azure SQL 데이터 동기화 대한 모범 사례</a>에서 사용할 수 있습니다.</p>
