### YamlMime:Yaml
ms.openlocfilehash: cd986f9fcadec50582ac2710540c38abf8141c36
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911934"
Slug: dynamic-manifests-and-rendered-sub-clips
Title: 동적 매니페스트 및 렌더링된 하위 클립, 라이브 스트리밍을 위한 필수 도구
Summary: 라이브 및 선형 워크플로를 빌드하는 모든 사용자의 도구 상자를 크게 향상시키는 두 가지 새로운 기능 세트가 미디어 플랫폼에 등장하게 되어 매우 기쁩니다.
Content: >-
  라이브 및 선형 워크플로를 빌드하는 모든 사용자의 도구 상자를 크게 향상시키는 두 가지 새로운 기능 세트가 미디어 플랫폼에 등장하게 되어 매우 기쁩니다.이 게시물에서는 이러한 기능 및 사용 시나리오에 대해 개략적으로 소개합니다.이러한 기능 집합을 공개적으로 사용할 수 있는 경우 후속 게시물을 계속 지켜보세요.Cenk(동적 매니페스트의 PM 소유자) 및 Anil(하위 클리핑의 PM 소유자)은 다음 주에 코드 샘플을 포함한 사용/구현 세부 정보로 이동합니다.

  <h2>동적 매니페스트(즉, 동적 매니페스트 조작 또는 DMM)</h2>

  아마 기능 세트에 대한 더 괴짜 이름 중 하나는 일년 내내 들을 수 있지만 당신이 읽은 것을 좋아할 것이라고 생각하기 때문에 나와 함께 붙어 있을 것입니다. 동적 매니페스트를 사용하면 자산에 대한 스트리밍 매니페스트에 대한 필터를 정의하여 다양한 멋진 작업을 수행할 수 있습니다. 모든 스트리밍 기능과 마찬가지로 지원되는 모든 프로토콜(HLS, MPEG-DASH, 부드러운 스트리밍 및 HDS)에서 동일하게 작동하므로 필터를 정의할 때 각 프로토콜에 동적으로 패키지할 때 동일하게 적용됩니다.


  동적 매니페스트는 기본적으로 자산의 스트리밍 매니페스트에 적용할 수 있는 필터입니다. 자산 수준 또는 글로벌 수준에서 정의할 수 있으므로 많은 유연성을 제공합니다. 예를 들어 자산 수준에서는 트리밍을 수행하려는 위치가 자산에 따라 달라질 가능성이 높기 때문에 타임라인 트리밍 유형 필터(아래에 설명됨)를 정의할 수 있습니다. 그러나 변환 필터링 기능(아래 설명 참조)을 사용하여 다양한 디바이스 유형에 제공하려는 품질 수준을 정의하는 경우 모든 스트리밍 자산에 적용되는 비즈니스 정책이 있을 수 있으므로 이러한 필터를 전역 수준에서 한 번 설명하는 것이 더 효율적일 수 있습니다.


  한 필터가 좋은 경우 두 필터가 더 좋습니다. 실제로 전역적으로 그리고 자산 수준에서 여러 필터를 정의할 수 있습니다. 따라서 예를 들어 다른 대상 그룹에 대해 자산에서 다른 타임라인 트리밍을 원할 수 있으며, 확실히 디바이스 유형이 다르고 각 대상에 대한 변환 필터가 있어야 합니다. 필터를 결합하여 디바이스 유형에 따라 변환을 필터링하고 타임라인을 필터링하여 이벤트의 시작 부분까지 줄일 수도 있습니다.


  아래 섹션에서 자세히 설명하는 스트리밍 매니페스트를 필터링할 수 있는 두 가지 방법이 있습니다.

  <h2><span style="font-size: medium;"><span style="text-decoration: underline;">변환 필터링</span></span></h2>

  우리는 다중 플랫폼 세계에 살고 있으며 이를 위해 모든 주요 프로토콜에서 스트리밍에 자산을 사용할 수 있도록 <a href="https://msdn.microsoft.com/en-us/library/azure/jj889436.aspx" target="_blank">하는 동적 패키징 기능이</a> 있습니다. 그러나 4인치 휴대폰에서 72인치 LCD 디스플레이까지 화면 크기가 크게 다른 세상에 살고 있습니다. 해상도 및 대역폭 관점에서 이러한 모든 디바이스를 포함하려면 자산에 대해 10개 이상의 변환이 필요할 수 있으며 이는 비디오용입니다. 오디오 쪽에서는 모바일 디바이스용 AAC와 OTT 디바이스용 Dolby Digital+를 포함하여 다양한 변환이 있을 수 있습니다.


  이러한 모든 비디오 및 오디오 변환을 단일 자산에 넣으면 동적 매니페스트 없이 직면하는 문제는 디바이스가 적합하지 않은 변환을 재생하지 못하도록 방지하는 방법입니다. 예를 들어 큰 화면 OTT 디바이스에서는 해당 시청자가 실제로 막힌 비디오를 통해 진입해야 하므로 모바일 디바이스에 대해 만든 240p 비디오 변환을 포함하는 매니페스트를 제공하지 않을 수 있습니다.


  고객이 DMM 없이 이 문제를 해결하는 데는 두 가지 방법이 있습니다. 이를 지원하는 디바이스에서는 매니페스트를 필터링하거나 재생할 변환을 지정하는 클라이언트 쪽 논리를 작성합니다. 이 방법의 문제는 도달해야 하는 모든 플랫폼에 대한 클라이언트 쪽 논리를 빌드, 테스트 및 유지 관리하는 데 시간이 많이 걸리고 문제가 될 수 있다는 것입니다. 이 문제를 해결하기 위한 다른 옵션과 가장 눈에 띄게 사용되는 옵션은 다른 디바이스에 대해 서로 다른 자산을 만드는 것입니다. 이러한 접근 방식의 명백한 문제점은 각 디바이스 유형에 대한 자산을 출력하기 위해 훨씬 더 복잡한 워크플로를 빌드, 테스트 및 유지 관리해야 하며 추가 개발, 자산 준비 처리 및 스토리지로 인해 비용이 크게 증가한다는 것입니다.


  그러나 동적 매니페스트를 사용하면 모든 디바이스에 필요한 모든 변환으로 하나의 자산을 만드는 자산 준비 워크플로가 하나만 필요합니다. 그런 다음 해당 자산에서 서버의 요청 시간에 적용되는 필터가 포함된 변환에 필터를 적용할 수 있습니다. 결과적으로 각 디바이스는 적절한 변환만 포함하는 매니페스트를 받습니다. 따라서 클라이언트 쪽 논리가 필요하지 않습니다. 비트 전송률, 해상도 및 코덱에 따라 필터링 규칙을 정의할 수 있으며 앞에서 설명한 대로 자산에 적용할 수 있는 여러 필터를 정의할 수 있으므로 각 디바이스 유형에 대해 하나씩 제공할 수 있습니다.

  요약하자면, 변환 필터링은 올바른 변환을 올바른 디바이스에 전달하는 동시에 빌드해야 하는 워크플로 및 클라이언트 논리의 복잡성과 자산 준비 및 저장 비용을 줄일 수 있는 매우 강력한 도구입니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/04/13/RenditionFilter2.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;" title="변환 필터2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/RenditionFilter2_thumb.png" alt="RenditionFilter2" width="1024" height="569" border="0" /></a>


  위의 예제에서(더 큰 버전을 보려면 이미지를 클릭) Azure Media Encoder의 "H264 적응 비트 전송률 MP4 Set 1080p" 사전 설정을 사용하여 자산을 준비했습니다. 이 사전 설정은 mezzanine 자산을 180p에서 1080p로 변환하여 지원되는 스트리밍 프로토콜로 동적으로 패키지할 수 있는 180p에서 1080p로 변환했습니다.다이어그램 맨 위에 필터가 지정되지 않은 자산에 대한 HLS 매니페스트를 요청했으므로 응답에 7개의 변환이 모두 있었습니다.왼쪽 아래에서 다시 HLS 매니페스트를 요청했지만 이번에는 매니페스트가 1Mbps 미만의 모든 비트 전송률을 제거하도록 필터링하여 응답에서 하위 두 품질 수준이 제거되도록 지정했습니다.오른쪽 아래에서 다시 HLS를 사용하고 있으며 이번에는 해상도가 720p보다 큰 변환을 원하지 않도록 지정하는 "모바일" 필터를 지정하여 두 개의 1080p 변환이 제거된 응답을 제공했습니다.

  <h2><span style="font-size: medium;"><span style="text-decoration: underline;">타임라인 트리밍(사전 및 사후 롤 슬레이트 제거용)</span></span></h2>

  일반적인 라이브 이벤트 워크플로에서는 이벤트가 시작되기 몇 분 전에 라이브 스트림을 시작하여 모든 것이 제대로 작동하는지 확인하고 대상 사용자가 일찍 연결하여 이벤트 시작을 놓치지 않도록 합니다. 이 시간 동안 "대기하세요, 이벤트가 곧 시작됩니다"라는 순서로 무언가를 나타내는 슬레이트가 표시될 것입니다. 나는 프리 롤 슬레이트를 호출합니다. 그런 다음 이벤트가 종료되면 "시청해 주셔서 감사합니다. 이제 이벤트가 종료되었습니다"와 같은 슬레이트를 사용하여 스트림을 계속 실행하려고 할 수 있습니다. 나는 이것을 포스트 롤 슬레이트라고 부를 것이다.


  이는 스트림이 라이브 상태일 때 잘 작동하지만 프로그램을 중지하고 주문형 보기에 자산을 즉시 사용할 수 있게 되면 사전 롤 및 사후 롤도 있습니다. 즉, 주문형 스트림을 보고 보관 파일의 시작 부분에서 재생을 시작하는 사람은 이벤트의 시작을 찾는 타임라인을 통해 검색해야 합니다. 일부 고객은 이벤트 시작 시점까지 비디오 플레이어를 찾는 클라이언트 쪽 논리를 작성하여 이 문제를 해결하도록 선택하지만 이 방법에는 몇 가지 문제가 있습니다. 먼저 도달하려는 모든 플랫폼에서 클라이언트 쪽 논리를 작성, 테스트 및 유지 관리해야 하는 과제에 다시 직면합니다. 둘째, 사전 롤은 클라이언트에 전달되는 매니페스트에 여전히 있으므로 처음부터 다시 추구하기로 결정한 사람은 프리 롤 슬레이트로 다이빙하고 다시 시작을 찾아야 할 수 있습니다. 또한 비디오 플레이어의 타임라인 기간은 이벤트의 실제 기간을 제대로 반영하지 않습니다.


  동적 매니페스트를 사용하면 이벤트가 시작되기 전과 이벤트가 종료된 후 매니페스트의 모든 조각을 제거하도록 지정(필터를 통해 다시)할 수 있으며, 요청 시 서버에서 동적으로 지정할 수 있습니다. 마지막 부분은 전체 자산이 전체 매니페스트를 포함하여 여전히 존재하므로 트리밍 지점이 다른 다른 필터를 가질 수 있으며 필터 없이 스트림을 요청할 수 있다는 것을 이해하는 것이 중요합니다. 모든 비디오 플레이어가 해야 할 일은 지정된 매니페스트를 재생하기 때문에 클라이언트 쪽 논리가 필요하지 않습니다.


  이벤트가 여전히 라이브 상태인 동안 더 나은 동적 매니페스트 트리밍을 실제로 적용할 수 있습니다. 즉, 슬레이트를 삭제하고 이벤트가 시작되는 즉시 필터를 정의하고 스트림에 적용하여 사전 롤 슬레이트를 잘라낼 수 있습니다. 이렇게 하면 늦게 도착하여 처음부터 이벤트를 시청하기로 결정한 시청자는 이벤트의 시작을 찾지 못합니다.

  <blockquote>참고: 트리밍은 매니페스트에서 전체 조각을 제거합니다. 즉, 트리밍 배치의 세분성은 사용 중인 조각의 크기(즉, GOP 길이). 일반적으로 라이브 플랫폼에서 대부분의 사람들은 수집을 위해 2초 조각을 사용하고 있습니다. 즉, 잘라내기/트리밍 배치에 대해 2초의 세분성이 있습니다.</blockquote>

  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/04/13/TimelineTrimEvent.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;" title="TimelineTrimEvent" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/TimelineTrimEvent_thumb.png" alt="TimelineTrimEvent" width="640" height="167" border="0" /></a>


  위의 다이어그램에서는 트리밍 필터를 사용하여 야구 게임 아카이브에서 사전 및 포스트 롤 슬레이트를 제거하는 예제를 보여 줍니다.맨 위에 있는 타임라인은 매니페스트 요청에 지정된 필터가 없는 전체 이벤트 보관 파일을 표시하므로 응답에 반환되는 항목은 사전 및 사후 롤 슬레이트를 포함하여 자산의 모든 항목을 포함하는 매니페스트입니다.이벤트가 종료된 후 "eventonly"라는 자산에 대한 필터를 만들었는데, 이 필터는 시간 코드 값이 X(게임의 시작 시간)보다 작고 Y보다 큰 모든 조각을 매니페스트에서 필터링하도록 지정합니다.이제 다이어그램의 두 번째 줄에서 매니페스트 요청에 "filter=eventonly"를 추가하여 필터를 적용했습니다.응답에서 나에게 반환되는 것은 이벤트의 시작부터 끝까지의 조각만 포함하는 매니페스트입니다.

  <h2><span style="font-size: medium;"><span style="text-decoration: underline;">타임라인 트리밍(하위 클립 만들기용)</span></span></h2>

  동적 매니페스트의 타임라인 트리밍 기능을 사용할 수 있는 또 다른 방법은 매니페스트를 하위 클립 길이로 줄이는 것입니다. 여러분이 취재하는 이벤트가 야구 경기이고 네 번째 이닝에 주문형 보기를 위한 짧은 형태의 하이라이트(즉, 서브 클립)를 제공하려는 홈런이 있다고 가정해 보겠습니다. 이 목적을 위해 동적 매니페스트를 사용할 수도 있습니다. 위에서 다시 잘라내기 또는 자르기 지점을 지정하는 것과 마찬가지로 유일한 차이점은 타임라인을 1-2분 클립으로 훨씬 더 줄이는 것입니다. 필터 정의에는 처리(즉, 코드 변환)가 필요하지 않으므로 거의 즉시 사용할 수 있습니다. 즉, 컷 포인트를 지정할 수 있는 한 빨리 대상 그룹에 홈런의 하위 클립을 사용할 수 있습니다.


  이러한 방식으로 동적 매니페스트를 사용하는 경우 두 가지 주의 사항이 있습니다. 트리밍/절단점 위에 명시된 #1은 조각/GOP 경계에만 있을 수 있습니다. #2 새 자산을 만들지 않고 전체 이벤트 보관에 대한 필터만 만듭니다. 즉, 하위 클립은 전체 이벤트 보관 파일과 동일한 수명 주기 및 보안 특성을 갖습니다. 즉, 전체 이벤트 보관 파일을 삭제하면 이러한 방식으로 만든 모든 하위 클립이 함께 이동합니다. 마찬가지로 동적 암호화를 위해 전체 이벤트 보관이 구성된 경우 모든 하위 클립도 암호화됩니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/04/13/TimelineTrimSubclip2.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;" title="TimelineTrimSubclip2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/TimelineTrimSubclip2_thumb.png" alt="TimelineTrimSubclip2" width="640" height="176" border="0" /></a>


  위의 다이어그램에서 야구 경기의 전체 이벤트 보관이 포함된 자산을 다시 사용하고 있으며, 첫 번째 행에서 아카이브의 모든 조각을 포함하는 매니페스트를 원한다고 지정했습니다.그러나 두 번째 행에서 이벤트 시작과 끝으로 트리밍하는 대신 내가 위에서했던 것처럼 이번에는 경기에서 승리한 홈런의 짧은 형태의 클립으로 자르는 필터를 만들었습니다.

  <h2>렌더링된 Sub-Clips</h2>

  지난 1년 동안 라이브 스트리밍을 수행하는 모든 고객이 해당 라이브 스트림에서 하위 클립을 만들 수 있기를 원했다고 생각합니다. 즉, 새 주문형 자산을 만들기 위해 라이브 스트림의 일부를 잘라낼 수 있기를 원합니다. 프로토타입 예제는 라이브 스포츠 중계에 있습니다. 여기서 일반적으로 위에서 설명한 홈런과 같은 하이라이트 순간이 있습니다.


  동적 매니페스트 섹션에서 위에서 설명한 것처럼 주의 사항과 함께 사용하려는 경우 이 목적을 위해 타임라인 트리밍을 사용할 수 있습니다. 그러나 대부분의 사람들은 하위 클리핑으로 렌더링되는 또 다른 새로운 기능을 사용하고 싶어할 것입니다. 라이브 스트림 렌더링된 하위 클립의 전체 이벤트 보관 파일을 트리밍하는 동적 매니페스트와 대조를 이루려면 원하는 스트림 부분을 추출하고 새 자산을 만듭니다. 따라서 이름의 "렌더링된" 부분입니다. 이 방법의 이점은 하위 클립이 잘린 스트림과 독립적으로 자체 수명 주기를 가질 수 있고 자체 보안 속성을 가질 수 있다는 것입니다. 예를 들어 전체 이벤트는 DRM일 수 있지만 하위 클립은 명확한 위치에 있을 수 있습니다.


  일반적으로 서브 클리핑을 사용하는 게임의 이름은 속도이며, 이 기능이 발생한 후 사이트에서 팬들이 해당 홈런의 하이라이트를 얼마나 빨리 사용할 수 있는지, 그리고 성능이 이 기능을 구축하는 데 있어 확실히 가장 중요합니다. 가장 먼저 주목해야 할 점은 이벤트가 라이브 상태인 동안 렌더링된 하위 클립을 설명하고 렌더링할 수 있다는 것입니다. 둘째, 요구 사항에 따라 두 가지 렌더링 옵션을 제공합니다. 조각/GOP 경계에서 절단해도 괜찮다면 라이브 자산의 조각만 새 자산으로 복사하기 때문에 매우 빠른 코드 변환 옵션을 제공합니다. 그러나 프레임 정확도가 필요한 경우 프레임 정확도를 달성하기 위해 트랜스코딩을 수행하는 또 다른 옵션을 제공합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/04/13/RenderedSubclip3.png"><img style="padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;" title="RenderedSubclip3" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/RenderedSubclip3_thumb.png" alt="RenderedSubclip3" width="640" height="173" border="0" /></a>


  위의 다이어그램에서 야구 게임의 동일한 예제 이벤트로 다시 돌아갔고 첫 번째 행에는 이벤트의 전체 보관이 다시 표시됩니다.이번에는 동적 매니페스트 필터를 사용하여 스트리밍 매니페스트를 잘라내어 내가 처리한 하위 클리핑 작업을 만든 홈런의 하이라이트를 만듭니다.최종 결과는 홈런의 프레임 정확한 클립을 포함하는 새로운 자산이므로 필터없이 자산에 대한 스트리밍 매니페스트를 요청할 때 홈런의 30 초를 다시 가져옵니다.

  <h2>결론</h2>

  동적 매니페스트 및 렌더링된 하위 클리핑은 도구 상자에 추가할 수 있는 강력한 새 도구입니다. 앞으로 몇 주 안에 자세한 구현 게시물을 확인하세요. 아래의 의견 섹션에 있는 질문을 하시면 최대한 빨리 응답하겠습니다.
