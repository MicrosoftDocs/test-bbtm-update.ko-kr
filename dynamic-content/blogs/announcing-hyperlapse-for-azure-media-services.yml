### YamlMime:Yaml
ms.openlocfilehash: dc9998780845e782d2fd61d1e13c7d906ca79341
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899437"
Slug: announcing-hyperlapse-for-azure-media-services
Title: Azure Media Services 대한 Hyperlapse 발표
Summary: '오늘은 Azure Media Services Hyperlapse의 무료 공개 미리 보기의 시작을 표시합니다!  '
Content: "<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">2019년 3월 28일부터 Azure Media Services 하이퍼랩스 미리 보기를 더 이상 사용할 수 없습니다. 최신 <a href=\"https://azure.microsoft.com/en-us/services/media-services/\">Azure Media Services 업데이트</a>에 대해 자세히 알아보세요.</div>\n\n<p>Azure Media Services의 Media Hyperlapse 미리 보기 기능은 곧 사용 중지됩니다. 2018년 12월 19일부터 미디어 하이퍼랩스를 더 이상 변경하거나 개선하지 않으며, 2019년 3월 29일에는 사용이 중지되고 더 이상 사용할 수 없게 됩니다. &rsquo;이 기능은 사용 중지되지만 클라우드 기반 비디오 인코딩, 스트리밍 및 인덱싱 서비스에는 여전히 <a href=\"https://docs.microsoft.com/en-us/azure/media-services/\" target=\"_blank\">Media Services</a> 사용할 수 있습니다.</p>\n\n<p>미디어 하이퍼랩스로 이미 처리된 콘텐츠&rsquo;의 경우 결과 출력 비디오는 Azure Media Services 계정에서 계속 사용할 수 있습니다. 이러한 변경으로 인해 불편을 드려 죄송합니다.</p>\n\n<p>질문이 있는 경우 <a href=\"mailto:amshelp@microsoft.com\">문의하세요</a>.</p>\n\n<p>&nbsp; 지난 5년 동안 드론 카메라와 액션 카메라의 도입으로 비디오 캡처 장치의 지형이 크게 중단되었습니다.&nbsp; 점점 더 작은 렌즈와 카메라 하드웨어, 소셜 미디어 및 멀티미디어 공유의 증가와 함께 모든 곳에서 아마추어 비디오 그래퍼를위한 문을 열었습니다.&nbsp; 지금, 하나는 저렴 하 게 그들의 액션 스포츠의 높은 프레임 속도 및 시야 영상을 걸릴 수 있습니다., 뿐만 아니라 하늘에 그들의 카메라를 가지고 즉시 세계와 공유 하기 위해 이전에 불가능 한 샷을 캡처. 그러나 이 기술을 사용하면 새로운 과제가 생겼습니다.&nbsp; 예를 들어, 주요 행사를 취재하는 드론이 있는 뉴스 조직으로서 느리게 움직이는 비디오의 길고 때로는 지루한 카탈로그를 사용 가능하고 흥미로운 것으로 어떻게 압축할 수 있을까요?&nbsp; 15분 동안 내리막 산악 자전거를 타는 장면을 녹화할 때, 어떻게 영상의 소모성 있고 공유 가능한 버전을 만들 수 있을까요? 지난 몇 개월 동안 Microsoft Research의 동료와 긴밀히 협력하여 microsoft Hyperlapse를 Azure Media Services 클라우드로 가져와 이 문제에 답했습니다.&nbsp; 오늘은 <strong>Azure Media Services Hyperlapse의 무료 공개 미리 보기의 시작을 표시합니다! </strong> 이 릴리스는 <a href=\"https://news.microsoft.com/?p=188061\">Hyperlapse Mobile 및 Hyperlapse Pro</a> 함께&nbsp; 제공되며 개발자 및 미디어 회사에 Microsoft Hyperlapse를 서비스로 제공하는 데 중점을 두고 있습니다.&nbsp; 이제 Allpublic Azure Datacenters에서 Microsoft Hyperlapse를&nbsp; 사용할 수 있습니다. &nbsp;</p>\n\n<h2>Microsoft Hyperlapse란?</h2>\n\n<p>Microsoft Hyperlapse는 MSR에서 20년 이상의 컴퓨터 비전 연구를 통해 비디오 안정화와 시간 경과를 결합하여 긴 형식의 콘텐츠에서 빠르고 소모성 있고 아름다운 비디오를 만든 결과입니다. 스노우 보드 실행의 헬멧 캠 영상을 공유하고 싶으신가요?&nbsp; Microsoft Hyperlapse를 사용하여 비디오 손떨림 보정으로 충돌을 원활하게 처리하고 콘텐츠를&nbsp; 소모성 클립으로 빠르게 전환할 수 있습니다. Microsoft Hyperlapse는 특수한 안정화 하드웨어/카메라를 사용하여 전문적으로 녹음된 실행의 세련된 느낌을 콘텐츠에 제공합니다. Microsoft Hyperlapse에서 기대할 수 있는 원활한 환경을 보여주는 다음 비디오( <a href=\"https://aka.ms/ampblog\">Azure Media Player</a>)를 살펴보세요. &nbsp;</p>\n\n<p>Microsoft Hyperlapse는 부드러운 시간 경과를 생성합니다. 특히 하이퍼랩스 비디오의 나무와 비교하여 정상적인 시간 경과의 나무에 주의를 기울입니다.&nbsp; 전통적인 시간 경과 기술은 아마추어 비디오 그래프의 바보와 범프를 강조하지만 Hyperlapse를 사용하면 여기에서 볼 수있는 부드러운 최종 결과로 모션을 처리 할 수 있습니다. Azure Media Services 대한 하이퍼랩스는 microsoft Hyperlapse 기술을 Azure Media Services <a href=\"https://azure.microsoft.com/en-us/documentation/articles/media-services-get-media-processor/\">미디어 프로세서</a>에 통합하는 것입니다.&nbsp; 오늘 Hyperlapse를 사용해 보시면 이 놀라운 기술과 Azure 클라우드의 울트라스케일 및 글로벌 존재 사이의 시너지 효과를 활용할 수 있도록 여러분 모두를 초대합니다! Azure Media Services 사용하면 Hyperlapse 작업의 확장 가능한 일괄 처리를 예약하여 하드웨어를 가상으로 확장하여 필요한 만큼 작업을 병렬 처리할 수 있습니다. &nbsp;</p>\n\n<h2>무료 공개 미리 보기</h2>\n\n<p>이 공개 미리 보기 제품의 목적을 위해 Microsoft Hyperlapse를 <strong>모든 Azure Media Services 계정에 무료로</strong> 제공합니다!</p>\n\n<blockquote>참고: 미리 보기 중에는 하이퍼랩스 작업을 10,000프레임의 비디오로 제한합니다.</blockquote>\n\n<h2>시작하기</h2>\n\n<p>현재 <a href=\"https://azure.microsoft.com/en-us/develop/media-services/\">REST API/SDK</a> 또는 <a href=\"https://aka.ms/amse\">Azure Media Services Explorer</a>를 사용하여 웹 또는 앱 제품에 Hyperlapse 기술을 쉽게 통합할 수 있습니다. 다음은 첫 번째 Hyperlapse 작업을 시작하는 샘플 C# 프로그램 및 구성 XML입니다.&nbsp; 이 코드에는 <a href=\"https://github.com/Azure/azure-sdk-for-media-services\">Azure Media Services C# SDK</a> 및 <a href=\"https://github.com/Azure/azure-sdk-for-media-services-extensions\">SDK 확장</a> 패키지(NuGet 사용 가능)가 모두 필요합니다. &nbsp;</p>\n\n<h3>샘플 프로그램</h3>\n\n<pre class=\"prettyprint\">\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing Microsoft.WindowsAzure.MediaServices.Client;\nusing System.Configuration;\nusing System.IO;\nusing System.Threading;\n\n\nnamespace MyFirstHyperlapseJob\n{\n    class Program\n    {\n        \n        // declare constants and globals\n        private static CloudMediaContext _context = null;\n        private static readonly string _accountName = {ACCOUNT_NAME};\n        private static readonly string _accountKey = {ACCOUNT_KEY};\n\n        private const string _mpName = &quot;Azure Media Hyperlapse&quot;;\n        private static readonly string _inputFile = {INPUT_FILE_PATH};  \n    private static readonly string _outputFolder = {OUTPUT_FOLDER_PATH};\n        private const string _hyperlapseConfiguration = {PATH_TO_CONFIG};\n\n        static void Main(string[] args)\n        {\n            _context = new CloudMediaContext(_accountName, _accountKey);\n            RunHyperlapseJob(_inputFile, _outputFolder, _hyperlapseConfiguration);\n        }\n\n        static void RunHyperlapseJob(string input, string output, string hyperConfig)\n        {\n            // create asset with input file\n            IAsset asset = _context\n                           .Assets\n                           .CreateFromFile(input, AssetCreationOptions.None);\n\n            // grab instance of Azure Media Hyperlapse MP\n            IMediaProcessor mp = _context\n                                 .MediaProcessors\n                                 .GetLatestMediaProcessorByName(_mpName);\n\n            // create Job with hyperlapse task\n            IJob job = _context\n                       .Jobs\n                       .Create(String.Format(&quot;Hyperlapse {0}&quot;, input));\n\n            if (!String.IsNullOrEmpty(hyperConfig))\n            {\n                hyperConfig = File.ReadAllText(hyperConfig);\n            }\n            ITask hyperlapseTask = job.Tasks.AddNew(&quot;Hyperlapse task&quot;, \n                                                    mp,\n                                                    hyperConfig, \n                                                    TaskOptions.None);\n            hyperlapseTask.InputAssets.Add(asset);\n            hyperlapseTask.OutputAssets.AddNew(&quot;Hyperlapse output&quot;, \n                                                AssetCreationOptions.None);\n\n\n            job.Submit();\n\n            // Create progress printing and querying tasks\n                Task progressPrintTask = new Task(() =&gt;\n                {\n\n                    IJob jobQuery = null;\n                    do\n                    {\n                        var progressContext = _context;\n                        jobQuery = progressContext.Jobs\n                                                  .Where(j =&gt; j.Id == job.Id)\n                                                  .First();\n                        Console.WriteLine(string.Format(&quot;{0}\\t{1}\\t{2}&quot;, \n                                          DateTime.Now, \n                                          jobQuery.State, \n                                          jobQuery.Tasks[0].Progress));\n                        Thread.Sleep(10000);\n                    }\n                    while (jobQuery.State != JobState.Finished &amp;&amp;\n                           jobQuery.State != JobState.Error &amp;&amp;\n                           jobQuery.State != JobState.Canceled);\n                });\n                progressPrintTask.Start();\n\n                Task progressJobTask = job.GetExecutionProgressTask(\n                                                     CancellationToken.None);\n                progressJobTask.Wait();\n\n                // If job state is Error, the event handling \n                // method for job progress should log errors.  Here we check \n                // for error state and exit if needed.\n                if (job.State == JobState.Error)\n                {\n                    ErrorDetail error = job.Tasks.First().ErrorDetails.First();\n                    Console.WriteLine(string.Format(&quot;Error: {0}. {1}&quot;, \n                                                    error.Code, \n                                                    error.Message));                    \n                }\n\n            DownloadAsset(job.OutputMediaAssets.First(), output);\n        }\n\n        static void DownloadAsset(IAsset asset, string outputDirectory)\n        {\n            foreach (IAssetFile file in asset.AssetFiles)\n            {\n                file.Download(Path.Combine(outputDirectory, file.Name));\n            }\n        }\n\n        // event handler for Job State\n        static void StateChanged(object sender, JobStateChangedEventArgs e)\n        {\n            Console.WriteLine(&quot;Job state changed event:&quot;);\n            Console.WriteLine(&quot;  Previous state: &quot; + e.PreviousState);\n            Console.WriteLine(&quot;  Current state: &quot; + e.CurrentState);\n            switch (e.CurrentState)\n            {\n                case JobState.Finished:\n                    Console.WriteLine();\n                    Console.WriteLine(&quot;Job finished.&quot;);\n                    break;\n                case JobState.Canceling:\n                case JobState.Queued:\n                case JobState.Scheduled:\n                case JobState.Processing:\n                    Console.WriteLine(&quot;Please wait...\\n&quot;);\n                    break;\n                case JobState.Canceled:\n                    Console.WriteLine(&quot;Job is canceled.\\n&quot;);\n                    break;\n                case JobState.Error:\n                    Console.WriteLine(&quot;Job failed.\\n&quot;);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<h3>구성 XML</h3>\n\n<pre class=\"prettyprint\">\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;\n&lt;Preset xmlns:xsi=&quot;<a href=\"https://www.w3.org/2001/XMLSchema-instance\">https://www.w3.org/2001/XMLSchema-instance</a>&quot; xmlns:xsd=&quot;<a href=\"https://www.w3.org/2001/XMLSchema\">https://www.w3.org/2001/XMLSchema</a>&quot; Version=&quot;1.0&quot; xmlns=&quot;<a href=\"https://www.windowsazure.com/media/encoding/Preset/2014/03\" title=\"https://www.windowsazure.com/media/encoding/Preset/2014/03&#10;Ctrl+Click or tap to follow the link\">https://www.windowsazure.com/media/encoding/Preset/2014/03</a>&quot;&gt;\n&nbsp; &lt;Sources&gt;\n&nbsp;&nbsp;&nbsp; &lt;Source StartFrame=&quot;0&quot; NumFrames=&quot;10000&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;InputFiles /&gt;\n&nbsp;&nbsp;&nbsp; &lt;/Source&gt;\n&nbsp; &lt;/Sources&gt;\n&nbsp; &lt;Options&gt;\n&nbsp;&nbsp;&nbsp; &lt;Speed&gt;8&lt;/Speed&gt;\n&nbsp; &lt;/Options&gt;\n&lt;/Preset&gt;</pre>\n\n<p>&nbsp;</p>"
