### YamlMime:Yaml
ms.openlocfilehash: b123ceb410c9c35b98cbaaac6215a3b4f743a545
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902560"
Slug: how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-2
Title: Skype Azure Cosmos DB를 사용하여 백 엔드 인프라를 현대화하는 방법 – 2부
Summary: Skype Microsoft의 전 세계적으로 분산된 NoSQL 데이터베이스 서비스인 Azure Cosmos DB에 적합합니다. 턴키 글로벌 배포 및 처리량 및 스토리지의 탄력적 크기 조정을 포함하여 새로운 PCS(People Core Service)에 필요한 모든 것을 Skype 제공하므로 글로벌 규모에서 대기 시간이 매우 짧은 Skype 같은 분산 앱에 이상적인 기반이 되었습니다.
Content: >-
  <p><em>조직에서 Azure Cosmos DB를 사용하여 실제 요구 사항을 충족하는 방법과 이러한 요구 사항을 충족하는 차이점&rsquo;에 대한 3부로 구성된 블로그 게시물 시리즈입니다. <a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-1/">1부</a>에서는 Skype 직면한 과제를 탐구하여 조치를 취했습니다. 이 게시물(3부 중 2부)에서는 Skype Azure Cosmos DB를 구현하여 백 엔드 인프라를 현대화하는 방법을 살펴봅니다. <a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-3/">3</a>&rsquo;부에서는 이러한 노력으로 인한 결과를 다룹니다.</em></p>


  <p><strong>참고:</strong> 기울임꼴/괄호의 주석은&#39;작성자입니다.</p>


  <h2>솔루션</h2>


  <h3>사용자에게 더 가까운 데이터 배치</h3>


  <p>Skype Microsoft의 전 세계적으로 분산된 NoSQL 데이터베이스 서비스인 Azure Cosmos DB에 적합합니다. 턴키 글로벌 배포 및 처리량 및 스토리지의 탄력적 크기 조정을 포함하여 새로운 PCS(People Core Service)에 필요한 모든 것을 Skype 제공하므로 글로벌 규모에서 대기 시간이 매우 짧은 Skype 같은 분산 앱에 이상적인 기반이 되었습니다.</p>


  <h3>초기 디자인 결정</h3>


  <p>프로토타입은 2017년 5월에 시작되었습니다. 팀이 초기에 선택한 항목은 다음과 같습니다.</p>


  <ul>
   <li><strong>지역에서 복제:</strong> 팀은 한 <a href="https://azure.microsoft.com/en-us/global-infrastructure/regions/" target="_blank">Azure 지역에</a> Azure Cosmos DB를 배포한 후 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/distribute-data-globally" target="_blank">푸시버튼 지역 복제</a>를 사용하여 총 7개의 Azure 지역(북미 3개, 유럽 2개, APAC(아시아 태평양) 지역에 2개)로 복제했습니다. 그러나 나중에 이 세 지역에서 단일 존재가 모든 SLA를 충족하기에 충분하다는 것이 밝혀졌습니다.</li>
   <li><strong>일관성 수준:</strong> 지역에서 복제를 설정할 때 팀은 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels" target="_blank">Azure Cosmos DB에서 지원하는 5가지 일관성 수준</a> 중에서 세션 일관성을 선택했습니다. <em>(세션 일관성은 단조 읽기, 단조 쓰기 및 직접 쓰기 읽기를 보장하기 때문에 디바이스 또는 사용자 세션이 관련된 시나리오에 적합합니다.)</em></li>
   <li><strong>분할:</strong> Skype UserID를 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/partition-data" target="_blank">파티션 키</a>로 선택하므로 각 사용자의 모든 데이터가 동일한 실제 파티션에 있는지 확인합니다. <em>(Azure Cosmos DB를 사용하면 각 컬렉션에 데이터의 논리적 파티션 역할을 하는 파티션 키가 있어야 하며, Azure Cosmos DB에 내부적으로 투명하게 실제 파티션에 분산하기 위한 자연 경계를 제공합니다.)</em></li>
  </ul>


  <h3>Azure Cosmos DB 변경 피드를 기반으로 하는 이벤트 기반 아키텍처</h3>


  <p>새 PCS 서비스를 빌드할 때 Skype 개발자는 Azure Cosmos DB의 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed" target="_blank">변경 피드 지원을</a> 기반으로 하는 마이크로 서비스, 이벤트 기반 아키텍처를 구현했습니다. 변경 피드는 변경 내용에 &ldquo;대한 Azure Cosmos DB 컨테이너를 수신 대기&rdquo;하고 변경된 문서의 정렬된 목록을 수정된 순서대로 출력하여 작동합니다. 변경 사항은 지속적이며, 비동기적 및 증분적으로 처리할 수 있고 출력을 하나 이상의 소비자 사이에 분산하여 병렬 처리가 가능합니다. <em>(Azure Cosmos DB의 변경 피드는 기본적으로 모든 계정에 대해 사용하도록 설정되며 추가 비용이 발생하지 않습니다. Azure Cosmos DB의 다른 작업과 마찬가지로 프로비전된 RU/s를 사용하여 피드에서 읽을 수 있습니다.</em></p>


  <p>&ldquo;일반적으로 이벤트 기반 아키텍처는 Kafka, Event Hub 또는 다른 이벤트 원본을 사용하며 Kaduk&rdquo; 에 대해 설명합니다. &ldquo;그러나 Azure Cosmos DB에서 변경 피드는 전체 아키텍처를 간소화하는 기본 제공 이벤트 원본을 제공했습니다.&rdquo;</p>


  <p>솔루션&rsquo; 감사 기록 요구 사항을 충족하기 위해 개발자는 <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing" target="_blank">캡처 상태 패턴을 사용하여 이벤트 소싱</a>을 구현했습니다. 이 패턴은 도메인에 데이터의 현재 상태만 저장하는 대신 추가 전용 저장소를 사용하여 변경된 상태(즉&ldquo;, 캡처 상태&rdquo;)와 함께 데이터(&ldquo;패턴의 이벤트 소싱&rdquo; 부분)에 대해 수행된 전체 일련의 작업을 기록합니다. 추가 전용 저장소는 레코드 시스템 역할을 하며 도메인 개체를 구체화하는 데 사용할 수 있습니다. 또한 트랜잭션 데이터에 대한 일관성을 제공하고, 보상 작업을 사용하도록 설정할 수 있는 전체 감사 내역 및 기록을 유지 관리합니다.</p>


  <h3>최적의 성능을 위해 읽기 및 쓰기 경로와 데이터 모델을 분리합니다.</h3>


  <p>개발자는 <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs" target="_blank">CQRS(명령 및 쿼리 책임 분리) 패턴을</a> 이벤트 소싱 패턴과 함께 사용하여 각각 관련 작업에 맞게 조정된 별도의 쓰기 및 읽기 경로, 인터페이스 및 데이터 모델을 구현했습니다. &ldquo;이벤트 소싱 패턴과 함께 CQRS를 사용하는 경우 이벤트 저장소는 쓰기 모델이며, 발생하거나 변경된 내용, 의도 및 보낸 사람을&rdquo; 캡처하는 정보의 공식 소스라고 Kaduk은 설명합니다. &ldquo;이 모든 항목은 변경된 각 도메인 집계&mdash;자, 사람 및 그룹에 대해 하나의 JSON 문서에 저장됩니다. 읽기 모델은 쿼리에 최적화되고 두 번째 작은 JSON 문서에 저장되는 구체화된 뷰를 제공합니다. 이 모든 기능은 Azure Cosmos DB 문서 형식 및 단일 컬렉션 내에 서로 다른 데이터 구조를 사용하여 다양한 유형의 문서를 저장할 수 있는 기능을 통해 사용하도록 설정됩니다.&rdquo; <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/cqrs#event-sourcing-and-cqrs" target="_blank">CQRS와 함께 이벤트 소싱을 사용하는</a> 방법에 대한 자세한 내용을 찾습니다.</p>


  <h3>사용자 지정 변경 피드 처리</h3>


  <p>개발 팀은 Azure Functions를 사용하여 변경 피드 처리를 처리하는 대신 <a href="https://docs.microsoft.com/en-us/azure/cosmos-db/change-feed-processor" target="_blank">Azure Cosmos DB 변경 피드 프로세서 라이브러리</a>&mdash;를 사용하여 자체 변경 피드 처리를 구현하기로 결정했습니다. Azure Functions에서 내부적으로 사용하는 코드와 동일합니다. 이를 통해 개발자는 큐 재시도, 배달 못 한 편지 이벤트 지원 및 심층 모니터링을 구현하는 기능을 포함하여 변경 피드 처리를 보다 세부적으로 제어할 수 있습니다. 사용자 지정 변경 피드 프로세서는 PaaS v1&rdquo; 모델에서 &ldquo;Azure VM(Virtual Machines)에서 실행됩니다.</p>


  <p>&ldquo;변경 피드 프로세서 라이브러리를 사용하면 모든 SLA가 충족&rdquo; 되도록 하는 데 탁월한 제어가 제공되었다고 Kaduk은 설명합니다. &ldquo;예를 들어 Azure Functions를 사용하면 함수가 다시 시도되는 동안 실패하거나 스핀 앤 대기할 수 있습니다. 스핀 및 대기를 감당할 수&rsquo; 없으므로 변경 피드 프로세서 라이브러리를 사용하여 주기적으로 다시 시도되는 큐를 구현했으며, 하루 이틀 후에도 실패한 경우 검토를 위해 &lsquo;배달 못한 편지 컬렉션&rsquo; 에 요청을 보냅니다. 또한 요청이 처리되는 속도, 처리 중인 노드 및 각 파티션에 대해 남은 예상 작업에 대한 광범위한 모니터링&mdash;을 구현했습니다.&rdquo; 이 <em> 모든 것이 어떻게 작동하는지 자세히</em> <em>알아보려면 </em><a href="https://blogs.msdn.microsoft.com/fkaduk/tag/changefeed/" target="_blank"><em>Frantiseks&rsquo; 블로그 문서를</em></a> 참조하세요.</p>


  <h3>파티션 간 트랜잭션 및 다른 서비스와의 통합</h3>


  <p>또한 변경 피드는 둘 이상의 사용자의 데이터에 걸쳐 있는 파티션 간 트랜잭션과 같은 백그라운드 사후 처리를 구현하기 위한 기반을 제공했습니다. 존이 샐리에게 메시지를 보내지 못하도록 차단하는 경우가 좋은 예입니다. 시스템은 사용자 John의 명령을 수락하여 사용자 Sally를 차단합니다. 이 명령은 요청의 유효성을 검사하고 적절한 처리기로 디스패치됩니다. 이 명령은 이벤트 기록을 저장하고 사용자 John에 대한 쿼리 가능 데이터를 업데이트합니다. 파티션 간 트랜잭션을 담당하는 후처리기는 변경 피드를 모니터링하여 John이 Sally를 차단한 정보를 Sally(다른 파티션에 상주할 가능성이 높음)에 대한 데이터로 역방향 블록으로 복사합니다. 이 정보는 피어 간의 관계를 결정하는 데 사용됩니다. (이 패턴에 대한 자세한 내용은 <a href="https://www-db.cs.wisc.edu/cidr/cidr2007/papers/cidr07p15.pdf" target="_blank"><em>분산 거래 이외의 삶: 배&rsquo;도자 의견</em></a> <em>문서에서 &ldquo;찾을 수</em> 있습니다<em>.&rdquo;)</em></p>


  <p>마찬가지로 개발자는 변경 피드를 사용하여 알림, 그래프 검색 및 채팅과 같은 다른 서비스와의 통합을 지원했습니다. 이 이벤트는 실행 중인 모든 변경 피드 프로세서에 의해 백그라운드에서 수신되며, 그 중 하나는 공용 스키마를 사용하여 Azure Event Hub와 같은 외부 이벤트 소비자에게 알림을 게시하는 역할을 합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c7ea79b6-8a3d-4d11-90c9-4a77090404e7.png"><img alt="Azure Cosmos DB flowchart" border="0" height="406" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/30f41c76-fbac-40e0-9511-fedb034505b6.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure Cosmos DB 순서도" width="556"></a></p>


  <h3>사용자 데이터 마이그레이션</h3>


  <p>개발자는 사용자 데이터를 SQL Server Azure Cosmos DB로 쉽게 마이그레이션할 수 있도록 이전 PCS 서비스의 모든 사용자 데이터를 반복하는 서비스를 작성했습니다.</p>


  <ul>
   <li>SQL Server 데이터를 쿼리하고 Azure Cosmos DB에 대한 새 데이터 모델로 변환합니다.</li>
   <li>Azure Cosmos DB에 데이터를 삽입하고 사용자&rsquo; 주소록을 새 데이터베이스에서 마스터로 표시합니다.</li>
   <li>각 사용자의 마이그레이션 상태에 대한 조회 테이블을 업데이트합니다.</li>
  </ul>


  <p>전체 프로세스를 사용자에게 원활하게 만들기 위해 개발자는 조회 테이블에서 사용자에 대한 마이그레이션 상태를 확인하고 요청을 적절한 데이터 저장소(이전 또는 새 데이터 저장소)로 라우팅하는 프록시 서비스를 구현했습니다. 모든 사용자가 마이그레이션된 후 이전 PCS 서비스, 조회 테이블 및 임시 프록시 서비스가 프로덕션에서 제거되었습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f85fb594-b18a-4834-810d-22e665b83779.png"><img alt="Migration for production flowchart" border="0" height="419" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f8e1f1ad-6544-47d8-b750-89d6a439a5da.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="프로덕션 순서도 마이그레이션" width="651"></a></p>


  <p>프로덕션 사용자를 위한 마이그레이션은 2017년 10월에 시작되었으며 약 2개월이 걸렸습니다. 현재 모든 요청은 복제된 각 지역에 140테라바이트 이상의 데이터를 포함하는 Azure Cosmos DB에서 처리됩니다. 새 PCS 서비스는 초당 최대 15,000개의 읽기 및 6,000개의 쓰기를 처리합니다. 프로세스는 RU 사용량이 필요에 따라 할당된 RU의 크기를 조정하는 것을 모니터링합니다.</p>


  <p><em>Azure Cosmos DB의 Skype&rsquo; 구현으로 인한 결과를 설명하는 <a href="https://azure.microsoft.com/en-us/blog/how-skype-modernized-its-backend-infrastructure-using-azure-cosmos-db-part-3/">3부를 계속</a> 진행합니다.</em></p>
