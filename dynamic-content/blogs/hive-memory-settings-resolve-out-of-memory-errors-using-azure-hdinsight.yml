### YamlMime:Yaml
ms.openlocfilehash: 70c70f618ac4da0cc6fe65fe744669fadab7365f
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139912829"
Slug: hive-memory-settings-resolve-out-of-memory-errors-using-azure-hdinsight
Title: Azure HDInsight를 사용하여 메모리 부족 오류를 해결하기 위한 Hive 설정
Summary: 고객이 직면하는 일반적인 문제 중 하나는 Hive를 사용할 때 OOM(메모리 부족) 오류가 발생하는 것입니다. 이 블로그 게시물에서는 고객이 문제를 해결하기 위해 권장하는 설정과 관련하여 고객에게 연락한 시나리오를 설명합니다.
Content: "<p>고객이 직면하는 일반적인 문제 중 하나는 Hive를 사용할 때 OOM(메모리 부족) 오류가 발생하는 것입니다. 이 블로그 게시물에서는 고객이 문제를 해결하기 위해 권장하는 설정과 관련하여 고객에게 연락한 시나리오를 설명합니다.</p>\n\n<h1>시나리오</h1>\n\n<p>고객 중 한 명이 다음 문제를 해결했습니다. Hive를 사용하여 아래 쿼리를 실행했습니다.</p>\n\n<pre class=\"prettyprint\">\nSELECT\n COUNT (T1.COLUMN1) as DisplayColumn1,\n &hellip;\n &hellip; \n &hellip;.\nFROM\n TABLE1 T1,\n TABLE2 T2,\n TABLE3 T3,\n TABLE5 T4,\n TABLE6 T5,\n TABLE7 T6\nwhere (T1.KEY1 = T2.KEY1&hellip;.\n &hellip;\n &hellip;\n</pre>\n\n<p>이 쿼리의 미묘한 차이는 다음과 같습니다.</p>\n\n<ul>\n <li>T1은 큰 테이블 TABLE1에 대한 별칭이고 여기에는 많은 STRING 열 형식이 있습니다.</li>\n <li>다른 테이블은 크지는 않지만 많은 열을 포함합니다.</li>\n <li>모든 테이블은 서로 조인되며 TABLE1 및 기타 테이블의 여러 열과 조인되기도 합니다.</li>\n</ul>\n\n<p>24 노드 A3 클러스터의 MapReduce Hive를 사용하여 아래 쿼리를 실행한 경우 쿼리는 약 26분 만에 실행되었습니다. 고객은 MapReduce에서 Hive를 사용하여 쿼리를 실행할 때 다음과 같은 경고 메시지를 보게 됩니다.</p>\n\n<pre class=\"prettyprint\">\nWarning: Map Join MAPJOIN[428][bigTable=?] in task &#39;Stage-21:MAPRED&#39; is a cross product\nWarning: Shuffle Join JOIN[8][tables = [t1933775, t1932766]] in Stage &#39;Stage-4:MAPRED&#39; is a cross product\n</pre>\n\n<p>쿼리 실행이 약 26분 만에 완료되었으므로 고객은 이러한 경고를 무시하고 대신 이 쿼리&rsquo; 성능을 개선하는 방법에 집중하기 시작했습니다.</p>\n\n<p>성능 향상에 대한 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/hdinsight-hadoop-optimize-hive-query/\">설명서</a> 에 따라 고객은 Tez 실행 엔진을 사용하기로 결정했습니다. Tez 설정을 사용하도록 설정하여 동일한 쿼리를 실행한 후 쿼리가 15분 동안 실행된 후 다음 오류가 발생했습니다.</p>\n\n<pre class=\"prettyprint\">\nStatus: Failed\nVertex failed, vertexName=Map 5, vertexId=vertex_1443634917922_0008_1_05, diagnostics=[Task failed, taskId=task_1443634917922_0008_1_05_000006, diagnostics=[TaskAttempt 0 failed, info=[Error: Failure\nwhile running task:java.lang.RuntimeException: java.lang.OutOfMemoryError: Java heap space\n        at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.initializeAndRunProcessor(TezProcessor.java:172)\n        at org.apache.hadoop.hive.ql.exec.tez.TezProcessor.run(TezProcessor.java:138)\n        at org.apache.tez.runtime.LogicalIOProcessorRuntimeTask.run(LogicalIOProcessorRuntimeTask.java:324)\n        at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable$1.run(TezTaskRunner.java:176)\n        at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable$1.run(TezTaskRunner.java:168)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at javax.security.auth.Subject.doAs(Subject.java:415)\n        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1628)\n        at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable.call(TezTaskRunner.java:168)\n        at org.apache.tez.runtime.task.TezTaskRunner$TaskRunnerCallable.call(TezTaskRunner.java:163)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.OutOfMemoryError: Java heap space\n</pre>\n\n<p>그런 다음 고객은 더 큰 VM(예: D12)을 사용하기로 결정했습니다. 더 큰 VM은 더 많은 힙 공간을 갖게 될 것이라고 생각했습니다. 이렇게 해도 오류가 계속 발생합니다. 고객이 이 문제를 디버깅하는 데 도움을 요청했습니다.</p>\n\n<h1>메모리 부족 디버깅 오류</h1>\n\n<p>CSS 팀과 엔지니어링 팀은 함께 OOM(메모리 부족) 오류를 일으키는 문제 중 하나가 <a href=\"https://issues.apache.org/jira/browse/HIVE-8306\">알려진</a> 문제 때문이라는 것을 발견했습니다. JIRA에 대한 설명에서 다음을 수행합니다.</p>\n\n<pre class=\"prettyprint\">\nWhen hive.auto.convert.join.noconditionaltask = true we check noconditionaltask.size and if the sum of tables sizes in the map join is less than noconditionaltask.size the plan would generate a Map join, the issue with this is that the calculation doesnt take into account the overhead introduced by different HashTable implementation as results if the sum of input sizes is smaller than the noconditionaltask size by a small margin queries will hit OOM.\n</pre>\n\n<p>hive-site.xml 파일을 확인하여 hive.auto.convert.join.noconditionaltask가 실제로 true로 설정되어 있는지 확인&nbsp; 했습니다.</p>\n\n<pre class=\"prettyprint\">\n&lt;property&gt;\n    &lt;name&gt;hive.auto.convert.join.noconditionaltask&lt;/name&gt;\n    &lt;value&gt;true&lt;/value&gt;\n    &lt;description&gt;\n      Whether Hive enables the optimization about converting common join into mapjoin based on the input file size. \n      If this parameter is on, and the sum of size for n-1 of the tables/partitions for a n-way join is smaller than the\n      specified size, the join is directly converted to a mapjoin (there is no conditional task).\n    &lt;/description&gt;\n  &lt;/property&gt;\n</pre>\n\n<p>경고 및 JIRA에 따라 맵 조인이 Java 힙 공간&rdquo; OOM 오류의 &ldquo;원인이라는 가설이 있었습니다. 그래서 우리는 이 문제에 대해 더 깊이 파고들기 시작했습니다.</p>\n\n<p><a href=\"https://blogs.msdn.com/b/shanyu/archive/2014/07/31/hadoop-yarn-memory-settings-in-hdinsigh.aspx\">이 블로그 게시물</a>에서 설명한 대로 Tez 실행 엔진을 사용하는 경우 사용되는 힙 공간은 실제로 Tez 컨테이너에 속합니다. Tez 컨테이너 메모리를 설명하는 아래 이미지를 참조하세요.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/63b25367-49ea-457c-869d-43f2f62da566.png\"><img alt=\"Tez_Memory\" border=\"0\" height=\"384\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a023b0c3-60dd-4bb3-bc49-ff0364825e9c.png\" style=\"border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Tez_Memory\" width=\"688\"></a></p>\n\n<p><a href=\"https://blogs.msdn.com/b/shanyu/archive/2014/07/31/hadoop-yarn-memory-settings-in-hdinsigh.aspx\">블로그 게시물</a>에서 설명한 대로 다음 두 개의 메모리 설정은 힙에 대한 컨테이너 메모리를 정의합니다. hive.tez.container.size 및 hive.tez.java.opts. 경험에 따르면 OOM 예외가 발생했다고 해서 컨테이너 크기가 너무 작은 것은 아닙니다. Java 힙 크기(hive.tez.java.opts)가 너무 작은 것입니다. 따라서 OOM이 표시되면 hive.tez.java.opts를 늘릴 &ldquo;수 있습니다.&rdquo; 필요한 경우 hive.tez.container.size를 늘려&ldquo;야 할 수 있습니다.&rdquo; java.opts는 &ldquo;&rdquo; container.size의 &ldquo;약 80%여야 합니다.&rdquo;</p>\n\n<p>hive.tez.java.opts 설정은 항상 hive.tez.container.size보다 작아야 합니다.</p>\n\n<p>D12 컴퓨터에 28GB 메모리가 있으므로 10GB(10240MB)의 컨테이너 크기를 사용하고 java.opts에 80%를 할당하기로 했습니다. 이 작업은 아래 설정을 사용하여 Hive 콘솔에서 수행했습니다.</p>\n\n<pre class=\"prettyprint\">\nSET hive.tez.container.size=10240\nSET hive.tez.java.opts=-Xmx8192m</pre>\n\n<p>이러한 설정에 따라 쿼리는 10분 이내에 성공적으로 실행됩니다.</p>\n\n<h1>결론</h1>\n\n<p>OOM 오류가 발생한다고 해서 컨테이너 크기가 너무 작다는 의미는 아닙니다. 대신 힙 크기가 증가하고 컨테이너 메모리 크기의 80% 이상이 되도록 메모리 설정을&nbsp; 구성해야 합니다.</p>"
