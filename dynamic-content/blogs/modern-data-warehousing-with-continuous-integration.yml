### YamlMime:Yaml
ms.openlocfilehash: 4a9eb9ff02d70009a7d7b4651775909381d5831e
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898559"
Slug: modern-data-warehousing-with-continuous-integration
Title: 연속 통합을 사용한 최신 데이터 웨어하우징
Summary: API(.NET) 기반 애플리케이션에 더 널리 사용되는 CI 사례를 채택하여 데이터 웨어하우스를 개발하는 기존 방법을 한 단계 더 발전합니다. 데이터 웨어하우스에 대한 보류 기간은 길어졌습니다...
Content: >-
  <p><em>이 게시물은 Microsoft IT의 수석 SWE 리더인 Mohit Chand가 공동 저술했습니다. </em></p>


  <p>API(.NET) 기반 애플리케이션에 더 널리 사용되는 CI 사례를 채택하여 데이터 웨어하우스를 개발하는 기존의 방법을 한 단계 더 발전하고 있습니다. 데이터 웨어하우스 팀이 최신 소프트웨어 엔지니어링 사례를 따라잡기 위해 오랫동안 보류되어 왔습니다. VSTS(Visual Studio Online) &amp; SQL Server Data Tools(SSDT)가 등장하면서 즉시 환경을 회전하면서 최대 자동화를 통해 환경에 코드를 배포하는 것이 쉬워집니다. 이러한 최신 사례를 채택하여 DW(비즈니스 Insights) 프로젝트에서 엔지니어링 생산성을 향상시켰습니다. SSDT 및 VSTS의 도움으로 Agile 릴리스(2주 스프린트)와 DW 배포를 완벽하게 맞출 수 있었습니다. 이 블로그에서는 데이터 웨어하우스에 CI를 구현하는 방법에 대해 자세히 설명합니다. 코드 분기, 끌어오기 요청 트리거 빌드, Azure 리소스 및 환경 프로비저닝, 스키마 배포, 시드 데이터 생성, 자동화된 테스트가 포함된 일별 통합 릴리스 및 더 높은 환경으로 새 코드를 승격하기 위한 승인 기반 워크플로에서 시작하는 비즈니스 사용자 스토리의 수명 주기를 설명합니다.</p>


  <h2>DevOps</h2>


  <p>왜 DevOps? 기존의 개발 및 운영 모델에서는 소프트웨어가 예상대로 작동하지 않을&rsquo; 때 항상 혼란과 논쟁의 가능성이 있습니다. Dev는 해당 환경에서 잘 작동하는 소프트웨어를 주장하고 Ops 문제로 방어할 것입니다. Ops는 Devs가 프로덕션 준비 소프트웨어를&rsquo; 제공하지 않았으며&rsquo; 개발 문제가 있음을 나타냅니다. 이 문제를 해결하려면 어떻게 해야 할까요? 단일 팀이 개발, 테스트 및 운영을 담당하는 것이 좋을까&rsquo;요?</p>


  <p>Microsoft는 비즈니스 및 기타 지분 보유자와 긴밀히 협력하여 고객에게 더 빠르고 더 나은 결과를 효율적으로 제공합니다. DevOps 통해 기술적인 부채와 위험을 줄이면서 고객과의 더 나은 연결을 통해 더 빠르게 제공할 수 있습니다.</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/08739887-4d45-4bd6-a6a7-21af3fa8c7e3.png"><img alt="DevOps" border="0" height="240" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f2c166bc-ab31-4260-8167-2d06248b8ff0.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="DevOps" width="514"></a></p>


  <h2>DW 아키텍처</h2>


  <p>이 데이터 웨어하우스는 Azure 기술을 사용합니다. 데이터는 Azure Data Factory를 통해 여러 원본에서 랜딩 존 또는 스테이징 영역에 도착합니다. ADF(Azure Data Factory) 작업을 사용하여 데이터를 웨어하우스로 마사지하고 변환합니다. 준비가 되면 차원 및 팩트 테이블 형식으로 고객이 데이터를 사용할 수 있습니다.</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/150c1301-3ac0-47a7-b49d-84fe19cca014.png"><img alt="DWArchitecture" border="0" height="415" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dcb7566d-c0c6-4410-94bf-f243976b4472.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="DWArchitecture" width="717"></a></p>


  <h4>도구/기술</h4>


  <p>이 최신 데이터 웨어하우스는 주로 Microsoft 기술을 사용하여 고객에게 솔루션을 제공합니다.</p>


  <ul>
   <li>SQL Azure(PaaS)</li>
   <li>Azure 데이터 팩터리</li>
   <li>Azure Blob Storage</li>
   <li>SQL MDS 2016</li>
   <li>VSTS(Visual Studio Team Services)
   <ul>
    <li>
    <ul>
     <li>Agile 및 Kanban 보드</li>
     <li>코드 분기(Git)</li>
     <li>제어된 체크 인</li>
     <li>자동화된 테스트</li>
     <li>빌드</li>
     <li>해제</li>
    </ul>
    </li>
   </ul>
   </li>
  </ul>


  <h2>계획</h2>


  <p>민첩한 스크럼에서 사용자 스토리는 구현 단위입니다. 엔지니어는 지정된 스프린트에서 사용자 스토리를 선택하고 전달합니다.</p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d670ace0-9db3-409a-964f-7742e1df426a.jpg"><img alt="Story" border="0" height="218" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bfabb0a8-3119-43a3-a955-6c284aa2c21d.jpg" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="이야기" width="817"></a></p>


  <h2>코드</h2>


  <h4>분기 전략</h4>


  <p>Agile 코드 분기를 사용하면 중요한 역할을 합니다. 스프린트 분기, 기능 분기, 스토리/버그 분기 등 다양한 방법으로 수행할 수 있습니다. 이 경우 사용자 스토리 수준 분기를 채택했습니다. 기여자는 개발&rdquo; 분기에서 &ldquo;선택한 각 스토리에 대해 분기를 만듭니다. 스토리가 완료되거나 코드 검토 준비가 되면 개발 분기와 함께 끌어오기 요청을&rdquo; 만들어 &ldquo;격리된 분기를 유지 관리하고 병합하는 것은 기여자&rsquo; 책임입니다. 참가자는 자신의 코드를 주 스트림 분기와 직접 병합할 수 없습니다. 코드를 승인하려면 최소 두 개의 코드 검토가 필요합니다.</p>


  <p>스토리 기반 분기를 사용하면 개발자가 코드를 주 스트림과 <strong>자주</strong> 병합하고 동일한 분기에서 오랜 시간 작업하지 않도록 할 수 있습니다. 이렇게 하면 코드 통합 문제가 크게 줄어듭니다. 또 다른 이점은 개발자가 다른 개발자&rsquo; 코드를 더 자주 사용할 수 있도록 하여 보다 효율적으로 작업할 수 있다는 것입니다. 코드 종속성 대기 시간이 줄어들므로 개발자의 방해가 줄어듭니다.</p>


  <p>참가자는 VSTS를 사용하여 새 분기를 만듭니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e0e1b132-8e1f-4c48-8757-64e8095edc02.png"><img alt="Branch-1" border="0" height="276" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c7f237a5-1d09-4b83-905c-2dda07c36eab.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="분기-1" width="335"></a></p>


  <p>다음은 참가자 name&gt;_&lt;Story 또는 Bug라는 명명법입니다&lt;.&gt;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d48d3b6a-4bae-426e-838c-05ce0b345d96.png"><img alt="Branch-2" border="0" height="280" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/04093714-aa83-4841-acc2-acf18ba6fa3d.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="Branch-2" width="599"></a></p>


  <p>분기를 만든 후 기여자는 분기를 게시하여 팀의 다른 모든 사용자가 볼 수 있도록 합니다.</p>


  <p>&nbsp;<a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/be086e86-4d79-4af6-b826-6291a042e029.png"><img alt="Branch-3" border="0" height="478" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6b853f47-d841-48fe-a6b2-b4b550075a28.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="분기-3" width="480"></a></p>


  <p>분기가 설정되면 기여자는 모두 스토리로 시작하도록 설정되고 기능을 구현하기 위한 코드 작성을 시작합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d455f43d-004c-43a3-b089-9ec8f36f4bec.png"><img alt="Checkin-1" border="0" height="359" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f588162a-195c-4b71-9140-918485c22fe9.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="Checkin-1" width="287"></a></p>


  <h3>코드 검토 및 코드 병합</h3>


  <p>코드가 완료되면 개발자는 코드를 체크 인하고 VSTS 포털을 사용하여 끌어오기 요청을 만듭니다. 더 높은 수준의 코드 품질을&rsquo; 보장하려면 제어된 체크 인 프로세스가 있어야 합니다. 각 개발자는 코드를 체크 인할 때 빌드가 손상되지 않도록 해야 합니다. 코드를 주 스트림과 병합하기 전에 적어도 두 개의 피어에서 검토하고 승인해야 합니다. 두 개의 코드 검토 승인이&rsquo; 없으면 코드를 주 스트림 코드와 병합할 수 없습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0cb0eec6-ff98-43cf-b48b-42adb6ff5fd6.png"><img alt="PullRequest-1" border="0" height="224" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3c918294-b477-4598-af0f-b3b9ccb425b8.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="PullRequest-1" width="538"></a></p>


  <p>개발자가 끌어오기 요청을 만들고 적절한 주석 및 작업 항목과 함께 제출합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ed143bdd-f418-446d-a1b4-5dd636521238.png"><img alt="PullRequest-2" border="0" height="701" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c997c5a3-0117-4171-9e7e-084b81586ef2.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="PullRequest-2" width="830"></a></p>


  <p>&nbsp;</p>


  <h3>빌드</h3>


  <p>참가자가 &ldquo;끌어오기 요청을&rdquo; 만드는 즉시 CI 빌드가 자동으로 발생합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3eeebf48-e2a3-4634-9e7b-05a5b7da2c4a.png"><img alt="Build-1" border="0" height="274" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3b3b6f33-04af-4e81-9557-f5cbe97314d0.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="빌드-1" width="693"></a></p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/927eb45a-f720-4066-b61b-4c9f077140bb.png"><img alt="Build-2" border="0" height="399" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9cd6cd82-5de1-41af-868d-34e5927cb0fb.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="빌드-2" width="690"></a></p>


  <p>모든 검토자가 전자 메일 알림을 수신하여 참가자가 만든 새 &ldquo;끌어오기 요청에&rdquo; 대해 업데이트합니다. 이제 검토자가 코드 검토를 시작하는 것이 좋습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b3dd56a9-03b6-4ddd-8734-689798531f80.png"><img alt="CodeReview-1" border="0" height="268" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/10481211-7307-492c-b9f7-08a8d53895af.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="CodeReview-1" width="747"></a></p>


  <p>&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0dd019c6-fd3e-451a-b204-8d153772ee87.png"><img alt="CodeReview-2" border="0" height="406" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8295b351-3b1d-472e-b711-b861115f2f78.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="CodeReview-2" width="668"></a></p>


  <p>코드의 품질에 따라 검토자는 &ldquo;코드를 승인, 질문 제기 또는 &ldquo;거부&rdquo;합니다&rdquo;.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1cfd4f7c-8216-4034-b282-1451c8cfc936.png"><img alt="CodeReview-3" border="0" height="391" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/aed57027-ac4a-47ed-87c2-c5ac5a9dc6ad.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="CodeReview-3" width="437"></a></p>


  <p>모든 검토자가 코드 검토를 완료하면 잠재 개발자가 코드를 주 스트림과 병합합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/54ebe553-b3ac-4dca-af85-33c00cd4c163.png"><img alt="CodeReview-4" border="0" height="398" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8fb7437a-815b-443a-bc6a-00f05a1c2c0a.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="CodeReview-4" width="423"></a></p>


  <h2>테스트(자동화)</h2>


  <p>데이터가 환경마다 다를 수 있으므로 다양한 환경에서 높은 코드 품질을 보장하는 것은 DW 프로젝트에서 어려울 수 있습니다. 끌어오기 요청을 만들기 전에 작성하는 모든 새 코드 조각에 자동화된 테스트 사례가 있는지 확인합니다. 이로 인해 버그가 프로덕션으로 누출되는 것을 방지할 뿐만 아니라 결과물 품질도 향상되었습니다.</p>


  <p>아래 다이어그램은 전체 테스트 사례 실행 결과를 보여 줍니다. 배포의 일환으로 모든 테스트 사례를 실행하여 최종 제품의 무결성과 품질을 보장합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1ae10f24-3f47-4998-94ed-e37b434e3b02.png"><img alt="TestCases-1" border="0" height="188" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/50c8915d-d22f-47ed-b8e2-902b6ebd7483.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="TestCases-1" width="726"></a></p>


  <h2>릴리스 &amp; 배포</h2>


  <p>코드가 주 스트림 코드와 성공적으로 병합되면 새 빌드가 자동으로 실행됩니다. 통합 환경은 최신 코드를 사용하여 하루에 한 번 배포됩니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/42ca0503-001f-40bf-8b7e-68a5c794c4d6.png"><img alt="Release-1" border="0" height="323" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9f8df944-9bde-49e8-a8b8-c8204e4edffa.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="릴리스-1" width="606"></a></p>


  <p>&nbsp;</p>


  <p>아래 다이어그램은 데이터 웨어하우스에 대해 관리하는 세 가지 환경을 보여 줍니다. &ldquo;통합&rdquo;, &ldquo;최종 사용자&rdquo; 및 &ldquo;프로덕션&rdquo; 환경이 있습니다. 통합 환경은 지속적인 통합 및 배포 환경으로, 동적으로 프로비전 및 프로비전 해제되고 코드&rdquo;<strong>로 인프라로</strong>&ldquo; 관리됩니다. 매일 발생하는 체크 인을 통합&rdquo;하기 위해 &ldquo;다음 단계를 순서대로 실행하는 예약된 프로세스입니다.</p>


  <ul>
   <li>개발 분기에서 최신 버전을 가져오면 새 비트를 빌드합니다(통합 코드 검색 포함).</li>
   <li>새 Azure 리소스 그룹 만들기 및 SQL 인스턴스 조달</li>
   <li>&ldquo;시드 데이터를&rdquo; 새로 만든 SQL 인스턴스에 복사</li>
   <li>스키마 이름 바꾸기 실행</li>
   <li>DACPAC를 배포하여 새 스키마 변경 내용 배포</li>
   <li>데이터베이스를 확장하여 단계를 더 빠르게 실행</li>
   <li>코드 비트를 복사하여 서버 빌드</li>
   <li>추가 SQL 엔터티 배포</li>
   <li>데이터 동기화 작업 실행</li>
   <li>테스트 어셈블리 실행</li>
   <li>Azure Data Factories 배포</li>
   <li>서비스 해제 환경</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9d7817d1-35d0-4c0b-a3e8-1b369f8d1569.png"><img alt="Release-2" border="0" height="770" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ec63cc26-6eb2-41ef-868b-4fbc6b42eef4.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="릴리스-2" width="709"></a></p>


  <h4>자동화된 테스트를 사용하도록 설정하는 시드 데이터</h4>


  <p>DW의 자동화된 테스트는 정확한 데이터의 가용성에 따라 많이 달라집니다. 데이터가 없으면 테스트할 수 없는 수많은 시나리오가 있습니다. 이 문제를 해결하기 위해 배포 중에 데이터의 프로덕션 복사본을 시드 데이터&rdquo;로 &ldquo;사용합니다. 아래 다이어그램은 DIT(일일 통합 환경)에서 시드 데이터를 채우는 방법을 보여 줍니다. 데이터가 매우 큰 경우 전체 복제본을 복사하는 대신 프로덕션 데이터의 하위 집합을 포함하는 소형 DB를 사용할 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8c64f49c-3df7-4b63-a25a-71b2d4f1e5ee.png"><img alt="SeedData" border="0" height="254" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7db2f4a8-1806-4396-9f02-a9ebad86a35c.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="SeedData" width="701"></a></p>


  <p>1단계: DW 환경(예: 스테이징, 변환된 데이터 등)에서 데이터를 분리하는 데 사용하는 여러 스키마가 있는 프로덕션 데이터를 나타냅니다.</p>


  <p>2단계: 데이터가 Azure 지역 복제본(재해 복구 복사본)에 복사됨을 나타냅니다.</p>


  <p>3단계: 릴리스 배포 중에 새로 조달된 DIT SQL 서버 인스턴스에 지역 복제본을 복사합니다.</p>


  <p>4단계: 프로덕션에 해당하는 데이터 복사본의 가용성을 나타냅니다. 또한 DACPACK 배포는 새로 추가된 스키마를 추가하고 나중에 테스트 자동화 제품군을 실행하여 최종 제품의 품질을 테스트합니다.</p>


  <h4>더 높은 환경에 릴리스 배포</h4>


  <p>한 환경에서 다른 환경으로 릴리스를 승격하는 것은 승인 워크플로를 통해 설정되며 직접 배포할 수 없습니다. 이 시나리오에서는 미리 할당된 관련자의 승인 없이 프로덕션에 직접 배포할 수 없습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/28c7d133-05e8-4385-b3d4-d27d6b8387bc.png"><img alt="WorkFlow-1" border="0" height="381" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/de4f7cba-49ed-40d1-a616-7472307e0f50.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="WorkFlow-1" width="365"></a></p>


  <p>승인 워크플로는 환경 승격을 보여 줍니다. 필요한 승인자가 워크플로를 승인하면 릴리스가 자동으로 다음 환경으로 승격됩니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9975b953-c56f-4618-adaa-64a963312438.png"><img alt="Approval-1" border="0" height="401" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/659220a3-2a91-406e-95f1-b00c2161c267.png" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="승인-1" width="620"></a></p>


  <h2>Monitor</h2>


  <p>DevOps 동일한 팀은 사전 프로덕션 및 prod 환경에서 모든 실패를 모니터링합니다. DRI(직접 책임 있는 개인) 모델을 채택했으며 DRI 담당자는 시스템&rsquo; 상태 및 모든 알림을 사전에 모니터링하고 확인합니다. 문제가 있는 경우 애플리케이션의 지속적인 가용성을 보장하기 위해 우선 순위에 따라 해결됩니다. 몇 가지 사용자 지정 모니터링 도구와 함께 기본 ADF 모니터링 및 알림을 사용합니다. 또한 프로덕션 환경에서 매일 실행되는 자동화된 보고서로 구현된 여러 데이터 품질 검사가 있으며, 프로세스에서 버그로 수정되거나 원본 시스템으로 신속하게 추적하여 수정할 수 있는 데이터 변칙을 보고합니다.</p>


  <p>&rsquo;데이터 웨어하우스에 대한 CI 설정은 간단&rsquo;하지 않지만&rsquo; 모든 페니의 가치가 있습니다. 스프린트 중에 새 코드를 추가할 때 테스트 사례 실패에 직면했습니다. 그러나 팀은 해당 인스턴스에서 학습했으며 이제 새 코드가 추가될 때 기존 테스트 사례를 업데이트해야 합니다. 제품의 품질을 지속적으로 높이기 위해 기능, 빌드 및 환경 확인 테스트 사례를 지속적으로 추가하고 있습니다. CI를 통해 우리는 진정으로 민첩하고 최종 제품에 매우 자신감을 가질 수 있습니다. 자동화된 테스트 제품군을 사용하여 프로덕션에 대한 일반적인 버그 누출을 방지할 수 있습니다. 우리는 테스트 환경의 필요성을 없애고 향후 분기에 프로덕션에 직접 배포할 수 있었습니다. 우리는 강력하게 그것이&rsquo; 가능하다고 믿습니다!</p>
