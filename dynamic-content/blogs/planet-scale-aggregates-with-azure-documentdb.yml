### YamlMime:Yaml
ms.openlocfilehash: 464b34dcf8cd31ccb514264e585770cf7ac0c52b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911633"
Slug: planet-scale-aggregates-with-azure-documentdb
Title: Azure DocumentDB를 사용하는 행성 크기 조정 집계
Summary: DocumentDB의 SQL 문법을 확장하여 마지막 서비스 업데이트와 함께 집계 함수를 지원한다고 발표하게 되어 기쁩니다. 집계에 대한 지원은 사용자 음성 사이트에서 가장 많이 요청된 기능이므로 투표한 모든 사용자를 롤아웃하게 되어 기쁩니다.
Content: "<p><strong>2017년 5월 10일 현재</strong></p>\n\n<p><strong>Azure Cosmos DB는 전역적으로 분산된 Microsofts&rsquo; 다중 모델 데이터베이스입니다. Azure Cosmos DB는 처음부터 글로벌 배포 및 수평적 확장을 핵심으로 구축되었습니다. 사용자가 어디에 있든 데이터를 투명하게 스케일링하고 복제하여 여러 Azure 지역에 턴키 글로벌 배포를 제공합니다. 전 세계적으로 처리량 및 스토리지를 탄력적으로 확장하고 필요한 처리량 및 스토리지에 대해서만 비용을 지불합니다. Azure Cosmos DB는 전 세계 어디서나 99번째 백분위수의 한 자리 밀리초 대기 시간을 보장하고, 성능을 미세 조정하기 위해 잘 정의된 여러 일관성 모델을 제공하며, 업계 최고의 SLA(서비스 수준 계약)가 지원하는 멀티 호밍 기능&mdash;으로 고가용성을 보장합니다.&nbsp;</strong></p>\n\n<p><strong>Azure Cosmos DB는 스키마에 구애받지 않습니다. 스키마 및 인덱스 관리를 처리할 필요 없이 모든 데이터를 자동으로 인덱싱합니다. &rsquo;또한 기본적으로 문서, 키-값, 그래프 및 열 패밀리 데이터 모델을 지원하는 다중 모델입니다. Azure Cosmos DB를 사용하면 DocumentDB SQL(문서), MongoDB(문서), Azure Table Storage(키-값) 및 Gremlin(그래프)이 모두 기본적으로 지원되므로 원하는 API를 사용하여 데이터에 액세스할 수 있습니다.</strong></p>\n\n<hr>\n<p>Were&rsquo;는 마지막 서비스 업데이트로 <a href=\"https://docs.microsoft.com/azure/documentdb/documentdb-sql-query#Aggregates\" target=\"_blank\">집계 함수</a>를 지원하기 위해 DocumentDB에서 SQL 문법을 확장했다고 발표하게 되어 기쁩니다. 집계에 대한 지원은 사용자 음성 사이트에서 가장 많이 요청되는 기능이므로&#39;투표한 모든 사용자를 출시하게 되어 기쁩니다.</p>\n\n<p>Azure DocumentDB는 신속하고 예측 가능한 성능, 고가용성, 탄력적인 크기 조정, 글로벌 배포 및 개발의 용이성을 위해 구축된 완전히 관리되는 NoSQL 데이터베이스 서비스입니다. DocumentDB는 JSON 데이터에 대한 일관된 짧은 대기 시간으로 풍부하고 친숙한 SQL 쿼리 기능을 제공합니다. 이러한 고유한 이점 때문에 DocumentDB는 웹, 모바일, 게임, IoT 및 원활한 규모 및 글로벌 복제가 필요한 다른 많은 애플리케이션에 적합합니다.</p>\n\n<p>DocumentDB는 스키마가 없습니다. DocumentDB는 데이터베이스 엔진 내에 직접 JSON 데이터 모델을 커밋하므로 명시적 스키마나 보조 인덱스 생성을 요구하지 않고 JSON 문서의 자동 인덱싱을 제공합니다. DocumentDB는 SQL 사용하여 JSON 문서 쿼리를 지원합니다. DocumentDB 쿼리는 JavaScript&#39;형식 시스템, 식 평가 및 함수 호출에 루팅됩니다. 따라서 관계형 프로젝션, JSON 문서 간 계층적 탐색, 자체 조인, 공간 쿼리 및 JavaScript로 완전히 작성된 UDF(사용자 정의 함수) 호출에 대한 자연스러운 프로그래밍 모델을 제공합니다. 이제 이러한 기능 외에도 집계를 포함하도록 SQL 문법을 확장했습니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ad80a814-c6d0-4a25-84c5-89d81d89a4af.png\"><img alt=\"graphic\" border=\"0\" height=\"387\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b9fbd30a-c664-4a9c-a5d5-bedb61a636ca.png\" style=\"border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"그래픽\" width=\"599\"></a></p>\n\n<h2>행성 규모 애플리케이션에 대한 집계</h2>\n\n<p>&rsquo;완료된 게임을 기반으로 통계를 계산해야 하는 모바일 게임을 빌드하든, 특정 이벤트의 발생 횟수에 따라 작업을 트리거하는 IoT 플랫폼을 디자인하든, 간단한 웹 사이트 또는 페이지를 매긴 API를 빌드하든, 운영 데이터베이스에 대해 집계 쿼리를 수행해야 합니다. 이제 DocumentDB를 사용하면 대기 시간이 짧고 예측 가능한 성능으로 모든 규모의 데이터에 대해 집계 쿼리를 수행할 수 있습니다.</p>\n\n<p>집계 지원은 모든 DocumentDB 프로덕션 데이터 센터에 롤아웃되었습니다. 기존 DocumentDB 계정에 대해 집계 쿼리 실행을 시작하거나 SDK, REST API 또는 Azure Portal을 통해 새 DocumentDB 계정을 프로비전할 수 있습니다. 그러나 파티션 간 집계 쿼리를 수행하거나 .NET에서 LINQ 집계 연산자를 사용하려면 최신 버전의 <a href=\"https://docs.microsoft.com/azure/documentdb/documentdb-sdk-dotnet\" target=\"_blank\">SDK</a> 를 다운로드해야 합니다.</p>\n\n<h2>SQL 사용하여 집계</h2>\n\n<p>DocumentDB는 SQL 집계 함수 COUNT, MIN, MAX, SUM 및 AVG를 지원합니다. 이러한 연산자는 관계형 데이터베이스에서처럼 작동하며 쿼리와 일치하는 문서에 대해 계산된 값을 반환합니다. 예를 들어 다음 쿼리는 DocumentDB에서 장치 xbox-1001의 판독값 수를 검색합니다.</p>\n\n<pre class=\"prettyprint\">\nSELECT VALUE COUNT(1) \nFROM telemetry T \nWHERE T.deviceId = &quot;xbox-1001&quot;</pre>\n\n<p>VALUE 키워드 &ndash; 에 대해 궁금한 경우&rsquo; 모든 쿼리는 JSON 조각을 다시 반환합니다. VALUE를 사용하면 JSON 문서 {&quot;$1: 100}이 아닌 개수(예: 100&quot;)의 스칼라 값을 가져올 수 있습니다.</p>\n\n<p>기존 쿼리 문법 및 기능을 원활하게 사용할 수 있도록 집계 지원을 확장했습니다. 예를 들어 다음 쿼리는 사이트 위치를 나타내는 특정 다각형 경계 내의 디바이스 간 평균 온도 판독값을 반환합니다(집계와 지리 공간 근접 검색 결합).</p>\n\n<pre class=\"prettyprint\">\nSELECT VALUE AVG(T.temperature?? 0) \nFROM telemetry T \nWHERE ST_WITHIN(T.location, {&quot;type&quot;: &quot;polygon&quot;: &hellip; })\n</pre>\n\n<p>탄력적으로 확장 가능한 NoSQL 데이터베이스인 DocumentDB는 스토리지 또는 처리량의 데이터 저장 및 쿼리를 지원합니다. 컬렉션의 파티션 크기 또는 수에 관계없이 간단한 SQL 쿼리를 제출할 수 있으며 DocumentDB는 데이터 파티션 간의 쿼리 라우팅을 처리하고, 일치하는 각 파티션 내의 로컬 인덱스에 대해 병렬로 실행하고, 중간 결과를 병합하여 최종 집계 값을 반환합니다. DocumentDB를 사용하여 짧은 대기 시간 집계 쿼리를 수행할 수 있습니다.</p>\n\n<p>.NET SDK에서 이 작업은 아래와 같이 <a href=\"https://msdn.microsoft.com/en-us/library/azure/microsoft.azure.documents.client.documentclient.createdocumentquery.aspx\" target=\"_blank\">CreateDocumentQueryT&lt;&gt;</a> 메서드를 통해 수행할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\n client.CreateDocumentQuery&lt;int&gt;(\n    &quot;/dbs/devicedb/colls/telemetry&quot;,\n    &quot;SELECT VALUE COUNT(1) FROM telemetry T WHERE T.deviceId  = &#39;xbox-1001&#39;&quot;,\n     new FeedOptions { MaxDegreeOfParallelism = -1 });\n</pre>\n\n<p>전체 예제를 보려면 <a href=\"https://github.com/arramac/azure-documentdb-dotnet/tree/master/samples/code-samples/Queries\" target=\"_blank\">Github의 쿼리 샘플을</a> 살펴볼 수 있습니다.&nbsp;</p>\n\n<h2>LINQ를 사용한 집계</h2>\n\n<p><a href=\"https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/\" target=\"_blank\">.NET SDK 1.12.1</a>을 사용하면 SQL 외에도 LINQ를 사용하여 집계를 쿼리할 수 있습니다. 최신 SDK는 연산자 개수, 합계, 최소, 최대, 평균 및 해당 비동기 등가물인 CountAsync, SumAsync, MinAsync, MaxAsync, AverageAsync를 지원합니다. 예를 들어 이전에 표시된 동일한 쿼리를 다음 LINQ 쿼리로 작성할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\nclient.CreateDocumentQuery&lt;DeviceReading&gt;(&quot;/dbs/devicedb/colls/telemetry&quot;,\n     new FeedOptions { MaxDegreeOfParallelism = -1 })\n      .Where(r =&gt; r.DeviceId == &quot;xbox-1001&quot;)\n      .CountAsync();\n</pre>\n\n<p>집계 쿼리 중에 비동기 페이지 매김이 수행되는 방법을 포함하여 <a href=\"https://docs.microsoft.com/azure/documentdb/documentdb-sql-query#a-idlinqalinq-to-documentdb-sql\" target=\"_blank\">DocumentDBS&rsquo; LINQ 지원에</a> 대해 자세히 알아봅니다.</p>\n\n<h2>Azure Portal을 사용하여 집계</h2>\n\n<p>Azure Portal을 사용하여 집계 쿼리 실행을 즉시 시작할 수도 있습니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2e06e202-b59b-4b58-a9b2-8fbed4807d99.png\"><img alt=\"screenshot\" border=\"0\" height=\"967\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7aaa3564-f512-4402-8ce9-77ff51f8adb7.png\" style=\"border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"스크린샷\" width=\"984\"></a></p>\n\n<h2>다음 단계</h2>\n\n<p>이 블로그 게시물에서는 Azure DocumentDB에서 집계 함수 및 쿼리에 대한 지원을 살펴보았습니다. 쿼리 실행을 시작하려면 <a href=\"https://portal.azure.com/#create/Microsoft.DocumentDB\" target=\"_blank\">Azure Portal에서 새 DocumentDB 계정을 만듭니다</a>.</p>\n\n<p>Twitter <a href=\"https://twitter.com/DocumentDB\" target=\"_blank\">@DocumentDB</a> 에서 팔로우하여 최신 DocumentDB 뉴스 및 기능을 최신 상태로 유지하거나 <a href=\"https://stackoverflow.com/questions/tagged/azure-documentdb\" target=\"_blank\">Stack Overflow의 개발자 포럼에</a> 문의하세요.</p>"
