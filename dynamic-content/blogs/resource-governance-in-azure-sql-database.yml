### YamlMime:Yaml
ms.openlocfilehash: 6f699a1d0f29f815407599382ee400d5fe4ebb10
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139912487"
Slug: resource-governance-in-azure-sql-database
Title: Azure SQL Database 리소스 거버넌스
Summary: 이 블로그 게시물은 원래 서비스를 만든 건축가가 설명한 대로 서비스를 실행하는 방법에 대한 배경을 공유하는 Azure SQL Database 아키텍처 시리즈를 계속 진행합니다.
Content: >-
  <p>이 블로그 게시물은 원래 서비스를 만든 건축가가 설명한 대로 서비스를 실행하는 방법에 대한 배경을 공유하는 Azure SQL Database 아키텍처 시리즈를 계속 진행합니다. 처음 두 게시물은 <a href="https://azure.microsoft.com/en-us/blog/data-integrity-in-azure-sql-database/" target="_blank">Azure SQL Database 데이터 무결성</a>과 <a href="https://azure.microsoft.com/en-us/blog/how-cloud-speed-helps-sql-server-dbas/" target="_blank">클라우드 속도가 SQL Server 데이터베이스 관리자에게 어떻게 도움이 되는지에 대해 설명했습니다</a>. 이 블로그 게시물에서는 거버넌스를 사용하여 균형 잡힌 시스템을 달성하는 방법에 대해 설명합니다.</p>


  <h2>할당된 리소스 및 관리되는 리소스</h2>


  <p>특정 Azure SQL Database 서비스 계층을 선택하는 경우 CPU, 스토리지 유형, 스토리지 제한, 메모리 등과 같은 여러 차원에서 미리 정의된 할당된 리소스 집합을 선택합니다. 이상적으로는 애플리케이션의 워크로드 요구를 충족하는 서비스 계층을 선택하는 것이 좋지만 선택 영역의 크기를 초과하거나 크기를 조정하지 않으면 그에 따라 쉽게 확장 또는 축소할 수 있습니다.</p>


  <p>각 서비스 계층을 선택하면 기본적으로 리소스 사용 경계 또는 제한 집합을 선택합니다. 예를 들어 중요 비즈니스용인 Gen 4 데이터베이스에는 8개의 코어가 있는 다음과 같은 리소스 할당 및 관련 제한이 있습니다.</p>


  <table border="0" cellpadding="2" cellspacing="0">
   <tbody>
    <tr>
     <td valign="top"><strong>컴퓨팅 크기</strong></td>
     <td valign="top"><strong>BC_Gen4_8</strong></td>
    </tr>
    <tr>
     <td valign="top">메모리(GB)</td>
     <td valign="top">56</td>
    </tr>
    <tr>
     <td valign="top">메모리 내 OLTP 스토리지(GB)</td>
     <td valign="top">8</td>
    </tr>
    <tr>
     <td valign="top">스토리지 유형</td>
     <td valign="top">로컬 SSD</td>
    </tr>
    <tr>
     <td valign="top">최대 데이터 크기(GB)</td>
     <td valign="top">650</td>
    </tr>
    <tr>
     <td valign="top">최대 로그 크기(GB)</td>
     <td valign="top">195</td>
    </tr>
    <tr>
     <td valign="top">TempDB 크기(GB)</td>
     <td valign="top">256</td>
    </tr>
    <tr>
     <td valign="top">IO 대기 시간(근사치)<br>
     <br>
  대상 IOPS(64KB)</td>
     <td valign="top">1-2밀리초(쓰기)<br>
  1-2밀리초(읽기)<br>

  40,000</td>
    </tr>
    <tr>
     <td valign="top">로그 속도 제한(MBps)</td>
     <td valign="top">48</td>
    </tr>
    <tr>
     <td valign="top">최대 동시 작업자(요청)</td>
     <td valign="top">1600</td>
    </tr>
    <tr>
     <td valign="top">최대 동시 로그인(요청)</td>
     <td valign="top">1600</td>
    </tr>
    <tr>
     <td valign="top">허용되는 최대 세션 수</td>
     <td valign="top">30000</td>
    </tr>
    <tr>
     <td valign="top">복제본 수</td>
     <td valign="top">4</td>
    </tr>
   </tbody>
  </table>


  <p>계층에서 리소스를 늘리면 특정 임계값까지 제한이 변경되는 것을 볼 수도 있습니다. 또한 이러한 제한은 시간이 지남에 따라 자동으로 완화될 수 있지만 고객에게 페널티 없이는 더 이상 제한되지 않습니다.</p>


  <p>서비스 계층별 리소스 할당 및 다음 리소스의 관련 리소스 거버넌스 제한을 문서화합니다.</p>


  <ul>
   <li><strong>vCore 모델</strong>: <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-vcore-resource-limits-single-databases" target="_blank">단일 데이터베이스에 대한 vCore 기반 구매 모델 제한 Azure SQL Database</a></li>
   <li><strong>DTU 모델</strong>: <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-dtu-resource-limits-single-databases" target="_blank">DTU 기반 구매 모델을 사용하는 단일 데이터베이스에 대한 리소스 제한</a></li>
  </ul>


  <p>서비스 계층별 리소스 할당은 더 많은 비용을 지불할수록 더 많은 리소스를 얻을 수 있기 때문에 고객에게 직관적이지만, 리소스 거버넌스 및 경계는 역사적으로 고객과의 주제에서 덜 명확해졌습니다. 이러한 관리 메커니즘에 대한 투명성을 높이고 있지만 DBaaS(데이터베이스 as a Service)에서 리소스 거버넌스의 광범위한 목적을 이해하는 것이 중요합니다. 이를 위해 다음&rsquo;으로 균형 잡힌 시스템을 달성하는 데 필요한 사항에 대해 설명합니다.</p>


  <h2>분산된 데이터베이스를 서비스로 제공(DBaaS)</h2>


  <p>이 블로그 게시물의 컨텍스트에서는 병목 현상이 발생하지 않고 모든 리소스가 충분히 최대화된 경우 시스템을 균형 잡힌 것으로 정의합니다. 이 균형에는 CPU, IO, 메모리, 애플리케이션&rsquo; 워크로드 특성과 쌍을 이루는 네트워크, 최대 허용 대기 시간 및 원하는 처리량과 같은 리소스의 상호 작용이 포함됩니다.</p>


  <p>Azure SQL Database 통해 균형 잡힌 시스템에 대한 우리의 견해는 명확한 DBaaS 요구 사항 및 고객 기대치를 충족하기 위해 광범위하고 포괄적인 관점을 가져야 합니다.</p>


  <p>Azure SQL Database 고객에게 다음과 같은 추가 혜택을 제공하려는 목적으로 친숙하고 인기 있는 데이터베이스 에코시스템을 표시합니다.</p>


  <ul>
   <li><strong>확장</strong> &ndash; 성 고객은 애플리케이션의 처리량 요구 사항에 따라 데이터베이스를 프로비전할 수 있습니다. 처리량 요구 사항이 변경되면 고객은 쉽게 확장 또는 축소할 수 있습니다.</li>
   <li>특정 시점 &ndash; <strong>으로 셀프 서비스 복원을 사용하는 자동화된 백업</strong> 데이터베이스 백업은 서비스에서 자동으로 처리되며 로그 백업은 일반적으로 5~10분마다 발생합니다.</li>
   <li><strong>고가용성</strong> &ndash; Azure SQL Database 인프라 오류에 대한 가용성 영역 복원력을 통해 지원되는 최대 99.995%의 차별화된 가용성 SLA를 지원합니다.</li>
   <li><strong>예측 가능한 성능</strong> &ndash; 동일한 프로비전된 리소스 수준의 고객은 항상 동일한 워크로드를 사용하여 동일한 성능을 얻습니다.</li>
   <li><strong>예측 가능한 확장성</strong> &ndash; 하이퍼스케일 서비스 계층을 사용하는 고객은 확인 가능한 크기 조정 SLA를 통해 지원되는 온라인 크기 조정 작업의 예측 가능한 대기 시간을 사용할 수 있습니다. 이렇게 하면 고객에게 대응할 수 있는 신뢰할 수 있는 도구가 제공되며, 컴퓨팅 용량 요구가 적시에 변경됩니다.</li>
   <li><strong>자동 업그레이드</strong> &ndash; Azure SQL Database 투명 하드웨어, 소프트웨어 업그레이드 및 정기적인 경량 소프트웨어 업데이트를 용이하게 하도록 설계되었습니다.</li>
   <li><strong>전역 규모</strong> &ndash; 고객은 전 세계에 데이터베이스를 배포하고 지리적으로 분산된 데이터베이스 복제본을 쉽게 프로비전하여 지역 데이터 액세스 및 재해 복구 솔루션을 가능하게 할 수 있습니다. 이러한 솔루션은 강력한 지역 복제 및 장애 조치(failover) SLA를 통해 지원됩니다.</li>
  </ul>


  <p>Azure SQL Database 엔지니어링 팀의 경우 고객에게 균형 잡힌 DBaaS 시스템을 제공하는 것은 단순히 구매한 CPU, IO, 메모리 및 스토리지를 제공하는 것 이상입니다. 또한 앞에서 언급한 모든 요소를 존중하고 전반적인 성능 요구 사항과 함께 이러한 주요 DBaaS 요소의 균형을 맞추는 것을 목표로 해야 합니다.</p>


  <p>다음 그림에서는 서비스 내에서 관리되는 일부 주요 리소스를 보여 줍니다.</p>


  <p align="center"><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9f5f838e-3a80-478a-a23f-37250dbdd456.png"><img alt="Image list of governed resources in Azure SQL Database" border="0" height="326" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e9e7f03b-c923-47e8-be9b-723ba5f9dbba.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure SQL Database <em>Figure 1:</em> Azure SQL Database" width="684"></a> 관리되는 리소스의 이미지 목록</p>


  <p>시간이 지남에 따라 서비스를 지속적으로 개선할 수 있는 방식으로 균형 잡힌 시스템을 제공해야 합니다. 지속적인 개선을 위한 이 요구 사항은 필요한 수준의 구성 요소 추상화 및 오버아킹 거버넌스를 의미합니다. Azure SQL Database 거버넌스를 통해 규모, 고가용성, 복구 가능성, 재해 복구 및 예측 가능한 성능과 관련하여 요구 사항의 균형을 적절하게 조정할 수 있습니다.</p>


  <p>예를 들어 분산된 DBaaS를 제공하기 위해 적극적으로 관리하는 이유의 예로 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-resource-limits-database-server#transaction-log-rate-governance" target="_blank">트랜잭션 로그 속도 거버넌스</a>를 사용하겠습니다&rsquo;. 트랜잭션 로그 거버넌스는 대량 삽입, 선택 및 인덱스 빌드와 같은 워크로드에 대해 높은 수집 속도를 제한하는 데 사용되는 Azure SQL Database 프로세스입니다.</p>


  <p>이러한 유형의 활동을 제어하는 이유는 무엇인가요? 다음 차원과 트랜잭션 로그 생성 속도의 영향을 고려합니다.</p>


  <table border="1" cellpadding="0" cellspacing="0" style="width: 907px; height: 290px;">
   <tbody>
    <tr>
     <td valign="top">
     <p><b>크기</b></p>
     </td>
     <td valign="top">
     <p><b>로그 생성 속도 영향</b></p>
     </td>
    </tr>
    <tr>
     <td valign="top">
     <p>데이터베이스 복구 기능</p>
     </td>
     <td valign="top">
     <p>트랜잭션 로그 백업 빈도에 따라 가능한 데이터 손실의 최대 기간을 보장합니다.</p>
     </td>
    </tr>
    <tr>
     <td valign="top">
     <p>고가용성</p>
     </td>
     <td valign="top">
     <p>로컬 복제본은 SLA와 일치하는 복구 가능성 및 가용성(업타임) 범위 내에 있어야 합니다.</p>
     </td>
    </tr>
    <tr>
     <td valign="top">
     <p>재해 복구</p>
     </td>
     <td valign="top">
     <p>전역적으로 분산된 복제본은 데이터 손실을 최소화하는 복구 가능성 범위 내에 있어야 합니다.</p>
     </td>
    </tr>
    <tr>
     <td valign="top">
     <p>예측 가능한 성능</p>
     </td>
     <td valign="top">
     <p>로그 생성 속도는 시스템을 과도하게 포화하거나 예측할 수 없는 성능을 만들어서는 안 됩니다.</p>
     </td>
    </tr>
   </tbody>
  </table>


  <p>로그 속도는 다양한 시나리오에서 달성하고 유지할 수 있도록 설정되며, 전체 시스템은 사용자 로드에 미치는 영향을 최소화하면서 기능을 유지할 수 있습니다. 로그 속도 거버넌스는 트랜잭션 로그 백업이 게시된 복구 가능성 SLA 내에 유지되도록 하고 보조 복제본에서 과도한 백로그를 방지합니다. CPU, 메모리 및 데이터 IOP를 비롯한 다른 제어 영역에서도 비슷한 영향과 상호 종속성이 있습니다.</p>


  <h2>Azure SQL Database 리소스를 관리하는 방법</h2>


  <p>거버넌스에 다각적인 접근 방식을 사용하지만, 오늘날에는 주로 작업 개체, FSRM(파일 서버 리소스 관리자) 및 SQL Server Resource Governor라는 세 가지 주요 기술을 사용합니다.</p>


  <h3>작업 개체</h3>


  <p>Azure SQL Database 데이터베이스의 전반적인 성능을 제어하기 위한 여러 메커니즘을 활용합니다. 우리가 활용하는 기능 중 하나는 Windows <a href="https://docs.microsoft.com/en-us/windows/desktop/procthread/job-objects#job-limits-and-notifications" target="_blank">작업 개체</a>입니다. 이를 통해 프로세스 그룹을 하나의 단위로 관리하고 관리할 수 있습니다.&nbsp;&nbsp; 이 기능을 사용하여 파일 가상 메모리 커밋, 작업 집합 대문자, CPU 선호도 및 속도 한도를 제어합니다. Windows 팀이 릴리스함에 따라 새로운 거버넌스 기능을 온보딩합니다.</p>


  <h3>FSRM(파일 원본 리소스 관리자)</h3>


  <p>Windows Server에서 사용할 수 있는 <a href="https://docs.microsoft.com/en-us/windows-server/storage/fsrm/fsrm-overview" target="_blank">FSRM</a>을 사용하여 파일 디렉터리 할당량을 제어합니다.</p>


  <h3>SQL Server 리소스 관리자</h3>


  <p>SQL Server 인스턴스에는 사용자 요청 및 시스템 작업을 비롯한 여러 리소스 소비자가 있습니다. <a href="https://docs.microsoft.com/en-us/sql/relational-databases/resource-governor/resource-governor?view=sql-server-2017" target="_blank">SQL Server 리소스 관리자는</a> 리소스의 공정한 공유를 보장하고 통제 불능 요청이 다른 요청을 굶주리지 않도록 하기 위해 도입되었습니다. 이 기능은 SQL Server 년 전에 도입되었으며 시간이 지남에 따라 SQL Server 인스턴스에 대한 CPU, 물리적 IO, 메모리 등을 비롯한 여러 리소스를 제어할 수 있도록 확장되었습니다. Azure SQL Database 이 기능을 사용하여 로컬 및 원격, CPU 한도, 메모리, 작업자 수, 세션 수, 메모리 부여 제한 및 최대 동시 요청 수 모두에 대한 IOP를 제어할 수 있습니다.</p>


  <p>세 가지 주요 기술 외에도 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-resource-limits-database-server#transaction-log-rate-governance" target="_blank">트랜잭션 로그 속도를 제어하기</a> 위한 추가 메커니즘도 만들었습니다.</p>


  <h2>안전하고 예측 가능한 작업을 위한 구성</h2>


  <p>데이터베이스 파일 설정, 최대 메모리, 최대 병렬 처리 수준 등을 포함하여 잘 조정된 온-프레미스 SQL Server 인스턴스에 대해 구성해야 하는 모든 설정을 고려합니다. Azure SQL Database 유사한 모범 사례에 따라 몇 가지 설정을 미리 구성합니다. 앞에서 설명한 것처럼 SQL Server 리소스 관리자, FSRM 및 작업 개체를 미리 구성하여 공정성을 제공하고 기아를 방지합니다. 이 이유의 원인은 안전하고 예측 가능한 작업을 목표로 하는 것입니다. 또한 서비스에 대해 정의된 안전 제한을 준수한다고 가정하여 워크로드 및 특정 요구 사항에 따라 고객에게 다양한 설정을 제공할 수 있습니다.</p>


  <h2>시간에 따른 개선 사항</h2>


  <p>경우에 따라 특정 작업의 성능 및 확장성을 향상시키는 소프트웨어 변경 내용을 배포합니다. 고객은 자동으로 혜택을 받을 수 있으며, 향후 모든 고객에 대해 정의된 제한을 초과하거나 늘릴 수 있습니다. 또한 머신, 스토리지 및 네트워크의 하드웨어를 향상시키면서 애플리케이션에서도 이러한 이점을 투명하게 사용할 수 있습니다. 이는 특정 물리적 머신을 제공하는 대신 이 DBaaS 추상화 계층을 정의했기 때문입니다.</p>


  <h2>진화하는 거버넌스</h2>


  <p>Azure SQL Database 엔지니어링 팀은 서비스에 사용되는 거버넌스 기능을 정기적으로 향상시킵니다. 피드백 및 프로덕션 원격 분석을 기반으로 모델을 지속적으로 검토하고, 사용 가능한 리소스를 최대화하고, 안전을 높이고, 시스템 작업의 영향을 줄이기 위해 제한을 수정합니다.</p>


  <p>공유할 피드백이 있는 경우 여러분의 의견을 듣고 싶습니다. 이 주제에 대한 피드백 또는 의견으로 엔지니어링 팀에 문의하려면 이메일을 보내 <a href="mailto:SQLDBArchitects@microsoft.com">SQLDBArchitects@microsoft.com</a>주세요.</p>
