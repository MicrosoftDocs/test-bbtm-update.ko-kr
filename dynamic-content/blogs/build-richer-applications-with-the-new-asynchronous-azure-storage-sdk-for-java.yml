### YamlMime:Yaml
ms.openlocfilehash: e2414ea9a0fe5010d330b5dd3154a27d9604afb7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139913067"
Slug: build-richer-applications-with-the-new-asynchronous-azure-storage-sdk-for-java
Title: Java용 새로운 비동기 Azure Storage SDK를 사용하여 풍부한 애플리케이션 빌드
Summary: 클라우드 크기 조정 애플리케이션은 일반적으로 원격 데이터에 액세스할 때 원하는 성능을 얻기 위해 높은 동시성이 필요합니다. Java용 새 Storage SDK v10은 비동기 작업을 제공하여 이러한 애플리케이션 빌드를 간소화하므로 대규모 스레드 풀을 만들고 관리할 필요가 없습니다. 이 새로운 SDK는 비동기 작업에 RxJava 반응형 프로그래밍 모델을 사용하며, REST 요청에 대한 Netty HTTP 클라이언트도 사용합니다.
Content: "<p>클라우드 크기 조정 애플리케이션은 일반적으로 원격 데이터에 액세스할 때 원하는 성능을 얻기 위해 높은 동시성이 필요합니다. 새로운 Storage Java SDK는 비동기 작업을 제공하여 이러한 애플리케이션 빌드를 간소화하므로 대규모 스레드 풀을 만들고 관리할 필요가 없습니다. 이 새로운 SDK는 비동기 작업에 <a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> 반응형 프로그래밍 모델을 사용하며, REST 요청에 대한 <a href=\"https://github.com/netty/netty\">Netty HTTP 클라이언트</a> 도 사용합니다. 이제 <a href=\"https://github.com/azure/azure-storage-java/tree/New-Storage-SDK-V10-Preview#getting-started\">Java용 Azure Storage SDK를</a> 시작합니다.</p>\n\n<p>java용 Azure Storage SDK v10은 Storage Go SDK 릴리스에서 이전에 도입된 스레드로부터 안전한 형식을 제공하는 차세대 <a href=\"https://azure.microsoft.com/en-us/blog/preview-the-new-azure-storage-sdk-for-go-storage-sdks-roadmap/\">Storage </a><a href=\"https://azure.microsoft.com/en-us/blog/preview-the-new-azure-storage-sdk-for-go-storage-sdks-roadmap/\">SDK</a> 디자인을 채택합니다. 이 새로운 SDK는 클라이언트에서 버퍼링 없이 데이터를 효과적으로 이동하도록 빌드되었으며 Storage REST API의 인터페이스와 가까운 인터페이스를 제공합니다. 새 SDK의 몇 가지 개선 사항은 다음과 같습니다.</p>\n\n<ul>\n <li>RxJava를 사용한 비동기 프로그래밍 모델</li>\n <li>Storage REST API와 일치하는 하위 수준 API</li>\n <li>편의를 위해 빌드된 새로운 고급 API</li>\n <li>스레드로부터 안전한 인터페이스</li>\n <li>모든 Storage SDK에서 일관된 버전 관리</li>\n</ul>\n\n<h2>RxJava를 사용한 비동기 프로그래밍 모델</h2>\n\n<p>이제 Storage SDK에서 RxJava를 지원했으므로 이벤트 기반 애플리케이션을 쉽게 빌드할 수 있습니다. 이는 관찰자 패턴과 함께 시퀀스를 작성할 수 있기 때문입니다. xml 파일의 디렉터리를 찾을 때 업로드하는 다음 샘플에서는 이 패턴을 보여 줍니다.</p>\n\n<pre class=\"prettyprint\">\n// Walk the directory and filter for .xml files\nStream&lt;Path&gt;<path> walk = Files.walk(filePath).filter(p -&gt; p.toString().endsWith(&quot;.xml&quot;));\n\n// Upload files found asynchronously into Blob storage in 20 concurrent operations\nObservable.fromIterable(() -&gt; walk.iterator()).flatMap(path -&gt; {\n    BlockBlobURL blobURL = containerURL.createBlockBlobURL(path.getFileName().toString());\n\n    FileChannel fc = FileChannel.open(path);\n    return TransferManager.uploadFileToBlockBlob(\n        fc, blobURL,\n            BlockBlobURL.MAX_PUT_BLOCK_BYTES, null)\n        .toObservable()\n        .doOnError(throwable -&gt; {\n             if (throwable instanceof RestException) {\n                 System.out.println(&quot;Failed to upload &quot; + path + &quot; with error:&quot; + ((RestException) throwable).response().statusCode());\n             } else {\n                 System.out.println(throwable.getMessage());\n             }\n         })\n         .doAfterTerminate(() -&gt; {\n              System.out.println(&quot;Upload of &quot; + path + &quot; completed&quot;);\n              fc.close();\n          });\n\n    }, 20)  // Max concurrency of 20 - this is usually determined based on the number of cores you have in your environment\n    .subscribe();\n</path></pre>\n\n<p>전체 샘플은 <a href=\"https://github.com/seguler/azure-storage-v10-java-samples/blob/master/src/DirectoryUpload/DirectoryUpload.java\">Azure Storage Java SDK 샘플 리포지토리</a>에 있습니다.</p>\n\n<p>위의 샘플에서는 Observable이 신호를 내보내기 때문에 상위 수준 API인 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._transfer_manager.uploadfiletoblockblob?view=azure-java-preview\"><em>TransferManager.uploadFileToBlockBlob</em></a>을 호출합니다(이 경우 <em>java.nio.file.Path</em> 형식). flatMap을 사용하면 이 예제에서 최대 동시 연결을 20으로 설정할 수 있습니다. Azure Storage SDK v7을 사용하여 이러한 파일을 업로드하려면 스레드(최대 20개)를 만들고 관리해야 하는 반면, 위의 예제에서 RxJava는 동일한 데이터 세트를 훨씬 적은 스레드에서 동시에 업로드하는 스레드 풀을 관리하므로 리소스 효율성이 더 높습니다.</p>\n\n<p>자세한 내용은 AboutRxJava&nbsp; <a href=\"https://github.com/ReactiveX/RxJava\">및 Reactive 프로그래밍 모델을</a> 참조하세요.</p>\n\n<h2>스토리지 REST API와 일치하는 하위 수준 API</h2>\n\n<p>하위 수준 API는 URL 형식(예: <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l?view=azure-java-preview\"><em>BlockBlobURL</em></a>)에 존재하며, 편의를 제공하지만 숨겨진 동작을 제공하지 않는 REST API에 대한 간단한 래퍼로 설계되었습니다. 이러한 하위 수준 API에 대한 각 호출은 정확히 하나의 REST 요청이 전송되도록 보장합니다(재시도 제외). 또한 이러한 형식의 이름은 동작을 보다 명확하게 하기 위해 업데이트되었습니다. 예를 들어 <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/put-blob\">PutBlob</a>은 이제 업로드<a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/put-block\">, PutBlock</a>은 이제 StageBlock이고 <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-list\">PutBlockList</a>는 CommitBlockList 등입니다.</p>\n\n<pre class=\"prettyprint\">\nBlockBlobURL blobURL = containerURL.createBlockBlobURL(&quot;mysampledata&quot;);\n \nString data = &quot;Hello world!&quot;;\nblobURL.upload(Flowable.just(ByteBuffer.wrap(data.getBytes())), data.length(), null, null, null)\n    .subscribe(blockBlobsUploadResponse -&gt; {\n        System.out.println(&quot;Status code: &quot; + blockBlobsUploadResponse.statusCode());\n    }, throwable -&gt; {\n        System.out.println(&quot;Throwable: &quot; + throwable.getMessage());\n    });\n</pre>\n\n<h2>편의를 위해 빌드된 새로운 고급 API</h2>\n\n<p><a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._transfer_manager?view=azure-java-preview\"><em>TransferManager </em></a>클래스는 내부적으로 다른 하위 수준 API를 호출하는 편리한 상위 수준 API를 제공하는 곳입니다. 예를 들어 <em><a href=\"https://docs.microsoft.com/fi-fi/java/api/com.microsoft.azure.storage.blob._transfer_manager.uploadfiletoblockblob?view=azure-java-preview\">uploadFileToBlockBlob </a></em>메서드는 내부적으로 10 x <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.stageBlock?view=azure-java-preview#com-microsoft-azure-storage-blob--block-blob-u-r-l-stageblock-string-flowable-bytebuffer--long-leaseaccessconditions-\"><em>StageBlock </em></a>호출(각 블록 크기가 100MB로 구성됨)을 수행한 다음 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.commitblocklist?view=azure-java-preview\"><em>, CommitBlockList </em></a>를 1번 호출하여 Blob 서비스에서 업로드된 블록을 원자성으로 커밋하여 1GB 파일을 업로드할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\nSingle<commonrestresponse> response = TransferManager.uploadFileToBlockBlob(\n        FileChannel.open(filePath), blobURL,\n        BlockBlobURL.MAX_PUT_BLOCK_BYTES, null)\n        .doOnError(throwable -&gt; {\n            if (throwable instanceof RestException) {\n                System.out.println(&quot;Failed to upload &quot; + filePath + &quot; with error:&quot; + ((RestException) throwable).response().statusCode());\n            } else {\n                System.out.println(throwable.getMessage());\n            }\n        })\n        .doAfterTerminate(() -&gt; System.out.println());\n\nresponse.subscribe(commonRestResponse -&gt; {System.out.println(commonRestResponse.statusCode());});\n</commonrestresponse></pre>\n\n<h2>스레드로부터 안전한 인터페이스</h2>\n\n<p>이전 Storage SDK(버전 9 이하)는 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._cloud_block_blob?view=azure-java-stable\">CloudBlockBlob </a>및 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._cloud_blob_container?view=azure-java-stable\">CloudBlobContainer</a>와 같은 개체를 제공했는데, 이 개체는 스레드로부터 안전하지&#39;않으며 런타임 중에 문제가 발생할 수 있는 방식으로 변경할 수 있었습니다. 새 Storage SDK(v10 이상)는 Storage REST API에 더 가까운 인터페이스를 제공하며 대부분의 연결된 개체를 변경할 수  없어 공유할 수 있습니다.</p>\n\n<p>예를 들어 Blob에서 작업을 수행하려는 경우(예:) Blob URI를 사용하여 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l?view=azure-java-preview\"><em>BlockBlobURL </em></a>개체를 생성하고 연결된 모든 REST API 작업은 해당 형식의 메서드입니다. 해당 URI 개체에서 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.upload?view=azure-java-preview\">업로드</a>, <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.stageblock?view=azure-java-preview\"><em>StageBlock </em></a>및 <a href=\"https://docs.microsoft.com/en-us/java/api/com.microsoft.azure.storage.blob._block_blob_u_r_l.commitblocklist?view=azure-java-preview\"><em>CommitBlockList</em></a>를 호출할 수 있습니다. 이러한 메서드는 모두 REST API 응답을 래핑하는 <em>TBody&gt;인 RestResponseTHeaders&lt;</em>의 Single(io.reactivex.Single)을 반환하며 이는 변경할 수 없습니다. <em>BlockBlobURL </em>형식의 생성된 인스턴스는 수정하지 않습니다.</p>\n\n<h2>새 Storage SDK 버전</h2>\n\n<p>새 SDK는 Storage Service REST API 버전에 연결된 새 버전 관리 전략을 따릅니다. 현재 릴리스인 버전 10은 Storage REST API 버전 2018-03-28에 연결됩니다. 모든 프로그래밍 언어의 모든 새 Storage SDK는 REST API 2018-03-28 릴리스용 V10을 사용하므로 다른 버전을 쉽게 탐색할 수 있습니다. 다음 REST API 릴리스를 지원하는 새 SDK가 릴리스되면 클라이언트의 주요 변경 내용에 관계없이 주 버전이 충돌합니다(예: v10에서 V11로). 이는 주로 한 REST API 버전에서 다른 REST API 버전으로 이동할 때 서비스에서 가능한 동작 변경으로 인해 발생합니다.</p>\n\n<p>10 이전 버전은 이전 Storage SDK 디자인용으로 예약됩니다. 버전 10 이상의 모든 Storage SDK는 새 SDK 디자인을 채택합니다.</p>\n\n<h2>지금 시작</h2>\n\n<p>Java용 Azure Storage SDK v10을 시작하려면 다음 Blob maven 패키지(파일 및 큐 출시 예정)를 사용합니다.</p>\n\n<pre>\n&lt;dependency&gt;\n&nbsp;    &lt;groupid&gt;com.microsoft.azure&lt;/groupid&gt;\n     &lt;artifactid&gt;azure-storage-blob&lt;/artifactid&gt;\n&nbsp;    &lt;version&gt;10.0.1-Preview&lt;/version&gt;\n&lt;/dependency&gt;  </pre>\n\n<p>다음은 시작하는 데 도움이 되는 몇 가지 유용한 링크입니다.</p>\n\n<ul>\n <li><a href=\"https://github.com/Azure/azure-storage-java/tree/New-Storage-SDK-V10-Preview\">Github에서 SDK v10 Azure Storage</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-java-v10\">Java의 Blob Storage 빠른 시작 샘플</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/java/api/storage/client?view=azure-java-preview\">API 참조 설명서</a></li>\n <li><a href=\"https://github.com/seguler/azure-storage-v10-java-samples/\">위에 표시된 xml 파일 샘플의 디렉터리 업로드</a></li>\n</ul>\n\n<h2>로드맵</h2>\n\n<p>java용 Azure Storage SDK v10은 현재 미리 보기로 제공되며 Blob Storage만 지원합니다. 사용자 피드백에 따라 기능을 더 추가하는 몇 가지 업데이트를 곧 릴리스할&#39;있습니다. 따라서 체크 아웃하고 <a href=\"https://github.com/azure/azure-storage-java\">GitHub</a> 대한 피드백을 알려주세요. 릴리스에 곧 예정된 몇 가지 주요 변경 사항은 다음과 같습니다.</p>\n\n<ul>\n <li>2018-03-28에 대한 지원은 곧 제공될 예정입니다.</li>\n <li>큐, 파일 서비스 지원</li>\n <li>GA 릴리스</li>\n</ul>"
