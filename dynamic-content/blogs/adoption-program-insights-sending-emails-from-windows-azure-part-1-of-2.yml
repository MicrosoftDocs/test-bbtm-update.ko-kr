### YamlMime:Yaml
ms.openlocfilehash: c331990e450a028b5bdd41fd77840bfecb0b6c89
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902364"
Slug: adoption-program-insights-sending-emails-from-windows-azure-part-1-of-2
Title: '채택 프로그램 Insights: Windows Azure에서 전자 메일 보내기(2부 1부)'
Summary: 채택 프로그램 Insights 시리즈는 고객이 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다.
Content: '<p><i>채택 프로그램 Insights 시리즈는 고객이 Windows <a target="_blank" href="https://azure.microsoft.com/">Azure 플랫폼에</a> 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다. 이 게시물은 패트릭 버틀러 몬테데와 톰 홀랜더에 의해.</i></p>  <p>많은 사용자 지정 개발 애플리케이션은 등록 프로세스의 일부이든 중요한 이벤트가 발생할 때 사용자에게 알리는 방법이든 간에 전자 메일을 보내야 합니다.&nbsp; .NET 개발자인 경우 System.Web.Mail 네임스페이스의 클래스를 사용하여 이 작업을 수행했을 것입니다.&nbsp; 그러나 이러한 클래스는 메시지를 보내기 위해 SMTP 전자 메일 서버에 액세스해야 하며 Windows Azure는 현재 이러한 기능을 제공하지 않습니다.&nbsp; 그러나 모든 손실되지 않습니다.&nbsp; 이 두 부분으로 구성된 시리즈에서는 Windows Azure 플랫폼에 배포된 애플리케이션에 대해 이메일 기능을 사용하도록 설정하는 몇 가지 패턴을 설명합니다.</p>  <ol>  <li>사용자 지정 온-프레미스 전자 메일 전달자 서비스 사용: 이 게시물에 설명된 이 패턴은 온-프레미스 전자 메일 서버를 사용하여 Windows Azure에서 실행되는 애플리케이션을 대신하여 이메일을 보냅니다.  이 작업은 Windows Azure 스토리지 큐 및 Blob을 사용하여 Windows Azure에서 생성된 이메일을 온-프레미스 전자 메일 서버에 배달하는 분산 비동기 모델을 사용하여 사용자 지정 서비스를 만들어서 수행됩니다.</li>  <li>이메일 서버의 웹 서비스 API 사용:&nbsp; 2부에 설명된 이 패턴은 Microsoft Exchange 제공하는 웹 서비스 API를 사용하여 Windows Azure에서 직접 전자 메일을 보냅니다. 이 패턴은 유사한 웹 서비스 인터페이스를 제공하는 다른 메시징 제품에 적용할 수 있습니다. </li>  <li>타사 SMTP 서비스 사용: Steve Marx의 블로그 게시물 EmailTheInternet.com 설명된 이 패턴: Windows Azure&nbsp;에서 전자 메일 보내기 및 받기는 <a target="_blank" href="https://sendgrid.com/">SendGrid</a> 또는 <a target="_blank" href="https://authsmtp.com/">AuthSMTP</a>와 같은 <sup>타사</sup> 전자 메일 서비스를 사용하여 이메일을 릴레이합니다. 이 게시물에 설명된 솔루션은 한 단계 더 나아가 포트 25에서 SMTP 트래픽을 수신 대기하여 Windows Azure 애플리케이션에서 전자 메일을 받는 방법을 보여 줍니다.</li>  </ol>  <p><b>패턴 1:&nbsp; 사용자 지정 온-프레미스 전자 메일 전달자 서비스 사용</b></p>  <p>이 패턴은 기존 온-프레미스 전자 메일 서버를 활용하여 Windows Azure 애플리케이션을 대신하여 이메일을 보냅니다.  이 작업은 Windows Azure Storage 큐 및 Blob을 사용하여 Windows Azure에서 생성된 전자 메일을 온-프레미스 전자 메일 서버로 배달하는 사용자 지정 온-프레미스 Email Forwarder 서비스를 만들어서 수행됩니다.&nbsp; 패턴은 다음 두 가지 주요 섹션으로 나뉩니다.&nbsp; </p>  <ol>  <li>전자 메일 작업 항목 준비 및 보내기: 전자 메일을 생성하는 Windows Azure Web/Worker 역할의 구현입니다. 전자 메일 개체를 직렬화하고 Windows Azure Storage 전자 메일 작업 항목을 만듭니다.</li>  <li>전자 메일 작업 항목 수신 및 보내기: Windows Azure Storage에서 전자 메일 작업 항목을 검색하고, 전자 메일 개체를 역직렬화하고, 전자 메일 서버로 보내는 이메일 전달자 서비스의 구현입니다.</li>  </ol>  <p>Windows Azure에서 온-프레미스 전자 메일 서버로 전자 메일을 배포하기 위해 "작업 항목"의 개념을 정의합니다. 작업 항목은 다음으로 구성된 논리적 컨테이너입니다.</p>  <ul class="unIndentedList">  </ul>  <ol>  <li> 하나의 큐 항목: 큐 항목은 메일 메시지가 저장되는 Blob의 참조(URI)를 저장합니다. 또한 필요할 수 있는 최대 8k의 메타데이터를 보유할 수 있습니다. </li>  <li> 하나의 Blob 항목: Blob 항목에는 직렬화된 전자 메일 개체가 포함됩니다. Blob의 크기는 최대 1TB가 될 수 있으므로 전자 메일 개체에는 여러 개의 큰 첨부 파일이 있을 수 있습니다. </li>  </ol>  <ul class="unIndentedList">  </ul>  <p>다음 다이어그램은 패턴의 워크플로를 보여 줍니다. </p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7115.EmailWAPart1SS.png" border="0"></p>  <p>Windows Azure에서 호스트되는 애플리케이션이 전자 메일 메시지를 보내야 하는 경우 발생합니다.</p>  <ol>  <li>작업자/웹 역할은 전자 메일 메시지를 생성합니다. 이 전자 메일 메시지는 System.Net.Mail.MailMessage 인스턴스 형식입니다. 이 메일 개체에는 첨부 파일 수가 포함될 수 있습니다. </li>  <li>이메일 개체는 직렬화되어 Blob에 저장됩니다. 그런 다음 Blob의 URL이 큐 항목에 추가됩니다. 큐 항목과 Blob의 조합은 메일 작업 항목이 됩니다. 큐 및 Blob 항목 메타데이터를 모두 사용하여 추가 정보를 저장할 수 있습니다.</li>  <li>온-프레미스에서 이메일 전달자 서비스는 메일 큐를 지속적으로 모니터링합니다. 큐 항목은 당시 32개 항목의 속도로 검색할 수 있습니다. Email Forwarder Service는 먼저 큐 항목을 검색한 다음 Blob URI를 추출하고 직렬화된 전자 메일을 검색합니다.</li>  <li>역직렬화되면 Email Forwarder Service는 온-프레미스 전자 메일 서버 정보를 사용하여 전자 메일을 보냅니다.&nbsp; 전자 메일을 전달한 후 큐 및 Blob Storage에서 작업 항목을 제거합니다. </li>  <li>온-프레미스 전자 메일 서버는 전자 메일을 받습니다. 온-프레미스 애플리케이션이므로 인증 및 권한 부여는 간단해야 합니다.</li>  <li>전자 메일 서버는 해당 사용자에게 전자 메일을 보냅니다.</li>  </ol>  <p>패턴을 더 잘 설명하기 위해 Email Forwarder Service의 샘플 구현과 이를 사용하는 Windows Azure 애플리케이션을 .zip 파일로 다운로드할 수 있습니다.&nbsp; 코드 샘플에는 다음 프로젝트가 포함되어 있습니다. </p>  <ul class="unIndentedList">  </ul>  <ul>  <li>  이메일 전달자 서비스: 온-프레미스 전자 메일 전달자 서비스의 구현입니다. 간단한 데모를 위해 Windows Form 애플리케이션으로 구현됩니다. 그러나 실제 배포의 경우 Windows 서비스에서 구현합니다. 샘플 서비스를 테스트하려면 온-프레미스 SMTP 서버의 세부 정보를 포함하도록 app.config 파일을 편집합니다.</li>  <li>  엔터티: 전자 메일 메시지 직렬화 기능과 Windows Azure Storage에서 전자 메일 작업 항목을 추가 및 제거하는 작업이 포함된 클래스 라이브러리입니다. 이메일 전달자 서비스와 웹/작업자 역할 모두 이 프로젝트를 사용합니다. </li>  <li>  이메일 생성기 웹 역할: 전자 메일을 보낼 수 있는 간단한 웹 역할의 구현입니다. 역할은 보낼 전자 메일의 세부 정보를 입력할 수 있는 웹 사용자 인터페이스를 제공합니다.</li>  <li>  전자 메일 생성기 작업자 역할: 전자 메일을 보낼 수 있는 간단한 작업자 역할의 구현입니다. 역할은 역할의 app.config 파일에 있는 세부 정보를 사용하여 10초마다 전자 메일 메시지를 생성하고 보냅니다.</li>  </ul>  <p><b>아키텍처 고려 사항</b></p>  <p>모든 솔루션에 대한 아키텍처 의미를 이해하는 것이 중요합니다. 사용자 지정 이메일 전달자 서비스에 대한 몇 가지 고려 사항은 다음과 같습니다.</p>  <ul class="unIndentedList">  <li>  비용: Blob 및 큐의 데이터 스토리지와 온-프레미스 서비스로의 데이터 흐름으로 인해 전체 솔루션에 추가 비용이 발생합니다. 전체 비용 영향은 개별 솔루션의 이메일 볼륨에 따라 달라지며, 이 패턴을 구현하기 전에 고려해야 합니다. 직렬화된 전자 메일 개체의 크기를 줄이려면 압축을 사용하는 것이 좋습니다. 대역폭 비용을 최소화하려면 Blob 및 큐에 사용되는 Windows Azure Storage 계정이 이메일을 보내는 웹/작업자 역할과 동일한 선호도 그룹에 있어야 합니다.</li>  <li>  성능: 성능과 관련된 두 가지 주요 관찰 사항이 있습니다.</li>  </ul>  <blockquote><ol>  <li>대용량 전자 메일 첨부 파일이 포함된 직렬화된 전자 메일 개체는 직렬화, 스토리지로 이동한 다음 Email Forwarder Service에서 검색 및 직렬화 해제해야 하므로 성능에 영향을 줄 수 있습니다. </li>  <li>이 패턴의 비동기 특성으로 인해 Email Forwarder Service는 WindowsAzure Storage 큐에서 작업 항목을 정기적으로 확인합니다.   이로 인하여 전자 메일 서버로 전자 메일을 보내는 데 약간의 지연이 발생했습니다. 이것은 신중하게 연구하고 개인의 필요에 따라 설정해야합니다.</li>  </ol></blockquote>  <ul class="unIndentedList">  <li>  관리: 이 서비스를 모니터링해야 합니다. 구현에 로깅 및 모니터링 기능을 추가하는 것이 좋습니다. </li>  <li>  안정성: 연결 오류를 처리하려면 이메일 전달자 서비스에서 적절한 재시도 메커니즘( <a target="_blank" href="https://blogs.msdn.com/b/windowsazurestorage/archive/2010/05/10/windows-azure-storage-abstractions-and-their-scalability-targets.aspx">지수 백오프</a> 포함)을 구현해야 합니다.&nbsp;</li>  </ul>  <p>2부는 이번 주 후반에 여기에 게시될 예정입니다.</p>  <p><iframe src="https://www.facebook.com/plugins/like.php?href=;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50" style="overflow: hidden; width: 300px; height: 50px;" frameborder="0" scrolling="no"></iframe><br><a data-url="" data-count="horizontal" data-via="Windowsazure" href="https://twitter.com/share" class="twitter-share-button">짹짹</a>  <script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>  </p>'
