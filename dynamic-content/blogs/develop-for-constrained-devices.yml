### YamlMime:Yaml
ms.openlocfilehash: ece028e3008f8c1309553944094b1fb6697e999b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899047"
Slug: develop-for-constrained-devices
Title: Azure IoT Hub C SDK가 작은 디바이스에서 작동하게 합니다.
Summary: Azure IoT Hub C SDK는 ANSI C(C99)로 작성되어 디스크 및 메모리 공간이 작은 다양한 플랫폼에 적합합니다. 64KB 이상의 RAM을 권장하지만 정확한 메모리 공간은 사용되는 프로토콜, 열린 연결 수 및 대상 플랫폼에 따라 달라집니다.
Content: >-
  <p>Azure IoT Hub C SDK는 ANSI C(C99)로 작성되어 디스크 및 메모리 공간이 작은 다양한 플랫폼에 적합합니다. 64KB 이상의 RAM을 권장하지만 정확한 메모리 공간은 사용되는 프로토콜, 열린 연결 수 및 대상 플랫폼에 따라 달라집니다. 이 블로그에서는 제한된 디바이스에 대해 C SDK를 최적화하는 방법을 안내합니다.</p>


  <p>개발 프로세스를 가속화하기 위해 Apt-get, NuGet 및 MBED에서 C SDK를 패키지로 릴리스합니다. 그러나 시스템이 ROM 또는 RAM으로 제한되는 경우 SDK를 로컬로 빌드하고 특정 기능을 제거하여 C SDK의 공간을 줄이는 것이 좋습니다. <a href="https://cmake.org/">cmake</a>를 사용하여 이 블로그에서 시연할 예정입니다. 또한 제한된 디바이스를 사용하기 위한 프로그래밍 모델은 다릅니다. 이 블로그에서는 메모리 사용량을 줄이기 위한 몇 가지 모범 사례도 설명합니다. 또한 사용 가능한 제한된 디바이스를 개발하는 방법에 대한 <a href="https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-develop-for-constrained-devices">공식 설명서</a> 도 있습니다.</p>


  <h2>제한된 디바이스에 대한 C SDK 빌드</h2>


  <p>먼저 이 <a href="https://github.com/Azure/azure-iot-sdk-c/blob/master/doc/devbox_setup.md">가이드</a>에 따라 개발 환경을 준비해야 합니다. cmake를 사용하여 빌드하는 단계에 도착하면 플래그를 호출하여 특정 기능을 제거할 수 있습니다.</p>


  <p>TL;DR: 제한된 디바이스를 빌드하는 경우 다음 cmake 명령을 사용하는 것이 좋습니다.</p>


  <pre class="”prettyprint”">

  cmake -Duse_amqp=OFF -Duse_http=OFF -Dno_logging=OFF -Ddont_use_uploadtoblob=ON &lt;Path_to_cmake&gt;</pre>


  <h3>추가 프로토콜 라이브러리 제거</h3>


  <p>현재 SDK는 MQTT, WebSocket을 통한 MQTT, AMQP, WebSocket을 통한 AMQP 및 HTTPS의 5가지 <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols">프로토콜</a> 을 지원합니다. 대부분의 고객은 클라이언트에서 1~2개의 프로토콜을 실행하므로 SDK에서 사용하지 않는 프로토콜 라이브러리를 제거할 수 있습니다. 시나리오에 적합한 통신 프로토콜을 선택하는 방법에 대한 <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols">추가 정보가</a> 있습니다. 예를 들어 MQTT는 제한된 디바이스에 더 적합한 경량 프로토콜입니다. 테스트에서 AMQP 대신 MQTT를 사용하면 ROM 사용량이 50%, RAM 사용량이 20% 감소할 수 있습니다.</p>


  <p>다음 cmake 명령을 사용하여 AMQP 및 HTTP 라이브러리를 제거할 수 있습니다.</p>


  <pre class="”prettyprint”">

  cmake -Duse_amqp=OFF -Duse_http=OFF &lt;Path_to_cmake&gt;</pre>


  <h3>SDK 로깅 기능 제거</h3>


  <p>C SDK는 디버깅에 유용한 광범위한 로깅 기능을 제공합니다. 테스트에서 로깅을 사용하지 않도록 설정하면 ROM 사용량이 20% 감소할 수 있습니다.*. 다음 cmake 명령을 사용하여 프로덕션 디바이스에 대한 로깅 기능을 제거할 수 있습니다.</p>


  <pre class="”prettyprint”">

  cmake -Dno_logging=OFF &lt;Path_to_cmake&gt;</pre>


  <h3>Blob에 업로드 기능 제거</h3>


  <p>SDK의 기본 제공 기능을 사용하여 대용량 파일을 Azure Storage에 업로드할 수 있습니다. Azure IoT Hub는 Azure Storage 계정과 연결된 디스패처 역할을 합니다. 이 기능을 사용하여 미디어 파일, 대용량 원격 분석 일괄 처리 및 로그를 보낼 수 있습니다. <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload">IoT Hub를 사용하여 파일을 업로드</a>하는 방법에 대해 자세히 알아봅니다. 이 기능이 애플리케이션에 필요하지 않은 경우 다음 cmake 명령을 사용하여 해당 기능을 제거할 수 있습니다.</p>


  <pre class="”prettyprint”">

  cmake -Ddont_use_uploadtoblob=ON &lt;Path_to_cmake&gt;</pre>


  <h3>Linux 환경에서 strip 실행</h3>


  <p>이진 파일이 Linux 시스템에서 실행되는 경우 컴파일 후에 <a href="https://en.wikipedia.org/wiki/Strip_(Unix)">strip 명령</a>을 활용하여 최종 애플리케이션의 크기를 줄일 수 있습니다.</p>


  <pre class="”prettyprint”">

  strip -s &lt;Path_to_executable&gt;</pre>


  <h2>제한된 디바이스에 대한 프로그래밍 모델</h2>


  <h3>직렬 변환기 사용 방지</h3>


  <p>C SDK에는 선언적 매핑 테이블을 사용하여 메서드 및 디바이스 쌍 속성을 정의할 수 있는 선택적 <a href="https://github.com/Azure/azure-iot-sdk-c/tree/master/serializer">직렬 변환기가</a> 있습니다. 이는 개발을 간소화하도록 설계되었지만 제한된 디바이스에 적합하지 않은 오버헤드를 추가합니다. 이 경우 <a href="https://github.com/kgabis/parson">파슨</a>과 같은 경량 파서로 기본 클라이언트 API를 사용하고 json을 구문 분석하는 것이 좋습니다.</p>


  <h3>_LL_(하위 계층) 계층 사용</h3>


  <p>C SDK는 두 가지 프로그래밍 모델을 지원합니다. 한 집합에는 하위 계층을 나타내는 _LL_ 중위가 있는 API가 있습니다. 이 API 집합은 더 가벼우며 작업자 스레드를 스핀업하지 않습니다. 예약을 수동으로 제어해야 합니다. 디바이스 클라이언트에 대한 _LL_APIs 이 <a href="https://github.com/Azure/azure-iot-sdk-c/blob/master/iothub_client/inc/iothub_device_client_ll.h">헤더 파일</a>에서 찾을 수 있습니다. _LL_ 인덱스가 없는 다른 API 집합을 편의 계층이라고 하며 작업자 스레드가 자동으로 회전합니다. 예를 들어 디바이스 클라이언트에 대한 편의 계층 API는 이 <a href="https://github.com/Azure/azure-iot-sdk-c/blob/master/iothub_client/inc/iothub_device_client.h">헤더 파일</a>에서 찾을 수 있습니다. 각각의 추가 스레드에서 상당한 양의 시스템 리소스를 사용할 수 있는 제한된 디바이스의 경우 _LL_ API를 사용하는 것이 좋습니다.</p>


  <p>Azure IoT C SDK 아키텍처에 대한 자세한 내용은 다음을 참조하세요.</p>


  <ul>
      <li><a href="https://github.com/Azure/azure-iot-sdk-c/">Azure IoT C SDK 소스 코드</a></li>
      <li><a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-device-sdk-c-intro">C용 Azure IoT 디바이스 SDK 소개</a></li>
  </ul>


  <p>*ROM 및 RAM 소비 절감액은 근사치입니다. 정확한 사용량은 사용되는 프로토콜, 열린 연결 수 및 대상 플랫폼에 따라 달라집니다.</p>
