### YamlMime:Yaml
ms.openlocfilehash: 9a101e82b2b21ee9f736e067179bbcc74f54a83f
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897467"
Slug: azure-documentdb-javascript-as-modern-day-t-sql
Title: 'Azure DocumentDB: 최신 T-SQL JavaScript'
Summary: JavaScript 서버 쪽 SDK에 JavaScript 언어 통합 쿼리 API를 도입하여 Azure DocumentDB 비전을 한 단계 더 발전시키고 있습니다.
Content: "<p><a href=\"https://www.documentdb.com\">Azure DocumentDB&#39;</a> 데이터베이스 엔진은 JSON 및 JavaScript에 대한 일류 지원을 제공하기 위해 처음부터 의도적으로 설계되었습니다. Microsoft의 비전은 JavaScript 개발자가 엔터티 매퍼, 스키마, 코드 생성 도구, 형식 장식 및 기타 덕트 테이프를 처리하지 않고도 애플리케이션을 빌드하는 것입니다. 데이터베이스 엔진 내의 JSON 및 JavaScript에 대한 심층적인 노력은 다음과 같은 방법으로 표시됩니다. &nbsp;</p>\n\n<ol>\n <li><a href=\"https://www.vldb.org/pvldb/vol8/p1668-shukla.pdf\">스키마 독립적 인덱싱</a>: DocumentDB는 개발자가 일관된 쿼리를 지원하기 위해 스키마 또는 보조 인덱스를 지정할 필요가 없습니다. 데이터베이스 엔진은 모든 JSON 문서 내의 모든 속성을 자동으로 인덱싱하는 동시에 지속적인 양의 빠른 쓰기를 수집하도록 설계되었습니다. 이는 진화하는 최신 애플리케이션과 데이터베이스 간의 마찰을 제거하는 중요한 단계입니다.</li>\n <li><a href=\"https://channel9.msdn.com/Shows/Data-Exposed/DataExposedQueryingDocumentDB\">JavaScript 형식 시스템 내에 루팅된 SQL 쿼리 언어</a>: DocumentDB&#39;SQL 쿼리 언어는 JavaScript&#39;형식 시스템을 기반으로 합니다. 이렇게 하면 JavaScript 애플리케이션과 DocumentDB 간의 형식 시스템 불일치가 제거될 뿐만 아니라 SQL 쿼리 내에서 JavaScript로 완전히 작성된 UDF(사용자 정의 함수)를 원활하게 호출할 수 있습니다.</li>\n <li><a href=\"https://azure.microsoft.com/blog/2015/04/23/boost-your-applications-performance-with-server-side-javascript-in-azure-documentdb/\">JavaScript 언어 통합 트랜잭션</a>: JavaScript에 대한 베팅의 일환으로 개발자는 DocumentDB 컬렉션에 JavaScript로 작성된 저장 프로시저 및 트리거를 등록할 수 있습니다. 이러한 저장 프로시저/트리거는 앰비언트 데이터베이스 트랜잭션 내의 데이터베이스 엔진 내에서 샌드박스 방식으로 실행됩니다. 저장 프로시저(또는 트리거)는 트랜잭션 방식으로 여러 문서를 업데이트할 수 있습니다. 데이터베이스 트랜잭션은 저장 프로시저(또는 트리거)가 성공적으로 완료되면 커밋됩니다. JavaScript &quot;throw&quot; 키워드가 실행되면 데이터베이스 트랜잭션이 중단됩니다.</li>\n <li><a href=\"https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/\">JavaScript 언어 통합 쿼리</a>: 오늘 JavaScript 서버 쪽 SDK에 JavaScript 언어 통합 쿼리 API를 도입하여 이 비전을 한 단계 더 발전시킬&#39;발표하게 되어 기쁩니다.</li>\n</ol>\n\n<p>&nbsp; <img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume1.png\"></p>\n\n<h2>&nbsp;</h2>\n\n<h2>JavaScript 언어 통합 쿼리: NoSQL에 대한 SQL 대안 없음</h2>\n\n<p>&nbsp;</p>\n\n<div>\n<table border=\"0\" style=\"background: rgb(231, 230, 230); border-collapse: collapse;\">\n <tbody valign=\"top\">\n  <tr>\n   <td><em>&quot;DocumentDB&#39;유창한 JS 쿼리를 사용하면 ES5&#39;배열 기본 제공 또는 JS 라이브러리(예: <a href=\"https://lodash.com/\">Lodash</a> 또는 <a href=\"https://underscorejs.org/\">밑줄</a>)를 사용한&#39;쉽게 선택할&#39;있는 JS 체인 구문을 사용할 수 있습니다.&quot;</em>\n\n   <div style=\"text-align: right;\">John-David 달튼, 로다시의 창조자</div>\n   </td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp; 컬렉션에서 다음 두 개의 JSON 문서(및 해당 트리 표현)를 고려합니다. &nbsp;</p>\n\n<div>\n<table border=\"0\" style=\"border-collapse: collapse;\">\n <colgroup>\n  <col style=\"width: 50%;\">\n  <col style=\"width: 50%;\">\n </colgroup>\n <tbody valign=\"top\">\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n{ &quot;locations&quot;: [ \n    {\n      &quot;country&quot;: &quot;Germany&quot;,\n      &quot;city&quot;: &quot;Berlin&quot; \n    },\n    {\n      &quot;country&quot;: &quot;France&quot;,    \n      &quot;city&quot;: &quot;Paris&quot;\n    }\n  ],  \n  &quot;headquarter&quot;: &quot;Belgium&quot;, \n  &quot;exports&quot;: [ \n    { &quot;city&quot;: &quot;Moscow&quot; }, \n    { &quot;city&quot;: &quot;Athens&quot; }\n  ]\n}\n</pre>\n   </td>\n   <td><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume2.png\"></td>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n{ &quot;locations&quot;: [\n    {\n      &quot;country&quot;: &quot;Germany&quot;,    \n      &quot;city&quot;: &quot;Bonn&quot;, \n      &quot;revenue&quot;: 200\n    }\n  ], \n  &quot;headquarter&quot;: &quot;Italy&quot;,      \n  &quot;exports&quot;: [\n    {\n      &quot;city&quot;:&quot;Berlin&quot;,\n      &quot;dealers&quot;: [\n        {&quot;name&quot;: &quot;Hans&quot;}\n      ]\n    },\n    { &quot;city&quot;: &quot;Athens&quot; }\n  ]\n}\n</pre>\n   </td>\n   <td><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume3.png\"></td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp;이전에는 본사를 벨기에로 &quot;포함하는 문서의 모든 &quot;내보내&quot;기를 쿼리할 수 있는 저장 프로시저를 &quot;실행할 수 있었습니다.&quot;&quot; &nbsp;</p>\n\n<pre class=\"prettyprint language-js\">\nfunction() {\n  var filterQuery = &#39;SELECT * from companies c where c.headquarter = &quot;Belgium&quot;&#39;;\n  var isAccepted = __.queryDocuments(__.getSelfLink(), filterQuery,\n    function(err, docs, options) {\n      if (err) throw new Error(err.number + err.message);\n      __.response.setBody(docs);\n    });\n  if (!isAccepted) __.response.setBody(&#39;Query timed out&#39;);\n}\n</pre>\n\n<p>&nbsp; 실행 시 저장 프로시저는 내보내기를 사용하여 응답 문서를 반환합니다. &nbsp;</p>\n\n<div>\n<table border=\"0\" style=\"border-collapse: collapse;\">\n <colgroup>\n  <col style=\"width: 50%;\">\n  <col style=\"width: 50%;\">\n </colgroup>\n <tbody valign=\"top\">\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n{ \n  &quot;results&quot;: [\n    {\n      &quot;locations&quot;: [\n        {\n          &quot;country&quot;: &quot;Germany&quot;,\n          &quot;city&quot;: &quot;Berlin&quot; \n        },\n        {\n          &quot;country&quot;: &quot;France&quot;,\n          &quot;city&quot;: &quot;Paris&quot; \n        }\n      ],           \n      &quot;headquarter&quot;:&quot;Belgium&quot;, \n      &quot;exports&quot;: [\n        { &quot;city&quot;: &quot;Moscow&quot; },\n        { &quot;city&quot;: &quot;Athens&quot; } \n      ]\n    }\n  ]\n} \n</pre>\n   </td>\n   <td><img alt=\"\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/081915_0131_AzureDocume4.png\"></td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp;저장 프로시저에서 실행된 쿼리는 여전히 형식이 잘못된 SQL. 오늘&#39;언어 통합 쿼리를 발표하므로 더 이상 JavaScript에서 SQL 쿼리를 작성할 필요가 없습니다. 아래의 새 언어 통합 쿼리와 대조합니다. &nbsp;</p>\n\n<pre class=\"prettyprint language-js\">\nfunction() {\n  var resp = __.filter(function(company) {\n    return company.headquarter == &#39;Belgium&#39;;\n  });\n  if (!resp.isAccepted) __.response.setBody(&#39;Query timed out&#39;);\n}\n</pre>\n\n<p>&nbsp; 쿨하지&#39;?</p>\n\n<h2>JavaScript 쿼리 API 참고 자료로 SQL</h2>\n\n<p>다음 표에서는 DocumentDB&#39;SQL 문법 및 새 JavaScript 쿼리 API를 사용하는 몇 가지 동등한 쿼리를 보여 줍니다.&nbsp;</p>\n\n<div>\n<table border=\"1\" width=\"100%\">\n <colgroup>\n  <col span=\"1\" style=\"width: 50%;\">\n  <col span=\"1\" style=\"width: 50%;\">\n </colgroup>\n <tbody>\n  <tr>\n   <th>DocumentDB SQL</th>\n   <th>JavaScript 언어 통합 쿼리</th>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.queryDocuments(__.getSelfLink(),\n      &quot;SELECT * &quot; +\n      &quot;FROM docs &quot; +\n      &quot;WHERE ARRAY_CONTAINS(docs.Tags, 123)&quot;\n    ,\n    function(err, docs, options) {\n      __.response.setBody(docs);\n    });\n</pre>\n   </td>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.filter(function(x) {\n    return x.Tags &amp;&amp; x.Tags.indexOf(123) &gt; -1;\n});\n</pre>\n   </td>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.queryDocuments(__.getSelfLink(),\n      &quot;SELECT docs.id, docs.message AS msg &quot; +\n      &quot;FROM docs &quot; +\n      &quot;WHERE docs.id=&#39;X998_Y998&#39;&quot;\n    ,\n    function(err, docs, options) {\n      __.response.setBody(docs);\n    });\n</pre>\n   </td>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.chain()\n    .filter(function(doc) {\n        return doc.id === &quot;X998_Y998&quot;;\n    })\n    .map(function(doc) {\n        return {\n            id: doc.id,\n            msg: doc.message\n        };\n    })\n    .value();\n</pre>\n   </td>\n  </tr>\n  <tr>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.queryDocuments(__.getSelfLink(),\n      &quot;SELECT VALUE tag &quot; +\n      &quot;FROM docs &quot; +\n      &quot;JOIN tag IN docs.Tags &quot; +\n      &quot;ORDER BY docs._ts&quot;\n    ,\n    function(err, docs, options) {\n      __.response.setBody(docs);\n    });\n</pre>\n   </td>\n   <td>\n   <pre class=\"prettyprint language-js\">\n__.chain()\n    .filter(function(doc) {\n        return doc.Tags &amp;&amp; Array.isArray(doc.Tags);\n    })\n    .sortBy(function(doc) {\n    return doc._ts;\n    })\n    .pluck(&quot;Tags&quot;)\n    .flatten()\n    .value()\n</pre>\n   </td>\n  </tr>\n </tbody>\n</table>\n</div>\n\n<p>&nbsp;DocumentDB 서버 쪽 JavaScript SDK를 시작하려면 <a href=\"https://azure.microsoft.com/en-us/services/documentdb/\">DocumentDB</a>에 등록하고 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/\">여기에서 설명서를</a> 확인하세요. 도움이 필요한 경우 <a href=\"https://stackoverflow.com/questions/tagged/azure-documentdb\">Stack Overflow</a>, <a href=\"https://social.msdn.microsoft.com/forums/azure/en-US/home?forum=AzureDocumentDB\">Azure DocumentDB MSDN 개발자 포럼에서 문의하거나 DocumentDB</a> 엔지니어링 팀과 1:1 채팅을 예약하세요. 최신 DocumentDB 소식과 기능에 대한 최신 동향을 파악하려면 <a href=\"https://twitter.com/intent/follow?region=follow_link&amp;screen_name=DocumentDB&amp;tw_p=followbutton\">Twitter</a>를 팔로우하세요.</p>"
