### YamlMime:Yaml
ms.openlocfilehash: 034c728262e69522dcd28493c5f8450addd3bc60
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911367"
Slug: azure-functions-the-journey
Title: 'Azure Functions: The Journey '
Summary: '우리 팀은 //build에서 새 Azure Functions 서비스의 미리 보기를 최근에 릴리스하게 되어 기뻤습니다. 이미 서비스에 대한 몇 가지 블로그를 수행했습니다(예: Azure Functions 소개). 이 게시물에서는 프로젝트를 시작한 방법과 현재 위치에 도착하기 위해 수행한 여정에 대해 자세히 설명하고 싶습니다. '
Content: >-
  <p><em>이 블로그 게시물은 매튜 찰스, 수석 소프트웨어 엔지니어, 마이크로 소프트에 의해 작성되었습니다.</em></p>


  <p>우리 팀은 //build에서 새 <a href="https://azure.microsoft.com/en-us/services/functions/">Azure Functions</a> 서비스의 미리 보기를 최근에 릴리스하게 되어 기뻤습니다. Weve&rsquo;는 이미(예: <a href="https://azure.microsoft.com/en-us/blog/introducing-azure-functions/">Azure Functions 소개</a>) 서비스에 대한 몇 가지 블로그를 수행했지만, 이 게시물&rsquo;에서는 백그라운드에서 조금 자세히 살펴보고 프로젝트가 시작된 방법과 현재 위치에 도착하기 위해 수행한 여정&rsquo;에 대해 논의하려고 합니다. Well&rsquo;은 Functions 런타임, 동적 컴퓨팅 계층(&ldquo;서버리스&rdquo;) 및 Functions 포털에 대해 설명하고, 이러한 모든 부분이 어떻게 진화하여 응집력 있는 제품으로 결합되었는지 개략적으로 살펴봅니다. 그것은&rsquo; 팀에 대한 재미있는 타고있었고, 그것은&rsquo; 단지 시작되었습니다.</p>


  <p>이 프로젝트의 발전은 여러 기존 플랫폼 조각에서 시너지 효과를 식별하고 이를 함께 새 제품 제품에 연결하는 좋은 예입니다. Azure App Service에서는 Azure Functions 비전에서 신속하게 실행할 수 있도록 많은 구성 요소를 이미 마련했습니다. 이러한 기존 자산을 활용하고 새로운 혁신과 기능을 도입함으로써 프로젝트를 매우 빠르게 통합할 수 있었습니다.</p>


  <h2>WebJobs SDK</h2>


  <p>Chriss&rsquo; //build talk <a href="https://channel9.msdn.com/events/Build/2016/B858">소개 Azure Functions에서 Azure Functions</a> 가 <a href="https://github.com/Azure/azure-webjobs-sdk">Azure WebJobs SDK</a>에서 빌드되는 방법을 설명했습니다. WebJobs SDK는 몇 년 동안 존재해 왔으며, 많은 고객이 이를 사용하여 다양한 이벤트 원본에서 트리거되는 백 엔드 처리 작업을 빌드하고 있습니다. WebJobs SDK에는 최소한의 코드로 정교한 작업 함수를 매우 쉽게 작성할 수 있는 간단한 선언적 프로그래밍 모델이 있습니다. 예제는 다음과 같습니다&rsquo;.</p>


  <pre>

  public static void ProcessOrder(

      [QueueTrigger(&ldquo;orders&rdquo;)] Order order,

      [Blob(&ldquo;processed/{Id}&rdquo;)] out string receipt,

  TraceWriter log)

  {

  log.Verbose(string.Format(&ldquo;Processing Order {0}&rdquo;, order.Id));


      // business logic


      receipt = &ldquo;&lt;some value&gt;&rdquo;;

  }</pre>


  <p>vanilla .NET Console 애플리케이션에서 WebJobs SDK JobHost에서 호스팅되는 경우 새 큐 메시지가 Azure 큐 &ldquo;주문&rdquo; 에 추가되고 큐 페이로드가 Order POCO 인스턴스로 역직렬화될 때마다 이 함수가 자동으로 트리거됩니다. 또한 이 함수는 들어오는 메시지의 ID&rdquo; 속성을 사용하여 &ldquo;Blob 경로의 일부로 출력 Blob에 자동으로 바인딩합니다. 이 프로그래밍 모델을 사용하면 작업 함수가 비즈니스 논리에만 초점을 맞추고 스토리지 작업을 처리할 필요가 없습니다&rsquo;. 놀랍습니다.</p>


  <p>WebJobs SDK를 사용하는 이러한 함수에 대한 호스팅 모델은 <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/">Azure WebJobs</a>로 배포하는 것입니다. 이 기능은 매우 잘 작동하며 많은 유연성을 제공하며 Azure App Service의 매우 인기 있는 기능입니다.</p>


  <h2>함수 런타임</h2>


  <p>작년 중반 무렵, 우리는 고객이 우리에게 이것을 요청했더라면 이 간단한 프로그래밍 모델을 다른 언어&ndash;&rsquo;로 가져오는 데 무엇이 걸릴지 논의하기 시작했습니다. 모든 사용자가 .NET C# 프로그래머인 것은 아니지만 많은 사용자가 이러한 WebJobs SDK 패턴을 사용하고자 합니다. 이에 대한 몇 가지 프로토타입 작업을 시작하고 메타데이터에 대한 새 JSON 설명 모델을 계층화하여 기존의 시도된 진정한 .NET WebJobs SDK 런타임을 활용할 수 있는 모델을 마련했습니다. 그 결과 Node.js(또는 다른 언어)에서 위와 동일한 함수를 작성할 수 있습니다.</p>


  <pre>

  module.exports = function (context, order) {

  context.log(&lsquo;Processing order&rsquo;, order.id);


      // business logic


  context.bindings.receipt = &ldquo;&lt;some value&gt;&rdquo;;

  context.done();

  }</pre>


  <p>&rsquo;이 함수는 구조적으로 위의 C# 함수와 동일합니다. 이는&rsquo; 동일한 런타임 구현에 매핑되기 때문입니다. 선언적 코드 특성은 메타데이터를 지정하는 한 가지 방법일 뿐입니다. 간단한 JSON 설명 파일에서 동일한 정보를 캡처할 수 있다는 것을 깨달았습니다. 이 함수에 대한 바인딩을 설명하는 해당 메타데이터 파일(예: C# 예제의 선언적 특성에 있는 모든 비트)을 여기에&rsquo; 추가합니다.</p>


  <pre>

  {

    &ldquo;bindings&rdquo;: [

      {

        &ldquo;type&rdquo;: &ldquo;queueTrigger&rdquo;,

        &ldquo;name&rdquo;: &ldquo;order&rdquo;,

        &ldquo;direction&rdquo;: &ldquo;in&rdquo;,

        &ldquo;queueName&rdquo;: &ldquo;orders&rdquo;

      },

      {

        &ldquo;type&rdquo;: &ldquo;blob&rdquo;,

        &ldquo;name&rdquo;: &ldquo;receipt&rdquo;,

        &ldquo;direction&rdquo;: &ldquo;out&rdquo;,

        &ldquo;path&rdquo;: &ldquo;processed/{id}&rdquo;

      }

    ]

  }</pre>


  <p>기본 개념은 이 메타데이터를 사용하여 다양한 언어와 .NET WebJobs SDK 런타임 간에 메모리 내 어댑터를 생성할 수 있다는 것입니다. 위에서 볼 수 있는 C# 함수를 효과적으로 생성하며, 해당 함수의 메서드 본문은 단순히 실제 사용자 함수(즉, 작성한 Node.js 함수)에 위임합니다. 그런 다음, Azure Function은 함수 바인딩을 설명하는 간단한 function.json 메타데이터 파일과 함수를 구현하는 하나 이상의 스크립트 파일 컬렉션일 수 있습니다. 함수가 Windows BAT 파일로 작성된 동일한 메타데이터 파일을 사용하여 위와 동일한 예제를 여기에&rsquo; 표시합니다.</p>


  <pre>

  SET /p order=&lt;%order%

  echo Processing order &lsquo;%order%&rsquo;

  echo &lsquo;&lt;some value&gt;&rsquo; &gt; %receipt%</pre>


  <p>지원되는 7개 언어의 함수를 설명하는 데 동일한 메타데이터 파일을 사용할 수 있습니다. 물론 각 언어에는 고유한 단점과 기능이 있으며, 일부는 다양한 작업에 대해 다른 언어보다 더 적합합니다. 여기서 핵심은 이러한 모든 언어에 대해 동일한 트리거/바인딩 런타임을 가질 수 있으므로 각 언어가 고유한 방식으로 해당 모델에 매핑할 수 있다는 것입니다. BAT 파일은 다소 제한적이지만 환경 변수 및 파일 스트림을 통해 입력 및 쓰기 출력을 모두 수신할 수 있으며, 이 출력은 Functions 런타임이 기본 Azure Storage 아티팩트에 자동으로 매핑됩니다.</p>


  <p>Azure Functions가 핵심 WebJobs SDK를 기반으로 구축되면 언어당 다양한 버전의 WebJobs SDK를 작성하고 유지 관리할 필요가 없습니다&rsquo;. 이는 엄청난 엔지니어링 성공입니다. 모든 바인딩/트리거 논리를 처리하는 단일 코어 런타임과 해당 핵심 혜택 기능과 모든 WebJobs SDK 고객에 대한 투자를 처리합니다. 또한 사용자가 핵심 SDK에 대해 작성하는 모든 트리거/바인딩 확장을 Functions에서도 사용할 수 있음을 의미합니다. Well&rsquo;은 기존 고객뿐만 아니라 Azure Functions를 위해 핵심 WebJobs SDK 및 확장에 계속 많은 투자를 하고 있습니다.</p>


  <h2>WebHook 지원</h2>


  <p>우리가 집중하기 시작한 또 다른 중요한 영역은 WebHooks 스토리였습니다. Azure Storage 이벤트에서 함수를 트리거하는 기능은 훌륭하지만 WebJobs&rsquo; 고객이 WebHook 요청을 통해 작업 함수를 트리거하는 기능도 요청했습니다. 우리는 이미 잘 작동 <a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.WebHooks/1.0.0-beta4">WebHooks 확장을</a> 작성하여 작년에 실험했지만, WebJobs가 Kudu SCM 사이트에서 실행된다는 사실에서 비롯 된 큰 단점이 있었다, 즉, 기본 인증 자격 증명이 요청을해야 한다는 것을 의미합니다. 대부분의&rsquo; WebHook 통합 시나리오에 대한 거래 차단기는 해당 엔드포인트에만 연결할 수 있도록 제한된 간단한 인증 코드로 URL을 나눠주는 기능을 원하기 때문에 가능합니다.</p>


  <p>이 문제를 해결하기 위해 Functions 런타임을 WebApp의 루트에서 실행되는 <a href="https://github.com/projectkudu/kudu/wiki/Azure-Site-Extensions">사이트 확장</a> 으로 패키지하기로 결정했습니다. 즉, SCM 엔드포인트 뒤에 있지 않으므로 필요한 인증 패턴을 달성할 수 있습니다. 이렇게 하면 WebHook 함수에 대해 인증된 간단한 엔드포인트 집합을 노출할 수 있습니다. 또한 <a href="https://github.com/aspnet/WebHooks">ASP.NET WebHooks</a> 라이브러리를 통합하여 라이브러리가 지원하는 많은 WebHook 공급자를 활용할 수 있도록 하여 GitHub, Slack, DropBox, Instagram 등과 같은 공급자에 대한 일류 지원을 제공했습니다.</p>


  <p>따라서 이 시점에서 다양한 WebHook 통합 시나리오를 지원하는 HTTP 헤드가 있는 7개 언어(Node.js, C#, F#, Bash, BAT, Python, PHP)에 대한 전체 WebJobs SDK 트리거/바인딩 모델을 지원하는 유연한 Functions 런타임이 있었습니다.</p>


  <h2>동적 컴퓨팅</h2>


  <p>위의 런타임 작업과 병행하여 서버리스 컴퓨팅과 해당 공간에서 수행하려는 작업에 대해서도 논의했습니다. WebJobs에서 수행하는 이 작업은 매우 시너지 효과가 있다는 것을 깨달았습니다. 대규모 샌드박스 환경에서 사용자 코드를 실행할 수 있는 유연한 다국어 함수 런타임을 개발했습니다. 그러나 기존 WebJobs 모델을 사용하려면 사용자가 해당 WebJobs가 실행되는 WebApp 호스트를 만들고 관리해야 합니다. 사용자가 함수를 직접 작성하기만 하고, 모든 배포 및&rsquo; 크기 조정 문제를 처리할 수 있도록 해당 부분을 추상화할 수 있다면 어떨까요? 기본적으로 Wed&rsquo;에는 WebJobs SDK as a Service가 있습니다. 유레카!</p>


  <p>팀을 구성하여 동적 컴퓨팅&ldquo; 계획의 &ndash; &ldquo;해당 부분을 조사합니다. 이 프로젝트는 소수의 사용자에서 훨씬 더 큰 팀으로 &ndash; 빠르게 성장하여 스크럼 회의가 매일 2-3명씩 증가하고 있는 시점이었으며, 동적 컴퓨팅 계층은 부하가 증가함에 따라 함수를 자동으로 스케일 아웃하고 감소할 때 크기를 조정하는 역할을 하는 것 같았습니다. 최종 사용자는&rsquo; 이에 대해 전혀 걱정할 필요가 없으며 실제로 사용하는 컴퓨팅 시간에 대해서만 요금이 청구됩니다. 프로젝트의 동적 컴퓨팅 영역은 크며 모니터링 및 진단, 원격 분석 등과 같은 다른 서비스 측면도 포함합니다. 이 지역은 미래에 자신의 블로그 게시물을받을 자격이.</p>


  <h2>Functions 포털</h2>


  <p>다음에 집중하기 시작한 것은 이러한 함수를 매우 쉽게 작성하고 관리할 수 있도록 하는 포털 환경이었습니다. 기존 WebJobs SDK 모델에서는 미리 컴파일된 모든 작업 함수가 포함된 .NET Console 애플리케이션(JobHost)을 컴파일하고 배포합니다. Azure Functions의 경우 배포 모델이 훨씬 간단합니다. Functions 런타임은 매우 간단한 파일 시스템 레이아웃을 갖도록 설계되었습니다. 이를 통해 <a href="https://github.com/projectkudu/kudu">Kudu</a> API를 통해 해당 파일에서 작동하는 직진 포털 UI를 용이하게 합니다. 이러한 파일을 만들거나 편집하고 함수 컨테이너(함수를 실행하는 WebApp)에 푸시할 수 있는 간단한 포털 편집기가 있을 수 있습니다. 간단한 파일 시스템 모델을 사용하면 <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/">ARM 템플릿</a>을 통해 Azure Functions를 배포할 수도 있습니다. 그것은 실제로 오늘 가능하지만, 아직 잘 문서화되지 않았습니다.</p>


  <p>팀은 포털을 매우 빠르게 가동하고 실행할 수 있었고, 초기 제품과 함께 플레이하기 위해 포털을 사용할 수 있게 되어 매우 기뻤습니다. 포털을 배치하면 실제로 함께 모이는 것 같은 느낌이 들기 시작했습니다! 많은 유용성 토론/개선 사항을 유도하고 버그 작업을 시작하는 데 도움이 된 제품으로 더 넓은 팀 플레이를 시작할 수 있었습니다. 포털 작업이 시작되었을 때 Functions 런타임과 마찬가지로 한두 명이 작업했지만 초기 작업이 견인력을 얻고 범위/계획이 증가함에 따라  우리는 더 많은 사람들이 탑승했습니다. 스크럼 회의는 여전히 더 커졌습니다.</p>


  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fd84af25-8228-4bc6-ba2c-fa7390d7e1a8.jpeg"></p>


  <h2>템플릿</h2>


  <p>함수에 대한 간단한 파일 시스템 모델을 사용하면 함수 포털에서 현재 볼 수 있는 멋진 템플릿 모델을 개발할 수 있습니다. QueueTrigger &ndash; 노드&rdquo;, &ldquo;GitHub WebHook C#&rdquo;등 다양한 언어&ldquo;에서 일반적인 시나리오에 대한 간단한 메타데이터/스크립트 템플릿을 이탈하기 시작했습니다. 이 아이디어는 즉시 실행되는 함수에 대한 간단한 &ldquo;레시피&rdquo; 또는 시작점을 갖추어 필요에 맞게 사용자 지정하고 확장할 수 있도록 하는 것입니다. 미래에는 커뮤니티가 이러한 템플릿을 작성하여 에코시스템을 구동할 수 있기를 바랍니다.</p>


  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/34d5fd41-4b4e-4ce6-9e34-7954efbd1ef4.png"></p>


  <h2>확장성</h2>


  <p>Azure Functions의 //build 발표를 진행하는 데 많은 초점을 맞춘 또 다른 영역은 Functions에서 사용할 수 있는 새로운 WebJobs SDK 확장 집합이었습니다. 지난 가을 <a href="https://azure.microsoft.com/en-us/blog/extensible-triggers-and-binders-with-azure-webjobs-sdk-1-1-0-alpha1/">WebJobs SDK 확장성</a> 모델을 릴리스하여 프로그래밍 모델을 새 트리거/바인딩 원본까지 열었습니다. 우리 팀은 <a href="https://github.com/Azure/azure-webjobs-sdk-extensions">이미 WebJobs SDK Exensions</a> 리포지토리에서 몇 가지 새로운 유용한 확장(예: TimerTrigger, FileTrigger, SendGrid 바인딩 등)으로 커뮤니티를 시드했습니다. 또한 Weve&rsquo;는 커뮤니티 구성원이 자신의 확장을 작성하기 시작했습니다. Functions는 SDK를 기반으로 하므로 이러한 모든 확장을 Azure Functions에서도 사용할 수 있습니다. 우리가 쓰고 싶었지만 시간이 없었던&rsquo; 많은 확장이 있었고, 새로운 더 큰 팀과 함께 그 중 일부를 크랭크하기 시작할 수 있는 리소스가 있었습니다. 지난 몇 개월 동안&rsquo; Weve는 다음과 같은 추가 확장을 추가하고 Functions에서 첫 번째 클래스를 만들었습니다. EventHub, DocumentDb, NotificationHub, MobileApps 및 ApiHub. 이것은 시작 &ndash; 에 불과하며 더 많은 확장이 계획되어 있으며 커뮤니티도 더 많이 작성할 것으로 기대합니다. 또한 Were&rsquo;는 타사에서 Functions에 확장을 온보딩할 수 있도록 하기 위한 쉬운 모델을 작업하고 있습니다. 계속 지켜봐 주시기 바랍니다.</p>


  <p>또 다른 멋진 점은 핵심 <a href="https://github.com/Azure/azure-webjobs-sdk">WebJobs SDK 및 WebJobs SDK</a> 확장 리포지토리와 마찬가지로 모든 작업 오픈 소스 작업을 수행하기로 일찍 결정했다 <a href="https://github.com/Azure/azure-webjobs-sdk-extensions">는</a> 것입니다. 그래서 Functions 런타임을 포함하는 <a href="https://github.com/Azure/azure-webjobs-sdk-script">WebJobs SDK 스크립트</a> 를 만들었습니다. 마찬가지로 Functions 포털도 오픈 소스인 <a href="https://github.com/projectkudu/AzureFunctionsPortal">AzureFunctionsPortal</a>입니다.</p>


  <p>끝으로, 위의 모든 내용은 프로젝트의 다양한 부분과 함수 런타임, 함수 포털 및 동적 컴퓨팅이 어떻게 결합되었는지에 대한 대략적인 개요였습니다. 향후 게시물&rsquo;에서는 이러한 다양한 영역의 세부 정보를 자세히 살펴보겠습니다.</p>
