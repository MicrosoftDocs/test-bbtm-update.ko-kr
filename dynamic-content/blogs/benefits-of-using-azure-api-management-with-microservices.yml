### YamlMime:Yaml
ms.openlocfilehash: 3eb658c60db4062a77c4994efca21208559e04d1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908543"
Slug: benefits-of-using-azure-api-management-with-microservices
Title: 마이크로 서비스와 함께 Azure API Management를 사용할 경우의 이점
Summary: IT 업계는 모놀리식 애플리케이션에서 마이크로 서비스 기반 아키텍처로의 전환을 경험하고 있습니다.
Content: >-
  <p>IT 업계는 <a href="https://azure.microsoft.com/en-us/blog/microservices-an-application-revolution-powered-by-the-cloud/" target="_blank">모놀리식 애플리케이션에서 마이크로 서비스 기반 아키텍처로</a>의 전환을 경험하고 있습니다. <a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/microservices#benefits" target="_blank">이 새로운 방법의 이점</a>은 다음과 같습니다.</p>


  <ul>
   <li><strong>독립적인 개발 및 기술 </strong>&ndash; 선택 자유 개발자는 서로 다른 마이크로 서비스에서 동시에 작업하고 해결 중인 문제에 가장 적합한 기술을 선택할 수 있습니다.</li>
   <li><strong>독립 배포 및 릴리스 주기 </strong>&ndash; 마이크로 서비스는 자체 일정에 따라 개별적으로 업데이트할 수 있습니다.</li>
   <li><strong>세분화된 크기 조정 </strong>&ndash; 개별 마이크로 서비스는 독립적으로 확장하여 전체 비용을 줄이고 안정성을 높일 수 있습니다.</li>
   <li><strong>단순</strong> &ndash; 더 작은 서비스는 제품 개발, 테스트, 디버깅 및 출시를 신속하게 파악하는 데 더 쉽습니다.</li>
   <li><strong>오류 격리</strong> &ndash; 마이크로 서비스의 오류는 다른 서비스의 실패로 변환할 필요가 없습니다.</li>
  </ul>


  <p>이 블로그 게시물에서는 다음을 살펴보겠습니다.</p>


  <ul>

  </ul>


  <ol>
   <li>위의 이점을 실현하기 위해 간소화된 온라인 스토어 시스템을 설계하는 방법입니다.</li>
   <li>마이크로 서비스 기반 아키텍처에서 공용 API를 관리하는 이유 및 방법</li>
   <li>Azure API Management 및 마이크로 서비스를 시작하는 방법</li>
  </ol>


  <ul>

  </ul>


  <h2>예: 마이크로 서비스를 사용하여 구현된 온라인 저장소</h2>


  <p>간소화된 온라인 스토어 시스템을 고려해 보겠습니다&rsquo;. 웹 사이트의 방문자는 제품&rsquo; 세부 정보를 보고, 주문을하고, 배치 된 주문을 검토 할 수 있어야합니다.</p>


  <p>주문이 있을 때마다 시스템에서 주문 세부 정보를 처리하고 배송 요청을 실행해야 합니다. 사용자 시나리오 및 비즈니스 요구 사항에 따라 시스템에는 다음과 같은 속성이 있어야 합니다.</p>


  <ul>
   <li><strong>세분화된 크기 조정</strong> &ndash; 제품 세부 정보를 보는 것은 주문보다 평균 1,000배 이상 자주 발생합니다.</li>
   <li><strong>단순</strong> &ndash; 독립적인 사용자 작업은 명확하게 정의되며, 이러한 분리는 시스템 아키텍처에 반영되어야 합니다.</li>
   <li><strong>오류 격리</strong> &ndash; 배송 기능의 오류는 제품 보기 또는 주문에 영향을 줄 수 없습니다.</li>
  </ul>


  <p>다음 세 가지 마이크로 서비스를 사용하여 시스템을 구현하는 것을 암시합니다.</p>


  <ul>
   <li>주문을 보고 배치하는 공용 GET 및 POST API &ndash; 를 사용하여 주문합니다.</li>
   <li>제품의 세부 정보를 볼 책임이 있는 공용 GET API &ndash; 가 있는 제품입니다.</li>
   <li>주문 처리 및 배송을 담당하는 이벤트에 &ndash; 의해 내부적으로 트리거되는 배송.</li>
  </ul>


  <p>이를 위해 구현하고 관리하기 쉬운 <a href="https://azure.microsoft.com/en-us/services/functions/" target="_blank">Azure Functions</a>를 사용합니다. 이벤트 기반 특성은 상호 작용에 대해 실행되고 요금이 청구됨을 의미합니다. 이는 저장소 트래픽을 예측할 수 없는 경우에 유용합니다. 기본 인프라는 트래픽이 없는 시간에 0으로 축소됩니다. 또한 미국의 블랙 프라이데이(Black Friday)와 같은 쇼핑 휴가 기간 동안 마케팅 캠페인이 바이러스에 감염되거나 부하가 증가하는 시나리오에서 트래픽이 급증할 수 있습니다.</p>


  <p>크기 조정 세분성을 유지하려면 단순성을 보장하고 릴리스 주기를 독립적으로 유지하려면 모든 마이크로 서비스가 개별 함수 앱에서 구현되어야 합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1a0f71db-c861-49f9-9566-3296bd8931b3.png"><img alt="Flowchart of microservice being implemented in an indivudal function app " border="0" height="343" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d4057126-035d-44b1-ba68-f7e3a1ebb695.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="indivudal 함수 앱에서 구현되는 마이크로 서비스의 순서도 " width="640"></a></p>


  <p>주문 및 제품 마이크로 서비스는 HTTP 트리거를 사용하는 외부 연결 함수입니다. 배송 마이크로 서비스는 주문 마이크로 서비스에 의해 간접적으로 트리거되며<a href="https://azure.microsoft.com/en-us/services/service-bus/" target="_blank">, Azure Service Bus</a> 메시지를 만듭니다. 예를 들어 항목을 주문할 때 웹 사이트에서 주문 함수를 실행하는 POST Order API 호출을 실행합니다. 다음으로 주문이 Azure Service Bus 인스턴스에서 메시지로 큐에 대기된 다음 처리에 대한 배송 함수를 트리거합니다.</p>


  <h2>마이크로 서비스 기반 아키텍처에서 외부 API 통신을 관리하는 주요 이유</h2>


  <p>제안된 아키텍처에는 외부에서의 통신이 처리되는 방식에 근본적인 문제가 있습니다.</p>


  <ul>
   <li>클라이언트 애플리케이션은 내부 마이크로 서비스에 결합됩니다. 마이크로 서비스를 분할, 병합 또는 다시 쓰려는 경우 특히 부담이 됩니다.</li>
   <li>API는 동일한 도메인 또는 IP 주소 아래에 표시되지 않습니다.</li>
   <li>일반적인 API 규칙은 마이크로 서비스에서 쉽게 적용할 수 없습니다.</li>
   <li>API 변경 내용을 관리하고 새 버전을 도입하는 것은 어렵습니다.</li>
  </ul>


  <p><a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-proxies" target="_blank">Azure Functions 프록시는</a> 통합 API 평면을 제공하지만 다른 시나리오에서는 부족합니다. <a href="https://azure.microsoft.com/en-us/blog/announcing-azure-api-management-for-serverless-architectures/" target="_blank">이제 서버리스 소비 계층에서 사용할 수</a> 있는 <a href="https://aka.ms/apimlearn" target="_blank">Azure API Management</a>를 사용하여 Azure Functions를 전면에 배치하여 제한 사항을 해결해야 합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7cacb6d7-e97b-43ae-872a-b09806048630.png"><img alt="Flowchart showing the fronting of Azure API Managemnet to Azure Functions" border="0" height="353" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f4450b7e-e152-438c-9d91-8e4fd6af62ad.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Azure API Managemnet에서 Azure Functions로의 전면을 보여 주는 순서도" width="640"></a></p>


  <p><strong>API Management는 구현에서 API를 추상화하고 동일한 도메인 또는 고정 IP 주소로 호스트합니다</strong>. 이를 통해 내부 마이크로 서비스에서 클라이언트 애플리케이션을 분리할 수 있습니다. Azure API Management의 모든 API는 호스트 이름과 고정 IP 주소를 공유합니다. 사용자 지정 도메인을 할당할 수도 있습니다.</p>


  <p><strong>API Management를 사용하면 Azure API Management에서 API를 집계하고 마이크로 서비스를 직접 노출하지 않음으로써 API를 보호합니다</strong>. 이렇게 하면 잠재적인 공격에 대한 노출 영역을 줄일 수 있습니다. 구독 키, JWT 토큰, 클라이언트 인증서 또는 사용자 지정 헤더를 사용하여 API 요청을 인증할 수 있습니다. 트래픽은 신뢰할 수 있는 IP 주소로만 필터링될 수 있습니다.</p>


  <p><strong>API Management를 사용하면 API에 대한 규칙을 실행할 수도 있습니다</strong>. 들어오는 요청 및 나가는 응답에 대한 API 정책을 전역적으로, API별 또는 API 작업별로 정의할 수 있습니다. 인증 방법, 제한, 캐싱 및 변환과 같은 약 50개의 정책이 있습니다. <a href="https://docs.microsoft.com/en-us/azure/api-management/api-management-policies" target="_blank">API Management 정책</a> 설명서를 &ldquo; 방문하여 자세히 알아보세요.&rdquo;</p>


  <p><strong>API Management는 변경 API를 간소화합니다</strong>. 디자인 단계에서 새 버전 또는 수정 버전 도입에 이르기까지 전체 수명 주기 동안 API를 관리할 수 있습니다. 버전에는 수정 버전과 달리 API 작업 제거 또는 인증 변경과 같은 주요 변경 내용이 포함되어야 합니다.</p>


  <p><strong>API Management를 사용할 때 API를 모니터링할 수도 있습니다</strong>. Azure API Management 인스턴스에서 사용 메트릭을 볼 수 있습니다. <a href="https://azure.microsoft.com/en-us/services/monitor/" target="_blank">Azure Application Insights</a> API 호출을 기록하여 차트를 만들고, 라이브 트래픽을 모니터링하고, 디버깅을 간소화할 수 있습니다.</p>


  <p><strong>API Management를 사용하면 외부 개발자에게 API를 쉽게 게시할 수 있습니다</strong>. Azure API Management는 방문자가 API를 검색하고, API를 사용하고, 대화형으로 사용해 본 다음, OpenAPI 사양을 다운로드하고, 마지막으로 등록하여 API 키를 획득할 수 있는 자동으로 생성된 완전히 사용자 지정 가능한 웹 사이트인 개발자 포털과 함께 제공됩니다.</p>


  <h2>마이크로 서비스와 함께 API Management를 사용하는 방법</h2>


  <p>Azure API Management는 최근 <a href="https://azure.microsoft.com/en-us/blog/announcing-azure-api-management-for-serverless-architectures/" target="_blank">새 가격 책정 계층에서 사용할 수 있게</a> 되었습니다. <a href="https://aka.ms/apimpricing" target="_blank">실행당 청구를</a> 사용하는 경우 소비 계층은 마이크로 서비스 기반 아키텍처 및 이벤트 기반 시스템에 특히 적합합니다. 예를 들어 가상의 온라인 스토어에 적합한 선택입니다.</p>


  <p>고급 시스템의 경우 <a href="https://aka.ms/apimfeatures" target="_blank">API Management의 다른 계층은 더 풍부한 기능 집합을 제공합니다</a>.</p>


  <p>선택한 서비스 계층에 관계없이 Azure API Management 인스턴스를 사용하여 Azure Functions를 쉽게 앞세울 수 있습니다. <a href="https://docs.microsoft.com/en-us/azure/api-management/import-function-app-as-api" target="_blank">Azure API Management를 시작하는</a> 데 몇 분밖에 걸리지 않습니다.</p>
