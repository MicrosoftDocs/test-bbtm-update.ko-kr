### YamlMime:Yaml
ms.openlocfilehash: ded9d8993b485288ce1e33da8566724badb45a89
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900893"
Slug: scaling-microsoft-kaizala-on-azure
Title: Azure에서 Microsoft Kaizala 크기 조정
Summary: >+
  Microsoft Kaizala 모바일 전용 사용자를 위한 보안 작업 관리 및 모바일 메시징 앱입니다. 현재는 가정에서의 작업과 관련된 사용량 증가로 인해 엔터프라이즈급 생산성 앱을 관리하고 스케일링하는 방법에 대한 몇 가지 학습을 공유하고 있습니다.

Content: >-
  <p aria-level="1" paraeid="{a0c48b0b-30e3-4ded-96ce-285339384be2}{197}" paraid="694240638" role="heading">이 게시물은 <i>아누브하브 메헨드루</i><em>, 그룹 엔지니어링 매니저, Kaizala</em> <em>의해 공동 저술되었다</em>.</p>


  <p paraeid="{a0c48b0b-30e3-4ded-96ce-285339384be2}{225}" paraid="673204634">모바일 전용 작업자는 작업을 완료하기 위해 <a href="https://www.microsoft.com/en-us/microsoft-365/business/microsoft-kaizala" target="_blank">Microsoft Kaizala</a>&mdash; 간단하고 안전한 작업 관리 및 모바일 메시징 앱&mdash;에 의존합니다. COVID-19는 우리 중 많은 사람들이 전 세계에서 집에서 일하도록 강요했기 때문에 Kaizala 사용량은 COVID-19 이전에서 3 배 가까이 급증했습니다. 이는 제품이 성장할 수 있는 좋은 기회이지만, 고객이 약속한 SLA를 99.99%로 유지하면서 서비스 확장과 함께 서비스 규모를 조정해야 한다는 엔지니어링 팀의 압박이 증가했습니다.</p>


  <p>오늘날에는&rsquo; 엔터프라이즈급 보안 생산성 앱과 그 뒤에 있는 백 엔드 서비스를 관리하고 확장하는 방법에 대한 몇 가지 학습을 공유합니다.</p>


  <h2>Kaizala 기초</h2>


  <p>Kaizala 주로 모바일 전용 사용자를 대상으로 하는 생산성 도구이며 핵심 클라우드 플랫폼으로 Microsoft Azure 마이크로 서비스 아키텍처를 기반으로 합니다. 워크로드는 Azure SQL <a href="https://azure.microsoft.com/en-us/services/sql-database/" target="_blank">DB</a> 및 <a href="https://azure.microsoft.com/en-us/services/storage/blobs/" target="_blank">Azure Blob Storage</a> 주 스토리지에 사용되는 Azure <a href="https://azure.microsoft.com/en-us/services/cloud-services/" target="_blank">Cloud Services</a>에서 실행됩니다. <a href="https://azure.microsoft.com/en-us/services/cache/" target="_blank">Azure Cache for Redis</a>를 사용하여 캐싱을 처리하고<a href="https://azure.microsoft.com/en-us/services/service-bus/" target="_blank">, Azure Service Bus</a> 및 <a href="https://azure.microsoft.com/en-us/services/notification-hubs/" target="_blank">Azure Notification Hub</a>는 이벤트의 비동기 처리를 관리합니다. <a href="https://azure.microsoft.com/en-us/services/active-directory/" target="_blank">Azure AD(Azure Active Directory)</a>는 사용자 인증에 사용됩니다. 데이터 분석을 위해 <a href="https://azure.microsoft.com/en-us/services/data-explorer/" target="_blank">Azure Data Explorer</a> 및 <a href="https://azure.microsoft.com/en-us/services/monitor/" target="_blank">Azure Monitoring을</a> 사용합니다. <a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/what-is-azure-pipelines?view=azure-devops" target="_blank">Azure Pipelines</a> 높은 신뢰도로 일주일에 여러 번 업데이트를 신속하게 배포할 수 있는 자동화된 안전한 배포에 사용됩니다.</p>


  <p>안전한 배포 프로세스를 수행하여 고객에게 미치는 영향을 최소화하고 노출 및 롤백 기능을 완전히 제어하는 새로운 기능 및 최적화를 단계별 릴리스로 준비합니다.</p>


  <p>또한 사용자/그룹 또는 테넌트 집합에 새 기능을 노출하는 등 모든 구성을 제어할 수 있는 중앙 집중식 구성 관리 시스템을 사용합니다. Msg 처리 속도, 영수증 처리, 사용자 분류, 우선 순위 처리, 비코어 기능 속도 저하 등에 대한 제어를 세분화했습니다. 이를 통해 사용자 집합에 대한 새로운 기능 및 최적화를 신속하게 프로토타입화할 수 있습니다.</p>


  <h2>주요 복원력 전략</h2>


  <p>다음과 같은 주요 복원력 전략을 사용합니다.</p>


  <h3>API 속도 제한</h3>


  <p>기존 서비스가 오용되는 것을 방지하려면 안전한 한도 내에서 여러 클라이언트에서 들어오는 수신 호출을 제어해야 합니다. 고객 작업에 미미한 대기 시간 영향을 미치는 작업을 수행하는 메모리 내 캐싱을 기반으로 속도 제한기를 완전히 통합했습니다.</p>


  <h3>최적화된 캐싱</h3>


  <p>최적의 사용자 환경을 제공하기 위해 여러 컴퓨팅 노드가 Azure Redis PubSub를 사용하여 상태 변경 내용을 신속하게 동기화할 수 있는 제네릭 메모리 내 캐싱 인프라를 만들었습니다. 이 기능을 사용하면 많은 수의 외부 API 호출을 방지하여 SQL 부하를 효과적으로 줄였습니다.</p>


  <h3>중요한 작업의 우선 순위 지정</h3>


  <p>고객 트래픽이 많기 때문에 서비스 오버로드가 발생하는 경우 영수증과 같은 비코어 작업보다 메시징과 같은 중요한 고객 작업의 우선 순위를 지정합니다.</p>


  <h3>핵심 구성 요소 격리</h3>


  <p>이제 메시징을 지원하는 핵심 시스템 구성 요소가 다른 비코어 부분과 완전히 격리되어 오버로드가 핵심 메시징 작업에 영향을 주지 않습니다. 격리는 별도의 컴퓨팅 노드, 이벤트 처리를 위한 별도의 서비스 버스 및 비코어 작업에 대한 완전히 별도의 스토리지와 같은 모든 리소스 수준에서 수행됩니다.</p>


  <h3>노드 내 통신 감소</h3>


  <p>많은 노드 내 종속성을 유발하고 전체 메시지 처리 속도를 저하시키는 노드 내 통신 시나리오를 크게 줄인 메시지 처리 시스템에서 여러 가지 향상된 기능을 만들었습니다.</p>


  <h3>제어된 서비스 출시</h3>


  <p>새로운 기능 및 최적화의 제어된 출시를 보장하여 고객에게 미치는 영향을 최소화하고 부정적인 영향을 최소화하기 위해 출시 프로세스에서 몇 가지 변경을 수행했습니다. 배포는 가동 중지 시간을 방지하기 위해 고객 부하가 최소인 이른 아침 슬롯으로 이동되었습니다.</p>


  <h3>모니터링 및 원격 분석</h3>


  <p>특정 모니터링 대시보드를 설정하여 CPU 사용량, 스레드 수, GC(가비지 수집) 속도, 들어오는 메시지 속도, 처리되지 않은 메시지, 잠금 경합률 및 연결된 클라이언트와 같은 중요한 매개 변수를 모니터링하는 서비스 상태에 대한 빠른 개요를 제공합니다.</p>


  <h3>GC 속도</h3>


  <p>고객 작업 중에 GC의 대기 시간을 최소화하기 위해 웹 및 작업자 인스턴스의 요구에 따라 클라우드 서비스에서 발생하는 Gen2 GC 속도를 제어하는 옵션을 미세 조정했습니다.</p>


  <h3>노드 분할</h3>


  <p>일관된 해시 메커니즘을 사용하여 소유권 책임을 분산하려면 여러 노드에서 사용자를 분할해야 합니다. 이 마스터 소유권은 필요한 사용자&#39;정보만 특정 노드의 메모리 내 캐시에 저장되도록 하는 데 도움이 됩니다.</p>


  <h3>활성 수동 사용자</h3>


  <p>대규모 그룹 메시징 작업에서는 많은 사용자가 활성 상태인 동안 앱을 적극적으로 사용하는 사용자가 항상 있습니다. 우리의 아이디어는 마지막 버킷 활성 사용자가 메시지를 빠르게 수신하도록 활성 사용자에 대한 메시지 배달의 우선 순위를 지정하는 것입니다.</p>


  <h3>Serialization 최적화</h3>


  <p>기본 JSON 직렬화는 입력 출력 작업이 매우 빈번하고 귀중한 CPU 주기를 구울 때 비용이 많이 듭니다. ProtoBuf는 대규모 데이터 구조에 대한 작업을 최적화하는 데 활용된 빠른 이진 serialization 프로토콜을 제공합니다.</p>


  <h3>컴퓨팅 크기 조정</h3>


  <p>내부 다중 테스트 및 크기 조정 환경에서 컴퓨팅 사용량을 다시 평가하고 필요에 따라 최적화하고 COGS(제품 판매 비용)를 최적화하기 위해 계산 노드 SKU를 신중하게 줄입니다. Azure 지역의 대부분의 트래픽은 낮에 있지만 중복 데이터 정리, 캐시 정리, GC, 데이터베이스 다시 인덱싱 및 규정 준수 작업과 같은 많은 작업을 수행하는 데 활용하는 야간에는 최소한의 부하가 있습니다.</p>


  <h3>스토리지 스케일링:</h3>


  <p>규모가 증가함에 따라 백 엔드 서비스에서 영수증의 부하가 커지면서 많은 스토리지가 사용되었습니다. 중요 작업에는 매우 일관된 데이터가 필요하지만 중요하지 않은 작업에 대한 요구 사항은 적습니다. 영수증을 SQL 스토리지의 10분의 1에 해당되는 고가용성 SQL 스토리지로 이동했습니다.</p>


  <p>백그라운드 작업에 대한 쿼리는 SQL 스토리지의 전체 최대 부하를 줄이기 위해 지연적으로 분산되었습니다. 중요하지 않은 특정 작업은 최종 일관성 모델에서 최종 일관성 모델로 이동되어 최대 스토리지 부하를 평면화하여 추가 사용자를 위한 더 많은 용량을 생성했습니다.</p>


  <h2>향후 계획</h2>


  <p>COVID-19 상황이 계속 심각한 상황으로, 우리는 여러 고객의 Kaizala 채택의 가속 속도를 기대하고있다. 메시징 부하의 증가와 높은 고객 사용량을 따라잡기 위해 다음과 같은 곡선보다 앞서나갈 수 있도록 새로운 향상된 기능 및 최적화를 위해 노력하고 있습니다.</p>


  <ul>
      <li>사용자가 앱을 적극적으로 사용하는 대체 메시징 흐름을 개발하면 백 엔드 시스템이 오버로드된 경우에도 그룹 메시지를 직접 끌어올 수 있습니다. 메시지 배달은 수동 사용자보다 활성 사용자에게 우선 순위가 지정됩니다.</li>
      <li>부실 데이터를 최소화하면서 캐시를 동기화 상태로 유지하기 위해 빠른 사용자 응답 및 대체 디자인을 사용할 수 있도록 데이터 엔터티의 분산 메모리 내 캐싱을 적극적으로 작업합니다.</li>
      <li>현재 VM(가상 머신) 기반 모델에서 컨테이너 기반 배포 모델로 전환하여 더 민첩성을 가져오고 운영 비용을 절감합니다.</li>
      <li>단일 연결에서 일괄 처리된 데이터 플러시를 지원하는 대규모 소비자 그룹에 대한 대규모 쓰기 작업으로 잘 확장되는 대체 스토리지 메커니즘을 탐색합니다.</li>
      <li>데이터 센터 중단으로 인한 가동 중지 시간을 최소화하고 RTO(복구 시간 목표) 및 RPO(복구 지점 목표)를 최소화하기 위해 활성-활성 서비스 구성에 대한 아이디어를 적극적으로 탐색합니다.</li>
      <li>비코어 기능 중 일부를 수동 배율 단위로 이동하여 대기 컴퓨팅/스토리지 리소스를 활용하는 방법을 탐색합니다.</li>
      <li>사용자 로드가 최대 부하의 5분의 1 미만인 야간 시간 동안 컴퓨팅 노드 수를 자동으로 줄일 수 있는 Azure Cloud 서비스의 동적 크기 조정 기능을 평가합니다.</li>
  </ul>
