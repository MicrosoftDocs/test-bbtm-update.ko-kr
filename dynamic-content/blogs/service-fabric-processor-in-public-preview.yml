### YamlMime:Yaml
ms.openlocfilehash: e8d4f0be0283ae796357b90be60ddcdf36d10619
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900731"
Slug: service-fabric-processor-in-public-preview
Title: 공개 미리 보기의 Service Fabric 프로세서
Summary: 신뢰할 수 있는 컬렉션을 활용하여 Service Fabric Processor를 사용하여 Event Hubs에서 이벤트를 처리합니다. 이 새 라이브러리를 사용하면 파티션을 관리하고 정교한 부하 분산을 제공할 수 있습니다.
Content: >-
  <p>Azure Event Hubs용 Microsoft 클라이언트에는 항상 두 가지 수준의 추상화가 있었습니다. 애플리케이션에서 최대 제어를 허용할 뿐만 아니라 애플리케이션이 이벤트 허브의 구성을 이해하고 각 파티션에 연결된 이벤트 수신기를 유지 관리하도록 강제하는 이벤트 발신자 및 수신자 클래스를 포함하는 하위 수준 클라이언트가 있습니다. 해당 하위 수준 클라이언트 위에 빌드된 상위 수준 라이브러리인 이벤트 프로세서 호스트는 수신 쪽에 대한 대부분의 세부 정보를 숨깁니다. 이벤트 프로세서 호스트는 여러 호스트 인스턴스에 Event Hub 파티션의 소유권을 자동으로 분산하고 애플리케이션에서 제공하는 처리 방법에 이벤트를 전달합니다.</p>


  <p>Service Fabric 애플리케이션을 분할된 데이터베이스로 분할하고 여러 컴퓨팅 노드에 분할된 데이터베이스를 배포하기 위한 일반화된 프레임워크인 또 다른 Microsoft 제공 라이브러리입니다. 많은 고객이 애플리케이션에 Service Fabric 사용하고 있으며 일부 애플리케이션은 Event Hub에서 이벤트를 수신해야 합니다. Service Fabric 애플리케이션 내에서 이벤트 프로세서 호스트를 사용할 수 있지만 우아하지 않고 중복됩니다. 이 조합은 노드 간에 부하를 분산하려고 시도하는 두 개의 개별 계층이 있으며 둘 다 다른 계층을 인식하지 못했음을 의미합니다. 또한 이벤트 프로세서 호스트 인스턴스가 파티션 소유권을 조정하는 데 사용하는 방법인 Azure Storage 종속성 및 관련 비용을 소개합니다.</p>


  <p>Service Fabric Processor는 Service Fabric 직접 통합된 이벤트 허브의 이벤트를 사용하기 위한 새로운 라이브러리로, 파티션 관리, 신뢰할 수 있는 스토리지 및 보다 정교한 부하 분산을 위해 Service Fabric&#39;기능을 사용합니다. 동시에 이벤트 프로세서 호스트를 사용하는 모든 사용자에게 친숙한 간단한 프로그래밍 인터페이스를 제공합니다. Service Fabric 프로세서가 부과하는 유일한 요구 사항은 실행되는 Service Fabric 애플리케이션이 사용하는 이벤트 허브와 동일한 수의 파티션을 가져야 한다는 것입니다. 이렇게 하면 Event Hub 파티션을 애플리케이션 파티션에 한 번 매핑할 수 있으며 부하를 가장 효과적으로 분산할 Service Fabric 있습니다.</p>


  <p>Service Fabric 프로세서는 현재 미리 보기 상태이며 <a href="https://www.nuget.org/packages/Microsoft.Azure.EventHubs.ServiceFabricProcessor/" target="_blank">Microsoft.Azure.EventHubs.ServiceFabricProcessor</a>&rdquo; 웹 페이지의 NuGet &ldquo; 사용할 수 있습니다. 소스 코드는 <a href="https://github.com/Azure/azure-event-hubs-dotnet" target="_blank">.NET Event Hubs 클라이언트 리포지토리</a>에서 GitHub. GitHub 사용할 수 있는 <a href="https://github.com/Azure/azure-event-hubs/tree/master/samples/DotNet/ServiceFabricProcessor" target="_blank">샘플 애플리케이션</a>을 찾을 수도 있습니다.</p>


  <p>개발자&#39;관점에서 Service Fabric Processor를 사용하여 애플리케이션을 만드는 두 가지 주요 요소가 있습니다. 첫 번째 조각은 <strong>IEventProcessor</strong> 인터페이스를 구현하는 클래스를 만드는 것입니다. <strong>IEventProcessor</strong> 는 파티션에 대한 처리를 시작할 때 호출되는 메서드(<strong>OpenAsync</strong>), 처리가 종료될 때(<strong>CloseAsync</strong>), 오류가 발생했을 때 알림 처리(<strong>ProcessErrorAsync</strong>) 및 들어오는 이벤트 처리(<strong>ProcessEventsAsync</strong>)를 지정합니다. 마지막 방법은 애플리케이션&#39;비즈니스 논리가 진행되는 위치이며 대부분의 애플리케이션의 핵심 부분입니다.</p>


  <p>두 번째 조각은 애플리케이션&#39;기능을 실행하기 위해 Service Fabric 호출되는 애플리케이션&#39;<strong>RunAsync</strong> 메서드에 코드를 추가하여 Service Fabric 통합합니다. 기본 단계는 다음과 같습니다.</p>


  <ul>
      <li>
      <p><strong>EventProcessorOptions</strong>의 인스턴스를 만들고 원하는 옵션을 설정합니다.</p>
      </li>
      <li>
      <p><strong>IEventProcessor</strong> 구현의 인스턴스를 만듭니다. 이 파티션에 대한 이벤트를 처리하는 데 사용되는 인스턴스입니다.</p>
      </li>
      <li>
      <p><strong>ServiceFabricProcessor 인스턴스를</strong> 만들어 옵션 및 프로세서 개체를 생성자에 전달합니다.</p>
      </li>
      <li>
      <p>이벤트 처리를 시작하는<strong> ServiceFabricProcessor</strong> 인스턴스에서 <strong>RunAsync</strong>를 호출합니다.</p>
      </li>
  </ul>


  <h2>다음 단계</h2>


  <p>자세한 내용은 GitHub 사용할 수 있는 <a href="https://github.com/Azure/azure-event-hubs/blob/master/samples/DotNet/ServiceFabricProcessor/ProgrammersGuide.md" target="_blank">프로그래밍 가이드</a>를 따르세요. 이 블로그 게시물을 즐기셨나요? 아래의 코멘트 섹션에서 생각과 피드백을 남겨 두는 것을 잊지&#39;. 제품 페이지를 방문하여 <a href="https://aka.ms/eventhubs" target="_blank">Event Hubs</a> 에 대해 자세히 알아볼 수도 있습니다.</p>
