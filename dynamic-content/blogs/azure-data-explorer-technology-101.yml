### YamlMime:Yaml
ms.openlocfilehash: 62dfbae0f601d8f081fe499275586f8ecc39e5f7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908644"
Slug: azure-data-explorer-technology-101
Title: Azure Data Explorer 기술 101
Summary: '자체적인 문제 해결 요구 사항을 위해 Azure Data Explorer 팀은 서비스에서 생성된 대규모 원격 분석 데이터 스트림에서 임시 쿼리를 실행하려고 했습니다. 적합한 솔루션을 찾지 못했습니다. '
Content: >-
  <p>Imagine 매일 수백억 개의 레코드를 수락할 수 있는 클라우드 서비스를 설계해야 합니다. (2) 이 데이터를 몇 주 또는 몇 달 동안 안정적으로 저장하고, (3) 데이터에 대한 복잡한 분석 쿼리에 응답하고, (4) 데이터 수집에서 쿼리까지 짧은 대기 시간(초)을 유지 관리하고, 마지막으로 (5) 데이터가 구조화된 경우에도 초 단위로 해당 쿼리를 완료합니다.  반구조화되고 자유 텍스트인가요?</p>


  <p>이 작업은 Kusto&rdquo; 코드 이름으로 &ldquo;<a href="https://azure.microsoft.com/services/data-explorer/" target="_blank">Azure Data Explorer</a> 클라우드 서비스를 개발하기 시작할 때 수행한 작업입니다. 초기 핵심 팀은 Microsoft Power BI 서비스에서 작업하는 4명의 개발자로 구성되었습니다. 자체적인 문제 해결 요구 사항을 위해 서비스에서 생성된 대규모 원격 분석 데이터 스트림에서 임시 쿼리를 실행하려고 했습니다. 적합한 솔루션을 찾지 못했습니다.</p>


  <p>알고 보니 Microsoft에서 이러한 종류의 기술이 필요한 유일한 사람은 아니었&rsquo;습니다. 몇 달 만에 첫 번째 내부 고객이 있었고 서비스 채택은 꾸준히 상승하기 시작했습니다.</p>


  <p>거의 5년이 지난 지금, 우리의 발명품은 이제 공개 미리 보기로 제공됩니다. <a href="https://myignite.techcommunity.microsoft.com/sessions/66692" target="_blank">Scott Guthries&rsquo; 기조연설을</a><strong> </strong>시청하고 <a href="https://aka.ms/ade.blog.pulicpreviewlaunch" target="_blank">Azure Data Explorer 공지 블로그</a>에서 공개한 내용&rsquo;에 대해 자세히 확인할 수 있습니다. 이 블로그 게시물에서는 Azure Data Explorer 뒤에 있는 기술의 기본 사항에 대해 설명합니다. 자세한 내용은 향후 <a href="https://aka.ms/ade.techwhitepaper" target="_blank">기술 백서</a>에서 확인할 수 있습니다.</p>


  <h2>Azure 데이터 탐색기란?</h2>


  <p>Azure Data Explorer는 구조화되고 반구조화되고 구조화되지 않은 데이터를 수집한 클라우드 서비스입니다. 그런 다음, 서비스는 이 데이터를 저장하고 몇 초의 대기 시간으로 분석 임시 쿼리에 응답합니다. 한 가지 일반적인 용도는 대규모 원격 분석 데이터 스트림을 수집하고 쿼리하는 것입니다. 예를 들어 Azure SQL Database 팀은 서비스를 사용하여 서비스 문제를 해결하고, 모니터링 쿼리를 실행하고, 서비스 이상을 찾습니다. 이는 자동 수정 작업을 수행하기 위한 기초 역할을 합니다. Azure Data Explorer는 Microsoft Office 클라이언트 원격 분석 데이터 스트림을 저장하고 쿼리하는 데도 사용되며, Microsoft Office 엔지니어는 사용자가 개별 Microsoft Office 애플리케이션 제품군과 상호 작용하는 방법을 분석할 수 있습니다. 또 다른 예제에서는 Azure Monitor가 Azure Data Explorer를 사용하여 모든 로그 데이터를 저장하고 쿼리하는 방법을 보여 줍니다. 따라서 Azure Monitor 쿼리를 작성하거나 활동 로그를 탐색한 적이 있는 경우 이미 서비스 사용자입니다.</p>


  <p>Azure Data Explorer를 사용하는 사용자는 기존 관계형 데이터 모델로 구성된 데이터를 볼 수 있습니다. 데이터는 테이블로 구성되며 테이블의 모든 데이터 레코드는 강력한 형식의 스키마입니다. 테이블 스키마는 순서가 지정된 열 목록이며 각 열에는 이름과 스칼라 데이터 형식이 있습니다. 스칼라 데이터 형식(예: int, real, datetime 또는 timespan), 반구조적(동적) 또는 자유 텍스트(문자열)를 구조화할 수 있습니다. 동적 형식은 다른 스칼라 형식, 배열 또는 이러한 값의 사전의 단일 값을 보유할 수 있는 JSON &ndash; 과 유사합니다. 테이블은 데이터베이스에 포함되며 단일 배포(노드 클러스터)는 여러 데이터베이스를 호스트할 수 있습니다.</p>


  <p>서비스의 기능을 설명하기 위해 아래는 팀에서 서비스 자체의 모든 원격 분석 데이터를 보관하는 데 사용하는 데이터베이스의 몇 가지 숫자입니다. 이 데이터베이스의 가장 큰 테이블은 하루에 약 2,000억 개의 레코드(총 약 1.6PB의 원시 데이터)를 허용하며, 해당 테이블의 데이터는 문제 해결을 위해 14일 동안 보존됩니다.</p>


  <p>이 2,000억 개의 레코드를 계산하는 데 사용한 쿼리를 완료하는 데 약 1.2초가 걸렸습니다.</p>


  <pre>

  KustoLogs | where Timestamp &gt; ago(1d) | count</pre>


  <p>이 쿼리를 실행하는 동안 서비스는 자체에 새 로그를 보냈습니다(동일한 <code>KustoLogs </code>테이블로). 다음은 상관 관계 ID에 따라 해당 로그를 모두 검색하는 쿼리입니다. 여기서는 has 연산자를 사용하여 열에 <code>ClientActivityId </code>용어 인덱스를 사용하도록 강제하여 일반적인 문제 해결 지점 쿼리를 시뮬레이션합니다.</p>


  <pre>

  KustoLogs | where Timestamp &gt; ago(1d) | where ClientActivityId has &quot;4c8fcbab-6ad9-491d-8799-9176fabaf93e&quot;</pre>


  <p>이 쿼리는 훨씬 더 많은 데이터가 반환되더라도 이전 쿼리보다 빠르게 완료하는 데 약 1.1초가 걸렸습니다. 이는 두 개의 인덱스가 타임스탬프 열의 인덱스와 (문자열) 열<code>ClientActivityId </code>에 하나씩 함께 &ndash; 사용되기 때문입니다.</p>


  <h2>데이터 스토리지</h2>


  <p>스토리지/쿼리 엔진의 핵심은 열 저장소, 텍스트 인덱싱 및 데이터 분할이라는 세 가지 매우 성공적인 기술의 고유한 조합입니다. 분할된 열 저장소에 데이터를 저장하면 열 순서로 정렬된 데이터가 행 순서에 저장된 데이터보다 더 잘 압축되므로 거대한 데이터 집합을 저장할 수 있습니다. 분할을 통해 사용 가능한 모든 컴퓨팅 리소스를 활용할 수 있고 열의 데이터를 정렬하면 시스템에서 특정 쿼리에 필요하지 않은 열에 데이터가 로드되지 않도록 할 수 있으므로 쿼리 성능도 향상됩니다. 텍스트 인덱스 및 기타 인덱스 형식을 사용하면 쿼리가 테이블&rsquo; 원시 데이터에 기반할 때 레코드의 전체 일괄 처리를 효율적으로 건너뛸 수 있습니다.</p>


  <p>기본적으로 데이터는 하나 이상의 Blob으로 구성된 각 데이터 분할된 데이터베이스와 함께 Azure Blob에 저장됩니다. 수집 프로세스를 통해 만들어진 데이터 분할은 변경할 수 없습니다. 데이터 분할된 데이터베이스 자체가 삭제될 때까지 모든 스토리지 아티팩트가 변경 없이 동일하게 유지됩니다. 여기에는 다음과 같은 중요한 의미가 있습니다.</p>


  <ol>
      <li>클러스터의 여러 컴퓨팅 노드가 복잡한 변경 관리 조정 없이 데이터 분할된 데이터베이스를 캐시할 수 있습니다.</li>
      <li>이를 통해 여러 컴퓨팅 클러스터가 동일한 데이터 분할된 데이터베이스를 참조할 수 있습니다.</li>
      <li>기존 스토리지 아티팩트 부분을 외과적으로 수정&rdquo;하는 복잡한 코드가&rsquo; 없으므로 &ldquo;시스템에 견고성을 더합니다.</li>
      <li>데이터 분할된 &ldquo;데이터베이스의 스토리지 아티팩트가 하드 삭제되지 않는 한 이전 스냅샷으로 시간을&rdquo; 거슬러 이동할 수 있습니다.</li>
  </ol>


  <p>Azure Data Explorer는 기술용으로 사용자 지정 빌드된 데이터 분할 스토리지 아티팩트에 고유한 소유 형식을 사용합니다. 예를 들어 스토리지 아티팩트가 쿼리하는 프로세스에 의해 메모리 매핑될 수 있도록 형식이 빌드되고 데이터 분할된 데이터베이스의 인덱스 전용 병합을 포함하여 기술에 고유한 데이터 관리 작업을 허용합니다. 쿼리하기 전에 데이터를 변환할 필요가 없습니다.</p>


  <h2>줄 속도로 인덱싱</h2>


  <p>자유 텍스트 열과 동적(JSON과 유사한) 열을 줄 속도로 인덱싱하는 기능은 열 저장소 원칙을 기반으로 하는 다른 많은 데이터베이스와 차별화되는 기술 중 하나입니다. 실제로 반전된 텍스트 인덱스 빌드(블룸 필터는 낮은 카디널리티 인덱스에 사용되지만 자유 텍스트 필드에는 거의 유용하지 않습니다)는 컴퓨팅 리소스(해시 테이블이 CPU 캐시 크기를 초과하는 경우가 많음) 및 Storage 리소스(반전된 인덱스 자체의 크기)의 복잡한 작업입니다.</p>


  <p>Azure Data Explorer에는 고유한 반전된 인덱스 디자인이 있습니다. 기본 사례에서는 모든 문자열 및 동적(JSON과 유사한) 열이 인덱싱됩니다. 열의 카디널리티가 높으면 열의 고유 값 수가 레코드 수에 접근한다는 것을 의미합니다. 엔진은 기본적으로 두 개의 &ldquo;트위스트가 있는 반전된 용어 인덱스를 만듭니다&rdquo;. 인덱스는 분할된 데이터베이스 수준에서 유지되므로 여러 데이터 분할된 데이터베이스를 여러 컴퓨팅 노드에서 병렬로 수집할 수 있으며 세분성이 낮으므로 각 용어에 대한 레코드별 적중/누락 정보를 보유하는 대신 약 1,000개의 레코드 블록당 이 정보만 유지합니다. 낮은 세분성 인덱스는 상관 관계 ID와 같이 드물게 발생하는 용어를 건너뛰는 데 여전히 효율적이며, 생성 및 로드가 더 효율적일&rsquo; 정도로 충분히 작습니다. 물론 인덱스가 적중을 나타내는 경우 레코드 블록을 검사하여 조건자와 일치하는 개별 레코드를 확인해야 하지만 대부분의 경우 이 조합으로 인해 성능이 훨씬 빨라집니다.</p>


  <p>세분성이 낮고 따라서 인덱스가 작으면 데이터 분할된 데이터베이스가 백그라운드에 저장되는 방식을 지속적으로 최적화할 수 있습니다. 작은 데이터 분할된 데이터베이스는 백그라운드 작업으로 함께 병합되어 압축 및 인덱싱이 향상됩니다. 예를 들어 포함된 데이터는 지속적으로 제공되므로 쿼리 대기 시간을 작게 유지하려고 합니다. 특정 크기를 초과하면 데이터 자체를 보유하는 스토리지 아티팩트가 병합되는 것을 중지하고, 엔진은 인덱스를 병합하기만 하면 됩니다. 이 인덱스는 일반적으로 충분히 작아서 병합하면 쿼리 성능이 향상됩니다.</p>


  <h2>열 압축</h2>


  <p>열의 데이터는 표준 압축 알고리즘에 의해 압축됩니다. 기본적으로 엔진은 <a href="https://en.wikipedia.org/wiki/LZ4_(compression_algorithm)" target="_blank">LZ4</a> 를 사용하여 데이터를 압축합니다. 이 알고리즘은 뛰어난 성능과 적절한 압축 비율을 하므로 데이터를 압축합니다. 실제로 데이터를 CPU 캐시로 이동할 때 데이터를 저장하는 것이 CPU 리소스의 압축을 해제할 가치가 있기 때문에 이 압축은 데이터를 압축 해제하는 대신 항상 선호되는 것으로 추정됩니다. <a href="https://en.wikipedia.org/wiki/Lempel–Ziv–Markov_chain_algorithm" target="_blank">LZMA</a> 및 <a href="https://en.wikipedia.org/wiki/Brotli" target="_blank">Brotli</a>와 같은 추가 압축 알고리즘이 지원되지만 대부분의 고객은 기본값만 사용합니다.</p>


  <p>엔진은 RAM 캐시에 로드되는 경우를 포함하여 항상 압축된 데이터를 보유합니다.</p>


  <p>한 가지 흥미로운 장단점은 Microsoft SQL Server Analysis Server 테이블 형식 모델에서 사용되는 수직 압축&rdquo;을 수행&ldquo;하지 않는 것입니다. 이 열 저장소 최적화는 데이터를 마지막으로 압축하고 저장하기 전에 데이터를 정렬하는 몇 가지 방법을 찾습니다. 그 결과 압축 비율이 향상되어 데이터 로드 및 쿼리 시간이 향상되는 경우가 많습니다. 이 최적화는 CPU 비용이 높기 때문에 Azure Data Explorer에서 방지할 수 있으며 쿼리에 데이터를 신속하게 사용할 수 있도록 합니다. 이 서비스를 통해 고객은 주요 쿼리 패턴이 있는 경우 기본 정렬 데이터 순서를 나타낼 수 있으며, 수직 압축을 최적화로 향후 백그라운드 작업으로 만들 수 있습니다.</p>


  <h2>메타데이터 스토리지</h2>


  <p>Azure Data Explorer는 데이터와 함께 다음과 같이 데이터를 설명하는 메타데이터도 유지 관리합니다.</p>


  <ol>
      <li>데이터베이스에 있는 각 테이블의 스키마</li>
      <li>데이터 수집, 쿼리 및 백그라운드 그루밍 작업 중에 사용되는 다양한 정책 개체</li>
      <li>보안 정책</li>
  </ol>


  <p>메타데이터는 변경할 수 없는 Azure Blob Storage 아티팩트의 데이터 스토리지 &ndash; 와 동일한 원칙에 따라 저장됩니다. 변경할 수 없는 유일한 Blob은 &ldquo;최신 메타데이터 스냅샷과 관련된 스토리지 아티팩트를 나타내는 HEAD&rdquo; 포인터 Blob입니다. 이 모델에는 불변성으로 인해 위에서 언급한 모든 이점이 있습니다.</p>


  <h2>컴퓨팅/Storage 격리</h2>


  <p>Azure 디자이너가 취한 초기 결정 중 하나는 컴퓨팅, Storage 및 네트워킹이라는 세 가지 기본 핵심 서비스 간에 격리를 보장하는&rsquo; 것이었습니다. Azure Data Explorer &ndash; 는 모든 영구 데이터가 Azure Blob Storage 유지되고 컴퓨팅에 보관된 데이터는 Azure Blob에 &ldquo;있는 데이터의 캐시에 불과하다&rdquo;고 생각할 수 있습니다. 여기에는 다음과 같은 몇 가지 중요한 이점이 있습니다.</p>


  <ol>
      <li>독립적인 스케일 아웃. 컴퓨팅을 독립적으로 확장할 수 있습니다(예: 동시에 실행되는 더 많은 쿼리로 인해 클러스터&rsquo; CPU 부하가 증가하는 경우)와 Storage(예: 초당 스토리지 트랜잭션 수가 한 지점으로 증가하는 경우 추가 Storage 리소스가 필요한 경우).</li>
      <li>오류에 대한 복원력. 오류가 발생할 경우 복잡한 데이터 마이그레이션 프로세스 없이 새 컴퓨팅 클러스터를 만들고 이전 Compute 클러스터에서 트래픽을 전환할 수 있습니다.</li>
      <li>컴퓨팅을 스케일 업하는 기능입니다. 새 클러스터가 이전 클러스터보다 더 높은 Compute SKU인 경우 위와 유사한 절차를 적용합니다.</li>
      <li>동일한 데이터를 사용하는 여러 컴퓨팅 클러스터. 동일한 데이터를 사용하는 클러스터가 여러 개 있을 수도 있습니다. 예를 들어 고객은 서로 다른 클러스터 간에 완전히 격리된 다른 워크로드를 실행할 수 있습니다. 하나의 클러스터는 리더&rdquo; 역할을 &ldquo;하며 Storage 쓸 수 있는 권한이 부여되고 다른 모든 클러스터는 팔로워&rdquo; 역할을 &ldquo;하며 해당 데이터에 대한 읽기 전용 모드에서 실행됩니다.</li>
      <li>더 나은 SKU 피트니스. 이는 스케일 아웃과 밀접한 관련이 있습니다. 서비스에서 사용하는 컴퓨팅 노드는 스토리지에 더 적합한 SKU를 사용하여 지속형 스토리지를 Azure Storage 처리할 수 있으므로 워크로드 요구 사항에 맞게 정확하게 조정할 수 있습니다.</li>
  </ol>


  <p>마지막으로,&rsquo; 데이터 복제를 통해 데이터를 안정적으로 저장하는 데 가장 적합한 &ndash; 작업을 수행하기 위해 Azure Storage 의존한다는 것입니다. 즉, 서비스 노드 간에 조정 작업이 거의 수행되어야 하므로 서비스가 상당히 간소화됩니다. 기본적으로 메타데이터 쓰기만 조정해야 합니다.</p>


  <h2>컴퓨팅 데이터 캐싱</h2>


  <p>Azure Data Explorer는 컴퓨팅 및 Storage 격리하는 데 신중을 기하지만 로컬 휘발성 SSD 스토리지를 캐시 &ndash; 로 최대한 활용하지만, 엔진에는 가장 관련성이 큰 데이터가 CPU에 최대한 가깝게&rdquo; 캐시&ldquo;되도록 하는 정교한 다중 계층 데이터 캐시 시스템이 있습니다. 이 시스템은 변경할 수 없는 데이터 분할된 데이터베이스 스토리지 아티팩트에 크게 의존하며 다음 계층으로 구성됩니다.</p>


  <ol>
      <li>Azure Blob Storage &ndash; 영구, 지속성 및 신뢰할 수 있는 스토리지</li>
      <li>Azure Compute SSD(또는 Managed Disks) &ndash; 휘발성 스토리지</li>
      <li>Azure Compute RAM &ndash; 휘발성 스토리지</li>
  </ol>


  <p>캐시 시스템의 흥미로운 측면은 압축된 데이터에서 완전히 작동한다는 것입니다. 즉, RAM에 있는 경우에도 데이터가 압축되고 실제 쿼리에 필요한 경우에만 압축이 해제됩니다. 이렇게 하면 제한/비용이 많이 드는 캐시 리소스를 최적으로 사용할 수 있습니다.</p>


  <h2>분산 데이터 쿼리</h2>


  <p>Azure Data Explorer 뒤에 있는 분산 데이터 쿼리 기술은 서비스가 대량의 비정형 데이터에 대해 임시 분석에서 &ndash; 뛰어난 성과를 발휘하도록 빌드된 시나리오의 영향을 크게 받습니다. 예를 들면 다음과 같습니다.</p>


  <ol>
      <li>이 서비스는 쿼리에서 생성된 모든 임시 데이터를 클러스터&rsquo; 집계 RAM에 보관된 휘발성 데이터로 처리합니다. 임시 결과는 디스크에 기록되지 않습니다. 여기에는 클러스터의 노드 간에 전송 중인 데이터가 포함됩니다.</li>
      <li>서비스에는 쿼리 시간 제한(약 4분)에 대한 다소 짧은 기본값이 있습니다. 사용자는 쿼리당 이 시간 제한을 늘리도록 요청할 수 있지만 여기서는 쿼리가 빠르게 완료되어야 한다고 가정합니다.</li>
      <li>서비스 쿼리는 모든 관련 데이터 분할 &ldquo;된 데이터베이스를 쿼리 계획에 스탬프로&rdquo; 찍어 스냅샷 격리를 제공합니다. 데이터 분할된 데이터베이스는 변경할 수  없기 때문에 쿼리 계획에서 데이터 분할된 데이터베이스의 조합을 참조하기만 하면 됩니다. 또한 쿼리는 시간 제한(기본적으로 4분, 최대 1시간까지 늘릴 수 있음)&rsquo;이 적용되므로 삭제 후 1시간 동안 데이터 분할 &ldquo;된 데이터베이스가 더&rdquo; 이상 새 쿼리에 사용할 수 없도록 보장할 수 있습니다.</li>
      <li>가장 주목할 만한 것은 이 서비스가 사용 편의성과 표현력 모두에 최적화된 새로운 쿼리 언어를 구현하는 것입니다. 사용자는 이 구문에 표현된 쿼리를 작성하고 읽는 것이 (마지막으로!) 즐겁다고 말합니다. 언어&rsquo; 계산 모델은 주로 관계형 데이터 모델을 위해 빌드된다는 SQL 유사하지만 구문 자체는 Unix 명령 파이프라인과 같은 데이터 흐름 언어를 기준으로 모델링됩니다.</li>
  </ol>


  <p>실제로 쿼리 언어를 중요한 단계로 간주하고 이를 중심으로 구축된 도구 집합은 채택을 추진한 서비스의 가장 중요한 측면 중 하나로 간주합니다. <a href="https://aka.ms/ade.ql" target="_blank">쿼리 언어</a>에 대한 자세한 정보를 찾을 수 있습니다. <a href="https://www.pluralsight.com/courses/kusto-query-language-kql-from-scratch" target="_blank">온라인 PluralSight 과정을</a> 수강할 수도 있습니다.</p>


  <p>엔진&rsquo; 분산 쿼리 계층의 흥미로운 기능 중 하나는 기본적으로 클러스터 간 쿼리를 지원하며, 최적화 프로그램은 쿼리 계획을 다시 정렬하여 두 개 이상의 클러스터 간에 교환되는 데이터의 양을 줄이기 위해 필요한 만큼 쿼리 &ldquo;가 다른 클러스터로 원격&rdquo; 되도록 지원한다는 것입니다.</p>


  <h2>요약</h2>


  <p>이 게시물&rsquo;에서는 Azure Data Explorer 뒤에 있는 기술의 기본 사항에 대해 설명했습니다. 우리는 앞으로 몇 주 안에 서비스에 대한 자세한 내용을 계속 공유 할 것입니다.</p>


  <p>Azure Data Explorer에 대해 자세히 알아보려면 다음을 수행할 수 있습니다.</p>


  <ul>
      <li><a href="https://azure.microsoft.com/services/data-explorer/" target="_blank">지금 미리 보기로 Azure Data Explorer를 사용해 보세요</a>.</li>
      <li>Azure Data Explorer에 대한 <a href="https://azure.microsoft.com/pricing/details/data-explorer" target="_blank">가격 책정 정보를 찾</a>습니다.</li>
      <li>Azure Data Explorer에 대한 <a href="https://docs.microsoft.com/en-us/azure/data-explorer/" target="_blank">액세스 설명서</a>입니다.</li>
  </ul>
