### YamlMime:Yaml
ms.openlocfilehash: fa5ff8c1981dce410bf047d02d3342c58807a6f1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898421"
Slug: azure-mobile-services-net-updates
Title: Azure Mobile Services .NET 업데이트
Summary: Azure Mobile Services .NET에 대한 최신 업데이트 일괄 처리에서 사용자 지정 인증, AAD, CORS 지원 등을 제공합니다.
Content: >-
  다음을 포함하여 <a href="https://azure.microsoft.com/mobile/">Azure Mobile Services .NET</a>에 대한 새로운 기능 집합을 출시했습니다.

  <ul>
   <li>서비스별, 컨트롤러별 또는 작업별 수준에서 CORS 정책을 지정하기 위한 첫 번째 클래스 지원을 사용하도록 설정하는 <a href="https://msdn.microsoft.com/en-us/magazine/dn532203.aspx">ASP.NET Web API CORS를 사용하는 CORS</a>에 대한 지원입니다.</li>
   <li>확장 가능한 인증 모델을 사용하여 모바일 서비스 클라이언트에 사용할 수 있는 인증 메커니즘을 제어할 수 있습니다. 예를 들어 Azure Active Directory, Twitter, Facebook, Google 및 Microsoft 계정에 대한 기본 지원 외에도 사용자 고유의 인증 메커니즘을 추가할 수 있습니다.</li>
   <li>서버 쪽 흐름을 사용하여 Azure Active Directory 인증을 지원하여 클라이언트 인증을 크게 간소화합니다.</li>
  </ul>

  &nbsp;


  Azure Mobile Services .NET을 접하는 경우 <a href="https://azure.microsoft.com/blog/2014/07/11/azure-mobile-services-why-should-asp-net-developers-care/">이 훌륭한 개요를 확인</a>하세요. 일반적으로 Azure Mobile Services 대한 자세한 내용은 <a href="https://azure.microsoft.com/mobile/">다음과 같습니다</a>.


  당신은 항상 우리가 우리의 <a href="https://social.msdn.microsoft.com/Forums/windowsazure/en-US/home?forum=azuremobile">MSDN 포럼</a> 을 통해 어떻게 생각하는지 알려 줄 수 있습니다 또는 당신은 나를 <a href="https://twitter.com/frystyk">@frystyk</a>트윗 할 수 있습니다.

  <h3>업데이트 가져오기</h3>

  모바일 서비스 빠른 시작에서 시작하든 Visual Studio Project 시작하든 관계없이 NuGet 업데이트(버전 1.0.342)를 가져올 수 <a href="https://nuget.org">있습니다.</a> <strong>Visual Studio 프로젝트의 NuGet 패키지 관리자</strong> 이동하여 <strong>업데이트를</strong> 선택하고 검색 창에 <strong>windowszure.mobileservices</strong>를 입력하기만 하면 됩니다. 다음과 같이 표시됩니다.


  <img style="float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; padding-right: 0px; margin-right: auto; border-width: 0px;" title="Azure Mobile Services 버전 1.0.342로 업데이트" alt="Updating to Azure Mobile Services version 1.0.342" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/NuGet342.png" width="610" height="423" border="0" />


  <strong>windowsazure.mobileservices</strong>를 검색하여 <strong>Mobile Services</strong> 업데이트를 설치하고 사용할 준비가 된 것입니다. 이러한 패키지에는 필요한 다른 업데이트가 포함되므로 다른 패키지를 수동으로 업데이트하지 마세요.

  <h3>CORS 지원</h3>

  먼저 ASP.NET Web API <a href="https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Cors/">CORS nuget 패키지</a>에서 제공하는 지원을 활용하여 CORS에 대한 기본 제공 지원입니다. <strong>EnableCorsAttribute</strong>를 사용하여 설정을 제어하는 방법을 포함하여 ASP.NET Web API CORS에 대한 유용한 소개는 <a href="https://msdn.microsoft.com/en-us/magazine/dn532203.aspx">ASP.NET Web API 2의 CORS 지원 블로그를</a> 참조하세요.


  기본적으로 Azure Mobile Services CORS 요청을 허용하지 않는 기본 정책을 사용하여 CORS를 사용하도록 설정합니다. 허용된 원본 도메인 목록을 설정하려는 경우 <a href="https://manage.windowsazure.com/">포털</a> 을 통해 또는 쉼표로 구분된 원본 값이 있는 <strong>MS_CrossDomainOrigins</strong> 앱 설정을 사용하여 구성을 통해 설정할 수 있습니다. 예를 들면 다음과 같습니다.

  <pre class="prettyprint">&lt;add key="MS_CrossDomainOrigins" value="https://testhost, https://sample" /&gt;</pre>

  이렇게 하면 두 원본 https://testhost 에서 액세스하고 https://sample 모든 HTTP 메서드 및 HTTP 헤더를 사용할 수 있습니다.


  서비스를 구성하는 데 사용되는 <strong>ConfigOptions</strong> 인스턴스를 수정하여 완전히 다른 기본 정책을 설정할 수 있습니다. 다음과 같은 작업을 수행하는 정책을 설정하기만 하면됩니다.

  <pre class="prettyprint">public static class WebApiConfig

  {
      public static void Register()
      {
          // Use this class to set configuration options for your mobile service
          ConfigOptions options = new ConfigOptions();
          options.CorsPolicy =
              new System.Web.Http.Cors.EnableCorsAttribute("*", "*", "*");
          ...
      }
  }</pre>

  언제나처럼 컨트롤러별 및/또는 작업별 기준으로 특정 CORS 정책을 설정하여 CORS를 사용하는 방법에 큰 유연성을 부여할 수도 있습니다.

  <h3>확장 가능한 인증 모델</h3>

  Azure Mobile Services Azure Active Directory, Twitter, Facebook, Google 및 Microsoft 계정에서 일반적인 인증 모델을 제공합니다. 그러나 이러한 로그인 공급자 외에도 이제 고유한 로그인 공급자를 추가하거나 기본 공급자를 수정하거나 제거할 수 있습니다.


  예를 들어 사용자 지정 인증 시작 설명서에 설명 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-get-started-custom-authentication/">된 대로 사용자 지정 인증</a>에 대한 지원을 추가할 수 있습니다. 다른 OWIN 인증 공급자를 활용하여 추가 ID 공급자에 대한 지원을 추가할 수도 있습니다. <strong>LoginProvider</strong>를 만들려면 <a href="https://www.nuget.org/packages/Owin.Security.Providers/">Owin.Security.Providers NuGet 패키지를</a> 사용하여 <a href="https://developer.linkedin.com/documents/authentication">LinkedIn</a>에 대한 지원을 추가하는 방법을 보여 줌으로써 아래 예시된 4단계가 필요합니다.


  먼저 세 가지 작업을 수행하는 LinkedIn 미들웨어를 대상으로 하는   <strong>aLoginProvider</strong> 구현을 만듭니다.

  <ul>
   <li>인증<strong>에 참여할</strong> 수 있도록 LinkedIn OWIN 미들웨어 등록</li>
   <li>LinkedIn에서 가져온 액세스 토큰 <strong>직렬화</strong></li>
   <li>액세스 토큰 다시 <strong>역직렬화</strong></li>
  </ul>

  코드는 다음과 유사하게 표시됩니다.

  <pre class="prettyprint">public class LinkedInLoginProvider : LoginProvider

  {
      internal const string ProviderName = "LinkedIn";

      public LinkedInLoginProvider(IServiceTokenHandler tokenHandler)
          : base(tokenHandler)
      {
      }

      public override string Name
      {
          get { return ProviderName; }
      }

      public override void ConfigureMiddleware(IAppBuilder appBuilder,
          ServiceSettingsDictionary settings)
      {
          LinkedInAuthenticationOptions options = new LinkedInAuthenticationOptions
          {
              ClientId = settings["LinkedInClientId"],
              ClientSecret = settings["LinkedInClientSecret"],
              AuthenticationType = this.Name,
              Provider = new LinkedInLoginAuthenticationProvider()
          };
          appBuilder.UseLinkedInAuthentication(options);
      }

      public override ProviderCredentials CreateCredentials(
          ClaimsIdentity claimsIdentity)
      {
          Claim name = claimsIdentity.FindFirst(ClaimTypes.NameIdentifier);
          Claim providerAccessToken = claimsIdentity
              .FindFirst(ServiceClaimTypes.ProviderAccessToken);

          LinkedInCredentials credentials = new LinkedInCredentials
          {
              UserId = this.TokenHandler.CreateUserId(this.Name, name != null ?
                  name.Value : null),
              AccessToken = providerAccessToken != null ?
                  providerAccessToken.Value : null
          };

          return credentials;
      }

      public override ProviderCredentials ParseCredentials(JObject serialized)
      {
          return serialized.ToObject&lt;LinkedInCredentials&gt;();
      }
  }</pre>

  로컬 Web.config 파일에서 직접 설정할 수 있는 두 개의 새 사용자 지정 애플리케이션 설정(<strong>LinkedInClientId</strong> 및 <strong>LinkedInClientSecret</strong>)을 활용하여 구성을 통해 LinkedIn 클라이언트 ID 및 비밀을 설정합니다. 나중에 자세히 알아봅니다.


  두 번째 단계는 LinkedIn 액세스 토큰이 ID에 대한 클레임으로 추가되도록 하는 것입니다.

  <pre class="prettyprint">public class LinkedInLoginAuthenticationProvider : LinkedInAuthenticationProvider

  {
      public override Task Authenticated(LinkedInAuthenticatedContext context)
      {
          context.Identity.AddClaim(
              new Claim(ServiceClaimTypes.ProviderAccessToken, context.AccessToken));
          return base.Authenticated(context);
      }
  }</pre>

  세 번째 단계는 액세스 토큰을 공용 속성으로 포함하는 <strong>ProviderCredentials</strong> 클래스를 정의하는 것입니다.

  <pre class="prettyprint">public class LinkedInCredentials : ProviderCredentials

  {
      public LinkedInCredentials()
          : base(LinkedInLoginProvider.ProviderName)
      {
      }

      public string AccessToken { get; set; }
  }</pre>

  마지막 단계는 서비스에 새 <strong>LoginProvider</strong> 를 등록하는 것입니다. <strong>WebApiConfig</strong> 클래스의 <strong>Register</strong> 메서드에서 이 작업을 수행합니다.

  <pre class="prettyprint">public static class WebApiConfig

  {
      public static void Register()
      {
          ConfigOptions options = new ConfigOptions();
          options.LoginProviders.Add(typeof(LinkedInLoginProvider));

          HttpConfiguration config = ServiceConfig.Initialize(
              new ConfigBuilder(options));
          ...
      }
  }</pre>

  클라이언트 ID 및 클라이언트 암호에 대한 앱 설정을 로컬 web.config 파일에 추가합니다.

  <pre class="prettyprint">&lt;add key="LinkedInClientId" value="your value here" /&gt;

  &lt;add key="LinkedInClientSecret" value="your value here" /&gt;</pre>

  이제 Visual Studio 로컬로 서비스를 실행하고 리디렉션 후에 다음과 유사한 페이지를 제공해야 하는 주소 <strong>/login/linkedin</strong>을 브라우저를 가리킬 수 있습니다.


  <img style="float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; padding-right: 0px; margin-right: auto; border-width: 0px;" title="LinkedIn LoginProvider" alt="Using the LinkedIn LoginProvider on service running locally." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/LinkedInLogin.png" width="311" height="360" border="0" />


  그런 다음 LinkedIn 자격 증명을 사용하여 로그인하면 다음과 같은 https://localhost:31475/login/done#token=&lt최종 URI로 리디렉션됩니다. ;token&gt;. 클라이언트에서 새 <strong>LoginProvider</strong> 를 사용하려면 "LinkedIn" 문자열을 사용하여 가리키기만 하면 됩니다.

  <pre class="prettyprint">private async Task AuthenticateAsync()

  {
      while (user == null)
      {
          string message;
          try
          {
              user = await App.MobileService.LoginAsync("linkedin");
              message = string.Format("You are now logged in - {0}", user.UserId);
          }
          catch (InvalidOperationException)
          {
              message = "You must log in. Login Required";
          }

          var dialog = new MessageDialog(message);
          dialog.Commands.Add(new UICommand("OK"));
          await dialog.ShowAsync();
      }
  }</pre>

  <h3>Azure Active Directory 인증</h3>

  <a name="authenticate-your-app-with-active-directory-authentication-library-single-sign-on"></a>Azure Mobile Services .NET은 이미 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-adal-sso-authentication/">Active Directory 인증 라이브러리 Single Sign-On을 사용하여 인증</a>을 지원하지만 현재 Active Directory 인증 라이브러리에서 지원되지 않는 클라이언트 플랫폼에 필요한 서버 흐름을 지원하지 않았습니다.


  기본 Azure Active Directory <strong>LoginProvider</strong>는 Active Directory 인증 라이브러리에서 제공하는 클라이언트 쪽 흐름을 지원하지만 해당 라이브러리가 지원되는 클라이언트 플랫폼에서만 작동합니다.


  Azure Mobile Services 지원하는 모든 클라이언트와 함께 작동할 수 있는 서버 쪽 흐름을 사용하도록 설정하려면 먼저 <a href="https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Security">Microsoft Azure Mobile Services .NET 백 엔드 보안 확장</a> Nuget 미리 보기 패키지를 서버 프로젝트에 설치합니다. 그런 다음 <strong>WebApiConfig</strong> 클래스의 <strong>Register</strong> 메서드에서 다음을 수행하여 기본 Azure Active Directory <strong>LoginProvider</strong>를 바꿉 있습니다.

  <pre class="prettyprint">public static class WebApiConfig

  {
      public static void Register()
      {
          ConfigOptions options = new ConfigOptions();
          options.LoginProviders.Remove(typeof(AzureActiveDirectoryLoginProvider));
          options.LoginProviders.Add(typeof(AzureActiveDirectoryExtendedLoginProvider));

          HttpConfiguration config = ServiceConfig.Initialize(
              new ConfigBuilder(options));
          ...
      }
  }</pre>

  <strong>AzureActiveDirectoryExtendedLoginProvider</strong> 클래스는 클라이언트 및 서버 흐름을 모두 지원하여 각 클라이언트 플랫폼에 가장 적합한 모든 것을 사용할 수 있도록 합니다.


  <a name="get-started-with-authentication-in-mobile-services"></a>일반 Mobile Services 인증 모델에 대한 자세한 내용은 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-xamarin-ios-get-started-users/">Mobile Services 인증 시작</a> 설명서 항목을 참조하세요.


  정말 간단하죠. 이러한 기능이 도움이 되기를 바랍니다. 보고 싶은 다른 기능이 있는 경우 알려주세요!


  즐거운 시간 보내세요!


  헨릭
