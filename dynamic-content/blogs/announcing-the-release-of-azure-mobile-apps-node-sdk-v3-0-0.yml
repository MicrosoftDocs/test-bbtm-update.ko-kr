### YamlMime:Yaml
ms.openlocfilehash: 613d5e2aae2fc17006afa84401036eafad68741b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900052"
Slug: announcing-the-release-of-azure-mobile-apps-node-sdk-v3-0-0
Title: Azure Mobile Apps 노드 SDK v3.0.0 릴리스 발표
Summary: Azure Mobile Apps Node.js 서버 SDK의 다음 반복을 발표하게 되어 기쁩니다. 이 릴리스에는 새로운 기능, 개선 사항 및 버그 수정의 스택이 포함되어 있습니다.
Content: "<p>Azure Mobile Apps Node.js Server SDK의 다음 반복을 발표하게 되어 기쁩니다.&nbsp; 이 릴리스에는 새로운 기능, 개선 사항 및 버그 수정의 스택이 포함되어 있습니다.</p>\n\n<h2>데이터 변환, 필터 및 후크</h2>\n\n<p>서버 SDK 내의 뛰어난 기능 중 하나는 서버 수준에서 보안 필터링 및 레코드 변환을 제공하여 개발자가 JavaScript 코드를 작성하여 서버에 대한 요청-응답 파이프라인을 구체화할 수 있도록 하는 기능이었습니다.&nbsp; v3.0 릴리스에서는 들어오는 쿼리 및 항목을 조작하고 각 데이터 작업 후 기능을 트리거할 수 있도록 확장성 지점을 더 구체화할&#39;있습니다. 물론 고유한 필터, 변환 및 후크를 만들고 배포할 수 있습니다. 그러나 작성해야 하는 코드의 양을 줄이는 몇 가지 일반적인 필터를 패키지한&#39;있습니다.</p>\n\n<h3>Per-User 테이블</h3>\n\n<p>아마도 가장 일반적인 필터 요청은 사용자별 데이터를 제공하는 것입니다.&nbsp; 사용자별 테이블을 인증과 함께 사용하여 테이블 내의 데이터를 개별 사용자로 제한할 수 있습니다.&nbsp; 이 필터를 사용하려면 테이블 정의에 추가 <code>perUser = true </code>합니다.&nbsp; 예를 들어:</p>\n\n<pre>\nvar table = require(&quot;azure-mobile-apps&quot;).table(); \ntable.access = &quot;authenticated&quot;;\ntable.perUser = true; \nmodule.exports = table;</pre>\n\n<h3>웹후크</h3>\n\n<p>웹 후크는 각 데이터 작업이 완료된 후 외부 HTTP 엔드포인트(예: Azure Functions)를 호출하는 데 사용할 수 있습니다.</p>\n\n<pre>\nvar table = require(&quot;azure-mobile-apps&quot;).table();\ntable.webhook = { url: &quot;https://function.azurewebsites.net/apo/HttpTriggerNodeJS1&quot; };\nmodule.exports = table;\n</pre>\n\n<p>HTTP 엔드포인트에 게시되는 구조를 포함하여 이 기능에 대한 자세한 내용은 <a href=\"https://azure.github.io/azure-mobile-apps-node\" target=\"_blank\">API 참조를 참조</a>하세요.</p>\n\n<h3>레코드 만료</h3>\n\n<p>일반적으로 요청되는 또 다른 필터는 특정 간격보다 오래된 레코드에 대한 액세스를 방지하는 기능입니다. 예를 들어 1일보다 오래된 레코드에 대한 액세스를 거부할 수 있습니다.</p>\n\n<pre>\nvar table = require(&quot;azure-mobile-apps&quot;).table();\ntables.recordsExpire = { days: 1 };\nmodule.exports = table;\n</pre>\n\n<p>간격 지정에 대한 자세한 내용은 <a href=\"https://azure.github.io/azure-mobile-apps-node\" target=\"_blank\">API 참조</a>를 참조하세요.</p>\n\n<h2>데이터 쿼리 개선 사항</h2>\n\n<p>Azure Mobile Apps 서버는 적절한 테이블을 생성하기 위해 다른 테이블을 참조해야 하는 경우가 있습니다. &#39;특정 일반적인 시나리오를 더 쉽게 만들기 위해 <a href=\"https://github.com/Azure/azure-query-js\" target=\"_blank\">쿼리 API</a> 를 몇 가지 개선했습니다.</p>\n\n<h3>일시 삭제된 레코드 포함</h3>\n\n<p>일시 삭제를 설정하면 레코드가 SQL 테이블에서 실제로 삭제되는 대신 삭제된 것으로 표시됩니다. 그런 다음 이 정보는 오프라인 캐시를 업데이트할 수 있도록 다른 모바일 디바이스로 전달됩니다. 쿼리에서 삭제된 항목을 포함하도록 지정할 <code>.includeDeleted()</code> 수 있습니다.</p>\n\n<pre>\ntable.insert((context) =&gt; {\n    return context.tables(&#39;otherTable&#39;).includeDeleted().read()\n        .then((results) =&gt; {\n            context.item.count = results.length;\n            return context.execute();\n        });\n});\n</pre>\n\n<h3>ID로 레코드 검색</h3>\n\n<p>ID별로 레코드를 훨씬 간단하게 검색하는 간단한 <code>find</code> 함수를 추가한&#39;있습니다.</p>\n\n<pre>\ntable.insert((context) =&gt; {\n    return context.tables(&#39;otherTable&#39;).find(context.item.parentId)\n        .then((parent) =&gt; {\n            context.item.parentName = parent.name;\n            return context.execute();\n        });\n});\n</pre>\n\n<h3>개체 쿼리</h3>\n\n<p>이전에는 개체 기반 쿼리를 사용하여 테이블을 쿼리할 수 있었지만 업데이트 및 삭제 작업에서는 동일한 기능을 사용할 수 없었습니다. 이제 이 기능을 사용할 수 있으며 종속 레코드를 삭제할 수 있습니다.</p>\n\n<pre>\ntable.delete((context) =&gt; {\n    return context.tables(&#39;childTable&#39;)\n        .delete({ parentId: context.item.id })\n        .then(context.execute);\n});\n</pre>\n\n<h2>테이블 함수에서 콜백 처리</h2>\n\n<p>이전 SDK 릴리스에서는 테이블 작업 함수 내에서 콜백을 지원하지 않았습니다. &nbsp;이러한 메서드를 사용하려면 코드를 다시 계산하여 Promise를 생성해야 했습니다. &nbsp;v3.0.0에서는 콜백을 직접 지원합니다. &nbsp;콜백이 완료되면 context.next(err)를 호출하여 오류를 전달합니다. &nbsp;예를 들면 다음과 같습니다.</p>\n\n<pre>\n    var mongo = require(&#39;mongodb&#39;).MongoClient;\n\n    table.insert(function (context) {\n        context.execute().then(function () {\n            mongo.connect(&#39;mongodb://localhost:27017/test&#39;, function(err, db) {\n                db.collection(&#39;items&#39;).insertOne(context.item, function (err) {\n                    // signal that the operation is complete, passing in any error that may have occurred\n                    context.next(err);\n                });\n            });\n        });\n    });\n</pre>\n\n<h2>주요 변경 내용</h2>\n\n<p>SQL Server 대해 a <code>skip()</code> 및 <code>take()</code> 절을 모두 사용하여 쿼리를 실행할 때 기본 쿼리에서 생성된 추가 열(ROW_NUMBER)이 반환되었습니다. 이 열은 더 이상 반환되지 않습니다. 이 변경은 SQL Server 2012 이상에서 사용할 수 있는 T-SQL 기능을 사용하여 구현되었으므로 2012 이전의 SQL Server 버전은 더 이상 지원되지 않습니다.</p>\n\n<h2>SDK 설치</h2>\n\n<p>새 모바일 앱을 만들든 기존 앱을 업그레이드하든 관계없이 노드용 Azure Mobile Apps 서버 SDK는 npm을 통해 설치됩니다.</p>\n\n<pre>\nnpm install --save azure-mobile-apps@3.0</pre>\n\n<p><a href=\"https://azure.github.io/azure-mobile-apps-node/\" target=\"_blank\">GitHub 리포지토리</a>에서 전체 API 설명서와 모바일 백 엔드를 빌드하는 방법을 설명하는 편리한 <a href=\"https://azure.microsoft.com/documentation/articles/app-service-mobile-node-backend-how-to-use-server-sdk/\" target=\"_blank\">HOWTO 문서를</a> 찾을 수 있습니다.</p>"
