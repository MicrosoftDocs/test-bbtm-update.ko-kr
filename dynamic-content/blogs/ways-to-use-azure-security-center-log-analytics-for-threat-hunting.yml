### YamlMime:Yaml
ms.openlocfilehash: 829114d982174d43ff3ae7450b71ac0e5ac9620b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139912302"
Slug: ways-to-use-azure-security-center-log-analytics-for-threat-hunting
Title: Security Center 및 Log Analytics를 위협 헌팅에 사용하는 방법
Summary: 오늘날 조직은 지속적으로 공격을 받고 있습니다. ASC(Azure Security Center)는 고급 분석 및 글로벌 위협 인텔리전스를 사용하여 악의적인 위협을 감지하고, 제품 팀이 매일 추가하는 새로운 기능을 통해 고객은 이러한 위협에 신속하게 대응할 수 있습니다.
Content: >-
  <p>오늘날 조직은 지속적으로 공격을 받고 있습니다. ASC(Azure Security Center)는 고급 분석 및 글로벌 위협 인텔리전스를 사용하여 악의적인 위협을 감지하고, 제품 팀이 매일 추가하는 새로운 기능을 통해 고객은 이러한 위협에 신속하게 대응할 수 있습니다.</p>


  <p>그러나 위협과 공격에 대해 경고하는 훌륭한 도구만으로는 충분하지 않습니다. 실제로 어떤 보안 도구도 공격의 100%를 감지할 수 없습니다. 또한 경고를 발생시키는 많은 도구는 낮은 가양성 비율에 최적화되어 있습니다. 따라서 사용자 환경에서 플래그가 지정되고 조사될 수 있는 의심스러운 이상값 활동이 누락될 수 있습니다. 이는 Security Center와 Azure Log Analytics 팀이 이해하는 것입니다. 제품에는 트리거되는 경고에 응답하는 것 외에도 조사 및 헌팅 캠페인을 시작하는 데 사용할 수 있는 기본 제공 기능이 있습니다.</p>


  <p>실제 세계에서 위협 헌팅을 수행해야 하는 경우 고려해야 할 몇 가지 고려 사항이 있습니다. 좋은 분석가 팀이 필요할 뿐만 아니라, 조사 관련 데이터를 수집하기 위해 에이전트를 배포하고, 쿼리를 실행할 수 있는 형식으로 구문 분석하고, 이 데이터를 쿼리하는 데 도움이 되는 도구를 빌드하고, 쿼리가 더 빠르게 실행되고 실제로 결과를 제공할 수 있도록 마지막으로 데이터를 인덱싱하는 것에 대해 걱정하는 더 큰 서비스 엔지니어 및 관리자 팀이 필요합니다. ASC 및 Log Analytics는 이 모든 것을 처리하며 위협을 훨씬 쉽게 헌팅할 수 있습니다. 조직에 필요한 것은 사고방식의 변화입니다. 경고 기반이 아닌 전체 보안 프로그램에 활성 위협 헌팅을 통합해야 합니다.</p>


  <h2>위협 헌팅이란?</h2>


  <p>느슨하게 정의된 프로세스는 기존 보안 솔루션을 회피하는 위협을 감지하는 것을 목표로 다양한 로그 데이터를 사전에 반복적으로 검색하는 프로세스입니다. 생각해 보면 위협 헌팅은 사고방식입니다. 경고에 대응하는 대신 조직&rsquo; 환경을 보호하는 데 적극적으로 대처하고 이러한 징후에 대한 사전 지식 없이 기업 내에서 악의적인 활동의 징후를 찾고 있는 사고방식입니다. 위협 헌팅에는 공격자 동작에 대한 가설이 포함됩니다&rsquo; . 이러한 가설과 기술을 조사하여 로그에 남아 있는 아티팩트 확인 조직에서 이러한 로그를 수집하고 저장하는지 확인합니다. 그런 다음 사용자 환경에서 파생된 이러한 가설을&#39;로그를 확인합니다.</p>


  <p>헌팅은 데이터를 찾는 방법, 정상 활동과 이상값을 구분하는 방법, 네트워크에 대한 더 나은 그림을 제공하고 검색 간격을 보여 줍니다. 정기적인 헌팅을 수행하는 보안 분석가는 실제 인시던트 중에 대응하고 심사하도록 더 잘 훈련됩니다.</p>


  <p>오늘 분석가가 시작할 수 있는 이러한 간단한 사냥의 몇 가지 예를 살펴보겠습니다. 이전 게시물에서, 우리는 이미 이것에 대해 조금 만졌습니다. <a href="https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fblog%2Fdetect-malicious-activity-using-azure-security-center-and-azure-log-analytics%2F&amp;data=02%7C01%7C%7Cf5b66e53225d49d3f01108d5fcbd9260%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636692813486437485&amp;sdata=pxm3UOrJ649Oalissme2RsawTc8HlLGZ8KYCudQeRmA%3D&amp;reserved=0" target="_blank">악의적인 활동을 감지하고 공격자가 일반적으로 배포하는 숨겨진 기술을 찾는</a> 방법과 <a href="https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fblog%2Fhow-azure-security-center-helps-analyze-attacks-using-investigation-and-log-search%2F&amp;data=02%7C01%7C%7Cf5b66e53225d49d3f01108d5fcbd9260%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636692813486437485&amp;sdata=vNuF%2BOUuSA%2FQr5qRMSjBJoTqmKM5WVEQPvrYE3pb48I%3D&amp;reserved=0" target="_blank">Azure Security Center가 조사 및 로그 검색을 사용하여 공격을 분석하는 방법에</a> 대해 자세히 확인할 수 있습니다.</p>


  <h3>시나리오 1</h3>


  <p>많은 보안 도구가 외부 대상으로 비정상적으로 큰 데이터 전송을 찾습니다. 이러한 보안 도구를 회피하고 네트워크를 통해 전송되는 데이터의 양을 줄이기 위해 공격자는 종종 수집된 데이터를 exfil 전에 압축합니다. 압축에 가장 많이 사용되는 도구는 일반적으로 7zip/Winzip/WinRar 등입니다. 공격자는 데이터를 압축하기 위해 자체 사용자 지정 프로그램을 사용하는 것으로 알려져 있습니다.</p>


  <p>예를 들어 WinRar를 사용하여 데이터를 압축하는 동안 가장 일반적으로 사용되는 스위치 중 몇 가지는 -m5 &ndash;hp입니다&quot;.&quot; 스위치가 &quot; &quot; 보관 &ldquo; 파일에 파일을 추가하도록 지정하는 동안 -m5&rdquo; 스위치는 최대 압축 &ldquo;수준인 압축&rdquo; 수준을 지정합니다. &ldquo;-hp&rdquo; 스위치는 콘텐츠 및 헤더 정보를 암호화하는 데 사용됩니다. 이러한 명령줄 스위치에 대한 지식으로 이 작업 중 일부를 검색할 수 있습니다.</p>


  <p>다음은 이러한 명령줄 스위치를 찾고 있는 이 논리를 실행하는 간단한 쿼리입니다. 이 예제에서 결과를 살펴보면 winRAR과 연결된 명령줄 스위치를 사용하는 Svchost.exe 경우를 제외하고 모든 명령줄 데이터가 양호해 보이는 것을 볼 수 있습니다. 또한 이진 Svchost.exe %windir%/system32 폴더에서 실행해야 하는 이상적으로 임시 디렉터리에서 실행됩니다. 위협 행위자가 도구 이름을 잘 알려진 프로세스 이름으로 변경하여 눈에 잘 띄지 않게 숨기는 것으로 알려져 있습니다. 이는 의심스러운 것으로 간주되며 조사를 위한 좋은 출발점입니다. 분석가는 여기에서 다양한 접근 방법 중 하나를 사용하여 전체 공격 순서를 파악할 수 있습니다. 로그온 데이터를 피벗하여 이 로그온 세션에서 발생한 작업을 찾거나 사용된 사용자 계정에 집중할 수 있습니다. 또한 이 컴퓨터에 연결된 IP 주소 또는 지정된 시간 프레임 동안 이 컴퓨터가 연결된 IP 주소를 조사할 수도 있습니다.</p>


  <pre>

  SecurityEvent

  | where TimeGenerated &gt;= ago(2d)

  | search CommandLine : &quot; -m5 &quot; and CommandLine : &quot; a &quot;

  | project NewProcessName , CommandLine</pre>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/83777ca7-96a9-4a15-831d-4d90c3439737.png"><img alt="Sai_Img1" border="0" height="313" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b19d4313-3e37-4401-b3cb-c0d6ef963163.png" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="Sai_Img1" width="547"></a></p>


  <p>이와 같은 또 다른 좋은 예는 메일 암호 뷰어 또는 IE 암호 뷰어와 같은 인기 있는 Nirsoft 도구를 사용하여 브라우저에 저장된 암호뿐만 아니라 이메일 클라이언트에서 암호를 수집하기 위해 공격자가 악의적으로 사용하는 것일 수 있습니다. 이러한 도구에 대한 명령줄을 알면 프로세스 이름을 알 필요 없이 잠재적으로 악의적인 활동을 검색할 수 있는 /stext 또는 /scomma와 같은 명령줄 매개 변수를 검색하는 경우 흥미로운 로그 항목을 찾을 수 있습니다. 이전에 본 예제를 제공하려면notepad.exe /stext output.txt&rdquo; 같은 &ldquo; 명령줄을 보는 것은 메모장에서 이름이 바뀐 Nirsoft 도구일 수 있고 악의적인 활동이 될 수 있음을 나타내는 좋은 표시입니다.</p>


  <h3>시나리오 2</h3>


  <p>Rar.exe 이름이 svchost.exe 이전 예제를 기반으로 합니다. 맬웨어 작성기는 악의적인 프로세스 이름에 Windows 시스템 프로세스 이름을 사용하여 Windows 시스템이 실행하는 다른 합법적인 명령과 혼합되도록 하는 경우가 많습니다. 분석가가 잘 알려진 Windows 프로세스에 익숙한 경우 나쁜 프로세스를 쉽게 발견할 수 있습니다. 예를 들어 Svchost.exe 많은 Windows 서비스를 호스팅하는 시스템 프로세스이며 일반적으로 공격자에 의해 가장 많이 악용됩니다. svchost.exe 프로세스의 경우 다음과 같은 일반적인 지식이 있습니다.</p>


  <ul style="margin-left: 40px;">
   <li>%windir%/system32 또는 %windir%/SysWOW64에서 실행됩니다.</li>
   <li>NT AUTHORITY\SYSTEM, LOCAL SERVICE 또는 NETWORK SERVICE 계정에서 실행됩니다.</li>
  </ul>


  <p>이 지식을 바탕으로 분석가는 Svchost.exe 프로세스를 찾는 간단한 쿼리를 만들 수 있습니다. 합법적인 svchost.exe 프로세스를 시작하는 데 사용되는 잘 알려진 SID(보안 식별자)를 필터링하는 것이 좋습니다. 또한 쿼리는 svchost.exe 시작된 합법적인 위치를 필터링합니다.</p>


  <pre>

  SecurityEvent

  | where TimeGenerated &gt;= ago(2d)

  | where ProcessName contains &quot;svchost.exe&quot;

  | where SubjectUserSid != &quot;S-1-5-18&quot;

  | where SubjectUserSid != &quot;S-1-5-19&quot;

  | where SubjectUserSid != &quot;S-1-5-20&quot;

  | where NewProcessName !contains &quot;C:\\Windows\\System32&quot;

  | where NewProcessName !contains &quot;C:\\Windows\\Syswow64&quot;</pre>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/423fce8a-4a1c-48e7-87c8-24f2f61847b5.jpg"><img alt="Sai2" border="0" height="209" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ac113576-58a0-4c14-9398-abdc421dda51.jpg" style="margin: 0px auto; border: 0px currentcolor; border-image: none; float: none; display: block; background-image: none;" title="Sai2" width="852"></a></p>


  <p>또한 반환된 결과에서 svchost.exe services.exe 자식인지 또는 k 스위치가 있는 &ndash;명령줄(예: svchost.exe -k defragsvc)을 사용하여 시작되었는지도 확인합니다. 이러한 조건을 사용하여 필터링하면 분석가가 정상적인 활동인지 아니면 손상 또는 공격의 일부인지를 찾기 위해 더 자세히 살펴볼 수 있는 흥미로운 결과를 얻을 수 있습니다.</p>


  <p>여기에는 새로운 것이나 소설이 없습니다. 보안 분석가는 이를 알고 있습니다. 실제로 ASC를 비롯한 많은 보안 도구가 이를 감지합니다. 그러나 여기서 목표는 경고에 응답할 뿐만 아니라 사용자 환경에서 변칙 및 이상값을 사전에 찾는 사고방식의 변화입니다.</p>


  <h3>시나리오 3</h3>


  <p>무차별 암호 대입 공격, 스피어 피싱 또는 기타 방법을 통해 초기 손상 후 공격자는 종종 느슨하게 네트워크 전파 단계라고 할 수있는 다음 단계로 이동합니다. 네트워크 전파 단계의 목표는 자격 증명 및 중요한 데이터를 검색하기 위해 대상 환경 내에서 원하는 시스템을 식별하고 이동하는 것입니다. 경우에 따라 한 계정이 환경의 비정상적으로 많은 수의 컴퓨터에 로그인하는 데 사용되거나 한 컴퓨터에서 들어오는 여러 계정 인증 요청을 볼 수 있습니다. 이것이 원하는 임계값보다 더 많은 계정을 인증하는 데 사용된 컴퓨터를 찾으려는 두 번째 시나리오인 경우 아래와 같은 쿼리를 작성할 수 있습니다.</p>


  <pre>

  SecurityEvent
      | where EventID == 4624
      | where AccountType == &quot;User&quot;
      | where TimeGenerated &gt;= ago(1d)
      | summarize IndividualAccounts = dcount(Account) by Computer
      | where IndividualAccounts &gt; 4</pre>

  <p>또한 이러한 컴퓨터에서 발생한 경고를 확인하려는 경우 위의 쿼리를 확장하고 SecurityAlerts 테이블과 조인할 수 있습니다.</p>


  <pre>

  SecurityEvent
      | where EventID == 4624
      | where AccountType == &quot;User&quot;
      | where TimeGenerated &gt;= ago(1d)
      | extend Computer = toupper(Computer)
      | summarize IndividualAccounts = dcount(Account) by Computer
      | where IndividualAccounts &gt; 4
  | join (SecurityAlert
                   | extend ExtProps=parsejson(ExtendedProperties)
                   | extend Computer=toupper(tostring(ExtProps[&quot;Compromised Host&quot;]))
                   )
  on Computer</pre>


  <p>좀 더 실습 가이드를 원하거나 공격에 대한 ASC 보안 검색의 유효성을 검사하려는 경우 <a href="https://gallery.technet.microsoft.com/Azure-Security-Center-549aa7a4">Azure Security Center 헌팅 위협 </a><a href="https://gallery.technet.microsoft.com/Azure-Security-Center-549aa7a4">플레이북</a>을 살펴볼 수도 있습니다. 이 플레이북은 Log Analytics 및 Security Center를 사용하여 작업할 수 있는 위반 후 시나리오에 대한 몇 가지 좋은 헌팅 예제를 제공합니다.</p>


  <p>이는 몇 가지 예일 뿐입니다. 가능성은 무한합니다. 실제로 좋은 분석가는 언제 더 깊이 파고들고 사냥 여정에서 다음 항목으로 넘어가야 할 때를 알고 있습니다. 피해자가 더 전체적으로 자신을 방어하기 시작하지 않는 한 사이버의 세계에서 아무것도 더 나은 얻을 수 없습니다. 이 여정에서 고객을 활성화하고 고객이 Azure로 이동할 때 자신을 보호할 수 있는 도구를 제공하는 것이 매일 우리를 이끄는 원동력입니다.</p>


  <p>행복한 사냥!</p>
