### YamlMime:Yaml
ms.openlocfilehash: 3b6105fa4c830887e022cfa4a59bad7a8b1f2aec
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902168"
Slug: documentdb-paging-support-with-top-and-more-query-improvements
Title: TOP 및 더 많은 쿼리 향상을 통한 DocumentDB 페이징 지원
Summary: Azure DocumentDB의 여러 개선 사항을 발표하게 되어 기쁘게 생각합니다. 더 알아보려면 계속 읽어 보세요.
Content: "<p>Azure&rsquo; DocumentDB를 쿼리하는 방법에 대한 다양한 개선 사항을 발표하게 되어 기쁘게 생각합니다. 최신 서비스 업데이트를 통해 SQL 문법에 TOP 키워드를 추가하고, 쿼리를 더 빠르게 실행하고, 리소스를 적게 사용하고, 쿼리 연산자의 제한을 늘리고, .NET SDK의 추가 LINQ 연산자 지원을 추가했습니다.</p>\n\n<p>배포된 변경 내용 목록은 다음과 같습니다.</p>\n\n<ul>\n <li><strong>새 SQL 키워드: </strong>쿼리의 페이징 및 제한 결과를 위한 TOP입니다.</li>\n <li><strong>한도 증가:</strong> 이제 IN 식 내에서 최대 20개 OU 및 200개 항목을 사용할 수 있습니다.</li>\n <li><strong>성능 향상: </strong> 이제 쿼리 엔진에서 필터링된 정렬 쿼리가 더 빨라지고, 인덱스 계획 최적화가 향상되고, 결과 집합이 큰 쿼리의 증분 처리가 향상되었습니다.</li>\n <li><strong>새 LINQ 연산자:</strong> Take(), CompareTo(), 조건부 및 병합 연산 &ndash; 자를 비롯한 다양한 추가 LINQ 연산자를 지원합니다.</li>\n</ul>\n\n<p>이 게시물&rsquo;에서는 변경된 내용&rsquo;과 이러한 변경 내용을 활용하여 Azure DocumentDB를 사용하여 빠르고 확장 가능한 애플리케이션을 빌드하는 방법을 살펴보겠습니다.</p>\n\n<h2>TOP을 사용하여 쿼리 결과 페이징 및 제한</h2>\n\n<p>이제 DocumentDB SQL 문법에는 DocumentDB를 쿼리하는 동안 SQL 쿼리 내에서 사용할 수 있는 TOP 키워드가 포함됩니다. TOP은 쿼리 결과를 페이지스하거나 쿼리에서 다시 들어오는 결과 수를 제한하는 데 사용할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\nSELECT TOP 100 *\nFROM food\nWHERE food.foodGroup = &quot;Snacks&quot;\nORDER BY food.description</pre>\n\n<p>TOP은 유효한 DocumentDB 쿼리 내에서 사용할 수 있으며, 항목 수는 매개 변수가 있는 쿼리를 통해 매개 변수로 제공할 수도 있습니다. ORDER BY와 함께 TOP&nbsp; 을 사용하여 DocumentDB 쿼리 내에서 MIN, MAX 및 FIRST 의미 체계를 구현할 수도 있습니다.</p>\n\n<p>자세한 내용은 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-sql-query/#basics-of-a-documentdb-sql-query\">DocumentDB 쿼리</a>에 대한 설명서를 참조하세요.</p>\n\n<h2>다양한 SQL 연산자 제한 증가</h2>\n\n<p>최근에 DocumentDB 쿼리 내에서 지원되는 AND, JOIN 및 UDF 연산자 수가 여러 개 증가했다고 발표했습니다. 많은 프레임워크 개발자로부터 유연한 쿼리 API를 빌드하기 위해 쿼리당 OR 및 IN 연산자를 더 많이 제한해야 한다는 소식을 들었습니다. 다음&rsquo; 제한을 해제했다고 발표하게 되어 기쁩니다.</p>\n\n<ul>\n <li>쿼리당 최대 OR 절 수, 20개로 증가</li>\n <li>쿼리당 IN 식에 지정된 최대 값 수( 200개로 증가)</li>\n</ul>\n\n<p>이 변경으로 IN 또는 LINQ 내에서 동등한 <a href=\"https://msdn.microsoft.com/en-us/library/bb339118(v=vs.110).aspx\">IEnumerable.Contains</a> 연산자를 사용하여 더 큰 항목 일괄 처리를 가져오고 DocumentDB로 왕복 횟수를 제한할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\n/* Up to 200 values in query */\nSELECT *\nFROM food\nWHERE food.id IN (\n    &quot;0326&quot;, &quot;0327&quot;, &quot;0329&quot;, &quot;03230&quot;\n) </pre>\n\n<p>DocumentDB 제한의 전체 목록은 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-limits/\">설명서 페이지를</a> 참조하세요.</p>\n\n<h1>SQL 쿼리 엔진의 성능 향상</h1>\n\n<p>또한 DocumentDB 쿼리 엔진에서 쿼리의 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-manage/#request-units-and-database-operations\">RU</a>(요청 단위) 소비를 줄이고, 쿼리 대기 시간을 줄이고, 장기 실행 쿼리를 제공하는 데 필요한 왕복 횟수를 줄이기 위해 여러 가지 성능이 향상되었습니다.</p>\n\n<h3>더 빠르게 필터링된 정렬 쿼리</h3>\n\n<p>정렬 및 필터 식에서 쿼리 논리 계획 최적화를 수행하기 위한 지원이 추가되었습니다. 예를 들어 동일한 속성에 대해 필터 및 정렬을 사용하는 쿼리가 있는 경우 쿼리는 크기가 더 빨라지고 왕복이 훨씬 적습니다.</p>\n\n<ul>\n <li>DocumentDB&rsquo;에서 Azure Search 커넥터를 사용하는 경우 인덱서가 훨씬 적은 RU를 사용하고 이 최적화로 인해 더 빠르게 완료된다는 것을 알 수 있습니다.</li>\n <li>일반적으로 아래와 같이 범위 필터를 기반으로 데이터를 순서대로 읽는 애플리케이션이 있는 경우 쿼리는 RU를 적게 사용하고 더 빨리 완료합니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\n/* Now an order of magnitude faster! */\nSELECT * \nFROM deviceTelemetry \nWHERE deviceTelemetry._ts &gt; @highWaterMark\nORDER BY deviceTelemetry._ts\n</pre>\n\n<p>성능 팁:<strong></strong> 이미 범위 필터를 사용하는 쿼리가 있는 경우(타임스탬프 값 사용) 이 최적화를 활용하려면 동일한 속성에 대해 ORDER BY 절을 추가하는 것이 좋습니다.</p>\n\n<h3>향상된 인덱스 계획 최적화</h3>\n\n<p>이제 DocumentDB 쿼리 실행 엔진은 쿼리 필터 식을 분석하고 식 순서 변경, 고가의 필터 실행 및 건너뛰기 간의 장단점 평가와 같은 런타임 최적화를 수행하는 데 더 스마트해졌습니다. 이렇게 변경하면 광범위한 쿼리가 더 빠르게 실행되고 RU가 더 적게 소비됩니다.</p>\n\n<pre class=\"prettyprint\">\n/* In this query, DocumentDB will re-order expressions to improve performance */\nSELECT *\nFROM loggedMetrics l\nWHERE l._ts &gt; @highWaterMark \nAND l.traceLevel = &#39;Critical&#39;\nAND l.appName = &#39;BackendWorkerRole&#39;\n</pre>\n\n<h3>향상된 증분 처리</h3>\n\n<p>DocumentDB는 연속 토큰을 통해 장기 실행 쿼리를 지원합니다. DocumentDB는 각 쿼리에 고정된 양의 시간과 리소스를 할당하며, 이 값에 도달하면 실행을 다시 시작하는 책갈피 역할을 하는 연속 토큰을 반환합니다.</p>\n\n<p>DocumentDB는 쿼리에 대한 추가 상태 서버 쪽을 유지 관리하지 않습니다. 이 모든 항목은 토큰 내에 자체 포함되므로 만료되지 않으며 클라이언트에서 캐시할 수 있습니다. 결과 집합이 큰 쿼리에 대한 연속 작업 내에서 상태를 인코딩하는 방법이 크게 향상되었습니다.</p>\n\n<pre class=\"prettyprint\">\n/* Query that scans documents to build a COUNT client-side */\nSELECT VALUE 1\nFROM loggedMetrics\nWHERE loggedMetrics.startTime &gt;= &quot;2015-12-12T10:00:00Z&rdquo; </pre>\n\n<p>위에 표시된 것과 같은 쿼리가 있는 경우 RU 사용 및 실행 시간이 2-3배 감소할 수 있습니다.</p>\n\n<h1>새 LINQ 연산자</h1>\n\n<p>최신 <a href=\"https://www.nuget.org/packages/Microsoft.Azure.DocumentDB/\">DocumentDB .NET SDK 릴리스 1.5.2</a> 에서는 페이징, 조건식 및 범위 비교를 위한 새 연산자를 포함하여 LINQ 쿼리 변환에 대한 지원이 확장되었습니다. 이 변경을 통해 SQL 문자열을 빌드하지 않고도 DocumentDB와 동적으로 상호 작용하는 더 많은 시나리오에 대해 흐름 LINQ 식을 작성할 수 있습니다. 지원되는 LINQ 연산자의 전체 목록은 <a href=\"https://azure.microsoft.com/documentation/articles/documentdb-sql-query/#linq-to-documentdb-sql\">LINQ 설명서를</a> 참조하세요.</p>\n\n<p>DocumentDB는 <a href=\"https://msdn.microsoft.com/library/bb300906(v=vs.100).aspx\">Take</a> 연산자를 사용하여 쿼리의 결과 수를 제한하는 것을 지원합니다.</p>\n\n<pre class=\"prettyprint\">\nclient.CreateDocumentQuery&lt;Family&gt;(&quot;/dbs/sampleData/colls/families&quot;)\n    .Where(f =&gt; f.LastName == &quot;Andersen&quot;)\n    .OrderByDescending(f =&gt; f.Address.State)\n    .Take(10);</pre>\n\n<p>DocumentDB는 관계형 SQL 같은 <a href=\"https://azure.microsoft.com/blog/order-query-results-with-azure-documentdb/\">문자열 범위 비교</a>를 지원합니다. 이제 <a href=\"https://msdn.microsoft.com/library/system.icomparable.compareto(v=vs.110).aspx\">CompareTo</a> 연산자를 통해 LINQ에서 지원됩니다.&nbsp; 예를 들어 이 쿼리는 N-Z에서 성이 문자열인 패밀리를 검색합니다.</p>\n\n<pre class=\"prettyprint\">\nclient.CreateDocumentQuery&lt;Family&gt;(&quot;/dbs/sampleData/colls/families&quot;)\n    .Where(f =&gt; f.LastName.CompareTo(&quot;N&quot;) &gt;= 0);</pre>\n\n<p>또한 SDK는 C# <a href=\"https://msdn.microsoft.com/library/ty67wk28.aspx\">조건부(?)</a> 및 <a href=\"https://msdn.microsoft.com/library/ms173224.aspx\">병합 연산자(??)</a> 에서 해당 DocumentDB 연산자로의 변환을 지원합니다. 이렇게 변경하면 ODATA와 같은 프레임워크에서 DocumentDB까지 자동 생성된 LINQ 식을 쉽게 전달할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\nclient.CreateDocumentQuery&lt;Family&gt;(&quot;/dbs/sampleData/colls/families&quot;)\n    .Select(f =&gt; f.LastName?? &quot;Unknown&quot;);\n</pre>\n\n<h1>다음 단계</h1>\n\n<p><a href=\"https://msdn.microsoft.com/library/azure/dn781482.aspx\">지원되는 SDK</a> 중 하나를 다운로드하거나 Azure Portal을 통해 DocumentDB 쿼리를 시작합니다. 도움이 필요하거나 질문이나 피드백이 있는 경우 <a href=\"https://stackoverflow.com/questions/tagged/azure-documentdb\">스택 오버플로에 대한 개발자 포럼에</a> 문의하거나 DocumentDB 엔지니어링 팀과 1:1 채팅을 예약하세요.</p>\n\n<p>Twitter <a href=\"https://twitter.com/DocumentDB\">@DocumentDB</a>에서 팔로우하여 최신 DocumentDB 뉴스 및 기능을 최신 상태로 유지하세요.</p>"
