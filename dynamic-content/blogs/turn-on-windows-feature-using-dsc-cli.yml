### YamlMime:Yaml
ms.openlocfilehash: 8299d8be110ea37b2ed05b9ed4d6ed0d85667a4b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139912337"
Slug: turn-on-windows-feature-using-dsc-cli
Title: Powershell DSC 확장 및 Azure CLI를 사용하여 Windows 기능 켜기
Summary: 이 게시물은 Powershell DSC 및 Azure CLI를 사용하여 Azure VM에 IIS를 설치하는 간단한 방법을 보여 줍니다.
Content: "<p>&nbsp;azure에서 사용자 지정 스크립트 확장을 사용하려는 DevOps 엔지니어는 <a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/configurations\">DSC&nbsp;(</a>using&nbsp; Desired State Configuration) 또는 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-classic-extensions-customscript/\">사용자 지정 Powershell 스크립트</a>와 같은 다양한 기술을 사용할 수&nbsp; 있습니다. 하지만 Azure 리소스 그룹의 기존 Windows Virtual Machines에 IIS Server를 설치하는 것과 같은 간단한 작업을 수행하려는 경우 어떤 옵션이&nbsp; 있나요? <a href=\"https://blogs.endjin.com/2015/07/using-azure-resource-manager-and-powershell-dsc-to-create-and-provision-a-vm/\">AZURE</a> <a href=\"https://azure.microsoft.com/en-us/documentation/articles/automation-dsc-overview/\">Automation DSCand</a>&nbsp; <a href=\"https://www.petri.com/4-ways-to-configure-azure-vms-using-powershell\">다른 메서드</a>를 사용하는&nbsp; 등 복잡성&nbsp;이 다양한 다양한 가능한&nbsp; 애플리케이션이 있습니다. 그러나 경우에 따라 스크립트가 더 나은 접근 방식&nbsp;일 수 있습니다.&nbsp;&rsquo; 특히&nbsp; 유지 관리 및 업데이트해야 하는 프로덕션 수준 인프라를 설정<em><strong>하지 않는</strong></em> 경우 더욱 그렇습니다.</p>\n\n<p>이 후자의 시나리오에서는 <a href=\"https://www.chef.io/chef/\">Chef</a>, <a href=\"https://puppet.com/\">Puppet</a>&nbsp;- orinternal&nbsp; Azure 도구(예: <a href=\"https://azure.microsoft.com/en-us/documentation/services/automation/\">Azure 자동화</a>)로 타사 접근 방식을&nbsp; 사용하는 DSC 자동화가 요구 사항을&nbsp; 충족할 수 있습니다. 이러한 solutionsemploy&nbsp; aserver-basedpull&nbsp;&nbsp; 모델은 지속적으로 installedsoftware&nbsp;의 원하는 구성 상태를 관리합니다.</p>\n\n<p>내 시나리오는 매우 간단하며, Im이 최소한의 소란으로 달성하고자하는 사실상 일회성 구성 작업&rsquo;입니다. 시나리오는 다음과&rsquo; 같습니다.</p>\n\n<ul>\n <li>몇 가지 가상 머신은 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/guidance-compute-3-tier-vm/\">CLI 스크립트를 사용하여</a> Azure 리소스 그룹에 배포됩니다.</li>\n <li>가상 머신은 웹 계층, 비즈니스 계층 및 데이터베이스 계층을 포함하는 3계층 아키텍처의 일부입니다.</li>\n <li>NSG(네트워크 보안 그룹) 규칙은 필수 구성 요소에 따라 계층 간 통신을 허용/거부하는 스크립트에 의해 프로비전됩니다.</li>\n <li>웹 계층 가상 머신은 HTTP 요청을 통해 비즈니스 계층에 대한 액세스를 테스트하고 유효성을 검사할 수 있도록 IIS 서버가 필요합니다.</li>\n <li>가상 머신은 자동화를 통해 쉽게 액세스할 수 있는 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/guidance-naming-conventions/\">Azure 리소스에 대한 권장 명명 규칙에</a> 따라 프로비전됩니다.</li>\n</ul>\n\n<p><strong>참고</strong>: 이 게시물의 시나리오는 가상 머신 집합에 IIS 인프라를 설치하는 것으로 제한되지만 이 방법을 사용하면 도메인 컨트롤러, DNS 서버, SQL&nbsp; 서버&nbsp;, WSFC(장애 조치(failover) 클러스터) 등과 같은 여러 다른 WMF 기반 작업을 통합할 수&#39;있습니다. 마찬가지로 DSC 확장은 <a href=\"https://azure.microsoft.com/en-us/blog/introduce-azure-dscforlinux-extension/\">Linux 기반 가상 머신</a>에서 사용할 수 있습니다.</p>\n\n<p>이제 시나리오&rsquo;를 이해했으므로 불타는 농구를 통과하지 않고 어떻게 이 작업을 수행할 수 있는지 살펴보겠습니다. 다음은 Azure 리소스 그룹의 빠른 스크린샷입니다.</p>\n\n<p><img alt=\"VMsInRG\" border=\"0\" height=\"178\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8470c745-8b8f-469a-8ef3-a46a9dd59774.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;\" title=\"VMsInRG\" width=\"610\"></p>\n\n<p>위의 스크린샷에서 다음과 같은 몇 가지 사항을 확인할 수 있습니다.</p>\n\n<ul>\n <li>가상 머신은 명명 패턴(예: <strong>bc-svc2-vm1</strong>, <strong>bc-svc2-vm2</strong> 등)을 따릅니다.</li>\n <li>리소스 그룹의 이름은 <strong>bc-dev-rg</strong>입니다.</li>\n</ul>\n\n<p>위의 스크린샷에 표시된 가상 머신에 IIS를 설치하기 위해 수행한 단계는 다음과 같습니다.</p>\n\n<ul>\n <li>다음 콘텐츠를 사용하여 Powershell 파일을 만들고 <strong>IISConfig.ps1</strong>저장합니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\nConfiguration ConfigureWeb\n{ \n node (&quot;localhost&quot;)\n { \n  WindowsFeature InstallWebServer \n  { \n   Ensure = &quot;Present&quot;\n   Name = &quot;Web-Server&quot; \n  } \n } \n}</pre>\n\n<ul>\n <li>다음 단계를 사용하여 공개적으로 액세스할 수 있는 Blob 컨테이너 URL에 모듈을 패키지하고 게시합니다. <ul>\n  <li>관리 모드에서 Powershell <sup>x861</sup> 명령 창을 엽니다.</li>\n  <li>Azure 계정에 로그인하고 구독을 선택합니다.\n  <pre class=\"prettyprint\">\nLogin-AzureRmAccount\nSelect-AzureRmSubscription &ndash;SubscriptionId my-subscription-id</pre>\n  </li>\n  <li>게시<sup>2</sup> 스크립트를 스토리지 계정에 게시합니다. 다음 명령은 스크립트&nbsp;를 <strong>IISConfig.zip</strong> 파일에 패키지하고 지정된 스토리지 계정의 스토리지 컨테이너에 게시합니다.</li>\n </ul>\n </li>\n</ul>\n\n<pre class=\"prettyprint\">\nPublish-AzureRmVMDscConfiguration -ConfigurationPath .\\IISConfig.ps1 -ContainerName mycontainer -StorageAccountName mystorageaccount -ResourceGroupName myresourcegroup</pre>\n\n<ul>\n <li>다음 콘텐츠가 포함된 텍스트 파일을 만들고 <strong>TurnOnIIS.cmd</strong>로 저장합니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\n@ECHO OFF\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:: Set up variables.\n:: Change these variables to match your deployment.\nSET APP_NAME=bc\nSET ENVIRONMENT=dev\nSET RESOURCE_GROUP=%APP_NAME%-%ENVIRONMENT%-rg\n\n:: Number of Virtual Machines (VMs) to configure. Set according to your scenario.\nSET NUM_VMS=3\n\n:: Loop through all the VMs and call subroutine that installs IIS on each VM.\n:: Loop counter and the service tier name are passed as parameters.\nFOR /L %%I IN (1,1,%NUM_VMS%) DO CALL :ConfigureIIS %%I svc2\n\nGOTO :eof\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:: Subroutine that configures IIS\n\n:ConfigureIIS\nSET TIER_NAME=%2\nSET VM_NAME=%APP_NAME%-%TIER_NAME%-vm%1\n\nECHO Turning on IIS configuration for: %VM_NAME% under resource group: %RESOURCE_GROUP%\n\n:: Following assumes that you have\n::  1. Logged into your Azure subscription using &quot;azure login&quot;\n::  2. Set the active subscription using &quot;azure account set &lt;subscription-name&gt;&quot;\n\nCALL azure vm extension set --resource-group %RESOURCE_GROUP% --vm-name %VM_NAME% ^\n --name DSC --publisher-name Microsoft.Powershell --version 2.9 ^\n --public-config &quot;{\\&quot;ModulesUrl\\&quot;: \\&quot;https://mystorage.blob.core.windows.net/scripts/IISConfig.ps1.zip\\&quot;, \\&quot;ConfigurationFunction\\&quot;: \\&quot;IISConfig.ps1\\\\ConfigureWeb\\&quot; }&quot;\n \nGOTO :eof</pre>\n\n<p>기본적으로 모든 were&rsquo;는 다음과 같습니다.</p>\n\n<ol>\n <li>지정된 명명 규칙에 따라 VM을 반복합니다.</li>\n <li>각 VM에서 서브루틴 <strong>ConfigureIIS</strong> 호출</li>\n <li>다음 매개 변수를 전달하는 각 <strong>VM에서 azure vm 확장 집합</strong> cmdlet을 호출합니다.</li>\n</ol>\n\n<pre class=\"prettyprint\">\n--resource-group      Name of the resource group    </pre>\n\n<pre class=\"prettyprint\">\n--vm-name             Name of the virtual machine    </pre>\n\n<pre class=\"prettyprint\">\n--name                Type of the custom script extension    </pre>\n\n<pre class=\"prettyprint\">\n--publisher-name      Name of the extension publisher    </pre>\n\n<pre class=\"prettyprint\">\n--version             Version of the extension    </pre>\n\n<pre class=\"prettyprint\">\n--public-config       JSON text specifying </pre>\n\n<pre class=\"prettyprint\">\n                      ModuleUrl    Packaged configuration location</pre>\n\n<pre class=\"prettyprint\">\n                      ConfigurationFunction    Name of the configuration function in the script including path</pre>\n\n<ul>\n <li>명령 프롬프트를 열고 명령 스크립트가 포함된 폴더에 <strong>CD</strong> 를 열고 실행합니다.</li>\n</ul>\n\n<p>유사한 접근 방식을 사용하여 가상 머신에서 Windows 기능을 설정하거나 해제할 수 있습니다. 여러 Windows 기능을 동시에 조작하는 DSC 구성을 작성하는 방법에 대한 자세한 내용은 <a href=\"https://msdn.microsoft.com/en-us/powershell/dsc/fileresource\">이 문서를</a> 참조하세요.</p>\n\n<hr>\n<blockquote>\n<p><sup><strong>1</strong> </sup>대상 가상 머신은 기본적으로 Powershell의 x86 빌드를 사용하기 때문에 Powershell의 x64 빌드를 사용하지 마세요. 이를 준수하지 않으면 다음이 발생합니다.</p>\n</blockquote>\n\n<ul>\n <li><strong>리소스 그룹이 있지만 리소스 그룹과 </strong>같은 모호한 메시지가 있는 Azure Storage 컨테이너에 프로세스를 게시하지 못했습니다.</li>\n <li>오류 메시지가 가장 유용하지 않으므로 디버그하기 어려운 대상 가상 머신에서 프로세스 압축을 풉니다.</li>\n</ul>\n\n<blockquote>\n<p><sup><strong>2</strong></sup> 다른 방법은 패키지를 로컬로 만들고 GitHub 계정에 업로드하는 것입니다. 이 경우 스토리지 컨테이너 URL을 공개적으로 액세스할 수 있는 GitHub URL로 대체합니다. 다음은 이 경우에 사용할 수정된 명령입니다.</p>\n\n<pre class=\"prettyprint\">\nPublish-AzureRmVMDscConfiguration -ConfigurationPath .\\IISConfig.ps1 -OutputArchivePath IISConfig.zip</pre>\n</blockquote>"
