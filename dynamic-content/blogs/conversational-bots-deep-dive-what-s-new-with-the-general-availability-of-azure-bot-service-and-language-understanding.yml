### YamlMime:Yaml
ms.openlocfilehash: 0232dbb9c10908a9a2c95fc76fbe13a33b5982e9
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897717"
Slug: conversational-bots-deep-dive-what-s-new-with-the-general-availability-of-azure-bot-service-and-language-understanding
Title: 대화형 봇 심층 분석 – Azure Bot Service 및 Language Understanding의 일반 공급의 새로운 기능
Summary: Microsoft는 개발자의 손끝에 최신 고급 챗봇 기능을 제공하여 사용자의 요구 사항을 보고, 듣고, 말하고, 이해하고, 해석하는 앱을 만들 수 있습니다.
Content: >-
  <p><em>이 게시물은 Azure Bot Service 및 Language Understanding 팀에서 작성했습니다.</em></p>


  <p>Microsoft는 개발자에게 손끝을&#39; 최신 고급 챗봇 기능을 제공하여 자연스러운 통신 스타일과 방법을 사용하여 사용자의&rsquo; 요구를 보고, 듣고, 말하고, 이해하고, 해석하는 앱을 만들 수 있습니다.</p>


  <p>오늘,&rsquo; 자연 방식으로 상호 작용하고 주변 환경을 이해하는 디지털 에이전트를 만들기 위해 두 개의 최고 수준의 AI <a href="https://azure.microsoft.com/en-us/services/cognitive-services/language-understanding-intelligent-service/" target="_blank">서비스인 MICROSOFT Cognitive Services LUIS(Language Understanding Service)</a> 및 <a href="https://azure.microsoft.com/en-us/services/bot-service/" target="_blank">Azure Bot Service</a>를 일반 공급한다고 <a href="https://aka.ms/ltbotluis" target="_blank">발표</a>&rsquo;하게 되어 매우 기쁩니다.</p>


  <p>가능성에 대해 생각해 보세요. 데이터 과학에 대한 전문 지식에 관계없이 모든 개발자는 수많은 대화형 채널에서 애플리케이션의 범위를 보강하고 확장할 수 있는 대화형 AI를 빌드할 수 있습니다. 앱은 자연어, 콘텐츠에 대한 이유를 이해하고 지능형 작업을 수행할 수 있습니다. 데이터 과학에 대한 전문 지식이 없는 개발자와 조직에 지능형 에이전트를 도입하는 것은 인간이 일상 생활에서 컴퓨터와 상호 작용하는 방식과 기업이 고객 및 직원과 비즈니스를 운영하는 방식에 지장을 줍니다.</p>


  <p>지난 2년 동안의 미리 보기 경험을 통해 디지털 변환을 진행하는 수천 명의 고객과 상호 작용하면서 많은 것을 배웠습니다. 일반 공급 <a href="https://aka.ms/ltbotluis" target="_blank">공</a>지에서 일부 고객 사례(예: <a href="https://customers.microsoft.com/en-us/story/ups" target="_blank">UPS</a>, <a href="https://aka.ms/csequadex">Equadex</a> 등)를 강조했습니다. 이 게시물에서는 Azure Bot Service 및 LUIS를 사용한 대화형 AI, 지금까지 학습한 내용&rsquo; 및 새로운 기능에 대해 자세히 설명합니다. 또한 자연어를 사용하여 대화형 봇 빌드를 시작하는 것이 얼마나 쉬운지 보여 드립니다.</p>


  <h2>Azure Bot Service 및 LUIS를 사용하는 대화형 AI</h2>


  <p>Azure Bot Service는 모든 디바이스의 여러 채널에서 고객에게 연결할 수 있는 대화형 봇을 위한 확장 가능한 통합 봇 개발 및 호스팅 환경을 제공합니다. 봇은 텍스트, 음성, 카드 또는 이미지를 비롯한 다양한 형식의 사용자 입력을 허용하는 대화형 인터페이스를 제공합니다. Azure Bot Service는 Cortana, Facebook Messenger, Skype 등 사용자와 상호 작용하는 14개의 채널 집합을 제공합니다. 인텔리전스는 사용자 입력을 이해하고 이유를 이해하는 봇 브레인을 형성하는 클라우드 AI 서비스를 통해 Azure Bot Service에서 활성화됩니다. 입력 이해에 따라 봇은 사용자가 작업 처리기를 통해 일부 작업을 완료하거나 질문에 대답하거나 채팅을 할 수 있도록 도와줍니다. 다음 다이어그램에서는 언어 이해, 음성 인식, QA&amp; Maker 등을 포함하여 Azure Bot Service 및 클라우드 AI 서비스를 통해 대화형 AI 애플리케이션을 사용하도록 설정하는 방법을 요약합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/68da163b-ff6b-4ade-b7fa-65e078762915.png"><img alt="Image 2" border="0" height="847" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5588dd73-2c97-4efb-9a8e-e24ff0f31806.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지 2" width="1575"></a></p>


  <p><strong>LUIS(Language Understanding)</strong> 는 봇이 자연어 입력을 이해하고 적절한 조치를 취할 이유를 이해할 수 있도록 하는 봇 브레인의 핵심 부분입니다. 모든 비즈니스 시나리오에서 사용자 지정이 중요하기 때문에 Language Understanding은 데이터 과학에 대한 사전 전문 지식 없이도 거의 노력하지 않고 비즈니스 수직을 위한 사용자 지정 모델을 빌드하는 데 도움이 됩니다. 대화에서 중요한 정보를 식별하도록 설계된 이 기능은 사용자 목표(의도)를 해석하고 문장(엔터티)에서 중요한 정보를 증류하여 고품질의 미묘한 언어 모델을 구현합니다.</p>


  <p><strong>Language Understanding</strong> 및 <strong>Azure Bot Service</strong>의 일반 공급으로 더 많은 성과를 달성하고 사용자를 만족시키는 데 도움이 되는 새로운 기능도 도입할&#39;있습니다.</p>


  <p><strong>Language Understanding:</strong></p>


  <ul>
   <li>업데이트된 사용자 인터페이스를 사용하면 <strong>LUIS(Language Understanding Service)</strong> 사용자에게 그 어느 때보다 많은 의도와 엔터티를 제공합니다. 즉,&rsquo; 애플리케이션당 최대 <strong>500개의 의도</strong>(문장에서 식별된 작업 또는 작업) 및 100개의 엔터티(문장에서 추출된 관련 정보)를 확장하여 의도와 관련된 작업 또는 작업을 완료합니다.</li>
   <li>Language Understanding은 현재 기존 5 <strong>개 지역</strong> (서유럽, 미국 서부, 미국 동부2, 미국 중서부, 동남 아시아) 위에 <strong>있는 7개의 새로운 지역</strong> (미국 중남부, 미국 서부 2, 동아시아, 북유럽, 브라질 남부, 오스트레일리아 동부)에서 사용할 수 있습니다. 이렇게 하면 고객이 네트워크 대기 시간 및 대역폭을 개선하는 데 도움이 됩니다.</li>
   <li>Language Understanding 서비스는 영어 외에도 다양한 기능에 대해 더 많은 언어를 지원합니다.
   <ul>
    <li>이전에 영어로 사용할 수 있었던 미리 빌드된 엔터티(숫자, 날짜, 시간 등의 일반적인 개념을 나타낸)는 이제 <strong>프랑스어 및 스페인어</strong>로 사용할 수 있습니다.</li>
    <li>미리 빌드된 도메인(애플리케이션에서 직접 추가하고 사용할 수 있는 도메인별로 그룹화된 의도 및 엔터티의 기성품 컬렉션)도 <strong>이제 중국</strong>어로 사용할 수 있습니다.</li>
    <li>개발자가 LUIS 도메인 어휘를 사용자 지정하는 데 도움이 되는 구 제안을 <strong>중국어, 스페인어, 일본어, 프랑스어, 포르투갈어, 독일어 및 이탈리아어 7개 언어</strong>로 사용할 수 있습니다.</li>
   </ul>
   </li>
  </ul>


  <p>Azure Bot Service:</p>


  <ul>
   <li>Microsoft Bot Framework 채널, 개발 도구 및 호스팅 솔루션과 통합된 환경을 제공하여 봇 개발을 가속화합니다.</li>
   <li>Bot Service에서 지원되는 채널을 통해 코드 수정 없이 대상 그룹과 커넥트. Office 365 이메일, GroupMe, Facebook Messenger, Kik, Skype, Slack, Microsoft Teams, 전보, 텍스트/SMS, Twilio, Cortana, 비즈니스용 Skype &ndash; 또는 앱 또는 웹 사이트에서 사용자 지정 환경을 제공합니다.</li>
   <li>이제 Bot Service가 <strong>Azure Portal에 통합됩니다</strong>. 신뢰할 수 있는 Azure 에코시스템에서 24x7 지원, 모니터링 기능, 통합 청구 등에 쉽게 액세스할 수 있습니다.</li>
   <li>이제 <strong>북유럽, 오스트레일리아 남동부, 오스트레일리아 동부, 브라질 남부 및 동</strong>아시아 지역에 새로운 배포를 포함하여 미국 서부, 미국 동부, 서유럽 및 동남 아시아와 같은 9개 지역에서 일반 공급됩니다.</li>
   <li>또한 웹 채팅 및 directline<strong>을 포함한 Premium 채널을</strong> 발표합니다. Premium 채널은 표준 채널을 통해 고유한 기능을 제공합니다.&nbsp; <ul>
    <li>공개 채팅 서비스와 데이터를 공유하는 대신 웹 사이트 또는 애플리케이션에서 사용자와 통신합니다.</li>
    <li>고급 사용자 지정 기회를 가능하게 하는 오픈 소스 웹 채팅 및 직접 회선 클라이언트</li>
    <li>프리미엄 채널에 대한 99.9% 가용성 보장</li>
   </ul>
   </li>
  </ul>


  <p>개발자는 다른 Azure 서비스에 연결하여 봇을 보강하고 Cognitive Services를 추가하여 봇이 더 인간적인 방식으로 보고, 듣고, 해석하고, 상호 작용할 수 있도록 할 수 있습니다. 예를 들어 Computer Vision 및 Face API는 언어를 기반으로 봇이 봇에 전달된 이미지와 얼굴을 이해할 수 있도록 합니다.</p>


  <h2>고객&rsquo; 환경을 통한 Learning</h2>


  <p>Microsoft는 몇 년 동안 특정 채팅 서비스의 특정 대상을 대상으로 하는 전용 솔루션부터 개발자가 나머지 사용자 지정 솔루션 자체를 만들 것으로 예상하는 범용 API&rsquo;에 이르기까지 새로운 지능형 대화형 환경을&hellip; 빌드하기 위해 AI를 적용하는 데 앞장서왔습니다.&nbsp;  우리는 여전히 대화형 애플리케이션 모델의 이러한 진화의 시작 부분에 있습니다. 그러나 이미 우리는 미래에 대해 어떻게 생각하는지 안내하는 테이크 아웃이 있습니다.</p>


  <p><strong>봇은 우리가 비즈니스를 수행하는 방식을 바꾸고 있습니다.</strong> Microsoft는 봇을 비즈니스로 디지털 변환의 핵심 부분으로 보는 고객과 지속적으로 좋은 토론을 하고 있습니다. 고객 지원 환경을 향상시키거나, 정보에 쉽게 액세스하거나, 그렇지 않으면 웹 사이트를 방문하지 않을 수 있는 대상에게 비즈니스를 노출할 수 있는 기회를 볼 수 있습니다.</p>


  <p><strong>개발자는 기술을 선택해야 합니다.</strong> 오픈 소스 기술의 인기가 증가함에 따라 개발자는 솔루션을 빌드하는 데 사용하는 기술 구성 요소를 선택하려고 합니다.</p>


  <p><strong>뛰어난 대화형 애플리케이션은 다중 모달입니다.</strong> 고객은 여러 작업을 수행하는 대화형 환경을 구축하고 있습니다. 예를 들어 고객 지원 봇에는 QA&amp; 검색 함수, 지원 티켓 입력 함수, 문제를 진단하는 단계별 대화 상자 및 최종 확인을 위해 사용자에게 전달하는 약속 예약 함수가 있을 수 있습니다.</p>


  <p><strong>AI 플랫폼은 비즈니스 요구 사항에 맞게 확장되어야 합니다. </strong> 비즈니스 시나리오는 종종 봇으로 코딩되는 개념 집합을 기반으로 합니다. 개발자는 임의 제한 없이 비즈니스의 복잡성으로 확장하기 위해 의존하는 기술이 필요합니다.</p>


  <p><strong>대화형 앱 플랫폼은 안정적이고 규정을 준수해야 합니다.</strong> 모바일 앱 플랫폼이 뛰어난 생산성 시나리오를 가능하게 하기 위해 강력하고 안전한 플랫폼을 제공해야 하는 것과 동일한 방식으로 대화형 애플리케이션 플랫폼도 마찬가지입니다. 인증된 보안, 신뢰할 수 있는 규정 준수 및 개인 정보 보호 인식이 있어야 합니다. 또한 플랫폼은 개발자가 규격 솔루션을 쉽게 빌드할 수 있도록 해야 합니다.</p>


  <p><strong>비즈니스는 글로벌 및 다국어입니다. </strong> 기업은 원하는 언어로 전 세계 24/7 고객과 대화해야 합니다.</p>


  <p><strong>훌륭한 대화형 애플리케이션을 빌드하는 데는 예술이 있습니다.</strong> 80 명과 90&rsquo;&rsquo;년대가 네이티브 앱에 대한 일반적인 컨트롤이라고 생각하는 것과 웹 및 모바일에 대한 2000&rsquo;년대와 마찬가지로 업계는 여전히 훌륭한 대화형 애플리케이션이 된다는 것이 무엇을 의미하는지 정의하고 있습니다.</p>


  <h2>주요 디자인 고려 사항</h2>


  <p>학습을&rsquo;&rsquo; 고려할 때 다음 6개 지점에 디자인을 고정하여 Azure Bot Service 및 LUIS(Language Understanding) 기능을 형성했습니다.</p>


  <p><strong>코드 우선 방법:</strong> Azure Bot Service는 개발자가 봇&rsquo; 대화형 기능을 완전히 제어할 수 있도록 하는 코드 우선 접근 방식을 사용하는 BotBuilder SDK V3(Node.js)를 기반으로 합니다. Node.JS 및 C#에서 모두 사용할 수 있는 오픈 소스 SDK&rsquo;는 개발자가 슬롯 채우기, 대화 관리 및 카드 표현과 같은 다양한 작업을 수행할 수 있도록 여러 대화 상자 유형 및 대화형 오케스트레이션 도구를 제공합니다.</p>


  <p><strong>다양한 대화 관리 버전:</strong> 개발자는 간단한 질문 답변 봇부터 10번 또는 15번 턴에 걸쳐 있는 다중 턴 솔루션에 이르기까지 다양한 봇을 빌드하여 작업을 완료합니다. 봇 개발자가 노출할 수 있는 다양한 작업 유형을 다루는 다양한 대화 관리 버전 집합을 제공합니다. 프롬프트, 양식 채우기, 자연어 및 프롬프트와 같은 일부 구성 요소를 다시 사용할 수 있는 고유한 대화 관리 시스템을 활용하는 봇을 만들 수 있습니다.</p>


  <p><strong>봇 플랫폼 열기:</strong> 오픈 소스 기술에 대한 Azure&#39;노력을 바탕으로 SDK 및 LUIS를 사용하는 애플리케이션을 연결된 인프라에 배포하고 여러 채팅 채널의 대상 그룹을 대상으로 하는 모든 디바이스에서 사용할 수 있습니다. 이 개방형 디자인을 사용하면 퍼블릭 클라우드 또는 온-프레미스 인프라를 비롯한 다양한 배포 플랫폼과 제품을 통합할 수 있습니다.</p>


  <p>글로벌 및 다국어: Azure 클라우드의 일부로 서비스를 고가용성 및 고객과 최대한 가깝게 만들기 위해 상당한 노력을 기울였습니다.&nbsp; Azure Bot Service 및 Language Understanding은 대화를 이해하기 위한 증가하는 언어 목록을 지원합니다.</p>


  <p><strong>빠르게 시작:</strong> 봇은 어디서나 배포할 수 있지만 Azure를 사용하면 한 번의 클릭으로 봇 및 AI 애플리케이션을 호스팅하기 위한 풍부한 연결된 클라우드 서비스를 제공합니다.&nbsp; Azure Bot Service 및 LUIS는 몇 분 안에 자연스럽게 사용자와 대화할 수 있는 실행 중인 봇을 가져옵니다. Azure Bot Service는 개발자가 비즈니스 논리에 집중할 수 있도록 필요한 모든 Azure 리소스를 프로비전합니다. LUIS는 일정, 음악 및 디바이스와 같은 사용자 지정 가능한 미리 빌드된 앱 및 엔터티 사전을 제공하므로 솔루션을 보다 빠르게 빌드하고 배포할 수 있습니다. 사전은 웹에 대한 집단 지식에서 채굴되고 수십억 개의 항목을 제공하므로 모델이 사용자 대화에서 중요한 정보를 올바르게 식별할 수 있습니다.</p>


  <p><strong>거의 노력하지 않는 사용자 지정 모델:</strong> 사용자 지정은 모든 비즈니스 시나리오에 중요하므로 LUIS는 전문적이지 않은 기계 학습 개발자가 효과적인 사용자 지정 언어 이해 모델을 빌드할 수 있도록 기계 교육의 철학을 활용합니다. 기계 학습은 새로운 알고리즘을 만들고 학습자의&rdquo; 정확&ldquo;도를 향상시키는 데 중점을 두지만 기계 교육 분야는 교사의 &ldquo;효능감에 중점을 둡&rdquo;니다. 기계 교육은 소프트웨어 엔지니어링 및 프로그래밍 언어의 원칙을 따르고 확장하는 패러다임의 변화입니다. 개발자 도메인 지식을 기계 학습 알고리즘으로 전송하여 기계 학습 모델을 빌드하는 도구 집합을 개발자에게 제공합니다. 이는 이 지식에서 유용한 모델을 만드는 Machine Learning 대조됩니다. 개발자 지식은 스키마(LUIS 애플리케이션에 있는 의도 및 엔터티)와 레이블이 지정된 예제를 통해 LUIS로 표현됩니다.&nbsp; 프로그램에서 쉽게 사용할 수 있도록 정규화로 엔터티를 안정적으로 인식하기 위한 다양한 기술을 지원합니다.</p>


  <p><strong>항상 모니터링, 학습 및 개선:</strong> Azure Bot Service 및 LUIS는 개발자가 언어 이해 모델의 품질 및 봇 사용량을 포함하여 봇의 성능을 모니터링하는 데 도움이 되는 Azure 모니터링 도구를 사용합니다. 모델이 입력 처리를 시작하면 LUIS가 활성 학습을 시작하여 모델을 지속적으로 업데이트하고 개선할 수 있습니다. 실제 봇 트래픽에서 가장 유익한 발화를 선택하여 모델에 추가하고 지속적으로 개선하는 데 도움이 됩니다. LUIS 모델의 학습 데이터에 추가할 이러한 지능형 선택 예제를 통해 개발자는 많은 데이터가 필요하지 않지만&rsquo; 높은 정확도로 수행되는 비용 효율적인 모델을 빌드할 수 있습니다.</p>


  <h2>Bot Service 및 Language Understanding 시작</h2>


  <p>이 섹션에서&rsquo;는 LUIS(Language Understanding)를 사용하여 사용자를 이해하는 Azure Bot Service를 사용하여 봇을 만듭니다. 자연어를 사용하여 봇을 만들 때 봇은 사용자가 의도를 식별하여 수행할 작업을 결정합니다. 이 의도는 음성 또는 텍스트 입력 또는 발화에서 결정되며, 봇 개발자가 코딩한 작업에 매핑될 수 있습니다. 예를 들어 메모 작성 봇은 노트를 인식합니다. 메모를 만들기 위한 기능을 호출하는 의도를 만듭니다. 봇은 발언에서 중요한 단어인 엔터티를 추출해야 할 수 도 있습니다. 메모 작성 봇의 예에서는 Notes입니다. 타이틀 엔터티는 각 노트의 제목을 식별합니다.</p>


  <h3>Bot Service를 사용하여 Language Understanding 봇 만들기</h3>


  <p>봇을 만들려면 <a href="https://portal.azure.com/" target="_blank">Azure</a> Portal에 로그인하고, 메뉴 블레이드에서 새 리소스 만들기를 선택하고<strong> , AI + Cognitive Services를</strong> 선택합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0db3c822-35ef-4026-b658-0008dc1bab90.png"><img alt="AI   Cognitive Services" border="0" height="480" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2847e8f3-06f5-4612-9acf-6a7080b7ac57.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="AI Cognitive Services" width="517"></a></p>


  <p>제안을 탐색하거나 <strong>웹앱 봇</strong>을 검색할 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b2c7cbd4-4553-4803-abea-8057f595d71f.png"><img alt="Web App Bot" border="0" height="277" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f1d486c6-9e8e-4c60-ae1b-35b1ddff62ca.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="웹앱 봇" width="640"></a></p>


  <p>이 옵션을 선택하면 Bot Service 블레이드가 나타납니다. Azure 서비스 사용자에게 친숙한 기능입니다. 그렇지 않은&rsquo; 사용자의 경우 여기에서 Bot Service가 라이브 위치, 구독 등과 같이 봇을 만드는 데 사용할 서비스에 대한 정보를 지정할 수 있습니다. <strong>Bot Service</strong> 블레이드에서 필요한 정보를 제공하고 만들기를 클릭합니다. 이렇게 하면 Bot Service 및 LUIS 앱이 만들어지고 Azure에 배포됩니다. 몇 가지 흥미로운 필드:</p>


  <ul>
   <li><strong>앱 이름을</strong> 봇&rsquo; 이름으로 설정합니다. 이 이름은 봇이 클라우드에 배포될 때 하위 도메인으로 사용됩니다(예: mynotesbot.azurewebsites.net). 이 이름은 봇과 연결된 LUIS 앱의 이름으로도 사용됩니다. 나중에 봇과 관련된 LUIS 앱을 찾을 때 사용할 수 있도록 복사합니다.</li>
   <li>구독, 리소스 그룹, 호스팅 계획 및 위치를 선택합니다.</li>
   <li>가격 책정의 경우 무료 <strong>가격 책정 계층</strong>을 선택할 수 있습니다. 더 많은 것이 필요한 경우 언제든지 돌아가서 변경할 수 있습니다.</li>
   <li>이 샘플에서는 봇 템플릿 필드에 대한<strong> 언어 이해(C#)</strong> <strong>템플릿</strong> 을 선택합니다.</li>
   <li>최종 필수 필드의 경우 봇&rsquo; 대화 상태를 저장할 <strong>Azure Storage</strong> 선택합니다. 이를 봇이 각 사용자가 대화에 있는 위치를 추적하는 위치로 간주합니다.</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f2e6eca0-bb5c-4bfe-9371-79e0362edfb9.png"><img alt="Bot Service" border="0" height="756" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/82551100-22f6-46c9-99de-7e7f38c4c530.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="Bot Service" width="314"></a></p>


  <p>이제 완료했으므로&rsquo; <strong>만들기</strong>를 클릭할 수 있습니다. Azure는 봇을 운영하는 데 필요한 리소스와 자연어 모델을 호스트하는 LUIS 계정을 포함하여 봇을 만드는 방법을 설정합니다. 완료되면&rsquo; Azure Portal의 오른쪽 위 모서리에 있는 종을 통해 알림을 받게 됩니다.<br>

  다음으로, 봇 서비스가 배포되었는지 확인합니다.</p>


  <ul>
   <li>알림(Azure Portal의 위쪽 가장자리에 있는 벨 아이콘)을 클릭합니다. 알림이 <strong>배포가 시작됨</strong>에서 <strong>배포 성공</strong>으로 변경됩니다.</li>
   <li>배포에 대한 알림 변경이 <strong>성공하면</strong> 해당 알림에서<strong> 리소스로 이동을</strong> 클릭합니다.</li>
  </ul>


  <h3>봇 사용해 보기</h3>


  <p>이제 작업 봇이 있어야 합니다. 그것을 밖으로 시도하자&rsquo;.</p>


  <p>봇이 등록되면 <strong>웹 채팅에서 테스트</strong>를 클릭하여 [웹 채팅] 창을 엽니다. 웹 채팅에서 hello&quot;를 입력&quot;합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d80ed715-8db8-4264-8820-17cdd08bd19f.png"><img alt="NotesBot - Test in Web Chat" border="0" height="753" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/ed004da1-a3c1-496d-b335-924e37b5c637.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="NotesBot - 웹 채팅에서 테스트" width="817"></a></p>


  <p>봇은 인사말에 도달했다고 응답 &quot;합니다. 당신은 말했다 : 안녕하세요&quot;. 이는 봇이 메시지를 수신했고 봇이 만든 기본 LUIS 앱에 메시지를 전달했음을 확인합니다. 이 기본 LUIS 앱이 Greeting 의도를 검색했습니다.</p>


  <p><strong>참고:</strong> 경우에 따라 봇이 응답하기 전에 시작 후 첫 번째 메시지 또는 두 개의 메시지를 다시 시도해야 할 수 있습니다.</p>


  <p>비올라! 작동하는 봇이 있습니다! 기본 봇은 몇 가지 사항만 알고 있습니다. 도움말 및 취소뿐만 아니라 일부 인사말을 인식합니다. 다음 섹션에서&rsquo;는 봇에 대한 LUIS 앱을 수정하여 Note 복용 봇에 대한 몇 가지 새로운 의도를 추가합니다.</p>


  <h3>LUIS 앱 수정</h3>


  <p>Azure에 로그인하는 데 사용하는 것과 동일한 계정을 사용하여 <a href="https://www.luis.ai/" target="_blank">www.luis.ai</a> 로그인합니다. <strong>내 앱</strong>을 클릭합니다. 모두 잘 진행되었으면 앱&rsquo; 목록에서 <strong>Bot Service</strong>를 만들 때 Bot Service 블레이드에서 <strong>앱 이름과 동일한 이름을</strong> 가진 앱을 찾습니다.</p>


  <p>앱을 연 후 취소, 인사말, 도움말 및 없음의 네 가지 의도가 표시됩니다. 우리가 이미 언급 한 처음 세 가지. <strong>다른</strong> 모든 항목을&rdquo; 캡처하는 LUIS의 특별한 의도는 &ldquo;없습니다.</p>


  <p>샘플에서는 사용자에 대한 세 가지 의도인&rsquo; <strong>Note.Create</strong> 및 <strong>Note.ReadAloud</strong>를 추가하려고 합니다. 편리하게, LUIS의 뛰어난 기능 중 하나는 애플리케이션을 부트스트랩하는 데 사용할 수 있는 미리 빌드된 도메인이며, 그 중 하나는 Note입니다.</p>


  <ul>
   <li>페이지의 왼쪽 아래에 <strong>있는 미리 빌드된 도메인</strong> 을 클릭합니다. <strong>메모 </strong>도메인을 찾아 <strong>도메인 추가</strong>를 클릭합니다.</li>
   <li>이 자습서에서는 미리 빌드된 <strong>Note</strong> 도메인에 포함된 모든 의도를 사용하지&#39;. <strong>의도</strong> 페이지에서 다음 의도 이름을 각각 클릭한 다음 <strong>의도 삭제</strong> 단추를 클릭하여 앱에서 제거합니다.
   <ul>
    <li>Note.ShowNext</li>
    <li>Note.DeleteNoteItem</li>
    <li>Note.Confirm</li>
    <li>Note.Clear</li>
    <li>Note.CheckOffItem</li>
    <li>Note.AddToNote</li>
    <li>Note.Delete</li>
   </ul>
   </li>
   <li><strong>중요:</strong> LUIS 앱에 남아 있어야 하는 유일한 의도는 Note.ReadAloud, Note.Create, None, Help, Greeting 및 Cancel 의도입니다.&nbsp; &rsquo;앱이 여전히 작동하지만 일관성 없는 동작이 더 자주 발생할 수 있습니다.</li>
  </ul>


  <p>앞에서 설명한 것처럼 웹에서 추가한 의도&rsquo;는 사용자가 봇에서 수행할 수 있는 작업 유형을 나타냅니다.&nbsp; 미리 정의&rsquo;되었으므로 모델에 대한 추가 조정을 수행할 필요가 없으므로&rsquo; 모델을 학습하고 게시할 수 있습니다.</p>


  <ul>
   <li>오른쪽 위에 있는 <strong>학습</strong> 단추를 클릭하여 앱을 학습시킵니다.&nbsp; 학습은 의도 및 엔터티를 만들고, 발화를 입력하고, 레이블을 지정하고, 한 번의 클릭으로 기계 학습된 모델을 생성하여 모델에 입력한 모든 것을&rsquo; 사용합니다.&nbsp; LUIS 포털에서 앱을 테스트하거나 봇에서 사용할 수 있도록&rsquo; 게시로 이동할 수 있습니다.</li>
   <li>위쪽 탐색 모음에 있는 <strong>게시</strong>를 클릭하여 <strong>게시</strong> 페이지를 엽니다. <strong>프로덕션 슬롯</strong>에 <strong>게시</strong> 단추를 클릭합니다. 게시에 성공하면 <strong>앱 게시</strong> 페이지의 <strong>엔드포인트</strong> 열에 표시된 URL을 리소스 이름이 Starter_Key로 시작하는 행에 복사합니다. 나중에 봇&rsquo; 코드에서 사용할 수 있도록 이 URL을 저장합니다. URL의 형식은 <a href="https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/xxxxxxxxxxxxxxxxx?subscription-key=xxxxxxxxxxxxxx3&amp;timezoneOffset=0&amp;verbose=true&amp;q=">;timezoneOffset=0verbose&amp;=trueq&amp;= 예제https://westus.api.cognitive.microsoft.com/luis/v2.0/apps/xxxxxxxxxxxxxxxxx?subscription-key=xxxxxxxxxxxxxx3&amp</a>와 유사합니다.</li>
  </ul>


  <p>이제 Language Understanding 애플리케이션이 봇에 대해 준비되었습니다. 사용자가 메모를 만들거나 삭제하거나 다시 읽도록 요청하는 경우 Language Understanding은 이를 식별하고 조치를 수행할 봇에 올바른 의도를 반환합니다. 다음 섹션에서&rsquo;는 이러한 의도를 처리하는 논리를 봇에 추가합니다.</p>


  <h3>봇 코드 수정</h3>


  <p>Bot Service는 기존 개발 환경에서 작동하도록 설정됩니다. 소스 코드를 GIT와 동기화하고 선호하는 개발 환경에서 작동합니다. 즉, Azure Bot Service는 포털에서 바로 편집할 수 있는 기능도 제공합니다. 이는 실험에 적합합니다. <strong>빌드</strong>를 클릭한 다음, <strong>온라인 코드 편집기 열기</strong>를 클릭합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2e626443-f7bf-4a12-9fca-25e8072c72a7.png"><img alt="Modify the bot code" border="0" height="120" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/94cb0679-6430-4b0d-ae98-fcb0ebc820a9.png" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="봇 코드 수정" width="240"></a></p>


  <p>첫째, 몇 가지 서문. 코드 편집기에서 BasicLuisDialog.cs를 엽니다. LUIS 앱에서 취소, 인사말, 도움말 및 없음 의도를 처리하기 위한 코드가 포함되어 있습니다.</p>


  <p>다음 명령문을 추가합니다.</p>


  <p>using System.Collections.Generic;</p>


  <h3>Note(메모) 저장용 클래스 만들기</h3>


  <p>BasicLuisDialog 생성자 다음에 다음을 추가합니다.</p>


  <pre>

  private readonly Dictionary&lt;string, Note&gt; noteByTitle = new Dictionary&lt;string, Note&gt;();


  private Note noteToCreate;


  private string currentTitle;


  // CONSTANTS


  // Name of note title entity


  public const string Entity_Note_Title = &quot;Note.Title&quot;;


  // Default note title


  public const string DefaultNoteTitle = &quot;default&quot;;


  [Serializable]


  public sealed class Note : IEquatable&lt;Note&gt;


  {


  public string Title { get; set; }


  public string Text { get; set; }


  public override string ToString()


  {


  return $&quot;[{this.Title} : {this.Text}]&quot;;


  }


  public bool Equals(Note other)


  {


  return other != null


  &amp;&amp; this.Text == other.Text


  &amp;&amp; this.Title == other.Title;


  }


  public override bool Equals(object other)


  {


  return Equals(other as Note);


  }


  public override int GetHashCode()


  {


  return this.Title.GetHashCode();


  }


  }</pre>


  <h3>Note.Create 의도 처리</h3>


  <p>참고.의도를 만들고 BasicLuisDialog 클래스에 다음 코드를 추가합니다.</p>


  <pre>

  [LuisIntent(&quot;Note.Create&quot;)]


  public Task NoteCreateIntent(IDialogContext context, LuisResult result)


  {


  EntityRecommendation title;


  if (!result.TryFindEntity(Entity_Note_Title, out title))


  {


  // Prompt the user for a note title


  PromptDialog.Text(context, After_TitlePrompt, &quot;What is the title of the note you want to create?&quot;);


  }


  else


  {


  var note = new Note() { Title = title.Entity };


  noteToCreate = this.noteByTitle[note.Title] = note;


  // Prompt the user for what they want to say in the note


  PromptDialog.Text(context, After_TextPrompt, &quot;What do you want to say in your note?&quot;);


  }


  return Task.CompletedTask;


  }


  private async Task After_TitlePrompt(IDialogContext context, IAwaitable&lt;string&gt; result)


  {


  EntityRecommendation title;


  // Set the title (used for creation, deletion, and reading)


  currentTitle = await result;


  if (currentTitle != null)


  {


  title = new EntityRecommendation(type: Entity_Note_Title) { Entity = currentTitle };


  }


  else


  {


  // Use the default note title


  title = new EntityRecommendation(type: Entity_Note_Title) { Entity = DefaultNoteTitle };


  }


  // Create a new note object


  var note = new Note() { Title = title.Entity };


  // Add the new note to the list of notes and also save it in order to add text to it later


  noteToCreate = this.noteByTitle[note.Title] = note;


  // Prompt the user for what they want to say in the note


  PromptDialog.Text(context, After_TextPrompt, &quot;What do you want to say in your note?&quot;);


  }


  private async Task After_TextPrompt(IDialogContext context, IAwaitable&lt;string&gt; result)


  {


  // Set the text of the note


  noteToCreate.Text = await result;


  await context.PostAsync($&quot;Created note **{this.noteToCreate.Title}** that says \&quot;{this.noteToCreate.Text}\&quot;.&quot;);


  context.Wait(MessageReceived);


  }

  </pre>


  <h3>Note.ReadAloud 의도 처리</h3>


  <p>봇은 Note.ReadAloud 의도를 사용하여 메모의 내용을 표시하거나 메모 제목이 검색되지&#39;경우 모든 메모를 표시할 수 있습니다. 다음 코드를 BasicLuisDialog 클래스에 붙여넣습니다.</p>


  <pre>

  [LuisIntent(&quot;Note.ReadAloud&quot;)]


  public async Task NoteReadAloudIntent(IDialogContext context, LuisResult result)


  {


  Note note;


  if (TryFindNote(result, out note))


  {


  await context.PostAsync($&quot;**{note.Title}**: {note.Text}.&quot;);


  }


  else


  {


  // Print out all the notes if no specific note name was detected


  string NoteList = &quot;Here&#39;s the list of all notes: \n\n&quot;;


  foreach (KeyValuePair&lt;string, Note&gt; entry in noteByTitle)


  {


  Note noteInList = entry.Value;


  NoteList += $&quot;**{noteInList.Title}**: {noteInList.Text}.\n\n&quot;;


  }


  await context.PostAsync(NoteList);


  }


  context.Wait(MessageReceived);


  }


  public bool TryFindNote(string noteTitle, out Note note)


  {


  // TryGetValue returns false if no match is found.


  bool foundNote = this.noteByTitle.TryGetValue(noteTitle, out note);


  return foundNote;


  }


  public bool TryFindNote(LuisResult result, out Note note)


  {


  note = null;


  string titleToFind;


  EntityRecommendation title;


  if (result.TryFindEntity(Entity_Note_Title, out title))


  {


  titleToFind = title.Entity;


  }


  else


  {


  titleToFind = DefaultNoteTitle;


  }


  // TryGetValue returns false if no match is found.


  return this.noteByTitle.TryGetValue(titleToFind, out note);


  }</pre>


  <h3>봇 빌드</h3>


  <p>잘라내기 및 붙여넣기 부분이 완료되었으므로 코드 편집기에서 <strong>build.cmd</strong> 를 마우스 오른쪽 단추로 클릭하고 <strong>콘솔에서 실행을</strong> 선택할 수 있습니다. 봇은 온라인 코드 편집기 환경 내에서 빌드 및 배포됩니다.</p>


  <h3>봇 테스트</h3>


  <p>Azure Portal에서 <strong>Web Chat에서 테스트</strong>를 클릭하여 봇을 테스트합니다. 메모 만들기, 내 노트&quot; 읽기 및 &quot;노트&quot; 삭제&quot;와 &quot;같은 &quot;메시지를 입력해 보세요.&nbsp; &rsquo;자연어를 사용하면 요청을 명시하는 방법에 대한 유연성이 더 높기 때문에 Language Understandings&rsquo; Active Learning 기능을 사용하여 Language Understanding 애플리케이션을 열 수 있으며, 이해하지 못한&rsquo; 내용에 대해 제안하고 앱을 보다 효과적으로 만들 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0525790e-7c7a-4ebb-bbd0-6e292a718f28.png"><img alt="Test in Web Chat" border="0" height="768" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5c6a1ce6-f390-43d3-99ca-a4ca9121aa17.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="웹 채팅에서 테스트" width="570"></a></p>


  <p>팁: 봇이 올바른 의도 또는 엔터티를 항상 인식하지&#39;경우 학습할 수 있는 더 많은 예제 발화를 제공하여 Language Understanding 앱&#39;성능을 향상시킵니다. 봇&#39;코드를 수정하지 않고 Language Understanding 앱을 다시 학습할 수 있습니다.</p>


  <h2>그것은&#39;(지금은)</h2>


  <p>여기에서 당신은&rsquo; 시작에 불과합니다.&nbsp; 봇 서비스로 돌아가서 다양한 대화 채널에 봇을 연결할 수 있습니다.&nbsp; 미리 빌드된 의도를 제거하고 애플리케이션에 대한 사용자 지정 의도 만들기를 시작할 수 있습니다.</p>


  <p>&rsquo;대화형 애플리케이션을 만드는 데 있어 발견할 수 있는 세계가 있으며&rsquo; 쉽게 시작할 수 있습니다.&nbsp; 사용자가 만든 내용과 피드백을 볼 수 있기를 기대합니다. 자세한 내용은 다음 사이트를 방문하세요.</p>


  <ul>
   <li>Azure Bot Service: <a href="https://azure.microsoft.com/en-us/services/bot-service/" target="_blank">웹 사이트</a></li>
   <li>LUIS(Language Understanding 서비스): <a href="https://azure.microsoft.com/en-us/services/cognitive-services/language-understanding-intelligent-service/" target="_blank">웹 사이트</a> 및 <a href="https://www.luis.ai/" target="_blank">포털</a></li>
   <li>참조 아키텍처는 다음을 참조하세요. <a href="https://aka.ms/scenarios-abs">https://aka.ms/scenarios-abs</a></li>
  </ul>


  <p>즐거운 코딩 작업이 되길 바랍니다!</p>


  <p>Azure Bot Service 및 Language Understanding 팀</p>
