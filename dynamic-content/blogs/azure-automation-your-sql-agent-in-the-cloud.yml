### YamlMime:Yaml
ms.openlocfilehash: e63e8c893234c56190a4db827db8ed49463ca78e
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911388"
Slug: azure-automation-your-sql-agent-in-the-cloud
Title: 'Azure Automation: 클라우드의 SQL 에이전트'
Summary: 이 블로그에서는 특정 데이터베이스가 최대 크기 용량에 접근할 때 Azure Automation 서비스를 활용하여 고객이 요청한 테이블 잘림 시나리오를 수행하는 방법을 보여 줍니다.  특정 시나리오를 대상으로 하지만 강조 표시된 예제에서는 일반적으로 SQL Server 에이전트가 필요한 수많은 Azure SQL DB 시나리오를 수행할 수 있도록 하는 프레임워크를 제공합니다.
Content: "정기적인 유지 관리 또는 관리 작업을 예약할 수 있어 하나 이상의 데이터베이스를 관리하는 모든 사용자가 더 쉽게 생활할 수 있습니다.SQL Server 에이전트는 온-프레미스 또는 Azure의 가상 머신에서 SQL Server 활용하는 사용자에게 이 기능을 제공합니다.그러나 Azure SQL Database PaaS 제품을 선호하는 사용자에게는 SQL Server 에이전트가 사용 가능한 기능이 아니라는 것을 인식하는 데 오랜 시간이 걸리지 않습니다.그 결과, 많은 사람들이 다양한 포럼에서 이 기능을 제공하고 <a href=\"https://social.msdn.microsoft.com/Forums/windowsazure/en-US/62127a81-8078-4926-9395-2ed7b5e07f4a/how-to-create-a-scheduled-task-for-sql?forum=ssdsgetstarted\"></a> <a href=\"https://social.msdn.microsoft.com/Forums/windowsazure/en-US/e86f3cab-2c08-410e-837c-34c5566ae45d/monitoring-schema-size-in-sql-azure?forum=ssdsgetstarted\">자 하는 열망</a>을 <a href=\"https://feedback.azure.com/forums/217321-sql-database/suggestions/1079035-add-sql-server-agent-or-its-ability-to-create-cust\">표명</a>했습니다.\n\n최근에 <a href=\"https://account.windowsazure.com/PreviewFeatures?fid=automation\">공개 미리 보기 서비스</a>로 <a href=\"https://blogs.technet.com/b/in_the_cloud/archive/2014/04/15/announcing-the-microsoft-azure-automation-preview.aspx\">도입된</a> <a href=\"https://azure.microsoft.com/en-us/services/automation/\">Azure</a> <a href=\"https://azure.microsoft.com/en-us/documentation/services/automation/\">Automation</a>은 Azure 플랫폼에 강력하고 필요한 PowerShell 워크플로 실행 서비스를 제공합니다.이러한 한때 어려운 유지 관리 작업은 이제 일반적인 Azure Portal 환경 내에서 자동화하고 편리하게 캡슐화할 수 있습니다.PowerShell 워크플로(Azure Automation에서 \"Runbook\"이라고 함)를 작성하고, 클라우드에 업로드하고, Runbook을 실행할 시기를 예약하기만 하면 됩니다. 그것은 간단합니다.\n\n이 컨텍스트를 고려할 때 Azure Automation이 Azure SQL DB용 SQL Server 에이전트 역할을 할 수 있나요?간단하게 말하면 그렇습니다.이 블로그에서는 특정 데이터베이스가 최대 크기 용량에 접근할 때 Azure Automation 서비스를 활용하여 <a href=\"https://social.msdn.microsoft.com/Forums/en-US/62127a81-8078-4926-9395-2ed7b5e07f4a/how-to-create-a-scheduled-task-for-sql?forum=ssdsgetstarted\">고객이 요청한</a> 테이블 잘림 시나리오를 수행하는 방법을 보여 줍니다.특정 시나리오를 대상으로 하지만 강조 표시된 예제에서는 일반적으로 SQL Server 에이전트가 필요한 수많은 Azure SQL DB 시나리오를 수행할 수 있도록 하는 프레임워크를 제공합니다.\n\nAzure Automation에 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/automation-create-runbook-from-samples/\">대한 몇 가지</a> <a href=\"https://blogs.technet.com/b/keithmayer/archive/2014/04/04/step-by-step-getting-started-with-windows-azure-automation.aspx\">시작</a> <a href=\"https://blogs.technet.com/b/cbernier/archive/2014/04/08/microsoft-azure-automation.aspx\">가이드</a> 가 있으므로 추적을 바로 살펴보겠습니다(Azure Automation 관련 질문이 있는 경우 <a href=\"https://social.msdn.microsoft.com/Forums/windowsazure/en-US/home?forum=azureautomation&amp;filter=alltypes&amp;sort=lastpostdesc\">여기에</a> 게시하세요).\n\n다음은 지정된 논리 서버에 대한 데이터베이스를 반복하고 데이터베이스 이름 배열과 현재 크기를 가져오는 Runbook의 예입니다(Runbook은 [<a href=\"https://gallery.technet.microsoft.com/scriptcenter/Azure-Automation-Your-SQL-30f8736b\">링크</a>]에서 다운로드할 수 있음).그런 다음 Runbook은 각 데이터베이스의 최대 크기를 쿼리하고 데이터베이스의 크기가 지정된 최대 크기 범위 내에 있으면 Runbook이 지정된 테이블을 자른다.\n<pre class=\"prettyprint\">workflow Remove-DataFromSqlDbTable \n{\n    param\n    (\n        # Fully-qualified name of the Azure DB server \n        [parameter(Mandatory=$true)] \n        [string] $SqlServerName,\n\n        # Credentials for $SqlServerName stored as an Azure Automation credential asset\n        # When using in the Azure Automation UI, please enter the name of the credential asset for the \"Credential\" parameter\n        [parameter(Mandatory=$true)] \n        [PSCredential] $Credential\n    )\n\n    inlinescript\n    {\n\n        # Setup credentials   \n        $ServerName = $Using:SqlServerName\n        $UserId = $Using:Credential.UserName\n        $Password = ($Using:Credential).GetNetworkCredential().Password\n\n        # Setup threshold for % of maximum DB size\n        $Threshold = 0.8\n\n        # Create connection to Master DB\n        $MasterDatabaseConnection = New-Object System.Data.SqlClient.SqlConnection\n        $MasterDatabaseConnection.ConnectionString = \"Server = $ServerName; Database = Master; User ID = $UserId; Password = $Password;\"\n        $MasterDatabaseConnection.Open();\n\n        # Create command to query the current size of active databases in $ServerName\n        $MasterDatabaseCommand = New-Object System.Data.SqlClient.SqlCommand\n        $MasterDatabaseCommand.Connection = $MasterDatabaseConnection\n        $MasterDatabaseCommand.CommandText = \n            \"\n                SELECT \n                       database_name,\n                       storage_in_megabytes [SizeMB]\n                FROM \n                       [sys].[databases] as db\n                INNER JOIN\n                       [sys].[resource_usage] as rs\n                ON\n                       rs.database_name = db.name\n                WHERE\n                       [time] = (SELECT Max([time]) FROM [sys].[resource_usage] WHERE database_name = db.name)\n                GROUP BY \n                       database_name, storage_in_megabytes\n            \"\n        # Execute reader and return tuples of results &lt;database_name, SizeMB&gt;\n        $MasterDbResult = $MasterDatabaseCommand.ExecuteReader()\n\n        # Proceed if there is at least one database\n        if ($MasterDbResult.HasRows)\n        {\n            # Create connection for each individual database\n            $DatabaseConnection = New-Object System.Data.SqlClient.SqlConnection\n            $DatabaseCommand = New-Object System.Data.SqlClient.SqlCommand\n\n            # Iterate through each database under $ServerName\n            while($MasterDbResult.Read())\n            {\n                $DbName = $MasterDbResult[0]\n                $DbSize = $MasterDbResult[1]\n\n                # Apply conditions for user databases (i.e., not master DB)\n                if($DbName -ne \"Master\")\n                {\n                    # Setup connection string for $DbName\n                    $DatabaseConnection.ConnectionString = \"Server=$ServerName; Database=$DbName; User ID=$UserId; Password=$Password;\"\n                    $DatabaseConnection.Open();\n\n                    # Create command for a specific database $DBName\n                    $DatabaseCommand.Connection = $DatabaseConnection\n                    $DatabaseCommand.CommandText = \"SELECT DATABASEPROPERTYEX ('$DbName','MaxSizeInBytes')\"\n\n                    # Execute query and return single scalar result \n                    $DbResultBytes = $DatabaseCommand.ExecuteScalar()\n                    $MaxDbSizeMB = $DbResultBytes/(1Mb)\n\n                    # Calculate $TargetDbSize\n                    $TargetDbSize = $MaxDbSizeMB * $Threshold\n\n                    # When the current $DbSize is greater than a percentage ($Threshold) of the $MaxDbSizeMB\n                    # then perform a certain action, in this example, truncate a table on that database\n                    if($DbSize -gt $TargetDbSize) \n                    {\n                        Write-Output \"Perform action on $DbName ($DbSize MB &gt; $TargetDbSize MB)\"\n\n                        # ExampleTable is a place holder for a table that holds a large volume of less important and expendable data\n                        # that can be truncated to save space on the database.\n\n                        $DatabaseCommand.CommandText = \"TRUNCATE TABLE [dbo].[ExampleTable]\"\n                        $NonQueryResult = $DatabaseCommand.ExecuteNonQuery()\n                    }\n                    else\n                    {\n                        Write-Output \"Do not perform action on $DbName ($DbSize MB &lt;= $TargetDbSize MB)\"\n                    }\n\n                    # Close connection to $DbName\n                    $DatabaseConnection.Close()        \n                }\n            }\n        } \n\n        # Close connection to Master DB\n        $MasterDatabaseConnection.Close() \n    }    \n}</pre>\nAzure Automation에 업로드되면 Runbook을 수정, 테스트, 주문형으로 실행하거나 일정에 연결할 수 있습니다.실제로 전체 Runbook은 Azure Portal에서 개발할 수 있습니다.Azure Automation은 intellisense, 구문 색 지정 및 텍스트 검색 기능을 갖춘 편리한 작성 환경을 제공합니다.아래 스크린샷에 표시된 일정은 매일 밤 자정에 이전에 설명한 Runbook을 실행하는 일정입니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/06/Screenshot.png\"><img style=\"padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;\" title=\"스크린샷\" alt=\"Screenshot\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Screenshot_thumb.png\" width=\"1028\" height=\"225\" border=\"0\" /></a>\n\n보시는 것처럼 Azure Automation은 매우 확장 가능한 PowerShell 워크플로 실행 엔진 및 작업 스케줄러를 제공합니다.이미 설명한 기능 외에도 Azure Automation에서 제공하는 Azure PowerShell cmdlet을 사용하여 Azure Automation Runbook 내에서 새 데이터베이스 또는 SQL 서버 프로비전과 같은 더 높은 수준의 SQL DB 작업을 수행할 수도 있습니다.데이터베이스 프로비전, 용량 관리, 인덱스 유지 관리 또는 데이터베이스의 성능 수준 증가/감소 등, Azure Automation의 기능을 함께 사용하면 Azure SQL DB 관리 및 유지 관리 작업을 자동화하는 데 필요한 기본 형식을 클라우드 개발/운영에 사용할 수 있습니다.\n\n아직 Azure Automation 사용자가 아닌가요? <a href=\"https://account.windowsazure.com/PreviewFeatures?fid=automation\">미리 보기에 등록한</a> 다음 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/automation-create-runbook-from-samples/\">시작 가이드</a>를 확인하세요."
