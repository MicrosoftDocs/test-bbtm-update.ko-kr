### YamlMime:Yaml
ms.openlocfilehash: 1fa6ded242a554f488ca9b4103c6da44d25d00d2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898475"
Slug: at-build-microsoft-expands-its-cognitive-services-collection-of-intelligent-apis
Title: 빌드에서 Microsoft는 지능형 API의 Cognitive Services 컬렉션을 확장합니다.
Summary: Microsoft Cognitive Services를 통해 개발자는 다음 세대의 애플리케이션을 보강할 수 있으며, 자연스스한 방법을 사용하여 요구 사항을 보고, 듣고, 말하고, 이해하고, 해석할 수 있습니다.
Content: "<p><em>이 블로그 게시물은 Microsoft Cognitive Services 팀에서 작성했습니다. </em></p>\n\n<p>Microsoft Cognitive Services를 사용하면 개발자가 자연스러운 통신 방법을 사용하여 요구 사항을 보고, 듣고, 말하고, 이해하고, 해석할 수 있는 기능을 통해 차세대 애플리케이션을 보강할 수 있습니다.</p>\n\n<p><strong>오늘 빌드 2017 컨퍼런스에서 Microsoft Cognitive Services를 위한 혁신의 다음 큰 물결을 발표하게 되어 기쁘게 생각하고 있으며, AI를 수용하고 차세대 애플리케이션을 구축하려는 개발자의 가치를 크게 높일 수 있게 되어 기쁩니다.</strong></p>\n\n<ul>\n <li><strong>맞춤형:</strong> Custom Speech 및 Language Understanding Intelligent Service를 기반으로 <a href=\"https://aka.ms/bcsearch\">Bing Custom Search</a>, <a href=\"https://aka.ms/cvisionservice\">Custom Vision Service</a> 및 <a href=\"https://aka.ms/cdservice\">Custom Decision Service</a>가 추가되면서 이제 고객이 특정 요구 사항에 맞게 사용자 지정된 알고리즘으로 자신의 데이터를 사용할 수 있는 광범위한 사용자 지정 AI API 집합을 사용할 수 있게 되었습니다.</li>\n <li><strong>최첨단 기술:</strong> 현재 <a href=\"https://aka.ms/cslabs\">Microsofts Cognitive Services Labs를 출시&rsquo;</a>하고 있습니다. 이 랩은 개발 초기 단계에 있는 새로운 서비스를 실험하여 모든 개발자가 더 광범위한 연구 커뮤니티&rsquo;의 탐구에 참여하여 인지 컴퓨팅의 미래를 더 잘 이해할 수 있도록 합니다. Cognitive Services Labs를 통해 제공되는 첫 번째 AI 서비스 중 하나는 Project 프라하&nbsp;입니다. 이를 통해 제스처를 사용하여 기술을 제어하고 상호 작용하여 보다 직관적이고 자연스러운 경험을 할 수 있습니다.&nbsp; 이 최첨단 및 사용하기 쉬운 SDK는 프라이빗 미리 보기로 제공됩니다.</li>\n <li><strong>높은 혁신 속도:</strong> Video&rsquo; <a href=\"https://aka.ms/vindexer\">Indexer</a>, <a href=\"https://aka.ms/cdservice\">Custom Decision Service</a>, Bing Custom <a href=\"https://aka.ms/bcsearch\">Search</a> 및 <a href=\"https://aka.ms/cvisionservice\">Custom Vision Service</a>를 추가하여 Cognitive Services 포트폴리오를 29개의 지능형 API로 확장하고, 새로운 Cognitive Services Lab Project 프라하와 함께 제스처 및 Bing Search와 같은 기존 Cognitive Services에 대한 업데이트를 제공합니다. Microsoft 번역기 및 Language Understanding Intelligent Service.</li>\n</ul>\n\n<p>현재 60여 개국의 568,000명 이상의 개발자가 시스템이 요구 사항을 보고, 듣고, 말하고, 이해하고 해석할 수 있도록 하는 Microsoft Cognitive Services를 사용하고 있습니다.</p>\n\n<h2>이러한 새로운 서비스의 기능은 무엇인가요?</h2>\n\n<ul>\n <li>현재 무료 공개 미리 보기로 제공되는 <a href=\"https://aka.ms/cvisionservice\">Custom Vision Service</a>는 학습을 통해 더 스마트해지는 최첨단 기계 학습 신경망을 통해 이미지의 특정 콘텐츠를 인식하는 방법을 배우는 사용하기 쉽고 사용자 지정 가능한 웹 서비스입니다. 동물, 개체 또는 추상 기호 중 어떤 것을 선택하든 인식하도록 학습할 수 있습니다. 이 기술은 기계 지원 제품 식별을 위한 소매 환경이나 디지털 공간에 쉽게 적용되어 사진 범주를 자동으로 정렬하는 데 도움이 될 수 있습니다.</li>\n <li>현재 무료 공개 미리 보기로 제공되는 <a href=\"https://aka.ms/vindexer\">Video Indexer</a>는 업계에서&rsquo; 가장 포괄적인 비디오 AI 서비스 중 하나입니다. 인덱싱하고 전사 및 번역된 음성 오디오, 감정, 나타난 얼굴 및 개체를 검색할 수 있도록 하여 모든 비디오에서 인사이트를 잠금 해제할 수 있습니다. 이러한 인사이트를 통해 애플리케이션의 비디오 검색 가능성을 향상시키거나 사이트에 이 기능을 포함시켜 사용자 참여를 높일 수 있습니다. 이러한 모든 기능은 위젯 및 관리 포털을 사용할 준비가 된 간단한 API 집합을 통해 사용할 수 있습니다.</li>\n <li>현재 무료 공개 미리 보기로 제공되는 <a href=\"https://aka.ms/cdservice\">Custom Decision Service</a>는 환경에 맞게 조정되는 클라우드 기반 상황별 의사 결정 API를 사용하여 지능형 시스템을 만드는 데 도움이 되는 서비스입니다. Custom Decision Service는 콘텐츠를 개인 설정하기 위한 새로운 접근 방식에서 강화 학습을 사용합니다. 애플리케이션&rsquo;에 연결할 수 있으며 시간이 지남에 따라 메트릭을 최적화하도록 자동으로 조정되므로 실시간으로 결정을 내릴 수 있습니다.</li>\n <li>현재 무료 공개 미리 보기로 제공되는 <a href=\"https://aka.ms/bcsearch\">사용자 지정 검색을 Bing</a> 고도로 사용자 지정된 웹 검색 환경을 만들어 대상 웹 공간에서 더 우수하고 관련성 높은 결과를 제공할 수 있습니다. 간단한 사용자 인터페이스를 특징으로 하는 Bing Custom Search를 사용하면 코드 줄 없이 사용자 고유의 웹 검색 서비스를 만들 수 있습니다. 그릴 웹 조각을 지정하고 사이트 제안을 탐색하여 검색 도메인의 범위를 지능적으로 확장합니다. Bing Custom Search는 모든 규모의 기업, 취미 및 기업가가 가능한 시나리오에 맞게 웹 검색 애플리케이션을 디자인하고 배포할 수 있도록 합니다.</li>\n <li><a href=\"https://aka.ms/cslabs\">Microsofts&rsquo; Cognitive Services Labs</a> 를 사용하면 개발자가 아직 개발 초기 단계에 있는 새 서비스를 실험할 수 있습니다. 그 중 <strong>Project 프라하</strong>는 현재 비공개 미리 보기로 제공됩니다. 이 SDK는 사용자가 일반적인 손 이동을 통해 기술을 제어하고 상호 작용할 수 있도록 하여 보다 직관적인 환경을 만드는 집약적인 손 포즈 라이브러리에서 빌드되었습니다. 특수 카메라를 사용하여 제스처를 기록하는 API는 손의 형성을 인식하고 개발자가 앱 내 작업을 각 제스처에 연결할 수 있도록 합니다.</li>\n <li>공개 미리 보기로 제공되는 <strong>다음 버전의 Bing API</strong>를 통해 개발자는 웹에 대한 방대한 지식을 사용자에게 제공하고 향상된 성능, 새로운 정렬 및 필터링 옵션, 강력한 설명서 및 간편한 빠른 시작 가이드를 활용할 수 있습니다. 이 릴리스에는 Bing Search API(Bing Web Search API 미리 보기, Bing News Search API 미리 보기, Bing Video Search API 미리 보기 및 Bing 이미지 검색 API 미리 보기), Bing 자동 제안 API 미리 보기 및 Bing 맞춤법 검사 API 미리 보기의 전체 제품군이 포함되어 있습니다. <a href=\"https://aka.ms/bingbuildblog\">공지 사항 블로그</a>에서 자세한 내용을 확인하세요.</li>\n <li><strong>프레젠테이션 번역기 Microsoft Garage 프로젝트는</strong> 발표자에게 접근성 시나리오에 대해 동일한 언어 또는 다국어 상황에 대한 다른 언어로 프레젠테이션에 자막을 추가할 수 있는 기능을 제공합니다. 대상 그룹 구성원은 브라우저에서 Microsoft 번역기 앱을 통해 원하는 언어로 자막을 얻고(필요에 따라) 서식을 유지하면서 슬라이드를 <a href=\"https://na01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftranslate.it%2F&amp;data=02%7C01%7Cv-canmo%40microsoft.com%7C79faae908fd84fac957b08d497368268%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636299707768069177&amp;sdata=l0HwSpcNMD2dss9XtKPbgMZT1bcikXJThiiTZhinp7s%3D&amp;reserved=0\"></a> 번역합니다. 사용 가능한 경우 알림을&rsquo; <a href=\"https://www.aka.ms/TranslatorPowerPoint\">보려면 여기를 클릭하십시오</a>.</li>\n <li><strong>LUIS(Language Understanding Intelligent Service)</strong> 개선 사항 - 개발자는 미리 빌드되거나 사용자 지정된 모델을 사용하여 사용자를 빠르고 쉽게 이해하는 언어 모델을 통합할 수 있습니다. LUIS 업데이트에는 향상된 의도 및 엔터티, 생산성을 위한 새로운 강력한 개발자 도구 도입, 커뮤니티가 사용하고 기여할 수 있는 추가 방법, Microsoft Bot Framework 사용한 향상된 음성 인식 및 더 많은 글로벌 가용성이 포함됩니다.</li>\n</ul>\n\n<p>&rsquo;이러한 새로운 API 및 서비스에서 수행할 수 있는 작업을 자세히 살펴보겠습니다.</p>\n\n<h2>앱에 사용자 지정 비전 가져오기</h2>\n\n<p>Custom Vision Service에 감사드리며, 사용자 고유의 이미지 인식 서비스를 쉽게 만들 수 있습니다. <a href=\"https://www.customvision.ai/\">Custom Vision Service 포털</a>을 사용하여 분류자를 학습시키는 일련의 이미지와 분류자를 학습한 후 테스트할 몇 가지 이미지를 업로드할 수 있습니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/10b65e2b-1abe-4acc-a9cc-008222b15143.png\"><img alt=\"Custom Vision\" border=\"0\" height=\"301\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/afda52eb-3a3f-4efa-8967-aae79fa6ce03.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" title=\"Custom Vision\" width=\"612\"></a></p>\n\n<p>&rsquo;또한 각 단계를 코딩할 수 있습니다. 특정 요구 사항에 맞게 이미지 분류자를 신속하게 만들어야 한다고 가정해 보겠습니다&rsquo;. 이는 사용자가 내 웹 사이트에 업로드하는 제품, 소매 머천다이즈 또는 숲의 동물 이미지일 수 있습니다.</p>\n\n<ul>\n <li>시작하려면 이 SDK에서 찾을 수 있는 Custom Vision API가 필요합니다. 콘솔 애플리케이션을 만들고 예제에 필요한 이미지 학습 키를 &amp; 준비해야 합니다.</li>\n</ul>\n\n<p>Visual Studio 시작하여 새 콘솔 애플리케이션을 만들고 Program.cs의 내용을 다음 코드로 바꿀 수 있습니다. 이 코드는 다음 두 가지 도우미 메서드를 정의하고 호출합니다.</p>\n\n<ul>\n <li>GetTrainingKey라는 메서드는 학습 키를 준비합니다.</li>\n <li>LoadImagesFromDisk라는 하나는 이 예제에서 프로젝트를 학습하는 데 사용하는 두 개의 이미지 집합과 기본 예측 엔드포인트의 사용을 보여 주는 예제가 로드하는 테스트 이미지 하나를 로드합니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading;\nusing Microsoft.Cognitive.CustomVision;\n\nnamespace SmokeTester\n{\n    class Program\n    {\n        private static List&lt;MemoryStream&gt; hemlockImages;\n\n        private static List&lt;MemoryStream&gt; japaneseCherryImages;\n\n        private static MemoryStream testImage;\n\n        static void Main(string[] args)\n        {\n            // You can either add your training key here, pass it on the command line, or type it in when the program runs\n            string trainingKey = GetTrainingKey(&quot;&lt;your key here&gt;&quot;, args);\n\n            // Create the Api, passing in a credentials object that contains the training key\n            TrainingApiCredentials trainingCredentials = new TrainingApiCredentials(trainingKey);\n            TrainingApi trainingApi = new TrainingApi(trainingCredentials);\n\n            // Upload the images we need for training and the test image\n            Console.WriteLine(&quot;\\tUploading images&quot;);\n            LoadImagesFromDisk();\n        }\n\n        private static string GetTrainingKey(string trainingKey, string[] args)\n        {\n            if (string.IsNullOrWhiteSpace(trainingKey) || trainingKey.Equals(&quot;&lt;your key here&gt;&quot;))\n            {\n                if (args.Length &gt;= 1)\n                {\n                    trainingKey = args[0];\n                }\n\n                while (string.IsNullOrWhiteSpace(trainingKey) || trainingKey.Length != 32)\n                {\n                    Console.Write(&quot;Enter your training key: &quot;);\n                    trainingKey = Console.ReadLine();\n                }\n                Console.WriteLine();\n            }\n\n            return trainingKey;\n        }\n\n        private static void LoadImagesFromDisk()\n        {\n            // this loads the images to be uploaded from disk into memory\n            hemlockImages = Directory.GetFiles(@&quot;..\\..\\..\\..\\..\\SampleImages\\Hemlock&quot;).Select(f =&gt; new MemoryStream(File.ReadAllBytes(f))).ToList();\n            japaneseCherryImages = Directory.GetFiles(@&quot;..\\..\\..\\..\\..\\SampleImages\\Japanese Cherry&quot;).Select(f =&gt; new MemoryStream(File.ReadAllBytes(f))).ToList();\n            testImage = new MemoryStream(File.ReadAllBytes(@&quot;..\\..\\..\\..\\..\\SampleImages\\Test\\test_image.jpg&quot;));\n\n        }\n    }\n}\n</pre>\n\n<ul>\n <li>다음 단계로, <strong>LoadImagesFromDisk()</strong>를 호출한 후 Main() 메서드에 다음 코드를 추가하여 Custom Vision Service 프로젝트를 만들어야 합니다.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\n            // Create a new project\n            Console.WriteLine(&quot;Creating new project:&quot;);\n            var project = trainingApi.CreateProject(&quot;My New Project&quot;);\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<ul>\n <li>다음으로 <strong>CreateProject()</strong>를 호출한 후 다음 코드를 삽입하여 프로젝트에 태그를 추가해야 합니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\n            // Make two tags in the new project\n            var hemlockTag = trainingApi.CreateTag(project.Id, &quot;Hemlock&quot;);\n            var japaneseCherryTag = trainingApi.CreateTag(project.Id, &quot;Japanese Cherry&quot;);\n</pre>\n\n<ul>\n <li>그런 다음 <strong>Main() </strong>메서드의 끝에 다음 코드를 삽입하여 메모리의 이미지를 프로젝트에 업로드 합니다.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\n            // Images can be uploaded one at a time\n            foreach (var image in hemlockImages)\n            {\n                trainingApi.CreateImagesFromData(project.Id, image, new List&lt;string&gt;() { hemlockTag.Id.ToString() });\n            }\n\n            // Or uploaded in a single batch \n            trainingApi.CreateImagesFromData(project.Id, japaneseCherryImages, new List&lt;Guid&gt;() { japaneseCherryTag.Id });\n</pre>\n\n<p>&nbsp;</p>\n\n<ul>\n <li>이제 프로젝트에 태그와 이미지를 추가한&#39;학습할 수 있습니다. <strong>Main()</strong>의 끝에 다음 코드를 삽입해야 합니다. 이렇게 하면 프로젝트에 첫 번째 반복이 생성됩니다. 그런 다음 이 반복을 기본 반복으로 표시할 수 있습니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\n            // Now there are images with tags start training the project\n            Console.WriteLine(&quot;\\tTraining&quot;);\n            var iteration = trainingApi.TrainProject(project.Id);\n\n            // The returned iteration will be in progress, and can be queried periodically to see when it has completed\n            while (iteration.Status == &quot;Training&quot;)\n            {\n                Thread.Sleep(1000);\n\n                // Re-query the iteration to get it&#39;s updated status\n                iteration = trainingApi.GetIteration(project.Id, iteration.Id);\n            }\n\n            // The iteration is now trained. Make it the default project endpoint\n            iteration.IsDefault = true;\n            trainingApi.UpdateIteration(project.Id, iteration.Id, iteration);\n            Console.WriteLine(&quot;Done!\\n&quot;);\n</pre>\n\n<ul>\n <li>이제 Im&rsquo;이 예측을 위해 모델을 사용할 준비가 되었으므로 먼저 기본 반복과 연결된 엔드포인트를 가져온 다음, 해당 엔드포인트를 사용하여 테스트 이미지를 프로젝트에 보냅니다. <strong>Main()</strong>의 끝에 아래 코드를 삽입합니다.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\n            // Now there is a trained endpoint, it can be used to make a prediction\n\n            // Get the prediction key, which is used in place of the training key when making predictions\n            var account = trainingApi.GetAccountInfo();\n            var predictionKey = account.Keys.PredictionKeys.PrimaryKey;\n\n            // Create a prediction endpoint, passing in a prediction credentials object that contains the obtained prediction key\n            PredictionEndpointCredentials predictionEndpointCredentials = new PredictionEndpointCredentials(predictionKey);\n            PredictionEndpoint endpoint = new PredictionEndpoint(predictionEndpointCredentials);\n\n            // Make a prediction against the new project\n            Console.WriteLine(&quot;Making a prediction:&quot;);\n            var result = endpoint.PredictImage(project.Id, testImage);\n\n            // Loop over each prediction and write out the results\n            foreach (var c in result.Predictions)\n            {\n                Console.WriteLine($&quot;\\t{c.Tag}: {c.Probability:P1}&quot;);\n            }\n\n            Console.ReadKey();\n</pre>\n\n<p>&nbsp;</p>\n\n<ul>\n <li>마지막 단계에서는 솔루션을 빌드하고 실행할 수 있습니다&rsquo;. 예측 결과가 콘솔에 표시됩니다.</li>\n</ul>\n\n<p><strong>Custom Vision Service</strong>에 대한 자세한 내용은 다음 리소스를 살펴보세요.</p>\n\n<ul>\n <li>Custom Vision Service <a href=\"https://www.customvision.ai/\">포털</a> 및 <a href=\"https://aka.ms/cvisionservice\">웹 페이지</a></li>\n <li>전체 <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/custom-vision-service/home#custom-vision-service-brings-the-power-of-machine-learning-to-your-apps\">시작 가이드</a></li>\n</ul>\n\n<h2>Custom Decision Service를 사용하여 사이트 개인 설정</h2>\n\n<p>Custom Decision Service를 사용하면 사용자가 가장 매력적인 콘텐츠를 볼 수 있도록 웹 사이트에서 콘텐츠를 개인 설정할 수 있습니다.</p>\n\n<p>여러 기사에 대한 링크가있는 첫 페이지가있는 <strong>뉴스 웹 사이트를</strong> 소유하고 있다고 가정해 보겠습니다&rsquo;. 페이지가 로드되면 <strong>사용자 지정 의사 결정 서비스에</strong> 페이지에 포함할 문서 순위를 제공하도록 요청하려고 합니다.</p>\n\n<p>내 사용자 중 한 명이 문서를 클릭하면 두 번째 요청이 사용자 지정 의사 결정 서비스로 전송되어 결정 결과를 기록합니다. 가장 쉬운 통합 모드에서는 콘텐츠에 대한 RSS 피드와 몇 줄의 Javascript만 애플리케이션에 추가해야 합니다. 이제 시작해 보겠습니다.</p>\n\n<ul>\n <li>먼저 맨 위 리본에서 내 포털 메뉴 항목을 클릭하여 <strong>의사 결정 서비스 포털</strong> 에 등록해야 합니다. 그런 다음 애플리케이션을 등록하고 고유 식별자를 선택할 수 있습니다. &rsquo;또한 현재 RSS 또는 Atom 엔드포인트와 함께 작업 집합 피드의 이름을 만들 수도 있습니다.</li>\n</ul>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a393dc46-76c5-4b09-b994-98ff3df589df.png\"><img alt=\"Custom Decision Service\" border=\"0\" height=\"388\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e992aaef-089c-483b-b050-532f02e451b9.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" title=\"Custom Decision Service\" width=\"593\"></a></p>\n\n<ul>\n <li>Custom Decision Service의 기본 사용은 매우 간단합니다. 첫 페이지는 Custom Decision Service를 사용하여 문서 페이지의 순서를 지정합니다. 다음 코드를 첫 페이지의 HTML 헤드에 삽입하기만 하면 됩니다.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\n// Define the &quot;callback function&quot; to render UI\n&lt;script&gt; function callback(data) { &hellip; } &lt;/script&gt;\n\n// call to Ranking API\n&lt;script src=&quot;https://ds.microsoft.com/&lt;domain&gt;/rank/&lt;actionSetId&gt;&quot; async&gt;&lt;/script&gt;\n</pre>\n\n<p>&nbsp;</p>\n\n<p>순위 API 호출 전에 콜백 함수를 정의해야 하기 때문에 순서가 중요합니다. 데이터 인수에는 렌더링할 URL의 순위가 포함됩니다. 자세한 내용은 자습서 및 API 참조를 참조하세요.</p>\n\n<ul>\n <li>각 문서 페이지에 대해 정식 URL이 설정되고 RSS 피드가 제공된 URL과 일치하는지 확인하고 다음 코드를 HTML 헤드에 삽입하여 Reward API를 호출해야 합니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\n&lt;script src=&quot;https://ds.microsoft.com/DecisionService.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt; window.DecisionService.trackPageView(); &lt;/script&gt;\n</pre>\n\n<ul>\n <li>마지막으로 Custom Decision Service에서 고려할 문서 목록(즉, 작업)을 반환하는 작업 집합 API를 제공해야 합니다. 다음과 같이 이 API를 RSS 피드로 구현할 수 있습니다.</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\n&lt;rss version=&quot;2.0&quot;&gt;\n&lt;channel&gt;\n   &lt;item&gt;\n      &lt;title&gt;&lt;![CDATA[title (possibly with url) ]]&gt;&lt;/title&gt;\n      &lt;link&gt;url&lt;/link&gt;\n      &lt;pubDate&gt;Thu, 27 Apr 2017 16:30:52 GMT&lt;/pubDate&gt;\n    &lt;/item&gt;\n   &lt;item&gt;\n       ....\n   &lt;/item&gt;\n&lt;/channel&gt;\n&lt;/rss&gt;\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Custom Decision Service에 대한 자세한 내용은 다음 리소스를 참조하세요.</p>\n\n<ul>\n <li>Custom Decision Service 포털 및 <a href=\"https://aka.ms/cdservice\">웹 페이지</a></li>\n <li><a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/custom-decision-service/custom-decision-service-overview\">기술 가이드</a></li>\n</ul>\n\n<h2>비디오 인사이트 활용</h2>\n\n<p><a href=\"https://aka.ms/vindexer\">Video Indexer</a>&rsquo;를 사용하면 다음과 같은 비디오 파일에서 많은 인사이트를 처리하고 추출할 수 있습니다.</p>\n\n<ul>\n <li>얼굴 감지 및 식별(비디오 내에서 사람의 얼굴을 찾고 식별하며 추적)</li>\n <li>OCR(광학 문자 인식, 비디오에서 텍스트 콘텐츠 추출 및 검색 가능한 디지털 텍스트 생성)</li>\n <li>대본(지정된 언어에 따라 오디오를 텍스트로 변환)</li>\n <li>내가 즐겨 찾는 것 중 하나, 스피커의 차별화 (지도와 각 스피커를 이해하고 각 스피커가 비디오에 존재하는 경우 식별)</li>\n <li>음성/소리 감지(백그라운드 노이즈/음성 활동을 무음에서 분리)</li>\n <li>감정 분석(여러 감정 특성을 기반으로 분석 수행 - 현재 긍정, 중립, 부정 옵션이 지원됨)</li>\n</ul>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/c18fa426-d417-467d-83af-1d312de5d627.jpg\"><img alt=\"Video\" border=\"0\" height=\"359\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d8b180e5-1da0-421e-b796-ff8af1f9480f.jpg\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" title=\"비디오\" width=\"624\"></a></p>\n\n<p align=\"center\"><em>한 비디오에서 여러 인사이트로</em></p>\n\n<p>사용자가 검색해야 하는 비디오 라이브러리가 있는 뉴스 에이전시 Im을 가정&rsquo;해 보겠습니다&rsquo;. 인덱싱된 음성 단어와 얼굴로 검색 환경을 향상시키기 위해 비디오에서 메타데이터를 쉽게 추출해야 합니다.</p>\n\n<ul>\n <li>가장 쉬운 첫 번째 단계는 <a href=\"https://vi.microsoft.com/\">Video Indexer 웹 포털</a>로 이동하는 것입니다. 로그인하고, 비디오를 업로드하고, Video Indexer에서 비디오 인덱싱 및 분석을 시작할 수 있습니다. 작업이&rsquo; 완료되면 내 비디오에 대한 링크와 비디오에서 발견된 내용에 대한 간단한 설명(사람, 토픽, AOCR,..)이 포함된 알림을 받게 됩니다.</li>\n <li>Video Indexer API를 사용하려면 Video Indexer 웹 포털에 로그인하고 프로덕션을 선택하고 구독해야 합니다. 그러면 Video Indexer 팀에게 곧 승인될 구독 요청을 보냅니다. 승인되면 내 구독과 키를 볼 수 있습니다.</li>\n</ul>\n\n<p>다음 C# 코드 조각에서는 모든 Video Indexer API를 사용하는 방법을 보여 줍니다.</p>\n\n<div>\n<pre class=\"prettyprint\">\n    var apiUrl = &quot;https://videobreakdown.azure-api.net/Breakdowns/Api/Partner/Breakdowns&quot;;\n    var client = new HttpClient();\n    client.DefaultRequestHeaders.Add(&quot;Ocp-Apim-Subscription-Key&quot;, &quot;InsertYourKey&quot;);\n\n    var content = new MultipartFormDataContent();\n\n    Console.WriteLine(&quot;Uploading...&quot;);\n    var videoUrl = &quot;https:/...&quot;;\n    var result = client.PostAsync(apiUrl + &quot;?name=some_name&amp;description=some_description&amp;privacy=private&amp;partition=some_partition&amp;videoUrl=&quot; + videoUrl, content).Result;\n    var json = result.Content.ReadAsStringAsync().Result;\n\n    Console.WriteLine();\n    Console.WriteLine(&quot;Uploaded:&quot;);\n    Console.WriteLine(json);\n\n    var id = JsonConvert.DeserializeObject&lt;string&gt;(json);\n\n    while (true)\n    {\n        Thread.Sleep(10000);\n\n        result = client.GetAsync(string.Format(apiUrl + &quot;/{0}/State&quot;, id)).Result;\n        json = result.Content.ReadAsStringAsync().Result;\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;State:&quot;);\n        Console.WriteLine(json);\n\n        dynamic state = JsonConvert.DeserializeObject(json);\n        if (state.state != &quot;Uploaded&quot; &amp;&amp; state.state != &quot;Processing&quot;)\n        {\n            break;\n        }\n    }\n\n    result = client.GetAsync(string.Format(apiUrl + &quot;/{0}&quot;, id)).Result;\n    json = result.Content.ReadAsStringAsync().Result;\n    Console.WriteLine();\n    Console.WriteLine(&quot;Full JSON:&quot;);\n    Console.WriteLine(json);\n\n    result = client.GetAsync(string.Format(apiUrl + &quot;/Search?id={0}&quot;, id)).Result;\n    json = result.Content.ReadAsStringAsync().Result;\n    Console.WriteLine();\n    Console.WriteLine(&quot;Search:&quot;);\n    Console.WriteLine(json);\n\n    result = client.GetAsync(string.Format(apiUrl + &quot;/{0}/InsightsWidgetUrl&quot;, id)).Result;\n    json = result.Content.ReadAsStringAsync().Result;\n    Console.WriteLine();\n    Console.WriteLine(&quot;Insights Widget url:&quot;);\n    Console.WriteLine(json);\n\n    result = client.GetAsync(string.Format(apiUrl + &quot;/{0}/PlayerWidgetUrl&quot;, id)).Result;\n    json = result.Content.ReadAsStringAsync().Result;\n    Console.WriteLine();\n    Console.WriteLine(&quot;Player token:&quot;);\n    Console.WriteLine(json);\n</pre>\n\n<ul>\n <li>API를 호출하고 응답 상태가 정상이면 키워드(토픽), 얼굴, 블록을 포함하여 지정된 비디오 인사이트에 대한 세부 정보가 포함된 자세한 JSON 출력을 가져옵니다. 각 블록에는 시간 범위, 대본 줄, OCR 선, 감정, 얼굴 및 블록 축소판 그림이 포함됩니다.</li>\n</ul>\n\n<p>자세한 내용은 다음을 참조하세요.</p>\n\n<ul>\n <li>Video Indexer <a href=\"https://vi.microsoft.com/\">포털</a> 및 <a href=\"https://aka.ms/vindexer\">웹 페이지</a>&nbsp;</li>\n <li>시작 가이드<a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/video-indexer/video-indexer-overview\">의 전체 기술 리소스 목록</a></li>\n</ul>\n\n<h2>사용자에 대한 고도의 대상 검색 만들기</h2>\n\n<p>Bing Custom Search를 사용하면 대상 웹 공간에 대해 고도로 사용자 지정된 웹 검색 환경을 만들 수 있습니다. 사용자 지정 검색 솔루션에는 많은 통합 시나리오와 최종 사용자 진입점이 있습니다.</p>\n\n<p>예를 들어 Amicus는 기부자에게 완전한 투명성을 제공하여 글로벌 원조의 자금 조달 및 전달 방식을 바꾸는 앱을 빌드하고 있습니다. Amicus는 기부자가 특히 관심 있고 관련성이 있는 글로벌 원조와 관련된 프로젝트를 배우고, 찾고, 자금을 조달할 수 있도록 도와주어야 했습니다. Bing Custom Search를 통해 Amicus는 사용자가 단일 관심 개념(예: &lsquo;물&rsquo;, &lsquo;교육&rsquo; 또는 &lsquo;인도&rsquo;)을 가질 때 사용자 지정 검색을 통해 관련 웹 페이지 집합&nbsp;을 미리 식별할 수 Bing, 사용자 지정 검색은 글로벌 지원 컨텍스트에서 매우 관련성이 높은 결과를 제공할 수 있습니다.</p>\n\n<p>Bing Custom Search&rsquo;에 대한 자세한 내용은 <a href=\"https://blogs.bing.com/search-quality-insights/2017-05/build-your-own-web-search-engine-with-bing-custom-search\">Bing Custom Search 블로그 공</a>지 사항을 살펴보세요.</p>\n</div>\n\n<p>시애틀 지역에서 매우 중요한 활동을 둘러보는 자전거에서 &lsquo;공개 웹 사이트에 대한 사용자 지정 검색을 &ndash;&rsquo; 구축해야 한다고 상상해보겠&rsquo;습니다.</p>\n\n<ul>\n <li><a href=\"https://customsearch.ai/\">Bing Custom Search 포털</a>에 등록하여 시작하고 평가판 키를 가져올 수 있습니다.</li>\n <li>로그인하면 사용자 지정 검색 인스턴스 만들기를 시작할 수 있습니다. 사용자 지정 검색 인스턴스에는 원하는 시나리오에 맞게 조정된 사용자 지정 검색을 정의하는 데 필요한 모든 설정이 포함됩니다. 여기서는 자전거 투어 관련 콘텐츠를 찾기 위한 검색을 만들고 싶습니다. 이 경우 Id&rsquo;는 BikeTouring이라는 &lsquo;사용자 지정 검색 인스턴스를&rsquo; 만듭니다.</li>\n <li>그런 다음 시나리오를 검색할 웹 조각을 정의하고 검색 인스턴스에 추가해야 합니다. 사용자 지정 조각에는 도메인, 하위 도메인 또는 웹 페이지가 포함될 수 있습니다.</li>\n <li>이제 요구 사항에 따라 결과의 기본 순서를 조정할 수 있습니다. 예를 들어 특정 쿼리의 경우 특정 웹 페이지를 맨 위에 고정할 수 있습니다. 또는 사용자 지정 검색 서비스가 반환하는 결과 집합에서 각각 더 높거나 낮게 표시되도록 사이트 또는 웹 페이지를 승격 및 강등할 수 있습니다.</li>\n <li>그런 다음 활성&lsquo;&rsquo;, 차단 및 &lsquo;고정 탭&rsquo;&rsquo;에서 내 순위 조정을 &lsquo;추적할 수 있습니다. 또한 언제든지 조정 내용을 다시 확인할 수 있습니다.</li>\n</ul>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3f32bc6e-6333-4b76-a4dc-c440aebbf509.png\"><img alt=\"Bike Tours\" border=\"0\" height=\"337\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/eeed5398-4cfe-4878-b94f-dfa7f35abc01.png\" style=\"border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; border-top-width: 0px; margin-right: auto\" title=\"자전거 투어\" width=\"554\"></a></p>\n\n<ul>\n <li>그런 다음, 내 설정을 게시합니다. Bing Web Search API를 직접 및 프로그래밍 방식으로 호출하기 전에 UI에서 사용자 지정 검색 서비스를 직접 사용해 보세요. 이를 위해 쿼리를 지정하고 테스트 API&rsquo;를 클릭합니다&lsquo;. 그런 다음 오른쪽에 있는 사용자 지정 검색 서비스에서 알고리즘 결과를 볼 수 있습니다.</li>\n <li>프로그래밍 방식으로 사용자 지정 검색 서비스에 대한 결과를 호출하고 검색하려면 Bing Web Search API를 호출할 수 있습니다. 이 경우 Id&rsquo;는 costumconfig라는 사용자 지정 구성 매개 변수를 사용하여 표준 Bing Web Search API 호출을 보강합니다. 다음은 costumconfig 매개 변수가 있는 API 요청 URL입니다.</li>\n</ul>\n\n<pre class=\"prettyprint\">\nhttps://api.cognitive.microsoft.com/bingcustomsearch/v5.0/search[?q][&amp;customconfig][&amp;count][&amp;offset][&amp;mkt][&amp;safesearch]</pre>\n\n<p>다음은 customconfig 매개 변수를 사용하여 Bing Web Search API 호출의 JSON 응답입니다.</p>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\n{\n    &quot;_type&quot; : &quot;SearchResponse&quot;,\n    &quot;queryContext&quot; : {...},\n    &quot;webPages&quot; : {...},\n    &quot;spellSuggestion&quot; : {...},\n    &quot;rankingResponse&quot; : {...}\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<p>자세한 내용은 전용 블로그 공지 사항과 다음 리소스를 살펴보세요.<br>\n&bull;&nbsp;&nbsp;&nbsp;Bing Custom Search <a href=\"https://customsearch.ai/\">포털</a><br>\n&bull;&nbsp;&nbsp;&nbsp;시작 가이드<a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/bing-custom-search/overview\">의 전체 리소스 목록</a></p>\n\n<h2>새로운 AI MVP 어워드 범주</h2>\n\n<p>지금까지 도달해 주셔서 감사합니다! 보상으로 새로운&rsquo; AI MVP 프로그램에 대해 알려드리게 되어 기쁘게 생각합니다!</p>\n\n<p>아시다시피 데이터와 AI의 세계는 전례 없는 속도로 진화하고 있으며 전문가 커뮤니티도 마찬가지입니다.&nbsp; Microsoft MVP 어워드 프로그램은 AI 전문가 사이에서 뛰어난 커뮤니티 리더십을 인정받아 새로운 AI 어워드 카테고리의 출시를 발표하게 되어 기쁘게 생각합니다. 잠재적 &ldquo;인 AI MVP&rdquo; 에는 지능형 앱 및 봇을 만드는 개발자, 사용자 상호 작용 모델링(음성, 텍스트, 음성,...), AI 알고리즘 작성, 데이터 세트 학습 및 기술 커뮤니티와 이 전문 지식 공유가 포함됩니다.</p>\n\n<p>AI MVP는 다음 기술 기여 분야의 기여를 기반으로 수여됩니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/abd36cce-abea-4fe5-b796-c8f614a74538.png\"><img alt=\"Screenshot_3\" border=\"0\" height=\"156\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b4bf37db-bfed-4f40-b188-58bd7376c3cd.png\" style=\"border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; border-left: 0px; display: block; padding-right: 0px; margin-right: auto\" title=\"Screenshot_3\" width=\"520\"></a></p>\n\n<p>AI 어워드 범주는 <a href=\"https://mvp.microsoft.com/en-us/Pages/mvp-award-update\">현재 수상 범주</a>에 새로 추가될 예정입니다. 귀하 또는 아는 사람이 자격을 갖추게 될 수 있는 경우 <a href=\"https://aka.ms/AIMVP\">추천을 제출</a>하세요!</p>\n\n<p>다시 감사하고 행복한 코딩!</p>"
