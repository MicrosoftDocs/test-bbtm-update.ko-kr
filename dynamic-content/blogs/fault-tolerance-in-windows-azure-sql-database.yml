### YamlMime:Yaml
ms.openlocfilehash: 12a4ea377f2529234cd1c0ca54c30edf44a10916
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906473"
Slug: fault-tolerance-in-windows-azure-sql-database
Title: Windows Azure SQL Database 내결함성
Summary: 편집자&rsquo; 주:&nbsp; 오늘의&rsquo; 게시물은 SQL Server Windows Azure SQL Database &amp; 팀의 수석 그룹 프로그램 매니저 인 Tony Petrossian에서 제공됩니다.&nbsp; 이 게시물은 개요를 제공합니다...
Content: '<p><em><strong>편집기&rsquo; 참고:</strong>&nbsp; 오늘의&rsquo; 게시물은 <a target="_blank" href="https://social.msdn.microsoft.com/profile/tony%20petrossian/?ws=usercard-mini">토니 페트로시안</a>, SQL Server Windows Azure SQL Database &amp; 팀의 주요 그룹 프로그램 매니저에서 온다.&nbsp; 이 게시물은 Windows Azure SQL Database 내결함성 기능에 대한 개요를 제공합니다.</em></p>  <h3>소개</h3>  <p>몇 년 전 클라우드 RDBMS 서비스인 <a href="https://www.windowsazure.com/en-us/home/features/data-management/?WT.mc_id=cmp_pst001_blg_post0161sql" target="_blank">Windows Azure SQL Database</a> 빌드를 시작했을 때 내결함성은 모든 클라우드 데이터베이스 제품의 기본 요구 사항이라고 가정했습니다.&nbsp; 클라우드 고객은 스토리지 솔루션에 대한 다양한 요구 사항을 가지고 있지만, 애플리케이션에 RDBMS가 필요한 고객의 요구 사항을 해결하는 데 중점을 두었다.&nbsp; 예를 들어 얼리 어답터 중 하나는 <a href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=cmp_pst001_blg_post0161tri" target="_blank">Windows Azure</a>에서 대규모 티켓 예약 시스템을 구축하는 것이었습니다.&nbsp; 애플리케이션에는 일관성 및 내구성이 있는 동시성 제어 및 트랜잭션 보증이 포함된 관계형 기능이 필요했습니다.&nbsp;</p>  <p>진정한 RDBMS 서비스를 빌드하려면 서비스의 모든 원자성, 일관성, 격리 및 지속성(ACID) 특성이 SQL Server 데이터베이스의 특성과 일치하도록 하면서 내결함성이 있어야 했습니다.&nbsp; 또한 고객이 프로비전 마찰 없이 수천 개의 데이터베이스를 만들고 삭제할 수 있는 탄력성 및 크기 조정 기능을 제공하고자 했습니다.&nbsp; 클라우드 규모에서 내결함성(FT) 시스템을 구축하려면 많은 혁신이 필요했습니다.&nbsp;</p>  <p>우리는 다양한 오류 유형에 대한 많은 데이터를 수집하는 것으로 시작했으며 잠시 동안 다양한 시스템 오류 모델의 학문적 세부 사항에 대해 자세히 설명했습니다.&nbsp;&nbsp; 궁극적으로 문제 공간을 다음 두 가지 원칙으로 간소화했습니다.</p>  <ol>  <li>하드웨어 및 소프트웨어 장애가 불가피함</li>  <li>운영 직원의 실수로 장애가 발생함</li>  </ol>  <p>실패 모델을 단순화하기로 결정한 데는 두 가지 요인이 있었습니다. 첫째, 내결함성 시스템을 사용하려면 빈도가 낮은 오류, 계획된 중단 및 고주파 오류를 처리해야 합니다. 둘째, 클라우드 규모에서 빈도가 낮은 오류는 매일이 아니라면 매주 발생합니다.&nbsp;</p>  <p>내결함성을 위한 설계는 모든 구성 요소가 실패할 가능성이 높고 시스템의 모든 구성 요소에 대해 다른 FT 솔루션을 갖는 것이 실용적이지 않다고 가정하면 몇 가지 솔루션을 중심으로 수렴되기 시작했습니다.&nbsp; 예를 들어 컴퓨터의 모든 구성 요소가 실패할 가능성이 있는 경우 전원 공급 장치 및 RAID와 같은 중복 구성 요소에 투자하는 대신 중복 컴퓨터도 있을 수 있습니다.</p>  <p>마지막으로 데이터베이스를 호스트하는 데이터베이스 서버를 실행하는 내결함성 시스템을 빌드하는 대신 가장 높은 수준의 스택에서 내결함성 SQL 데이터베이스를 빌드하기로 결정했습니다.&nbsp; 마지막으로 FT 기능은 운영자 또는 고객의 구성 및 관리를 요구하지 않고도 제품의 내재된 부분이 될 것입니다.&nbsp;</p>  <h3>Fault-Tolerant SQL 데이터베이스</h3>  <p>고객은 자체 데이터베이스의 복원력에 가장 관심이 있으며 전체 서비스의 복원력에 대한 관심이 적습니다.&nbsp; 내 데이터베이스가 다운된 데이터베이스&rdquo;의 0.1%에 속하는 경우 &ldquo;서비스에 대한 99.9%의 작동 시간은 의미가 없습니다.&nbsp; 각 데이터베이스는 내결함성이 있어야 하며 오류 완화로 인해 커밋된 트랜잭션이 손실되지 않아야 합니다.&nbsp; 내결함성 데이터베이스의 토대를 제공하는 두 가지 주요 기술이 있습니다.</p>  <ul>  <li>데이터베이스 복제</li>  <li>오류 검색 &amp; 장애 조치(failover)</li>  </ul>  <p>이러한 기술을 함께 사용하면 데이터베이스가 사용자 개입 없이 자동화된 방식으로 오류를 허용하고 완화할 수 있는 동시에 커밋된 트랜잭션이 사용자&rsquo; 데이터베이스에서 손실되지 않도록 할 수 있습니다.&nbsp;</p>  <h3>간단히 말해서 데이터베이스 Fault-Tolerance</h3>  <p>Windows Azure SQL Database 서버 랙 및 네트워크 라우터와 같이 완전히 독립적인 물리적 하위 시스템에 있는 다른 물리적 노드에 있는 모든 데이터베이스의 여러 복사본을 유지 관리합니다. 한 번에 Windows Azure SQL Database 각 데이터베이스 &ndash; 의 복제본 3개와 주 복제본 1개, 보조 복제본 2개를 유지합니다. Windows Azure SQL Database 커밋된 트랜잭션을 고려하기 전에 데이터가 주 복제본과 하나의 보조 복제본에 기록되는 쿼럼 기반 커밋 체계를 사용합니다. 주 복제본에서 구성 요소가 실패하면 Windows Azure SQL Database 오류를 감지하고 보조 복제본으로 장애 조치합니다. 복제본이 물리적으로 손실되는 경우 Windows Azure SQL Database 새 복제본을 자동으로 만듭니다. 따라서 데이터 센터에 트랜잭션 일관성이 있는 각 데이터베이스의 복제본이 두 개 이상 있습니다. 전체 데이터 센터의 손실 이외에 다른 모든 오류는 서비스에 의해 완화됩니다.</p>  <p>Windows Azure SQL Database 복제, 실패 감지 및 장애 조치(failover) 메커니즘은 완전히 자동화되고 사람의 개입 없이 작동합니다. 이 아키텍처는 커밋된 데이터가 손실되지 않으며 데이터 내구성이 최우선시되도록 설계되었습니다.</p>  <h3>주요 고객 혜택:</h3>  <ol>  <li>고객은 복잡한 하드웨어, 소프트웨어, OS 또는 가상화 환경을 구성하거나 유지 관리할 필요 없이 복제된 데이터베이스의 모든 혜택을 누릴 수 있습니다.</li>  <li>관계형 데이터베이스의 전체 ACID 속성은 시스템에서 유지 관리됩니다.</li>  <li>장애 조치(failover)는 커밋된 데이터를 손실하지 않고 완전히 자동화됩니다.</li>  <li>주 복제본에 대한 연결 라우팅은 애플리케이션 논리 없이 서비스에서 동적으로 관리됩니다.</li>  <li>높은 수준의 자동화된 중복성은 추가 비용 없이 제공됩니다.</li>  </ol>  <p>추가 세부 정보에 관심이 있는 경우 다음 두 섹션에서는 복제 및 장애 조치(failover) 기술의 내부 작동에 대한 자세한 정보를 제공합니다.</p>  <h3>Windows Azure SQL Database 복제 내부</h3>  <p>중복성은 내결함성과 Windows Azure SQL Database 핵심입니다.&nbsp; Windows Azure SQL Database 내의 중복성은 데이터베이스 수준에서 유지되므로 각 데이터베이스는 물리적 및 논리적으로 중복됩니다.&nbsp; 각 데이터베이스에 대한 중복성은 데이터베이스&rsquo; 수명 주기 전반에 걸쳐 적용됩니다.&nbsp; 모든 데이터베이스는 고객이 사용할 데이터베이스를 제공하기 전에&rsquo; 복제되고 고객이 데이터베이스를 삭제할 때까지 복제본이 유지 관리됩니다.&nbsp; 데이터베이스의 세 복제본은 각각 다른 노드에 저장됩니다. 각 데이터베이스의 복제본은 동일한 오류 도메인&rdquo;(예: 동일한 네트워크 스위치 또는 동일한 &ldquo;랙)에 두 개의 복사본이 상주하지 않는 노드에 분산되어 있습니다. 각 데이터베이스의 복제본은 데이터베이스가 동일한 고객에 속하더라도 다른 데이터베이스를 노드에 할당하는 것과 독립적으로 노드에 할당됩니다. 즉, 두 데이터베이스의 복제본이 동일한 노드에 저장된다는 사실이 해당 데이터베이스의 다른 복제본도 다른 노드에 함께 배치된다는 것을 의미하지는 않습니다.</p>  <p>각 데이터베이스에 대해 각 시점에서 하나의 복제본이 주 복제본으로 지정됩니다. 트랜잭션은 데이터베이스의 주 복제본(또는 단순히 주 데이터베이스)을 사용하여 실행됩니다. 주 복제본은 모든 쿼리, 업데이트 및 데이터 정의 언어 작업을 처리합니다. Windows Azure SQL Database 복제 프로토콜을 사용하여 보조 복제본에 업데이트 및 데이터 정의 언어 작업을 제공합니다. 시스템은 현재 보조 복제본의 읽기를 허용하지 않습니다. 트랜잭션은 주 데이터베이스를 사용하여 모든 읽기 및 쓰기를 실행하므로 주 파티션에 직접 액세스하는 노드는 데이터에 대해 모든 작업을 수행합니다. 업데이트 레코드를 데이터베이스&rsquo; 보조 복제본으로 전송하며, 각 복제본은 업데이트를 적용합니다. 보조 복제본은 읽기를 처리하지 않으므로 각 주 복제본은 보조 복제본보다 더 많은 작업을 수행해야 합니다. 부하를 분산하기 위해 각 노드는 주 데이터베이스와 보조 데이터베이스를 혼합하여 호스트합니다.&nbsp; 평균적으로 3방향 복제를 통해 각 노드는 2개의 보조 복제본마다 하나의 주 데이터베이스를 호스트합니다. 물론 데이터베이스의 두 복제본은 동일한 물리적 노드에 배치되지 않습니다.</p>  <p>각 노드가 주 데이터베이스와 보조 데이터베이스를 혼합하여 호스트하도록 하는 또 다른 이점은 시스템이 실패한 노드의 부하를 여러 라이브 노드에 분산할 수 있다는 것입니다. 예를 들어 노드 S가 세 개의 주 데이터베이스 PE, PF 및 PG를 호스트한다고 가정합니다. S가 실패하고 PE, PF 및 PG용 보조 복제본이 서로 다른 노드에 분산되는 경우 PE, PF 및 PG용 새 주 데이터베이스를 세 개의 다른 노드에 할당할 수 있습니다.</p>  <p>복제 프로토콜은 신뢰할 수 없는 것으로 간주되는 하드웨어 및 소프트웨어 구성 요소 컬렉션에서 실행되는 동안 클라우드가 안정적으로 작동하도록 특별히 빌드되었습니다(구성 요소 오류는 불가피함).&nbsp; 트랜잭션 약정 프로토콜을 사용하려면 복제본의 쿼럼만 설정해야 합니다. Paxos와 유사한 합의 알고리즘은 복제본 집합을 유지하는 데 사용됩니다. 동적 쿼럼은 여러 오류가 발생할 경우 가용성을 유지하는 데 사용됩니다.</p>  <p>주 업데이트에서 보조 업데이트로의 전파는 복제 프로토콜에 의해 관리됩니다.&nbsp; 트랜잭션 Ts&rsquo; 주 데이터베이스는 T에 의한 각 업데이트의 사후 이미지를 포함하는 레코드를 생성합니다. 이러한 업데이트 레코드는 테이블 키로 식별되지만 페이지 ID로는 식별되지 않는 논리적 다시 실행 레코드 역할을 합니다. 이러한 업데이트 레코드는 발생 시 보조 복제본으로 스트리밍됩니다. T가 중단되면 주 복제본은 T에 대해 받은 업데이트를 삭제하는 ABORT 메시지를 각 보조 데이터베이스에 보냅니다. T가 COMMIT 작업을 실행하면 주 복제본은 보조 복제본으로 전송되는 COMMIT 메시지에 태그를 지정하는 다음 CSN(커밋 시퀀스 번호)을 T에 할당합니다. 각 보조 데이터베이스는 T&rsquo;에 해당하는 독립 로컬 트랜잭션의 컨텍스트 내에서 커밋 시퀀스 번호 순서로 데이터베이스에 Ts 업데이트를 적용하고 승인(ACK)을 주 복제본으로 다시 보냅니다. 주 복제본이 복제본 쿼럼(자체 포함)에서 ACK를 수신한 후 로컬로 영구 COMMIT 레코드를 작성하고 성공을&rdquo; Ts&rsquo; COMMIT 작업에 반환&ldquo;합니다. 보조는 트랜잭션 Ts&rsquo; COMMIT 메시지에 대한 응답으로 ACK를 즉시 보낼 수 있으며, 그 전에 Ts&rsquo; 해당 커밋 레코드와 그 앞에 오는 업데이트 레코드가 로그로 강제 적용됩니다. 따라서 T 커밋 전에 노드의 쿼럼에는 커밋의 복사본이 있습니다.</p>  <p>업데이트된 레코드는 결국 주 복제본 및 보조 복제본에 의해 디스크로 플러시됩니다. 장애 조치(failover) 이벤트 중 잠재적인 데이터 손실을 줄이기 위해 주 복제본과 보조 복제본 간의 델타를 최소화하는 것이 목적입니다.</p>  <p>보조 복제본에서 손실된 커밋된 트랜잭션에 대한 업데이트(예: 크래시로 인해)를 주 복제본에서 가져올 수 있습니다. 복구 중인 복제본은 커밋한 마지막 트랜잭션의 커밋 시퀀스 번호를 주 복제본에 보냅니다. 주 복제본은 복구 중인 복제본에 필요한 업데이트 큐를 보내거나 복구 중인 복제본에 너무 뒤처서 catch할 수 없다는 메시지를 표시하여 회신합니다. 후자의 경우 복구 중인 복제본은 주 복제본에 새 복사본을 전송하도록 요청할 수 있습니다. 보조는 주 노드에서 수신하는 업데이트를 즉시 적용하므로 항상 거의 최신 상태입니다. 따라서 구성 변경(예: 부하 분산 또는 기본 오류로 인해)으로 인해 주 복제본이 되어야 하는 경우 이러한 재할당은 거의 즉각적입니다. 즉, 보조 복제본은 핫 대기 상태이며 매우 고가용성을 제공합니다.</p>  <h3>오류 검색 &amp; 장애 조치(failover) 내부</h3>  <p>대규모 분산 시스템에는 오류 안정성을 빠르고 고객에게 최대한 가깝게 감지할 수 있는 매우 신뢰할 수 있는 오류 검색 시스템이 필요합니다.&nbsp; Windows Azure SQL Database 분산 패브릭은 SQL 엔진과 쌍을 이어서 데이터베이스의 인근에서 오류를 감지할 수 있습니다.&nbsp;</p>  <p>매우 큰 시스템의 중앙 집중식 상태 모니터링은 비효율적이며 신뢰할 수 없습니다.&nbsp; Windows Azure SQL Database 오류 검색은 시스템의 모든 노드를 여러 인접 노드에서 모니터링할 수 있도록 완전히 분산됩니다.&nbsp; 이 토폴로지는 일반적인 핑 폭풍 및 불필요하게 지연된 오류 검색을 방지하는 매우 효율적이고 지역화되고 빠른 검색 모델을 허용합니다.&nbsp;</p>  <p>후속 분석을 위해 자세한 구성 요소 수준 오류 원격 분석을 수집하지만 패브릭에서 감지한 상위 수준 오류 서명만 사용하여 장애 조치(failover) 결정을 내림합니다.&nbsp; 수년에 걸쳐 비정상 노드의 성능 저하 조건이 지속되지 않도록 장애 조치(fail-fast) 및 복구 기능을 개선했습니다.&nbsp;</p>  <p>Windows Azure SQL Database 장애 조치(failover) 단위는 데이터베이스이므로 필요한 경우 각 데이터베이스&rsquo; 상태를 주의 깊게 모니터링하고 장애 조치합니다.&nbsp; Windows Azure SQL Database GPM(전역 파티션 관리자)에서 모든 데이터베이스 및 해당 복제본의 전역 맵을 유지 관리합니다.&nbsp;  전역 맵에는 모든 데이터베이스와 해당 복제본의 상태, 상태 및 위치가 포함됩니다.&nbsp; 분산 패브릭은 전역 맵을 유지 관리합니다.&nbsp;&nbsp; Windows Azure SQL Database 노드가 실패하면 분산 패브릭이 안정적으로 신속하게 노드 오류를 감지하고 GPM에 알릴 수 있습니다.&nbsp; 그런 다음 GPM은 실패한 노드에 있던 주 데이터베이스와 보조 데이터베이스의 할당을 다시 구성합니다.</p>  <p>Windows Azure SQL Database 작동하려면 복제본의 쿼럼만 필요하므로 가용성은 보조 복제본의 실패에 영향을 받지 않습니다. 백그라운드에서 시스템은 실패한 복제본을 대체할 새 복제본을 만듭니다.</p>  <p>짧은 기간 동안만 일시적으로 사용할 수 없는 복제본은 누락된 트랜잭션 수가 적습니다. 노드는 작동 복제본에 중단된 동안 복제본이 놓친 업데이트 큐의 꼬리를 보내도록 요청합니다. 일시적으로 사용할 수 없는 보조 복제본의 빠른 동기화를 허용하는 것은 꼭 필요한 경우 복제본을 완전히 다시 수행하지 않도록 하는 최적화입니다.</p>  <p>주 복제본이 실패하는 경우 보조 복제본 중 하나를 새 주 복제본으로 지정해야 하며 해당 결정에 따라 모든 운영 복제본을 다시 구성해야 합니다. 이 프로세스의 첫 번째 단계는 GPM을 사용하여 데이터베이스&rsquo; 구성을 다시 빌드할 리더를 선택합니다. 리더는 전체 복제본 집합의 멤버에게 연락하여 업데이트 손실이 없도록 하려고 합니다. 리더는 최신 상태가 있는 보조 데이터베이스를 결정합니다. 대부분의 최신 보조 복제본은 변경 내용이 누락된 다른 복제본에 필요한 변경 내용을 전파합니다.</p>  <p>Windows Azure SQL Database 데이터베이스에 대한 모든 연결은 부하가 분산된 게이트웨이 프로세스 집합에 의해 관리됩니다. 게이트웨이는 클라이언트의 인바운드 데이터베이스 연결 요청을 수락하고 현재 데이터베이스의 주 복제본을 호스트하는 노드에 바인딩합니다. 게이트웨이는 분산 패브릭과 조정하여 고객&rsquo; 데이터베이스의 주 복제본을 찾습니다.&nbsp; 장애 조치(failover)가 발생할 경우 게이트웨이는 사용 가능한 즉시 실패한 주 복제본에 바인딩된 모든 연결의 연결 바인딩을 새 주 복제본에 재협상합니다.</p>  <p>연결 게이트웨이, 분산 패브릭 및 GPM의 조합은 Windows Azure SQL Database 유지 관리하는 데이터베이스 복제본을 사용하여 오류를 감지하고 완화할 수 있습니다.&nbsp;&nbsp;</p>'
