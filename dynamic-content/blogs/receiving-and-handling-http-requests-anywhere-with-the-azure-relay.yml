### YamlMime:Yaml
ms.openlocfilehash: 3666cbd92d3e90acfaec01c3d3828344a61f8a83
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908070"
Slug: receiving-and-handling-http-requests-anywhere-with-the-azure-relay
Title: Azure Relay를 사용하여 어디서나 HTTP 요청 수신 및 처리
Summary: 빌드 2018 컨퍼런스에 맞춰 릴레이는 다른 Azure 뉴스의 급류 속에서 기울어지지 않았을 수 있는 새로운 트릭을 배웠기 때문에 오늘 다시 말씀드리고 있습니다. 릴레이는 이제 개방형 Websockets 프로토콜을 통해 릴레이된 HTTP 요청을 지원합니다.
Content: >-
  <p>빌드 2018 컨퍼런스에서 Microsofts&rsquo; 범위를 따른 경우, Visual Studio 사용자 간에 즉각적이고 원격적인 피어 투 피어 협업을 허용하는 새로운 <a href="https://channel9.msdn.com/Shows/Azure-Friday/At-Build-2018-Visual-Studio-Live-Share" target="_blank">Visual Studio Live Share</a> 기능에 대해 매우 흥분했을 수 있습니다. 한 개발자는 커피숍에 앉아 있고 다른 개발자는 기내 WiFi가 있는 비행기에 앉아 있을 수 있지만 둘 다 코드에서 직접 공동 작업할 수 있습니다.</p>


  <p>&quot;Visual Studio 팀이 이 기능을 제공할 수 있도록 하는 네트워킹 마술&quot;은 Azure Service Bus, Azure Event Hubs 및 Azure Event Grid와 함께 메시징 서비스 제품군의 일부인 Azure <a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-what-is-it" target="_blank">Relay</a>입니다. 릴레이는 실제로 모든 Azure 서비스 중 가장 오래된 서비스로, 정확히 12년 전에 가장 빠른 퍼블릭 인큐베이션이 시작되었으며, 2010년 1월 Azure 플랫폼으로 시작된 소수의 원래 서비스 중 하나였습니다.</p>


  <p>그 동안 Relay는 WebSocket 클라이언트 스택에서 작업할 수 있는 <a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-hybrid-connections-protocol" target="_blank">완전히 문서화된 개방형 프로토콜</a> 을 말하는 방법을 배웠으며, 이러한 클라이언트는 인바운드 방화벽 규칙, 공용 IP 주소 또는 DNS 등록 없이도 다른 클라이언트의 인바운드 연결에 대한 수신기가 될 수 있습니다. 모든 인바운드 통신은 네트워크 링크 수준에서 멀리 내려가지 않고 애플리케이션 계층 내에서 종료되므로 릴레이는 VPN(가상 사설망) 기술을 사용하는 것보다 개별 앱에 도달하기 위한 더욱 안전한 솔루션이기도 합니다.</p>


  <p>빌드 2018 컨퍼런스 시간에 릴레이는 다른 Azure 뉴스의 급류 속에서 학습을 놓쳤을 수도 있는 새로운 트릭을 배웠기 때문에&rsquo; 오늘 다시 이에 대해 알려드립니다. 이제 Relay는 릴레이된 HTTP 요청도 지원합니다.</p>


  <p>이 기능은 컨테이너 내에서 실행되는 애플리케이션 또는 애플리케이션 구성 요소에 매우 흥미롭고, 퍼블릭 엔드포인트를 제공하기 어려울&#39;있으며, <a href="https://azure.microsoft.com/en-us/services/event-grid/" target="_blank">Azure Event Grid</a>와 통합할 수 있는 웹후크를 구현하는 데 특히 적합합니다.</p>


  <p>릴레이는 일반적으로 애플리케이션 또는 디바이스가 방화벽 뒤에 도달해야 하는 시나리오에서 사용됩니다. 일반적인 애플리케이션 시나리오에는 판매 또는 서비스 지점(상점, 커피 바, 레스토랑, 선탠 살롱, 체육관, 수리점) 또는 전문 서비스 사무실(세무 고문, 법률 사무소, 의료 클리닉)과 클라우드 기반 SaaS 애플리케이션의 통합이 포함됩니다. 또한 릴레이는 복잡한 VPN 설정 대신 <a href="https://docs.microsoft.com/en-us/azure/app-service/app-service-hybrid-connections" target="_blank">릴레이 기반 통신 경로를</a> 사용하는 회사 IT 부서에서 점점 더 인기를 끌고 있습니다. 우리는 가까운 장래에 이러한 시나리오에 대한 더 많은 뉴스를해야합니다.</p>


  <p>새 HTTP 지원을 사용하면 휴대폰이나 다른 디바이스에서도 공개적으로 연결할 수 있는 HTTP(-S) 수신기를 만들고 호스트할 수 있으며, 확인 가능한 DNS 이름, TLS 서버 인증서 및 공개적으로 액세스할 수 있는 IP 주소를 제공하기 위해 Azure Relay 서비스에 그대로 둘 수 있습니다. 모든 애플리케이션 요구는 일반적인 HTTPS 포트 443을 통해 Azure Relay에 대한 아웃바운드 Websocket 연결입니다.</p>


  <p>예를 들어&rsquo; 간단한 Node.js 예제를 간략하게 살펴보겠습니다. 먼저 Node.js 사용하여 빌드된 &ldquo;최소 로컬 HTTP 수신기는 다음과&rsquo; 같습니다.&rdquo;</p>


  <pre style="background: white; color: black; font-family: consolas, courier new, courier;">

  var http = require(&#39;http&#39;);

  var port = process.env.PORT || 1337;


  http.createServer(function (req, res) {

  &nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });

  &nbsp;&nbsp;&nbsp;&nbsp; res.end(&#39;Hello World\n&#39;);

  }).listen(port);

  </pre>


  <p>Azure Relay를 사용하는 동일한 Node.js 애플리케이션입니다.</p>


  <pre style="background: white; color: black; font-family: consolas, courier new, courier;">

  var http = require(&#39;hyco-https&#39;);


  var uri = http.createRelayListenUri(&quot;cvbuild.servicebus.windows.net&quot;, &quot;app&quot;);

  var server = http.createRelayedServer({

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; server: uri,

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; token: () =&gt; http.createRelayToken(uri, &quot;listen&quot;, &quot;{&hellip;key&hellip;}&quot;)

  &nbsp;&nbsp;&nbsp;&nbsp; },

  &nbsp;&nbsp;&nbsp;&nbsp; function (req, res) {

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, { &#39;Content-Type&#39;: &#39;text/plain&#39; });

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; res.end(&#39;Hello World\n&#39;);

  }).listen();

  </pre>


  <p>주요 변경 사항은 Relay 애플리케이션이 Node.js기본 제공 http 모듈 대신 hyco-https &rsquo;&rsquo; 모듈을 사용하고 &lsquo;서버가 릴레이에 연결하기 위한 엔드포인트 및 보안 토큰 정보를 제공하는 createRelayedServer&rsquo; 메서드를 사용하여 &lsquo;생성된다는 것입니다.&rsquo; &lsquo; 가장 중요한 것은 Node.js HTTP 처리기 코드가 완전히 동일합니다.</p>


  <p>.NET Standard의 경우 <a href="https://www.nuget.org/packages/Microsoft.Azure.Relay" target="_blank">MICROSOFT.Azure.Relay</a> NuGet 패키지의 최신 미리 보기에서 기존 Relay API를 확장하여 HTTP 요청 처리도 지원합니다. Websocket 연결과 마찬가지로 HybridConnectionListener를 만든 다음 RequestHandler 콜백을 추가합니다.</p>


  <pre style="background: white; color: black; font-family: consolas, courier new, courier;">

  var listener = new HybridConnectionListener(uri, tokenProvider);

  listener.RequestHandler = (context) =&gt;

  {

  &nbsp;&nbsp;&nbsp;&nbsp; context.Response.StatusCode = HttpStatusCode.OK;

  &nbsp;&nbsp;&nbsp;&nbsp; context.Response.StatusDescription = &quot;OK&quot;;

  &nbsp;&nbsp;&nbsp;&nbsp; using (var sw = new StreamWriter(context.Response.OutputStream))

  &nbsp;&nbsp;&nbsp;&nbsp; {

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sw.WriteLine(&quot;hello!&quot;);

  &nbsp;&nbsp;&nbsp;&nbsp; }

  &nbsp;&nbsp;&nbsp;&nbsp; context.Response.Close();

  };

  </pre>


  <p>기존 ASP.NET Core 서비스가 릴레이에서 요청을 수신 대기하도록 하려면 방금 릴리스된 새 <a href="https://www.nuget.org/packages/Microsoft.Azure.Relay.AspNetCore" target="_blank">Microsoft.Azure.Relay.AspNetCore</a> NuGet 패키지를 사용하고 UseAzureRelay()&quot;를 추가하여 &quot;릴레이 뒤에서 기존 ASP.NET Core 앱을 호스팅할 수 있도록 합니다.  웹 호스트 작성기 확장 및 하이브리드 연결 공유 액세스 규칙의 연결 문자열 구성(<a href="https://github.com/Azure/azure-relay-aspnetserver" target="_blank">추가 정보</a>, <a href="https://github.com/Azure/azure-relay-aspnetserver/tree/dev/samples" target="_blank">추가 샘플</a> 참조).</p>


  <pre style="background: white; color: black; font-family: consolas;">
      public static IWebHost BuildWebHost(string[] args) =&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WebHost.CreateDefaultBuilder(args)

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .UseStartup&lt;Startup&gt;()

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .UseAzureRelay(options =&gt;

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; options.UrlPrefixes.Add(connectionString);

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; })

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Build();

  </pre>


  <p>HTTP 기능은 현재 프로덕션 환경에서 미리 보기로 제공되므로 지원 및 SLA로 완성된 기존 릴레이 기능과 함께 사용할 수 있습니다. &rsquo;미리 보기로 제공되며 아직 완전히 최종 형태가 아니기 때문에 HTTP 관련 유선 프로토콜을 크게 변경할 수 있습니다.</p>


  <p>릴레이는 일반 역방향 프록시가 아니&rsquo;므로 릴레이가 재정의하고 최종적으로 정렬하려고 하는 하위 수준의 HTTP 세부 정보가 있습니다. 이러한 정렬의 대표적인 알려진 문제는 릴레이가 항상 HTTP 응답을 청크 분할된 전송 인코딩을 사용하도록 변환한다는 것입니다. 프로토콜 순수주의자에게는 상당히 성가신 일이지만 대부분의 애플리케이션 수준 사용 사례에는 중대한 영향을 미치지 않습니다&rsquo;.</p>


  <p>시작하려면 <a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-hybrid-connections-http-requests-dotnet-get-started" target="_blank">C#</a> 또는 <a href="https://docs.microsoft.com/en-us/azure/service-bus-relay/relay-hybrid-connections-http-requests-node-get-started" target="_blank">Node.js</a> 대한 자습서를 확인하고 자습서 아래의 피드백 옵션을 통해 새 HTTP 기능을 원하는지 여부를 알려주세요.</p>
