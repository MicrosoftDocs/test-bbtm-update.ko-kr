### YamlMime:Yaml
ms.openlocfilehash: c189af8d5fc7999fe8c135b281db4b3067ad06cd
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907837"
Slug: deploying-wordpress-application-using-visual-studio-team-services-and-azure-part-two
Title: Visual Studio Team Services 및 Azure를 사용하여 WordPress 애플리케이션 배포 – 2부
Summary: 이 게시물은 Azure WebApp for Containers 및 Azure Database for MySQL에서 작업하는 Dockerized 사용자 지정 WordPress 웹 사이트를 배포하기 위해 VSTS(Visual Studio Team Services)를 사용하여 CI/CD 파이프라인을 설정하는 방법을 설명하는 두 블로그 게시물의 두 번째 부분입니다.
Content: >-
  <p>이 게시물은 Azure WebApp for Containers 및 Azure Database for MySQL에서 작업하는 Dockerized 사용자 지정 WordPress 웹 사이트를 배포하기 위해 VSTS(Visual Studio Team Services)를 사용하여 CI/CD 파이프라인을 설정하는 방법을 설명하는 두 블로그 게시물의 두 번째 부분입니다. <a href="https://azure.microsoft.com/en-us/blog/deploying-wordpress-application-using-vsts-and-azure-part-one/" target="_blank">Visual Studio Team Services 및 Azure를 사용하여 WordPress 애플리케이션 배포 - 1부</a>에서는 VSTS를 사용하여 CI(연속 통합) 프로세스를 빌드하는 방법을 설명했으며, 이 부분에서는 VSTS 릴리스 관리를 사용하여 CD(지속적인 업데이트) 부분에 집중합니다.</p>


  <h2>이 부분에 대한 필수 구성 요소</h2>


  <ul>
   <li><a href="https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/" target="_blank">Azure Virtual Machine에 설치된 MySQL 클라이언트 </a>(apt-get install mysql-client-5.7).</li>
   <li>Azure VM 컴퓨터와 Azure Databases for MySQL 간의 연결 허용</li>
   <li><a href="https://marketplace.visualstudio.com/items?itemName=colinsalmcorner.colinsalmcorner-buildtasks" target="_blank">이 VSTS 경로 트래픽 확장 설치</a></li>
  </ul>


  <h2>&ndash; Visual Studio Team Services 릴리스 단계</h2>


  <p>다음 단계를 각각 완료한 후 저장하는 것이 좋습니다.</p>


  <p>먼저 빈 릴리스 정의를 새로 만들고, <strong>릴리스</strong>로 이동하고, 아이콘을 클릭하고<strong>+</strong>,<strong> 릴리스 정의 만들기</strong>를 선택하고, <strong>빈 프로세스를 </strong>템플릿으로 선택해야 합니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e758c595-f64d-496a-8026-42abeb2be71d.png"><img alt="pic1" border="0" height="630" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5b2810a2-c31a-49f2-b6df-b490013d435b.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="pic1" width="2031"></a></p>


  <p>&rsquo;먼저 파이프라인에 아티팩트 추가를 시작합니다. Artifacts 섹션(1단계)에서<strong> 추가</strong>를 클릭하면 오른쪽 블레이드가 표시되고 다음을 선택합니다.</p>


  <ul>
   <li>원본 유형 &ndash; 빌드</li>
   <li>&ndash; Project 관련 프로젝트 이름</li>
   <li>원본 &ndash; 만든 빌드 정의의 이름</li>
   <li>기본 버전 &ndash; 최신</li>
   <li>원본 별칭 &ndash; 기본값 유지</li>
  </ul>


  <p><strong> </strong>추가를 클릭한 후 Artifacts 섹션(2단계)에서 <strong>트리거 아이콘</strong>을 클릭하면 오른쪽 블레이드가 표시되고 <strong>연속 배포 트리거를 사용하도록 선택합니다</strong>.</p>


  <p>환경 섹션을 구성하기 위해 이동하고,<strong> 배포 전 조건</strong> 아이콘(3단계)을 클릭하고, <strong>릴리스 트리거 후</strong> 를 선택하고, 오른쪽 블레이드를 닫아야 합니다.</p>


  <p>다음 단계는 <strong>개발 파이프라인</strong>에 작업을 추가하는 것입니다. 링크를 클릭하거나(4단계) <strong>작업을</strong> 클릭합니다.</p>


  <h2>개발 파이프라인</h2>


  <p><strong>작업</strong> 탭에서 <strong>에이전트 단계를</strong> 클릭하고 <strong>호스트된 Linux 미리 보기를</strong> 에이전트 큐로 선택합니다. 아이콘을 클릭하여 다음 작업을 추가합니다<strong>+</strong>.</p>


  <ul>
   <li>세 가지 SSH 명령 작업</li>
   <li>하나의 Azure App Service 배포 작업</li>
   <li>하나의 Azure App Service 관리 작업</li>
  </ul>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/27629961-5a01-461e-8e51-a30d8bf7b289.png"><img alt="image" border="0" height="234" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/94e3064a-a125-4674-9272-164c6a033825.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="624"></a></p>


  <p>이제<strong> 개발 CD</strong> 프로세스 중에 사용할 변수를 추가해야 합니다. <strong>변수 탭을</strong> 클릭하고 아래 목록에서 추가를 시작하고 <strong>범위로 개발을</strong> 선택합니다.</p>


  <ul>
   <li>$(destappinsight) &ndash;개발 환경의 Application Insight Instrumentation Key</li>
   <li>개발 환경의 $(desturl) &ndash; App Service URL</li>
   <li>DB 백업 및 복원 작업을 실행할 때 $(migrationfile) &ndash; 임시 파일 이름</li>
   <li>$(mysqldestdb) &ndash; 개발 환경의 DB 이름</li>
   <li>$(mysqlhost) &ndash; Azure Database for MySQL의 서버 이름</li>
   <li>Azure Database for MySQL에 대한 $(mysqlpass) &ndash; 암호</li>
   <li>$(mysqlport) &ndash; Azure Database for MySQL용 포트</li>
   <li>$(mysqlsourcedb) &ndash; 로컬 환경의 DB 이름</li>
   <li>$(mysqluser) &ndash; Azure Database for MySQL의 사용자 이름</li>
   <li>$(resultfile) - DB 백업 및 복원 작업을 실행할 때 임시 파일 이름</li>
   <li>$(sourceappinsight) - 로컬 환경의 Application Insight 계측 키</li>
   <li>$(sourceurl) &ndash; 로컬 환경 URL</li>
  </ul>


  <p>&rsquo;중요한 값을 저장하기 위해 보다 안전한 솔루션을 사용하고, <a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/variable-groups" target="_blank">Azure KeyVault를 사용하여 중요한 값을 저장하고 VSTS에 사용하는 방법에</a> 대해 자세히 알아봅니다.</p>


  <p><strong>작업</strong> 탭으로 돌아가기 전에 새 SSH 엔드포인트(설정/Services/새 서비스 엔드포인트/SSH)를 추가해야 합니다. Azure Virtual Machine 세부 정보를 채웁니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/44fb6175-254f-4cc8-9728-22611fd0a585.png"><img alt="image" border="0" height="267" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f9fbb78b-1aea-4aae-be18-8f589e93c2bd.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="624"></a></p>


  <p>&rsquo;이제 작업 탭으로 돌아가<strong>서 작업</strong> 편집을 시작합니다.</p>


  <p>첫 번째 SSH 작업은 다음 값을 <strong>사용하여 파일에 DB를 백업</strong> 하는 것입니다.</p>


  <pre style="margin-left: 40px;">

  SSH endpoint &ndash; select the relevant SSH endpoint

  Run &ndash; Commands

  Commands &ndash;

  mysqldump -P $(mysqlport) -h $(mysqlhost)  -u $(mysqluser)  -p$(mysqlpass) $(mysqlsourcedb) &gt; $(resultfile)  </pre>


  <p>두 번째 SSH 작업은 <strong>값을 다음 값으로 대체</strong> 합니다.</p>


  <pre style="margin-left: 40px;">

  SSH endpoint &ndash; select the relevant SSH endpoint

  Run &ndash; Commands

  Commands &ndash;

  sed &#39;s/$(sourceurl)/$(desturl)/g;s/$(sourceappinsight)/$(destappinsight)/g&#39; $(resultfile) &gt; $(migrationfile)</pre>


  <p>세 번째 SSH 작업은 다음 값을 사용하여 <strong>마이그레이션된 파일에서 DB를 복원</strong> 하는 것입니다.</p>


  <pre style="margin-left: 40px;">

  SSH endpoint &ndash; select the relevant SSH endpoint

  Run &ndash; Commands

  Commands &ndash;

  mysql -h $(mysqlhost) -u $(mysqluser)  -p$(mysqlpass) $(mysqldestdb) &lt; $(migrationfile)</pre>


  <p>4번째 작업은 다음 값을 사용하여 <strong>Azure App Service 배포</strong> 버전 3입니다.</p>


  <pre style="margin-left: 40px;">

  Azure subscription &ndash; select the relevant Azure subscription

  App type &ndash; Linux Web App

  App Service name &ndash; select Dev environment App Service

  Image Source &ndash; Container Registry

  Registry or Namespace &ndash; Azure Container Registry login server value

  Image &ndash; The Docker image name from CI process

  Tag - $(Build.BuildId)

  App settings &ndash;

  -DB_ENV_NAME $(mysqldestdb) -DB_ENV_USER $(mysqluser) -DB_ENV_PASSWORD $(mysqlpass) -DB_ENV_HOST $(mysqlhost)</pre>


  <p>5번째 작업은 Azure App Service 관리이며, 다음 값으로 <strong>Azure App Service를 다시 시작</strong> 합니다.</p>


  <pre style="margin-left: 40px;">

  Azure subscription &ndash; select the relevant Azure subscription

  Action &ndash; Restart App Service

  App Service name - select the App Service of Dev environment</pre>


  <p><strong>개발</strong> CD 파이프라인 빌드를 완료했습니다.</p>


  <h2>테스트 파이프라인</h2>


  <p><strong>파이프라인 </strong>탭으로 돌아가 <strong>개발</strong> 환경을 강조 표시하고 환경 <strong>복제</strong>(5단계)를 선택하여 새 환경 <strong>테스트를</strong> 호출합니다.</p>


  <p><strong>테스트</strong> 환경의 배포 전 조건(6단계)으로 <strong>환경 트리거 후</strong> 선택하고, <strong>배포 전 승인</strong> 옵션을 사용하도록 설정하고, 팀의 구성원을 승인자로 선택하여 <strong>테스트</strong> 환경에 대한 배포 프로세스를 시작합니다.</p>


  <p>블레이드를 닫은 후 아래 링크를 클릭하여 환경 작업을 봅니다(7단계).</p>


  <p><strong> 작업</strong> 탭이 표시되며 처음 세 개의 SSH 작업을 업데이트할 필요가 없습니다.<br>

  4번째 작업은 &ndash; 테스트 환경을 위해 <strong>App Service 이름을</strong> 올바른 App Service로 업데이트합니다.<br>

  5번째 작업은 &ndash; <strong>App Service 이름을</strong> 다시 업데이트합니다.</p>


  <p><strong>변수</strong> 탭으로 이동하여 <strong>테스트</strong> 범위에 따라 필터링하고 변수 값을 <strong>테스트</strong> 환경으로 설정합니다. 이제 <strong>테스트</strong> CD 파이프라인 빌드를 완료했습니다.</p>


  <p>작업 그룹을 만들고 다른 환경 간에 사용할 수 있는 <a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/task-groups" target="_blank">구현 옵션</a> 에 대해 자세히 알아봅니다.</p>


  <h2>프로덕션 파이프라인</h2>


  <p>Microsoft의 목표는 가동 중지 시간 없이 프로덕션 롤아웃을 통해 Azure App Services에서 제공하는 슬롯 메커니즘 및 라우팅 기능을 사용할 수 있도록 하는 것입니다.</p>


  <p><strong>프로덕션 </strong>환경을 만들려면 <strong>테스트 </strong>환경을 만들기 위해 동일한 단계를 반복합니다(8단계, 9단계 및 10단계).</p>


  <p><strong>변수</strong> 탭으로 이동하여 <strong>프로덕션</strong> 범위에 따라 필터링하고 값을 <strong>프로덕션</strong> 환경으로 설정합니다. $(mysqldestdb) 값을 스테이지 DB로 설정합니다. 또한 새 변수 $(mysqlproddb)를 추가하고 이 값을 프로덕션 DB로 설정합니다.</p>


  <p><strong>작업</strong> 탭으로 돌아가서 4번째 및 5번째 작업의 <strong>App Service 이름을</strong> 업데이트합니다. 이번에는 <strong>슬롯에 배포</strong> 옵션을 확인하고 프로덕션 App Service용으로 만든 스테이징&rsquo; 슬롯을 선택합니다&lsquo;.</p>


  <p>아이콘을 클릭하여 추가 작업을 추가합니다.<strong>+</strong></p>


  <ul>
   <li>하나의 경로 트래픽 작업 - 프로덕션 App Service, 스테이지 슬롯 및 경로 100% 트래픽 선택(아래 스크린샷 참조)</li>
   <li>다른 SSH 작업과 동일한 구성의 두 SSH 명령 작업 &ndash;</li>
  </ul>


  <p style="margin-left: 40px;"><strong>첫 번째 작업 명령:</strong></p>


  <pre style="margin-left: 40px;">
        mysqldump -P $(mysqlport) -h $(mysqlhost)  -u $(mysqluser)  -p$(mysqlpass) $(mysqldestdb) &gt; $(resultfile)</pre>

  <p style="margin-left: 40px;"><strong>두 번째 작업 명령:</strong></p>


  <pre style="margin-left: 40px;">
        mysql -h $(mysqlhost) -u $(mysqluser)  -p$(mysqlpass) $(mysqlproddb) &lt; $(resultfile)</pre>

  <ul>
   <li>하나의 Azure App Service 배포 작업<br>
  4번째 작업과 동일하지만 이번에는 슬롯 옵션을 확인하지 않고</li>
   <li>하나의 Azure App Service 관리 작업<br>
  5번째 작업과 동일하지만 이번에는 슬롯 옵션을 확인하지 않고</li>
   <li>하나의 경로 트래픽 작업<br>
  프로덕션 App Service를 선택하고, 슬롯을 스테이징하고, 트래픽의 0%를 라우팅합니다.</li>

  </ul>


  <p>프로덕션용 CD 빌드를 완료했습니다. 결과를 참조하세요.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5b11ce37-e92f-4df8-ba5a-0fe1e07801bb.png"><img alt="image" border="0" height="488" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6a8bbf75-3ab6-4f8c-8bfb-6c4cadf11d97.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="616"></a></p>


  <h2>요약</h2>


  <p>이 일련의 두 블로그 게시물에서는 Docker를 채택하여 DevOps 프로세스 현대화를 시작하고, CI/CD 도구로 VSTS(Visual Studio Team Services)를 사용하고, 클라우드 공급자로 Azure를 사용하는 것이 얼마나 쉬운지 실험해 볼 수 있기를 바랍니다. 이러한 종류의 현대화는 모든 조직의 배포 변환을 향한 첫 번째 단계가 될 수 있습니다.</p>


  <h2>리소스</h2>


  <ul>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/" target="_blank">VSTS에서 CI/CD 시작</a></li>
   <li><a href="https://azure.microsoft.com/en-us/services/key-vault/" target="_blank">Azure KeyVault</a></li>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/variable-groups" target="_blank">VSTS 변수 그룹</a></li>
   <li><a href="https://docs.microsoft.com/en-us/vsts/build-release/concepts/library/task-groups" target="_blank">VSTS 작업 그룹</a></li>
  </ul>
