### YamlMime:Yaml
ms.openlocfilehash: cfa577a765af6228547b52174592dfeb5f0e6172
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911104"
Slug: building-xbox-game-streaming-with-site-reliability-best-practices
Title: 사이트 안정성 모범 사례를 사용하여 Xbox 게임 스트리밍 빌드
Summary: 지난 달, Microsoft의 여러 팀의 이야기와 이러한 팀이 DevOps 채택에 접근하는 방법을 통해 Microsoft에서의 DevOps 경험을 공유하기 시작했습니다.
Content: >-
  <p>지난 달 Microsoft에서 여러 팀의 이야기와 DevOps 채택에 접근하는 방법을 통해 Microsoft에서의 DevOps <a href="https://azure.microsoft.com/en-us/blog/sharing-the-devops-journey-at-microsoft/" target="_blank">여정</a>을 공유하기 시작했습니다. 이 시리즈의 다음 이야기로, 클래식 운영 역할에서 SRE(사이트 안정성 엔지니어링) 역할로 전환한 팀, 즉 XREO(Xbox 안정성 엔지니어링 및 운영) 팀의 이야기를 공유하려고 합니다.</p>


  <p>이러한 전환은 쉽지 않았으며 Microsoft가 클라우드 게임 스트리밍(<a href="https://www.xbox.com/en-US/xbox-game-streaming/project-xcloud" target="_blank">프로젝트 xCloud</a>)을 통해 어디에 있든 Xbox 게임을 게이머에게 제공하기로 결정했을 때 필요에서 벗어났습니다. 최고 수준의 고객 경험을 갖춘 최첨단 기술을 제공하기 위해 팀은 개발 팀과의 협업을 입증하고 자동화에 투자하며 애플리케이션 수명 주기의 초기 단계에 참여하는 방식을&mdash; 재정의해야 했습니다. 이 블로그&rsquo;에서는 팀이 그 과정에서 수집한 몇 가지 주요 학습을 검토합니다. 팀의 전체 스토리를 살펴보려면 <a href="https://azure.microsoft.com/en-us/solutions/devops/devops-at-microsoft/xbox-sre/" target="_blank">xREO 팀의 여정을</a> 참조하세요.</p>


  <h2>일관된 게임 플레이 요구 사항 및 공동 작업 필요성</h2>


  <p>일관된 환경은 성공적인 게임 스트리밍 세션에 매우 중요합니다. 게이머가 클라우드에서 스트리밍된 게임을 경험하도록 하려면 근처 콘솔에서 실행되는 것처럼 느껴야 합니다. 즉, 최종 사용자와 가까운 많은 데이터 센터에서 실행되는 전역적으로 분산된 클라우드 솔루션을 만듭니다. <a href="https://azure.microsoft.com/en-us/global-infrastructure/" target="_blank">Azures&rsquo; 글로벌 인프라</a> 는 이를 가능하게 하지만 많은 Azure 지역에서 실행되는 시스템을 운영하는 것은 심각한 과제입니다.</p>


  <p>이 기술을 설계하고 빌드하기 시작한 Xbox 개발자들은 이 시스템을 빌드하고 &ldquo;벽에&rdquo; 던져 운영할 수 없다는 것을 이해했습니다. 두 팀은 함께 모여 전체 애플리케이션 수명 주기를 통해 공동 작업해야 했기 때문에 프로덕션 환경에서 시스템을 운영하는 방법에 대한 고려 사항으로 처음부터 시스템을 설계할 수 있었습니다.</p>


  <p><img alt="Mobile device showing a racing game streamed from the cloud" border="0" height="529" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3117ec80-75a2-47d5-8aaa-d37c1670b6e5.jpg" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="" width="940"></p>


  <h2>작업을 염두에 두고 클라우드 솔루션 설계</h2>


  <p>많은 대규모 조직에서 일반적으로 사일로에서 작업하는 개발 및 운영 팀을 볼 수 있습니다. 개발자는 시스템을 계획하고 빌드할 때 항상 작업을 고려하지 않지만&rsquo; 운영 팀은 코드를 배포하고 프로덕션 환경에서 운영하더라도 코드를 터치할 수 있는 권한이 없습니다. SRE 접근 방식을 사용하면 시스템 안정성이 전체 애플리케이션 수명 주기에 적용되고 프로덕션 환경에서 시스템을 운영하는 팀은 계획 단계에서 중요한 기여자입니다. 새로운 접근 방식에서 디자인 단계에서 xREO 팀을 참여시켜 공동 기술을 선택하고 스케일링에 필요한 요구 사항에 따라 작동할 수 있는 시스템을 설계하는 공동 작업 환경을 가능하게 했습니다.</p>


  <h2>컨테이너를 활용하여 소유권을 명확하게 정의</h2>


  <p>개발 및 xREO 팀이 함께 내린 첫 번째 기술 결정 중 하나는 컨테이너 기술을 활용하는 마이크로 서비스 아키텍처를 구현하는 것이었습니다. 이를 통해 개발 팀은 소유할 .NET Core 마이크로 서비스를 컨테이너화하고 컨테이너를 실행하고 xREO 팀이 소유해야 하는 클라우드 인프라에서 종속성을 제거할 수 있었습니다.</p>


  <p>양 팀이 초기에 내린 또 다른 기술적 결정은 Kubernetes를 기본 컨테이너 오케스트레이션 플랫폼으로 사용하는 것이었습니다. 이를 통해 xREO 팀은 Kubernetes 클러스터의 배포를 간소화하는 관리되는 Kubernetes 클라우드 플랫폼인 AKS( <a href="https://azure.microsoft.com/en-us/services/kubernetes-service/" target="_blank">Azure Kubernetes Service</a> )를 활용할 수 있으므로 팀이 여러 Azure 지역에서 여러 클러스터를 실행하는 데 직면해야 하는 많은 운영 복잡성을 제거할 수 있었습니다. 이러한 공동 선택은 소유권을 분명히&mdash; 했으며 개발자는 컨테이너 내의 모든 것을 책임지고 xREO 팀은 AKS 클러스터 및 기타 Azure 서비스를 담당하여 이러한 컨테이너를 호스팅하는 클라우드 인프라를 만듭니다. 각 팀은 프로덕션에서 해당 조각의 배포, 모니터링 및 운영을 소유합니다.</p>


  <p>이러한 종류의 접근 방식은 명확한 책임을 만들고 프로덕션에서 더 쉬운 인시던트 관리를 허용합니다. 인프라 및 애플리케이션 논리에 코드 종속성이 있고 상황이 옆으로 진행될 때 얽히기 어려운 모놀리식 아키텍처에서 매우 어려울 수 있습니다.</p>


  <h2><img alt="Two members of the xREO team, seated in a conference room in front of a laptop." border="0" height="557" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5bda261e-23b0-4868-a610-b307d5b939d1.jpg" style="border: 0px currentcolor; border-image: none; display: inline; background-image: none;" title="" width="991"></h2>


  <h2>인프라 자동화를 통한 크기 조정</h2>


  <p>xREO 팀이 투자한 또 다른 모범 사례는 인프라 자동화였습니다. 각 Azure 지역에 여러 클라우드 서비스를 수동으로 배포하는 것은 확장할 수 없으며 시간이 너무 많이 걸립니다. 팀은 IaC(Infrastructure as code&rdquo;)라고 하는 &ldquo;사례를 사용하여 최소한의 노력으로 여러 Azure 지역에 배포할 수 있는 클라우드 환경의 선언적 정의를 만들기 위해 Azure <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/template-deployment-overview" target="_blank">Resource Manager 템플릿</a>을 사용했습니다.</p>


  <p>코드로 관리되는 인프라를 사용하면 CI/CD(지속적인 통합 및 지속적인 업데이트)를 사용하여 배포하여 기존 데이터 센터에 새 Azure 리소스를 배포하거나, 인프라 정의를 업데이트하거나, 필요할 때 온라인 새 Azure 지역을 가져오는 프로세스에 자동화를 추가할 수 있습니다. IaC와 CI/CD를 모두 사용하면 팀이 마른 상태를 유지하고, 반복적인 평범한 작업을 피하고, 수동 단계와 함께 제공되는 인적 오류의 위험을 대부분 제거할 수 있습니다. 팀은 수동 작업 및 검사 목록에 시간을 소비하는 대신 플랫폼과 복원력을 개선하는 데 집중할 수 있습니다.</p>


  <h2>작동 중인 사이트 안정성 엔지니어링&nbsp;</h2>


  <p>xREO 팀의 여정은 게이머에게 최상의 고객 경험을 제공해야 하는 필요성에서 시작되었습니다. 이는 최첨단 혁신을 통해 고객에게 새로운 경험을 제공하려는 팀이 소프트웨어를 디자인, 빌드 및 운영하는 방식을 어떻게 발전시켜야 하는지 보여주는 좋은 예입니다. 운영에 대한 접근 방식을 전환하고 개발 팀과 보다 긴밀하게 협력하는 것은 xREO 팀이 겪은 진정한 변화였습니다.</p>


  <p>이 새로운 사고방식을 갖춘 이 팀은 이제 더 많은 복원력을 계속 구축하고 시스템을 더욱 확장할 수 있는 위치에 있으며, 따라서 모든 게이머에게 클라우드 게임 스트리밍의 약속을 제공할 수 있습니다.</p>


  <h2>리소스</h2>


  <ul>
      <li><a href="https://azure.microsoft.com/en-us/solutions/devops/devops-at-microsoft/xbox-sre" target="_blank">xREO 팀의 전체 이야기</a></li>
      <li>추가 사례: <a href="https://azure.microsoft.com/en-us/solutions/devops/devops-at-microsoft/" target="_blank">Microsoft의 DevOps 경험</a></li>
      <li><a href="https://developer.microsoft.com/en-us/games" target="_blank">Microsoft 게임 스택</a></li>
  </ul>
