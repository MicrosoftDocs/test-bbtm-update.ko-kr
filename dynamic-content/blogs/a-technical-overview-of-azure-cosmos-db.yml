### YamlMime:Yaml
ms.openlocfilehash: 23d31fa34ef26a7b500ec3ba5d35de9285a09459
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899198"
Slug: a-technical-overview-of-azure-cosmos-db
Title: Azure Cosmos DB의 기술 개요
Summary: Azure Cosmos DB는 Microsoft의 전역적으로 분산되고 수평 분할된 다중 모델 데이터베이스 서비스입니다. 서비스는 고객이 원하는 수의 지역에서 처리량 및 스토리지 크기를 탄력적 및 독립적으로 조정할 수 있도록 설계되었습니다.
Content: >-
  <p><em>Microsofts&rsquo; 전역적으로 분산된 다중 모델 데이터베이스 서비스 &ndash; A 기술 개요</em></p>


  <p>Azure Cosmos DB는 <a href="https://aka.ms/acdbglobaldist">전역적으로 분산된</a> 수평 분할된 다중 모델 데이터베이스 서비스인 Microsofts&rsquo;입니다. 서비스는 고객이 원하는 수의 지역에서 처리량 및 스토리지 크기를 탄력적 및 독립적으로 조정할 수 있도록 설계되었습니다. Azure Cosmos DB는 99번째 백분위수, 99.99% 고가용성, 예측 가능한 처리량 및 잘 정의된 여러 <a href="https://aka.ms/acdbconsistency">일관성 모델</a>에서 짧은 대기 시간을 보장합니다. Azure Cosmos DB는 오늘날 업계 최초로 전 세계적으로 분산된 데이터베이스 서비스로, 고객이 가장 중요하게 사용하는 4가지 차원인 처리량, 99번째 백분위수의 대기 시간, 가용성 및 일관성을 포괄하는 포괄적인 <a href="https://azure.microsoft.com/en-us/support/legal/sla/cosmos-db/" target="_blank">SLA</a>(서비스 수준 계약)를 제공합니다. 클라우드 서비스로서 다중 테넌트 및 글로벌 배포를 염두에 두고 Azure Cosmos DB를 신중하게 설계하고 엔지니어링했습니다. 이 블로그 게시물에서는 Azure Cosmos DB의 주목할 만한 기능 및 아키텍처 선택에 대한 개요를 제공합니다.</p>


  <h2>Azure Cosmos DB의 기초</h2>


  <p><img align="right" alt="CosmosTech_1" border="0" height="151" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d9ee7656-69d9-4d51-838a-bad7025fb6e1.jpg" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: right; display: inline; background-image: none;" title="CosmosTech_1" width="240"></p>


  <p>튜링 상 수상자이자 세계적으로 유명한 컴퓨터 과학자인 레슬리 램포트 박사의 작품은 많은 대규모 분산 시스템에 큰 영향을 미쳤습니다. Azure Cosmos DB도 예외는 아닙니다. Azure Cosmos DB를 빌드하는 7년 동안 Leslies&rsquo; 작업은 우리에게 지속적인 영감의 원천이 되었습니다.</p>


  <p>이 새로운 <a href="https://youtu.be/L_PPKyAsR3w" target="_blank">인터뷰에서</a> Leslie는 Azure Cosmos DB의 기초에 대한 자신의 생각과 Azure Cosmos DB 디자인에 대한 자신의 영향력을 공유합니다.</p>


  <h2>Azure Cosmos DB의 디자인 목표</h2>


  <p>Azure Cosmos DB는 2010년에 Project 피렌체&rdquo;로 &ldquo;시작되었습니다. 목표는 Microsoft 내에서 인터넷 규모 애플리케이션을 빌드하는 개발자가 직면한 근본적인 문제를 해결하는 것이었습니다. Azure Cosmos DB에 대해 다음 디자인 목표를 설정합니다.</p>


  <ol>
   <li><strong>고객이 전역적으로 수요에 따라 처리량 및 스토리지를 탄력적으로 확장할 수 있도록 합니다.</strong> 시스템은 요청의 크기 조정 시점부터 99번째 백분위수에서 5초 이내에 구성된 처리량을 제공해야 합니다.</li>
   <li><strong>고객이 응답성이 뛰어난 중요 업무용 애플리케이션을 빌드할 수 있습니다.</strong> 시스템은 99번째 백분위수에서 예측 가능하고 보장된 엔드투엔드 낮은 읽기 및 쓰기 대기 시간을 제공해야 합니다.</li>
   <li><strong>시스템이 항상 켜지는지 &ldquo;확인합니다&rdquo;.</strong> 시스템은 데이터베이스와 연결된 지역 수에 관계없이 99.99%의 가용성을 제공해야 합니다. 고객이 애플리케이션의 엔드 투 엔드 가용성 속성을 테스트할 수 있도록 하려면(안정적인 상태) 서비스는 고객이 지역 오류를 시뮬레이트하거나 데이터베이스와 연결된 지역을 오프라인으로 표시할 수 있도록 허용해야 합니다. 이렇게 하면 애플리케이션의 엔드 투 엔드 가용성 속성의 유효성을 검사할 수 있습니다.</li>
   <li><strong>개발자가 올바른 전역 분산 애플리케이션을 작성할 수 있도록 합니다.</strong> 시스템은 데이터 일관성을 중심으로 직관적이고 예측 가능한 프로그래밍 모델을 제공해야 합니다. 강력한 일관성은 가격과 함께 제공되지만 결국 일관된&rdquo; 데이터베이스에 대해 &ldquo;대규모 전역 분산 애플리케이션을 작성하면 추론하기 어렵고, 부서지기 쉽고, 정확성 버그가 난무하는 애플리케이션 코드가 생성됩니다.</li>
   <li>위의 1, 2, 3 및 4에 대해 <strong>엄격한 재정적 지원 포괄적인 SLA를 제공합니다</strong>.</li>
   <li><strong>데이터베이스 스키마/인덱스 관리 및 버전 관리의 부담을 덜어줍니다.</strong> 데이터베이스 스키마 및 인덱스를 애플리케이션&rsquo; 스키마와 동기화된 상태로 유지하는 것은 전역적으로 분산된 애플리케이션에서 특히 고통스럽습니다.</li>
   <li><strong>기본적으로 데이터에 액세스하기 위한 여러 데이터 모델 및 인기 있는 API를 지원합니다.</strong> 외부에 노출된 API와 내부 데이터 표현 간의 변환은 효율적이어야 했습니다.</li>
   <li><strong>매우 저렴한 비용으로 운영</strong> 하여 고객에게 절감액을 전달합니다.</li>
  </ol>


  <h2>Azure Cosmos DB&rsquo; 디자인의 중요한 측면</h2>


  <p>개별적으로뿐만 아니라 집합적으로, 위의 목표는 새로운 솔루션과 복잡한 엔지니어링 절충의 신중한 탐색을 필요로했다. Azure Cosmos DB&rsquo; 디자인의 고유성은 이러한 제약 조건과 엔지니어링 장단&rsquo;을 탐색하기 위해 취한 특정 접근 방식에 있습니다.</p>


  <p>다음은 Azure Cosmos DB&rsquo; 시스템 디자인의 중요한 측면입니다. 향후 게시물에서 자세히 설명하겠습니다.</p>


  <ol>
   <li>Azure Cosmos DB&rsquo;는 서로 다른 성능 SLA를 사용하여 여러 서비스 계층을 지원하도록 데이터베이스 엔진 및 기본 스토리지의 근접성을 동적으로 구성하도록 디자인합니다. 서비스 계층에 따라 시스템은 (a) 동일한 프로세스 공간 내에 공동 배치되도록 계산 및 스토리지를 지원하도록 구성할 수 있으며, (b) 동일한 클러스터 내의 컴퓨터에서 집계되거나 (c) 동일한 지역 내의 다른 클러스터/데이터 센터에 걸쳐 세분화될 수 있습니다.</li>
   <li>처리량, 대기 시간, 일관성 및 가용성을 위한 포괄적인 SLA의 Azure Cosmos DB&rsquo; 구현 이러한 SLA는 전역적으로 분산된 설정에서 대기 시간, 일관성, 가용성 및 처리량 간의 절충을 명확하게 지정합니다.</li>
   <li>Azure Cosmos DB&rsquo;는 다른 유형의 데이터베이스 작업 집합에서 처리량을 프로비전하는 일관된 프로그래밍 모델을 제공하는 시스템의 핵심에 리소스 거버넌스의 고유한 디자인을 제공합니다.</li>
   <li>Azure Cosmos DB&rsquo;는 고도로 모듈화되고 완전히 리소스 관리되는 접근 방식을 통해 지역 간 복제 및 투명한 파티션 관리를 비롯한 다양한 조정 문제를 해결합니다.</li>
   <li>Azure Cosmos DB&rsquo;는 SLA를 유지하면서 여러 지역에서 처리량을 탄력적으로 확장하도록 디자인합니다. 이 시스템은 지역 간에 처리량을 조정하도록 설계되었으며 처리량 변경이 즉시 수행되도록 합니다.</li>
   <li>Azure Cosmos DB&rsquo; 디자인 및 구현은 <a href="https://lamport.azurewebsites.net/tla/tla.html" target="_blank">TLA+</a>를 사용하여 느긋하면서도 잘 정의된 일관성 모델 집합을 정확하게 지정합니다. 이를 통해 실제 시나리오에 대한 실제 일관성 모델을 사용할 수 있습니다. 는 입증 가능한 일관성 보장을 제공합니다. 는 다중 테넌트 및 전역적으로 분산된 설정에서 상업적으로 실행 가능합니다. 개발자가 올바른 분산 애플리케이션을 작성할 수 있는 직관적인 프로그래밍 모델을 제공합니다. 우리가 아는 한, Azure Cosmos DB는 <em><a href="https://www.microsoft.com/en-us/research/publication/replicated-data-consistency-explained-through-baseball/" target="_blank">제한된 부실, 세션 및 일관된 접두사</a></em> 일관성 모델을 운영하여 명확한 의미 체계, 성능/가용성 장단점 및 SLA로 지원되는 개발자에게 공개한 유일한 전역 분산 데이터베이스 시스템입니다.</li>
   <li>Azure Cosmos DB&rsquo;는 지속적인 양의 업데이트를 수집할 수 있는 쓰기 최적화, 리소스 관리 및 <a href="https://www.vldb.org/pvldb/vol8/p1668-shukla.pdf" target="_blank">스키마에 구애받지 않는 데이터베이스 엔진</a>(참고: 논문이 게시된 이후 크게 발전함)을 제공합니다. 이 엔진은 수집되는 모든 항목을 자동으로 인덱싱하고 동기적으로 인덱스를 인덱싱하며 클라이언트 업데이트를 승인&rsquo;하기 전에 대기 시간 보장을 낮게 유지하면서 가용성이 높습니다.</li>
   <li>Azure Cosmos DB&rsquo;는 핵심 데이터 모델 및 형식 시스템뿐만 아니라 여러 데이터 모델 및 API 및 프로그래밍 언어 유형 시스템을 핵심 데이터 모델에 효율적으로 추가, 번역 및 프로젝션할 수 있는 확장 가능한 데이터베이스 엔진 설계를 위한 설계입니다.</li>
  </ol>


  <h2>다중 모델, 다중 API 데이터베이스 서비스</h2>


  <p><img alt="CosmosTech_2" border="0" height="384" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/eef36a17-82a7-4c7f-ac32-e0ab0c519f91.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_2" width="640"></p>


  <p><em>그림 1. 다중 모델, 다중 API 전역 분산 데이터베이스 플랫폼으로 Azure Cosmos DB</em></p>


  <p>그림 1에 설명된 것처럼 Azure Cosmos DB는 기본적으로 여러 데이터 모델을 지원합니다. Azure Cosmos DB&rsquo; 데이터베이스 엔진의 핵심 형식 시스템은 ARS(atom-record-sequence)를 기반으로 합니다. 원자는 문자열, 부울, 숫자 등과 같은 작은 기본 형식 집합으로 구성되며, 레코드는 구조체이고 시퀀스는 원자, 레코드 또는 시퀀스로 구성된 배열입니다. Azure Cosmos DB의 데이터베이스 엔진은 데이터 모델을 ARS 기반 데이터 모델로 효율적으로 변환하고 프로젝팅할 수 있습니다. Azure Cosmos DB의 핵심 데이터 모델은 기본적으로 동적 형식의 프로그래밍 언어에서 액세스할 수 있으며 JSON 또는 기타 유사한 표현을 사용하여 있는 그대로 노출될 수 있습니다. 또한 이 설계를 통해 데이터 액세스 및 쿼리를 위해 인기 있는 데이터베이스 API를 기본적으로 지원할 수 있습니다. Azure Cosmos DB&rsquo; 데이터베이스 엔진은 현재 <a href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-sql-query" target="_blank">DocumentDB SQL</a>, MongoDB, <a href="https://aka.ms/premiumtables">Azure Table Storage</a> 및 <a href="https://aka.ms/gremlin" target="_blank">Gremlin</a> 그래프 쿼리 API를 지원합니다. 다른 인기 있는 데이터베이스 API도 지원하도록 확장하려고 합니다. 주요 이점은 개발자가 인기 있는 OSS API를 사용하여 애플리케이션을 계속 빌드할 수 있지만, 전 세계적으로 배포된 전투 테스트 및 완전 관리형 데이터베이스 시스템의 모든 이점을 얻을 수 있다는 것입니다.</p>


  <h2>리소스 모델 및 API 프로젝션</h2>


  <p>개발자는 Azure 구독을 사용하여 <em>데이터베이스 계정을</em> 프로비전하여 Azure Cosmos DB 사용을 시작할 수 있습니다. 데이터베이스 계정은 하나 이상의 <em>데이터베이스를 관리합니다</em>. Azure Cosmos DB 데이터베이스는 <em>사용자, 권한</em> 및 컨테이너를 차례로 관리<em>합니다</em>. Azure Cosmos DB <em>컨테이너</em>는 임의의 사용자 생성 엔터티 및 <em>저장 프로시저, 트리거</em> 및 UDF(<em>사용자 정의 함수</em>)의 스키마에 구애받지 않은 컨테이너입니다. 고객&rsquo; 데이터베이스 계정 &ndash; 데이터베이스, 사용자, 사용 권한, 컨테이너 등의 엔터티를 그림 2에 설명된 대로 <em>리소스</em> 라고 합니다.</p>


  <p><img alt="CosmosTech_3" border="0" height="358" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8d036cf9-df49-45d3-b540-00f18c4f5c31.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_3" width="640"></p>


  <p><em>그림 2. 리소스 모델 및 API 프로젝션</em></p>


  <p>각 리소스는 안정적이고 논리적인 URI로 고유하게 식별되며 JSON 문서로 표시됩니다. Azure Cosmos DB를 사용하는 애플리케이션의 전체 <em>리소스 모델은</em> 데이터베이스 계정 아래에 루팅된 리소스의 계층적 오버레이이며 하이퍼링크를 사용하여 탐색할 수 있습니다. 임의의 사용자 정의 콘텐츠를 나타내는 데 사용되는 <em>항목</em> 리소스를 제외하고 다른 모든 리소스에는 시스템 정의 스키마가 있습니다. 항목 리소스의 콘텐츠 모델은 앞에서 설명한 ARS(atom-record-sequence)를 기반으로 합니다. 컨테이너 및 항목 리소스는 표 1에 표시된 대로 특정 형식의 API 인터페이스에 대해 수정된 리소스 유형으로 추가로 <em>프로젝션</em> 됩니다. 예를 들어 문서 지향 API를 사용하는 동안 컨테이너 및 항목 리소스는 각각 <em>컬렉션</em> (컨테이너) 및 <em>문서 </em>(항목) 리소스로 프로젝션됩니다. 마찬가지로 그래프 지향 API 액세스의 경우 기본 컨테이너 및 항목 리소스는 각각 <em>그래프</em> (컨테이너), <em>노드</em> (항목) 및 <em>에지</em> (항목) 리소스로 프로젝션됩니다. 키-값 API를 사용하여 액세스하는 동안 <em>테이블</em> (컨테이너) 및 <em>항목/행</em> (항목)이 프로젝션됩니다.</p>


  <table border="1" cellpadding="0" cellspacing="0" width="851">
   <tbody>
    <tr>
     <td valign="top" width="245">
     <p><b>API </b></p>
     </td>
     <td valign="top" width="314">
     <p><b>컨테이너는 다음으로 프로젝스됩니다. &hellip;</b></p>
     </td>
     <td valign="top" width="290">
     <p><b>항목은 다음으로 프로젝스됩니다. &hellip;</b></p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>DocumentDB SQL</p>
     </td>
     <td width="314">
     <p>컬렉션</p>
     </td>
     <td width="290">
     <p>문서</p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>MongoDB</p>
     </td>
     <td width="314">
     <p>컬렉션</p>
     </td>
     <td width="290">
     <p>문서</p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>Azure Table Storage</p>
     </td>
     <td width="314">
     <p>테이블</p>
     </td>
     <td width="290">
     <p>항목</p>
     </td>
    </tr>
    <tr>
     <td width="245">
     <p>Gremlin</p>
     </td>
     <td width="314">
     <p>그래프</p>
     </td>
     <td width="290">
     <p>노드 및 에지</p>
     </td>
    </tr>
   </tbody>
  </table>


  <p><em>표 1. 특정 API의 데이터 모델을 기반으로 하는 컨테이너 및 항목의 프로젝션입니다.</em></p>


  <h2>수평 분할</h2>


  <p>Azure Cosmos DB <em>컨테이너</em> 내의 모든 데이터(예: 컬렉션, 테이블, 그래프 등)는 그림 3에 설명된 대로 <em>리소스 파티션</em>에 의해 수평적으로 분할되고 투명하게 관리됩니다. <em>리소스 파티션</em>은 고객이 지정한 <em>파티션 키</em>로 분할된 데이터의 일관되고 고가용성 컨테이너입니다. 관리되는 리소스 집합에 대한 단일 시스템 이미지를 제공하며 확장성 및 배포의 기본 단위입니다. Azure Cosmos DB는 고객이 여러 지리적 지역의 애플리케이션 트래픽 패턴에 따라 처리량을 탄력적으로 확장하여 지리와 시간에 따라 변동하는 워크로드를 지원하도록 설계되었습니다. 시스템은 Azure Cosmos DB 컨테이너의 가용성, 일관성, 대기 시간 또는 처리량을 손상시키지 않고 파티션을 투명하게 관리합니다.</p>


  <p><img alt="CosmosTech_4" border="0" height="325" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a54b2a12-ea58-4313-ac06-ffe2f32c1846.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_4" width="640"></p>


  <p><em>그림 3. 수평 분할을 사용하는 탄력적 확장성</em></p>


  <p>고객은 Azure Cosmos DB 컨테이너에서 1초 또는 1분 단위로 처리량을 프로그래밍 방식으로 프로비전하여 컨테이너의 처리량을 탄력적으로 확장할 수 있습니다. 내부적으로 시스템은 리소스 파티션을 투명하게 관리하여 지정된 컨테이너에서 처리량을 제공합니다. 리소스의 수평 분할을 사용하여 처리량을 탄력적으로 확장하려면 각 리소스 파티션이 시스템 리소스의 지정된 예산에 대한 전체 처리량의 일부를 제공할 수 있어야 합니다. Azure Cosmos DB 컨테이너는 전역적으로 분산되므로 Azure Cosmos DB는 컨테이너가 값이 변경된 후 몇 초 이내에 분산되는 모든 지역에서 컨테이너의 처리량을 사용할 수 있도록 합니다. 고객은 둘 다에서 Azure Cosmos DB 컨테이너에서 처리량(요청 단위 또는 <em>RU</em>라는 <em>통화 단위</em>를 사용하여 측정)을 프로비전할 수 있습니다.</p>


  <h2>Ground-Up 전역 배포</h2>


  <p>그림 5에 설명된 것처럼 고객&rsquo; 리소스는 지정된 지역 내에서 리소스 파티션(<em>로컬 배포</em>)을 사용하여 수평으로 분할되는 두 가지 차원을 따라 배포됩니다. 각 리소스 파티션은 지리적 지역(<em>전역 배포</em>)에도 복제됩니다.</p>


  <p><img alt="CosmosTech_6" border="0" height="480" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/de264425-2571-4338-8411-c0ec1f9e7f91.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_6" width="565"></p>


  <p><em>그림 5. 컨테이너는 로컬 및 전역으로 모두 배포할 수 있습니다.</em></p>


  <p>고객이 처리량 또는 스토리지를 탄력적으로 확장하는 경우 Azure Cosmos DB는 모든 지역에서 파티션 관리 작업을 투명하게 수행합니다. 규모, 배포 또는 실패와 관계없이 Azure Cosmos DB는 전역적으로 분산된 리소스의 단일 시스템 이미지를 계속 제공합니다. Azure Cosmos DB에서 리소스의 전역 배포는 턴키입니다. 언제든지 몇 번의 단추 클릭(또는 단일 API 호출을 사용하여 프로그래밍 방식으로)을 통해 고객은 <u>원하는</u> 수의 지리적 지역을 데이터베이스 계정과 연결할 수 있습니다. 데이터 양이나 지역 수에 관계없이 Azure Cosmos DB는 새로 연결된 각 지역이 99번째 백분위수에서 1시간 안에 클라이언트 요청 처리를 시작하도록 보장합니다. 모든 원본 리소스 파티션의 데이터를 새로 연결된 지역에 병렬로 시드 및 복사하여 이루어집니다. 고객은 기존 지역을 제거하거나 이전에 데이터베이스 계정 &ldquo;과 연결된 지역을 오프라인&rdquo;으로 전환할 수도 있습니다.</p>


  <h2>투명한 멀티 호밍 및 99.99% 고가용성</h2>


  <p>고객은 데이터베이스 계정과 연결된 지역에 우선 순위를&rdquo; 동적으로 연결할 &ldquo;수도 있습니다. 우선 순위는 국지적 장애가 발생할 경우 특정 지역으로 요청을 전달하는 데 사용됩니다. 지역 재해가 발생할 가능성이 거의 없는 경우 Azure Cosmos DB는 우선 순위에 따라 자동으로 장애 조치(failover)됩니다. 애플리케이션의 엔드 투 엔드 가용성을 테스트하기 위해 고객은 장애 조치(failover)를 수동으로 트리거할 수 있습니다(속도는 1시간 이내에 두 개의 작업으로 제한됨). Azure Cosmos DB는 고객이 트리거한 지역 장애 조치(failover)의 경우 데이터 손실을 방지하고 지역 재해 시 시스템 트리거 자동 장애 조치(failover)가 발생할 경우 데이터 손실에 대한 상한을 보장합니다. 지역 장애 조치 시 애플리케이션을 다시 배포할 필요가 없으며 가용성 SLA가 유지 관리됩니다. 이를 위해 Azure Cosmos DB를 사용하면 개발자가 논리(지역 중립적) 또는 물리적(지역별) 엔드포인트를 사용하여 리소스와 상호 작용할 수 있습니다. 전자는 장애 조치(failover) 시 애플리케이션을 투명하게 다중 홈으로 만들 수 있도록 합니다. 후자는 읽기 및 쓰기를 특정 지역에 리디렉션하기 위해 애플리케이션에 세분화된 제어를 제공합니다. Azure Cosmos DB는 모든 데이터베이스 계정에 대해 99.99%의 가용성 SLA를 보장합니다. 가용성 보장은 크기 조정(고객&rsquo; 데이터베이스와 연결된 처리량 및 스토리지), 지역 수 또는 지정된 데이터베이스와 연결된 지역 간의 지리적 거리와 무관합니다.</p>


  <h2>99번째 백분위수의 짧은 대기 시간 보장</h2>


  <p>SLA의 일부로 Azure Cosmos DB는 고객에게 99번째 백분위수의 종단 간 짧은 대기 시간을 보장합니다. 일반적인 1KB 항목의 경우 Azure Cosmos DB는 동일한 Azure 지역 내의 99번째 백분위수에서 10ms 미만의 읽기 및 15ms 미만의 인덱싱된 쓰기의 종단 간 대기 시간을 보장합니다. 평균 대기 시간은 상당히 낮습니다(5ms 미만).&nbsp; 모든 데이터베이스 트랜잭션에 대한 요청 처리의 상한을 사용하여 Azure Cosmos DB를 사용하면 클라이언트가 대기 시간이 긴 트랜잭션과 사용할 수 없는 데이터베이스를 명확하게 구분할 수 있습니다.</p>


  <h2>SLA에서 지원되는 여러 Well-Defined 일관성 모델</h2>


  <p>현재 사용 가능한 상업용 분산 데이터베이스는 (1) 잘 정의되고 입증 가능한 일관성 선택을 제공하지 않는 데이터베이스 또는 (2) 강력한 일관성과 최종 일관성이라는 두 가지 극단적인 일관성 선택을 제공하는 데이터베이스의 두 가지 범주로 나눠집니다. 이전 시스템은 애플리케이션 개발자에게 복제 프로토콜의 축소성을 부담하며 일관성, 가용성, 대기 시간 및 처리량 간에 어려운 절충을 할 것으로 예상합니다. 후자의 시스템은 애플리케이션 개발자가 두 가지 극단 중에서 선택하도록 압력을 가합니다. 수많은 일관성 모델에 대한 다양한 연구와 제안에도 불구하고 상업용 분산 데이터베이스 서비스는 강력하고 최종적인 일관성을 넘어서는 일관성 수준을 운영할 수 없었습니다. Azure Cosmos DB를 사용하면 개발자가 일관성 스펙트럼을 따라 잘 정의된 5가지 일관성 모델 중에서 선택할 수 있습니다(그림 6) &ndash; <em>강력하고 제한된 부실, 세션, 일관된 접두사</em> 및 <em>최종</em> 모델.</p>


  <p><img alt="CosmosTech_7" border="0" height="135" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5fea81d6-d887-4448-8408-786fdd87a7fd.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_7" width="640"></p>


  <p><em>그림 6. 스펙트럼을 따라 잘 정의된 여러 일관성 선택</em></p>


  <p>Azure Cosmos DB를 사용하는 개발자는 데이터베이스 계정에서 기본 일관성 수준을 구성할 수 있습니다(나중에 특정 읽기 요청에 대한 일관성을 재정의). 내부적으로 기본 일관성 수준은 지역 범위일 수 있는 파티션 집합 내의 데이터에 적용됩니다. 고객의 약 73%가 세션 일관성을 사용하고 20%는 제한된 부실을 선호합니다. 고객의 약 3%가 애플리케이션에 대한 특정 일관성 선택에 정착하기 전에 처음에 다양한 일관성 수준으로 실험하는 것을 관찰합니다. 또한 평균적으로 고객의 2%만이 요청별로 일관성 수준을 재정의합니다. 일관성 SLA에 대한 위반 사항을 고객에게 보고하기 위해 서비스 원격 분석을 통해 지속적으로 작동하는 선형성 검사기를 사용합니다. 제한된 부실의 경우 k 및 t 경계 위반을 모니터링하고 보고합니다. 다른 메트릭 중 4가지 완화된 일관성 수준에 대해서도 <a href="https://pbs.cs.berkeley.edu/" target="_blank">PBS(확률적 제한된 부실)</a> 메트릭을 추적하고 보고합니다.</p>


  <h2>완전 리소스 관리 스택</h2>


  <p>Azure Cosmos DB는 고객이 여러 지역의 애플리케이션 트래픽 패턴에 따라 처리량을 탄력적으로 확장하여 지리와 시간에 따라 변화하는 워크로드를 지원할 수 있도록 설계되었습니다. 전 세계적으로 수십만 개의 분산 및 다양한 워크로드를 비용 효율적으로 운영하려면 수백 명의 고객이 동일한 컴퓨터를 공유하고 수천 명이 동일한 클러스터를 공유하는 <em>세분화된 다중 테넌시가</em> 필요합니다. 비용 효율적으로&rsquo; 운영하면서 각 고객에게 성능 격리를 제공하기 위해 리소스 거버넌스를 염두에 두고 처음부터 전체 시스템을 엔지니어링했습니다. 리소스 관리 시스템인 Azure Cosmos DB는 시스템 리소스의 할당된 예산 내에서 작동하는 동안 예측 가능한 처리량을 제공하기 위해 각 단계의 구성 요소를 신중하게 보정한 대규모 분산 큐 시스템입니다. 지정된 클러스터 내에서 사용할 수 있는 시스템 리소스(CPU, 메모리, 디스크 및 네트워크)를 최적으로 활용하기 위해 클러스터의 모든 컴퓨터는 10대부터 100대까지의 고객을 <em>동적으로</em> 호스팅할 수 있습니다. 속도 제한 및 역 압력은 승인 제어에서 모든 I/O 경로까지 전체 스택에 걸쳐 연결됩니다. 데이터베이스 엔진은 세분화된 동시성을 활용하고, 적은 양의 시스템 리소스 내에서 운영하는 동시에 높은 처리량을 제공하도록 설계되었습니다.</p>


  <p>시간 단위(즉, 처리량) 내에서 실행된 데이터베이스 작업의 수는 시스템 리소스의 예약 및 사용의 기본 단위입니다. 고객은 데이터에 대해 광범위한 데이터베이스 작업을 수행할 수 있습니다. 작업 유형 및 크기(요청 및 응답) 페이로드에 따라 작업에서 다양한 양의 시스템 리소스를 사용할 수 있습니다. 요청에 의해 사용되는 리소스를 고려하기 위한 정규화된 모델을 제공하기 위해 지정된 리소스 파티션이 제공해야 하는 처리량에 해당하는 예산 시스템 리소스는 지속적으로 다양한 데이터베이스 작업에서 처리량에 대해 고객에게 요금을 부과하고 하드웨어에 관계없이 <em>요청 단위</em> 또는 <em>RU</em>(복수, 복수, 처리량)라는 처리량에 대한 추상 속도 기반 통화를 정의했습니다.  <em>RU</em>는 시간 세분성에 따라 두 개의 교단에서 사용할 수 있는 RU(RU<em>/s</em>) <em>및 분</em><em>당 요청 단위</em>(<em>RU/m</em>)를 참조하세요. 고객은 컨테이너에서 RU/s(및/또는 RU/m)를 프로그래밍 방식으로 프로비전하여 컨테이너의 처리량을 탄력적으로 확장할 수 있습니다. 내부적으로 시스템은 리소스 파티션을 관리하여 지정된 컨테이너에서 처리량을 제공합니다. 리소스의 수평 분할을 사용하여 처리량을 탄력적으로 확장하려면 각 리소스 파티션이 시스템 리소스의 지정된 예산에 대한 전체 처리량의 일부를 제공할 수 있어야 합니다.</p>


  <p><img alt="CosmosTech_8" border="0" height="250" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d39dc970-f2b2-463c-9d1f-0033153249f6.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="CosmosTech_8" width="640"></p>


  <p><em>그림 7. RU/s(및 RU/m)는 다양한 데이터베이스 작업에 대한 정규화된 처리량 통화입니다.</em></p>


  <p>허용 제어의 일부로 각 리소스 파티션은 적응 속도 제한을 사용합니다. 리소스 파티션이 보정된 것보다 1초 이내에 더 많은 요청을 수신 &ldquo;하는 경우 클라이언트는 다시 시도할 수 있는 백오프 간격으로 요청 속도가 너무 큽&rdquo; 니다. 각 초 내에 리소스 파티션은 RU의 예비 용량(있는 경우)에서 백그라운드 집안일(예: 로그 구조화된 데이터베이스 엔진의 백그라운드 GC, 정기적인 스냅샷 백업 수행, 만료된 항목 삭제 등)을 수행합니다.&nbsp; 요청이 인정되면 각 마이크로 작업(예: 항목 분석, 페이지 읽기/쓰기 또는 쿼리 연산자 실행)에서 사용되는 RU를 고려합니다.</p>


  <h2>결론</h2>


  <p>글로벌 배포, 탄력적 수평 확장성 및 다중 모델 및 스키마에 구애받지 않는 데이터베이스 엔진은 모두 Azure Cosmos DB&rsquo; 디자인의 핵심입니다. 클라우드에서 태어난 다중 테넌트 데이터베이스 시스템인 Azure Cosmos DB&rsquo;는 전체 스택에서 리소스 거버넌스를 인터리브합니다. 이 시스템은 데이터의 글로벌 배포, 잘 정의된 여러 일관성 수준, 지리적 지역에 걸쳐 처리량을 탄력적으로 스케일링하는 기능 및 모든 고객에게 처리량, 일관성, 대기 시간 및 가용성을 포괄하는 포괄적인 SLA를 제공하도록 처음부터 설계되었습니다.</p>


  <h2>감사의 말</h2>


  <p>Azure Cosmos DB는 2010년 말 Project 피렌체&rdquo;로 &ldquo;시작했으며, 결국 Azure DocumentDB로 성장한 후 현재 형태로 확장되고 꽃을 피웠습니다. 데이브 캠벨, 마크 루시노비치, 스콧 거스리, 고팔 카키바야의 지원에 매우 감사드립니다. 수년 동안 서비스를 광범위하게 사용하여 Azure Cosmos DB를 견고하게 만든 Microsoft 내의 모든 팀에 감사드립니다. 우리는 Azure Cosmos DB가 구축된 많은 구성 요소 기술이 거인 &ndash; 의 어깨에 서 있습니다. 뛰어난 분산 시스템 인프라, 지원 및 파트너십을 제공하는 <a href="https://azure.microsoft.com/en-us/services/service-fabric/" target="_blank">Service Fabric</a> 팀 덕분에 특별합니다. 레슬리 램포트 박사님께 깊은 영감을 주고 분산 시스템 설계에 대한 접근 방식에 영향을 주신 것에 감사드립니다. 마지막으로, Azure Cosmos DB 엔지니어의 심층적인 헌신과 관심에 감사드립니다.</p>
