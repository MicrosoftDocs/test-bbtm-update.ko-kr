### YamlMime:Yaml
ms.openlocfilehash: 95bab04d540323836129ce4fb68e7a1fb42ca7a8
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903304"
Slug: enabling-command-line-or-continuous-delivery-of-azure-webjobs
Title: Azure WebJobs의 명령줄 또는 연속 배달 사용
Summary: 명령줄 및 연속 통합 스토리에서 WebJobs 게시 스토리를 개선하고 이러한 간격을 채우는 업데이트를 할 수 있는 몇 가지 영역을 찾았습니다. 이 게시물에는 이 업데이트, 공식 Visual Studio 업데이트 직후에 릴리스하는 방법, Azure WebJob의 지속적인 통합 또는 명령줄 게시를 통해 이점을 얻을 수 있는 방법이 요약되어 있습니다.
Content: >-
  <a href="https://azure.microsoft.com/blog/2014/08/04/announcing-release-of-visual-studio-2013-update-3-and-azure-sdk-2-4/" target="_blank">Visual Studio 2013 업데이트 3</a>에서 릴리스된 WebJobs 게시 도구를 디자인할 때 WebJobs 도구에 대한 업데이트를 신속하게 릴리스할 수 있도록 Azure API 및 관리 라이브러리의 향상된 기능을 수용할 수 있다는 생각으로 빌드했습니다. 개발자는 연속 통합 빌드에서 이미 익숙한 게시 기능을 사용하고 싶어하며, WebJobs를 게시하는 새로운 도구는 기존 도구 및 게시 자동화 시나리오의 격차를 메울 수 있다는 것을 알고 있습니다. 명령줄 및 연속 통합 스토리에서 WebJobs 게시 스토리를 개선하고 이러한 간격을 채우는 업데이트를 할 수 있는 몇 가지 영역을 찾았습니다. 이 게시물에는 이 업데이트, 공식 Visual Studio 업데이트 직후에 릴리스하는 방법, Azure WebJob의 지속적인 통합 또는 명령줄 게시를 통해 이점을 얻을 수 있는 방법이 요약되어 있습니다.

  <h2>NuGet 사용하여 Agile 도구 업데이트 사용</h2>

  최대한의 유연성을 제공하기 위해 WebJobs 게시 논리를 실제로 수행하는 대부분의 코드가 포함된 <a href="https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish" target="_blank">WebJobs 게시 NuGet 패키지를</a> 게시했습니다. 아래 다이어그램에서는 WebJobs 도구에서 게시 체인의 개략적인 아키텍처를 보여 줍니다.


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="publish-stack" alt="publish-stack" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/publish-stack_thumb.png" width="499" height="256" border="0" />


  Scheduler 작업 컬렉션 및 웹 사이트와 같은 Azure 리소스를 설정하는 데 필요한 API 호출을 캡슐화하고 API를 효과적으로 사용하여 해당 구성 요소를 NuGet 패키지에 함께 붙이면 더 광범위한 Visual Studio 업데이트 없이 API 개선, 핫픽스 및 리팩터링과 같은 상황이 발생할 수 있습니다. 위의 차트에서는 개발자가 NuGet 통해 업데이트를 기본 도구 워크플로로 배송하기로 결정한 경우의 이점을 보여 줍니다. Visual Studio 및 명령줄 프로세스 모두 NuGet 업데이트의 이점을 누릴 수 있습니다. NuGet 통해 이러한 향상된 기능을 사용할 수 있으므로 명령줄에서 WebJobs를 게시하는 절대적인 첫 번째 단계는 WebJobs 게시 NuGet 1.0.1 버전으로 업데이트하는 것입니다. 아래 NuGet 업데이트 패키지 대화 상자 스크린샷은 이 작업이 Visual Studio 2013 내에서 수행되고 있음을 보여 줍니다. <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="nuget-for-updating" alt="nuget-for-updating" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nuget-for-updating_thumb.png" width="604" height="299" border="0" />

  <h2>명령줄 게시 기회</h2>

  이 문서에서는 <a href="https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/1.0.1" target="_blank">Microsoft WebJobs Publish 1.0.1 NuGet 패키지 릴리스</a>에서 사용할 수 있는 명령줄 개선 사항과 Azure WebJobs의 명령줄 또는 지속적인 업데이트를 사용하도록 설정하는 방법에 중점을 두고 있습니다. 우리는 이것이 대부분의 WebJob 소유자가 필요로 할 핵심 요구 사항이 될 것이라는 것을 알고 있었고 전체 Visual Studio 3 업데이트에서 그것을 얻으려고 노력했지만 우리가 만들고 싶었던 몇 가지 개선 사항이 있었습니다. 따라서 Azure WebJob 소유자가 반복 가능한 WebJob 게시 스토리를 설정할 수 있도록 가능한 한 많은 인증 시나리오를 테스트하고 사용하도록 설정하는 데 시간이 걸렸습니다.

  <h3>비 상호 작용 Azure 인증 사용</h3>

  위의 차트는 webJobs 도구가 <a href="https://www.nuget.org/packages?q=Microsoft.WindowsAzure.Management" target="_blank">Microsoft Azure 관리 라이브러리</a> 위에 빌드되는 방법을 보여줍니다. MAML은 Azure에 대한 두 가지 주요 인증 유형인 Active Directory 토큰 및 관리 인증서를 허용하기 때문에 WebJobs 도구에서 이러한 유형의 인증을 모두 사용할 수 있었습니다. Visual Studio Active Directory 토큰으로 전화를 걸 수 있는 몇 가지 유용한 방법이 있으므로 WebJobs를 수동으로 게시할 때 인증하는 기본 메커니즘입니다. 그러나 Visual Studio 내에서 게시할 수 있는 것과 명령줄에서 게시할 수 있는 것 사이의 주요 차이점은 아래 인증 창은 사용자가 Visual Studio 내에서 또는 다른 클라이언트에서 사람이 수동으로 인증할 때만 유용하다는 것입니다<em>.</em>


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="로그인" alt="login" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/login_thumb.png" width="434" height="439" border="0" />


  컴퓨터에서 실행하는 명령줄 실행 환경 또는 빌드 서버와 같은 서비스의 경우 로그인 대화 상자와 상호 작용하는 것이 적합하지 않습니다. 지속적인 통합 빌드 중에 고객에게 빌드 서버를 Azure에 인증할 수 있는 방법을 제공해야 했거나 WebJob 게시를 자동화할 수 없었습니다. 아이러니하게도 WebJob 게시 자동화 스토리를 사용하도록 설정하는 가장 좋은 솔루션은 바로 앞에 있었습니다. 우리는 우리 자신의 테스트 환경에서 몇 가지 트릭을 빌렸다. 자체 자동화 시나리오에서 직접 테스트한 방법보다 WebJobs 도구를 자동화하는 방법을 찾는 것이 더 좋습니다. 아이러니하게도, 우리는 정말 독립적 인 것으로 명령줄 이야기를 테스트하기 위해 세부 사항에 관심을 두지 않을 것 너무 많이 테스트했습니다, 그래서 Visual Studio 업데이트가 완료되면 우리는 완전히 테스트하고 명령줄 이야기를 개선에 관심을 이동.

  <h3></h3>

  <h3>관리 인증서를 사용하여 인증하도록 WebJobs 게시 프로세스 변경</h3>

  관리 인증서를 사용하기 위해 Active Directory 토큰을 사용하는 Azure API에 대해 인증하는 대안입니다. 자체 도구 테스트에서는 관리 인증서를 사용하여 빌드 서버를 인증했으므로 CI 환경 내에서 빌드되는 프로젝트로 인해 WebJobs가 Azure에 게시되고 관련 스케줄러 작업이 제대로 생성 및 연결되도록 MSBuild 프로세스에서 관리 인증서를 사용하는 고객의 기능을 조명하는 데 투자했습니다. WebJobs 게시 NuGet 버전 1.0.1에 설치한 후(위 참조) <strong>webjobs.props</strong>라는 파일을 게시하려는 웹 애플리케이션 Project 또는 콘솔 애플리케이션의 속성 폴더에 추가합니다.


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="webjobs-props" alt="webjobs-props" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/webjobs-props_thumb.png" width="600" height="376" border="0" />


  이 파일 내에는 관리 인증서를 사용하여 인증된 WebJobs 게시 프로세스를 구동하는 세 가지 옵션이 있습니다.

  <h3>새 Azure 게시 설정 파일 가져오기</h3>

  관리 인증서를 사용하여 Azure에 인증하는 가장 쉬운 방법은 Azure 게시 설정 파일에 저장된 정보를 사용하는 것입니다. 이 작업을 수행하는 가장 쉬운 방법은 Azure PowerShell Cmdlet을 설치한 다음 <strong>Get-AzurePublishSettingsFile</strong> 명령을 실행하는 것입니다. 그러면 Azure <a href="https://manage.windowsazure.com/publishsettings" target="_blank">게시 설정 다운로드 URL</a>로 안내됩니다.


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="get-publish-settings-file" alt="get-publish-settings-file" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/get-publish-settings-file_thumb.png" width="600" height="130" border="0" />

  <h3>Webjobs.props 파일 편집</h3>

  첫 번째 옵션은 관리 인증서의 Base64로 인코딩된 문자열 값을 수동으로 입력하는 것입니다. 관리 인증서의 인코딩된 형식은 *.publishsettings 파일에서 webjobs.props 파일로 직접 복사할 수 있습니다. 인증서 값 및 Azure 구독 ID가 있으면 관리 인증서를 사용하여 인증해야 하며 [만료되었거나 존재하지 않는] AAD 토큰을 사용하여 인증하는 기본 도구 경로를 시도하지 않아야 하며 WebJobs 게시 프로세스에 알릴 수 있습니다.


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="auth-option-1" alt="auth-option-1" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/auth-option-1_thumb.png" width="604" height="223" border="0" />


  WebJobs 게시 프로세스에 인증 정보를 제공하는 두 번째 옵션은 webjobs.props 파일에서 *.publishsettings 파일 자체를 사용하는 것입니다. 그러면 MSBuild Azure API 인증에 사용할 인증 정보에 대한 게시 설정 파일로 전달됩니다. <strong>참고: </strong>아래 스크린샷은 모든 옵션을 보여 줍니다. 작동하려면 둘 다 필요만 있으면 됩니다.


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="auth-option-2" alt="auth-option-2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/auth-option-2_thumb.png" width="604" height="264" border="0" />


  세 번째 옵션은 이전에 Azure에 업로드된 CER 파일과 쌍을 이루는 PFX 파일로 게시 프로세스를 안내하는 것입니다. 빌드 서버의 사용자가 사용할 수 있도록 PFX 파일을 설정하거나 webjobs.props 파일에 인증서의 암호를 직접 입력할 수 있습니다.


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="auth-option-3" alt="auth-option-3" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/auth-option-3_thumb.png" width="604" height="296" border="0" />


  webjobs.props 파일에 빌드를 인증하는 메서드가 하나 이상 있으면 명령줄에서 실행할 수 있습니다.

  <h3>명령줄에서 WebJobs 게시</h3>

  webjobs.props 파일이 환경을 반영하도록 구성되면 아래와 같은 명령줄 MSBuild 스크립트를 실행하여 애플리케이션을 빌드하고 WebJobs와 함께 배포할 수 있습니다. 게시 프로세스에 일정이 있는 WebJobs가 포함된 경우 WebJobs를 예약하기 위해 Azure Scheduler 작업도 만들어집니다. 아래 코드는 Visual Studio 2013 개발자 명령 프롬프트의 실행 중인 인스턴스에 복사하여 붙여넣어 빌드를 실행하고 게시하는 것입니다.

  <pre class="prettyprint">msbuild WebJobDemo.Web.csproj /p:DeployOnBuild=true /p:PublishProfile=WebJobDemo /p:VisualStudioVersion=12.0 /p:Password=asdfasdf</pre>

  빌드가 완료되면 MSBuild 출력 로그는 웹 게시가 완료되었으며 WebJob을 예약하기 위해 Scheduler 작업 컬렉션 및 작업이 생성되었음을 나타냅니다.


  <img style="padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px" title="build-process" alt="build-process" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/build-process_thumb.png" width="604" height="544" border="0" />


  화살표는 예약된 WebJob을 만드는 엔드투엔드 프로세스의 주요 단계 중 일부를 강조 표시합니다.

  <h2>요약 및 로드맵</h2>

  <a href="https://www.nuget.org/packages/Microsoft.Web.WebJobs.Publish/1.0.1" target="_blank">WebJobs Publishing NuGet 1.0.1</a> 업데이트는 지금 사용할 수 있으며, 명령줄 시나리오를 사용하도록 설정하는 데 필요한 유일한 기능이므로 지금 패키지를 업데이트하고 이점을 얻을 수 있습니다. Azure API가 발전하고 미들웨어 및 명령줄 환경이 Azure 관리 라이브러리와 같은 리소스를 계속 공유함에 따라 반복 가능한 자동화를 위한 더 많은 기회가 있을 것입니다. 인증되지 않은 AAD 인증을 제공하고 일부 새 리소스 관리 API를 지원하는 등 다른 기회를 조사하고 있습니다. 이러한 발전에 따라 <a href="https://azure.microsoft.com/blog" target="_blank">Azure</a> 및 <a href="https://blogs.msdn.com/b/webdev/" target="_blank">웹 개발 및 도구</a> 블로그에서 커뮤니티를 업데이트하므로 더 많은 개선 사항을 계속 지켜봐 주시기 바랍니다(아이디어 또는 피드백이 있는지 알려주세요).
