### YamlMime:Yaml
ms.openlocfilehash: ff179753c7c0db96c5b812b02d577dcc5ec151d7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899051"
Slug: building-serverless-microservices-in-azure-sample-architecture
Title: Azure에서 서버리스 마이크로 서비스 빌드 - 샘플 아키텍처
Summary: " 현재는 서버리스 마이크로 서비스를 빌드하는 것이 이벤트 기반 시나리오에 적합한 방법 및 이를 위해 Azure 서버리스 플랫폼을 사용하는 방법에 초점을 맞추고 있습니다."
Content: >-
  <p>분산 애플리케이션은 클라우드에서의 생활을 최대한 활용하여 전역적으로 실행하고, 병목 현상을 방지하며, 전 세계 사용자가 항상 사용할 수 있습니다. 이를 위해서는 올바른 인프라를 배포해야 할 뿐만 아니라 이러한 특성과 기존 모놀리식 접근 방식의 분리된 아키텍처를 지원해야 합니다. 대부분의 <a href="https://azure.com/cloudnative">클라우드 네이티브</a> 애플리케이션이 글로벌 규모에서 이를 달성하는 데 도움이 되는 마이크로 서비스 아키텍처를 사용하는 이유입니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31a72923-c587-4e9f-ad41-efe14442d6dd.png"><img alt="Microservices benefits slide including independent modules, isolated points of failure, autonomous scalability, tech flexibility, and faster value delivery." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0bfe4093-3217-4076-8864-ba6a3eb4642a.png" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none; width: 511px; height: 343px;" title="마이크로 서비스는 독립적인 모듈, 격리된 실패 지점, 자율 확장성, 기술 유연성 및 더 빠른 가치 제공을 포함한 슬라이드의 이점을 제공합니다."></a></p>


  <p><a href="https://azure.com/microservices">마이크로 서비스</a> 아키텍처 사용의 이점은 이러한 애플리케이션이 클라우드에 빌드될 때 최대화되며, 마이크로 서비스 약속을 보다 쉽게 구체화할 수 있는 다양한 관리형 서비스를 제공합니다. 인프라 및 크기 조정을 관리하고 배포 또는 해당 솔루션 모니터링과 같은 중요한 프로세스를 수행할 수 있는 방법을 개선하는 서비스를 사용하면 주기당 제공되는 값의 양을 최대화할 수 있습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/65351aa8-6c78-424f-ad64-e0f04c015483.png"><img alt="Services to build microservices in Azure like Service Fabric, Azure Kubernetes Service, Azure Functions, and API Management." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5f29deb2-e5df-43c0-9ebe-3b1ac752d112.png" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none; width: 517px; height: 235px;" title="Service Fabric, Azure Kubernetes Service, Azure Functions 및 API Management와 같은 Azure에서 마이크로 서비스를 빌드하는 서비스입니다."></a></p>


  <p>탐색할 수 있는 다양한 패턴이 있으며 각 패턴은 특정 시나리오에 적합합니다. &rsquo;현재는 <a href="https://aka.ms/serverless-microservices-webinar">서버리스 마이크로 서비스를 빌드</a>하는 것이 이벤트 기반 시나리오에 적합한 방법 및 Azure 서버리스 플랫폼을 사용하는 방법에 중점을 두고 있습니다.</p>


  <h2>서버리스 이벤트 기반 마이크로 서비스 빌드</h2>


  <p>시나리오 및 문제를 해결할 때 마이크로 서비스 기반 애플리케이션을 빌드하는 이벤트 기반 접근 방식을 사용하면 보다 전통적인 접근 방식의 몇 가지 문제를 완화하는 데 도움이 될 수 있습니다.</p>


  <ul>
   <li><b>컴퓨팅 리소스 크기 조정</b>: 서버리스 플랫폼에서 제공하는 실제 수요&rsquo;에 따라 자동화되고 유연한 크기 조정을 사용하면 크기 조정이 발생하는 방식이나 애플리케이션 코드에서 이를 처리하는 방법에 대해 걱정할 필요가 없습니다&rsquo;.</li>
   <li><b>작업 종속성:</b> 마이크로 서비스 기반 솔루션을 배포하는 경우 일반적으로 배포 및 실행을 위해 인프라 리소스를 할당하기 위한 운영 팀에 대한 강력한 종속성이 있습니다( 초기 및 각 증분 변경 모두). 완전 관리형 서비스를 사용하여 서버리스 접근 방식을 사용하면 모든 기본 인프라가 플랫폼에서 관리되므로 이러한 필요성이 제거됩니다.</li>
   <li><b>호스팅 비용:</b> 기존 배포의 경우 비용은 각 호스팅 노드에 대해 지불해야 하는 금액을 결정하며, 일반적으로 리소스의 초과 할당을 의미하므로 호스팅 비용이 증가합니다. 이벤트 기반 접근 방식을 사용하면 소비 기반 가격 책정 모델에서 서비스를 사용하면 가격이 요청 또는 작업 수에 따라 결정되며 호스팅 비용은 솔루션의 실제 사용량에 맞게 더 잘 조정되며 일반적으로 더 낮습니다.</li>
   <li><b>서비스 검색:</b> 서비스 통합, 통신 및 상호 작용을 관리하는 것은 분산 애플리케이션의 일반적인 문제입니다. 각 서비스는 단일 책임 원칙에 따라 매우 구체적인 작업을 수행하므로 서비스를 목표를 달성하기 위해 다른 서비스와 통신해야 하는 경우가 많습니다. 진짜 과제는 이러한 연결을 가능한&nbsp; 한 단순하게 유지하고 서비스를 완전히 분리하는 것입니다. 이벤트 기반 접근 방식을 사용하면 다음 두 가지 모두를 활용할 수 있습니다. <ul style="list-style-type: disc;">
    <li>Azure Event Grid로 완벽하게 관리되는 pub-sub 모델을 사용하여 이벤트를 통해 서비스를 전달하는 중앙 집중식 통합 방식입니다.</li>
    <li>이벤트 기반 컴퓨팅을 위해 Azure Functions 및 Logic Apps에서 제공하는 환경과 같이 다양한 서비스를 원활하게 연결하고 통합하기 위해 해당 이벤트 및 바인딩에 자동으로 응답하는 트리거를 기반으로 하는 통합 프로그래밍 모델입니다.</li>
   </ul>
   </li>
  </ul>


  <h2>서버리스 마이크로 서비스에 대한 샘플 아키텍처</h2>


  <p>Relecloud라는 가상 회사의 라이드쉐어 애플리케이션에 대한 <a href="https://aka.ms/serverless-microservices">샘플 아키텍처</a> 에서 마이크로 서비스 기반 애플리케이션의 아키텍처 디자인에 대해 자세히 알아볼 수 있습니다. 이 샘플은 Azure 서버리스 플랫폼의 완전 관리형 서비스를 사용하여 다음과 같은 마이크로 서비스 솔루션의 주요 구성 요소를 빌드합니다.</p>


  <ol>
   <li><b>API 게이트웨이:</b> API Management를 사용하여 백 엔드 서비스의 엔드포인트를 노출하므로 클라이언트 애플리케이션에서 안전하게 사용할 수 있습니다. 또한 클라이언트 애플리케이션에 영향을 주지 않고 서비스가 게이트웨이에서 실제로 호스트&nbsp;되는 위치에 대한 변경 내용을 쉽게&nbsp; 관리할 수 있으므로 백 엔드에서 클라이언트 쪽을 분리하는 데도 도움이 됩니다.</li>
   <li><b>진입점:</b> 클라이언트 애플리케이션에서 사용할 공용 API는 HTTP 요청에 응답하는 Azure Functions를 통해 구동됩니다.</li>
   <li><b>워크플로 오케스트레이터:</b> 중간 계층 서비스는 공용 API와 데이터 저장소 및 기타 중요한 구성 요소에 연결된 실제 백 엔드 서비스와 상호 연결하여 클라이언트 쪽의 작업을 기반으로 이러한 서비스의 작업을 오케스트레이션합니다.</li>
   <li><b>비동기 큐:</b> 서비스 상호 통신을 처리하고 Azure Event Grid로 표시되는 서로 다른 서비스 간에 정보와 데이터를 전달하는 메시징 서비스입니다. 또한 정보 교환은 이벤트 및 처리기를 푸시하는 서비스와 처리를 위해 해당 이벤트를 구독하는 처리기를 구독하는 서비스로, 이벤트 기반 접근 방식을&rsquo; 사용하여 서비스 분리를 선호합니다.</li>
   <li><b>백 엔드 서비스:</b> 데이터 계층 및 솔루션의 다른 구성 요소로 직접 작동하는 서비스는 나머지 부분과 격리되며 필요한 경우(예: 데이터 저장에 사용되는 데이터베이스 형식 변경) 애플리케이션의 나머지 부분과 상호 작용에 영향을 주지 않고 쉽게 교체할 수 있습니다.</li>
  </ol>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f1a4a610-e9e1-4a6a-a4da-5898b4ac7735.png"><img alt="Sample architecture overview." src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f8611c6d-73bc-4491-8730-aaeab54f16c8.png" style="border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none; width: 510px; height: 283px;" title="샘플 아키텍처 개요입니다."></a></p>


  <h2>다음 단계</h2>


  <p>- 완전 관리형 Azure 서비스를 사용하여 서버리스 아키텍처를 사용하여 마이크로 서비스 기반 애플리케이션을 개발하는 방법을 알아보려면 이 <a href="https://aka.ms/serverless-microservices-webinar">웨비나</a> 에 등록합니다.</p>


  <p>- Relecloud Rideshare <a href="https://aka.ms/serverless-microservices">샘플 아키텍처</a> 를 찾아 샘플 애플리케이션을 빌드하는 방법에 대한 단계별 지침과 솔루션 디자인에 대한 자세한 정보를 확인합니다.</p>


  <p>-아직 없는 경우&rsquo; <a href="https://azure.microsoft.com/free/serverless">Azure 체험 계정에</a> 등록하고 지금 서버리스 애플리케이션 빌드를 시작합니다.</p>
