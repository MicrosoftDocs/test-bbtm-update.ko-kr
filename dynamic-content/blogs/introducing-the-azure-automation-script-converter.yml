### YamlMime:Yaml
ms.openlocfilehash: 637b0409d51ccc42a0c3f87ae43ccdf6b7d4194e
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905887"
Slug: introducing-the-azure-automation-script-converter
Title: Azure Automation 스크립트 변환기 소개
Summary: Azure Automation 스크립트 변환기 소개 - PowerShell 워크플로가 없는 PowerShell 스크립트를 가져오는 경우 이제 PowerShell 스크립트를 PowerShell 워크플로로 변환하려고 시도하므로 Azure Automation Runbook으로 수동 변경 없이 실행할 수 있습니다.
Content: >-
  <p><strong>업데이트 1/8/2016: 이제 Azure Automation은 네이티브 PowerShell Runbook을 지원하므로 스크립트 변환기는 더 이상 PowerShell 스크립트를 PowerShell 워크플로로 변환하는 데 사용되지 않습니다. 이제 PowerShell 스크립트를 Azure Automation에서 asrunbook과 같이&nbsp;&nbsp; 실행할 수 있습니다. 자세한 내용은 <a href="https://azure.microsoft.com/en-us/blog/announcing-powershell-script-support-azure-automation-2/">이 블로그 게시물을 </a>참조하세요.</strong></p>


  <p>지금까지&rsquo;는 최근에 일반 공급된 새로운 <a href="https://azure.microsoft.com/en-us/services/automation/">Azure Automation 서비스에</a> 대해 알아보았습니다. Azure&rsquo; Automation을 사용하여 모든 관리 프로세스를 자동화하고, 커뮤니티 <a href="https://azure.microsoft.com/blog/2014/10/07/introducing-the-azure-automation-runbook-gallery/">갤러리</a>에서 Runbook을 활용하고, 검사점을 사용하여 <a href="https://azure.microsoft.com/blog/2014/09/03/azure-automation-reliable-fault-tolerant-runbook-execution-using-checkpoints/">오류 발생 시 안정적인 실행을</a> 달성하는 방법을 알아보았습니다. 하지만 최근에 Azure Automation 스크립트 변환기를 사용하도록 설정한 &ndash; 새로운 기능 중 하나에 대해 들어보지 못했을 수도 있습니다. Azure Automation을 사용하는 동안 실제로 PowerShell 스크립트를 실행하지 않고&rsquo; 대신 <a href="https://blogs.technet.com/b/heyscriptingguy/archive/2012/12/26/powershell-workflows-the-basics.aspx">PowerShell 워크플로</a>를 실행한다는 것을 알 수 있습니다. &rsquo;PowerShell과 관련된 의미 체계, 모듈, 지식, 콘텐츠 및 커뮤니티를 활용할 수 있을 뿐만 아니라 PowerShell 워크플로 &ndash; 에 많은 이점이 있으며, Windows Workflow Foundation의 기능을 활용할 수 있습니다. 즉, 논리, 환경 또는 네트워크 오류를 더 잘 처리하기 위해 Runbook을 검사점, 일시 중단 및 다시 시작하고 병렬 또는 직렬로 작업을 쉽게 실행할 수 있는 기능을 얻을 수 있습니다. 그러나, 인생에서 대부분의 것들과 마찬가지로, 당신은 나쁜없이 좋은 얻을하지 않습니다&rsquo;! PowerShell 워크플로는 일반 PowerShell과 매우 유사하지만 순수 PowerShell과 비교할 때 <a href="https://technet.microsoft.com/en-us/magazine/dn151046.aspx">몇 가지 차이점과 제한 사항이</a> 있으므로 추가하는 추가 기능 중 일부를 허용합니다. 물론, 이러한 모든 것은 약간의 교육과 연습 &ndash; 으로 극복 할 수 있지만 PowerShell 스크립트로 이미 작성 된 것들을&rsquo; 가져 갈 수 있거나&rsquo; PowerShell 커뮤니티에서 잡은 것을 가져와 Azure Automation으로 그대로 가져올 수 있다면 좋을 것입니다&rsquo;. &nbsp;</p>


  <h2>스크립트 변환기 사용</h2>


  <p>이제 그렇게 할 수 있습니다! 최근까지 단일 PowerShell 워크플로 이외의 항목이 포함된 PowerShell 스크립트를 Azure Automation으로 가져온 경우 가져오기가 실패합니다. 이제 PowerShell 워크플로가 없는 PowerShell 스크립트를 가져오는 경우 성공적으로&rsquo; 가져올 뿐만 아니라 PowerShell 스크립트를 PowerShell 워크플로로 변환하려고 시도하므로 Azure Automation Runbook으로 수동 변경 없이 실행할 수 있습니다. 이렇게 하면 Azure Automation에서와 같이 이미 작성한 기존 PowerShell 스크립트뿐만 아니라 현재 PowerShell 스크립트와 관련된 방대한 콘텐츠를 활용할 수&rsquo; 있습니다. 시도해 보세요&rsquo;. 여기에&rsquo; 작은 크기의 모든 Azure VM을 중지하기 위해 함께 던진 작은 스크립트가 있습니다. PowerShell ISE에서 PowerShell 스크립트로 작성했습니다. <img alt="Introducing the Azure Automation Script Converter" border="0" height="175" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image001-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation 스크립트 변환기 소개" width="894"> &nbsp; ISE에서 작동하는 유효한 PowerShell 스크립트이지만, 이 스크립트를 있는 그대로 사용하고 Azure Automation&rsquo;의 (PowerShell 워크플로) Runbook에 복사하여 붙여넣는 경우 스크립트의 위치 매개 변수(특히 <a href="https://technet.microsoft.com/en-us/library/hh849715.aspx">&ndash;Where-Object의 FilterScript 매개 변수</a>)에 의존하고 위치 <a href="https://technet.microsoft.com/en-us/magazine/dn151046.aspx">매개 변수가 PowerShell 워크플로에서 작동하지 않으므로 작동하지 않습니다</a>. <img alt="Introducing the Azure Automation Script Converter" border="0" height="289" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image003-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation 스크립트 변환기 소개" width="610"> &nbsp;물론 이 사실을 알고 있으므로 이 PowerShell 스크립트를 올바른 PowerShell 워크플로로 이동하기 위해 적절한 변환을 수행하도록 Runbook을 업데이트할 수 있습니다(이 경우 Where-Objects&rsquo; 스크립트 블록 매개 변수 값 앞에 -FilterScript&rdquo; 매개 변수 이름을 추가&ldquo;하기만 하면 됨). 하지만&rsquo; 변경하고 싶지 않은&rsquo; 척하고 작업을 수행하려고 합니다. 이제 이 PowerShell 스크립트를 복사/붙여넣는 대신 이 PowerShell 스크립트를 가져올 수 있으며, 이 스크립트는 나를 위해 변환됩니다. <img alt="Introducing the Azure Automation Script Converter" border="0" height="431" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image005-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation 스크립트 변환기 소개" width="610"> &nbsp; <img alt="Introducing the Azure Automation Script Converter" border="0" height="519" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image007-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation 스크립트 변환기 소개" width="899"> &nbsp; 짜잔&agrave;! Azure Automation 스크립트 변환기는 내 PowerShell 스크립트를 성공적으로 실행하고 모든 작은 VM을 중지할 수 있는 유효한 PowerShell 워크플로로 변환했습니다. <img alt="Introducing the Azure Automation Script Converter" border="0" height="344" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image009-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation 스크립트 변환기 소개" width="610"> &nbsp; <img alt="Introducing the Azure Automation Script Converter" border="0" height="264" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image010-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation 스크립트 변환기 소개" width="480"> &nbsp;위의 Stop-SmallVMs Runbook 스크린샷에서 볼 수 있듯이 변환기는 변환&rdquo;기로 시작하는 &ldquo;주석을 삽입합니다. 모든 위치에서 변경하여 원래 스크립트에서 변경된 내용을 알 수 있습니다. 이렇게 하면 스크립트가 Runbook으로 작동할 수 있으며 워크플로와 스크립트 간의 몇 가지 차이점을 교육하는 데도 도움이 됩니다. 이 경우 모든 변환기는 PowerShell 워크플로 대신 PowerShell 스크립트로 콘텐츠를 실행하는 InlineScript 작업에서 원래 스크립트(매개 변수 제외)를 래핑하고 using:&rdquo; 범위 한정자를 사용하여 &ldquo;Runbook&rsquo; 매개 변수를 해당 InlineScript에 전달해야 했습니다. InlineScript는 워크플로 대신 PowerShell 스크립트로 콘텐츠를 실행하므로 많은 문제를 해결할 수 있지만 스크립트 변환기는 InlineScript에서 다루지 않고&rsquo; 위에서 설명한&rsquo; 다른 사례도 처리합니다.</p>


  <ul>
   <li>모든 Write-Host Write-Verbose 변환</li>
   <li>모든 Read-Host Runbook 매개 변수로 변환</li>
  </ul>


  <p>&nbsp; 물론 시간이 지남에 따라 더 많은 사례가 처리될 것입니다. &nbsp;</p>


  <h2>Runbook 갤러리 및 스크립트 변환기</h2>


  <p>호출하려는 또 다른 새로운 기능&rsquo; 중 하나는 <a href="https://azure.microsoft.com/blog/2014/10/07/introducing-the-azure-automation-runbook-gallery/">Runbook 갤러리</a> 가 최근에 PowerShell 스크립트에 대한 지원을 추가했다는 것을 알 수 있습니다. &nbsp; <img alt="Introducing the Azure Automation Script Converter" border="0" height="610" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image011-jolevy-scriptconverter.png" style="float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; padding-right: 0px; border: 0px;" title="Azure Automation 스크립트 변환기 소개" width="529"> &nbsp; ScriptCenter의 <a href="https://gallery.technet.microsoft.com/scriptcenter/site/search?f%5B0%5D.Type=RootCategory&amp;f%5B0%5D.Value=WindowsAzure&amp;f%5B0%5D.Text=Windows%20Azure">Azure 범주</a> 에는 Azure Automation에서 사용하도록 설계되지 않았지만 여전히 Azure 관리에 도움이 되도록 설계된 많은 커뮤니티 및 Microsoft 기여 PowerShell 스크립트가 포함되어 있습니다. 이제 Azure Automation에서 스크립트 변환을 지원했으므로 Runbook 갤러리에서도 이러한 PowerShell 스크립트를 표시하고 PowerShell 워크플로&rsquo;로 변환하여 가져올 때 Runbook으로 실행할 수 있습니다. &nbsp;</p>


  <h2>주의 사항</h2>


  <p>Azure Automation 스크립트 변환기를 사용하기 시작하게 되어 매우 기쁩니다. 하지만 <b></b> &ndash; PowerShell ISE에서 Runbook을 작성하고, 테스트한 다음, 최종 테스트 및 프로덕션 작업을 위해 Azure Automation으로 가져오고, PowerShell 워크플로를 학습하고, PowerShell 워크플로로 Runbook을 작성하는 것이 가장 좋은 방법입니다.&rsquo; PowerShell 스크립트로 작동한 항목을 복사하여 PowerShell 워크플로 Runbook에 붙여넣으면 위와 같이 문제가 발생할 수 있으므로 로컬 테스트를 위해 PowerShell 워크플로에 작성하면 Runbook 논리의 문제와 PowerShell 및 PowerShell 워크플로 간의 문제를 구분하는 데 도움이 됩니다. ISE에서 무언가를 작성했지만 Azure Automation Runbook에 붙여넣으면 실패하는 경우 PowerShell 스크립트가 아닌 PowerShell 워크플로로 ISE에서 작동하는지 테스트했는지 확인합니다. 스크립트 변환기를 사용하려는 경우에도 대부분의 시간이 작동해야 하는 PowerShell 워크플로로 PowerShell 스크립트 변환을 시도하지만 스크립트&rsquo;를 PowerShell 워크플로에서 완벽하게 실행되는 것으로 완전히 변환할 수 없습니다. 또한 스크립트 변환기는 워크플로가 아닌 PowerShell 스크립트로 실행되는 InlineScript에서 원래 스크립트를 래핑하므로 병렬 실행 및 검사점과 같은 변환된 Runbook에서 워크플로 기능을 사용하는 기능도 제거합니다. 이러한 두 가지 이유를 고려할 때 스크립트 변환기를 사용하여 Runbook 작성 및 Azure Automation 사용을 시작하고 Azure Automation에 이미 작성된 기존 PowerShell 스크립트&rsquo;를 가져오는 것이 좋습니다. 그러나 프로덕션 수준 작업에 Automation을 사용하려는 경우 ISE 또는 Azure Automation 제작 환경과 관계없이 PowerShell 워크플로에서 Runbook을 학습하고 작성하면 최상의 결과를 얻을 수 있습니다. 다음 시간 &ndash; 까지 <strong>침착하고 자동화합니다</strong>. &nbsp; Azure Automation을 시작하기만 하면 되었나요?&nbsp; <a href="https://aka.ms/Q2p1ap" target="_blank">여기서</a> 서비스에 대해 알아보고 <a href="https://twitter.com/AzureAutomation" target="_blank">Twitter</a>에서 Azure Automation을 따르세요. 개인적으로 저와 연락하고 싶으신가요? <a href="https://jodoglevy.com" target="_blank">내 블로그</a>를 통해 연락하거나 <a href="https://twitter.com/jodoglevy" target="_blank">트위터에서</a> 나를 따르세요.</p>
