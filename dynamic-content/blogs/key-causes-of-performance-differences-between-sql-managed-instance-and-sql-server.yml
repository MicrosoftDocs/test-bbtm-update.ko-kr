### YamlMime:Yaml
ms.openlocfilehash: d96f36e613c15137200e2b6942285e8091b0b8e8
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905493"
Slug: key-causes-of-performance-differences-between-sql-managed-instance-and-sql-server
Title: SQL 관리되는 인스턴스와 SQL Server 간의 성능 차이의 주요 원인
Summary: Azure SQL Database 관리되는 인스턴스와 SQL Server 간의 성능 차이를 야기할 수 있는 기본 요인과 SQL Server Azure SQL Database 공정하게 비교하기 위해 수행할 수 있는 단계를 이해합니다.
Content: "<p><a href=\"https://docs.microsoft.com/en-us/azure/sql-database/sql-database-managed-instance-index\" target=\"_blank\">Microsoft Azure SQL Database 관리형 인스턴스</a>로 마이그레이션하면 완전 관리형 지능형 클라우드 데이터베이스 서비스에서만 얻을 수 있는 다양한 운영 및 재정적 이점을 얻을 수 있습니다. 이러한 이점 중 일부는 전체 데이터베이스 성능을 최적화하거나 개선하는 기능에서 비롯됩니다. 마이그레이션 후 많은 고객이 워크로드 성능을 온-프레미스 <a href=\"https://www.microsoft.com/en-us/sql-server\" target=\"_blank\">SQL Server</a> 경험한 것과 비교하기를 열망하며, 때로는 결과에 놀랄&#39;있습니다. 대부분의 경우 SQL Database 관리형 인스턴스는 관리 효율성과 고가용성을 위해 약간의 오버헤드를 발생하므로 온-프레미스 SQL Server 데이터베이스에서 더 나은 결과를 얻을 수 있습니다. 다른 경우에는 데이터베이스 엔진의 최신 버전이 이전 버전의 SQL Server 비해 쿼리 처리 및 최적화 기능이 향상되었기 때문에 SQL Database 관리되는 인스턴스에서 더 나은 결과를 얻을 수 있습니다.</p>\n\n<p>이 문서는 성능 차이를 유발할 수 있는 기본 요인과 SQL Server SQL Database 공정하게 비교하기 위해 수행할 수 있는 단계를 이해하는 데 도움이 됩니다.</p>\n\n<p>비교 결과에 놀랄&#39;있는 경우 워크로드에 영향을 줄 수 있는 요인과 테스트 환경을 구성하여 공정한 비교를 보장하는 방법을 이해하는 것이&#39;. SQL Server 비해 SQL Database 관리되는 인스턴스에서 성능이 저하될 수 있는 가장 큰 이유 중 일부는 다음과 같습니다. 파일 크기를 늘리거나 미리 할당하거나 코어를 추가하여 이러한 중 일부를 완화할 수 있습니다. 그러나 다른 항목은 보장된 고가용성을 위한 필수 구성 요소이며 PaaS 서비스의 일부입니다.</p>\n\n<h2><strong>단순 또는 대량 복구 모델</strong></h2>\n\n<p>SQL Database 관리되는 인스턴스에 배치된 데이터베이스는 전체 데이터베이스 복구 모델을 사용하여 고가용성을 제공하고 데이터 손실을 보장합니다. 이 시나리오에서 SQL Database 관리되는 인스턴스에서 성능이 저하될 수 있는 가장 일반적인 이유 중 하나는 원본 데이터베이스가 단순 또는 대량 복구 모델을 사용한다는 사실입니다. 전체 복구 모델의 단점은 단순/대량 로그 복구 모델보다 더 많은 로그 데이터를 생성한다는 것입니다. 즉, 전체 복구 모델의 DML 트랜잭션 처리 속도가 느려집니다.</p>\n\n<p>다음 쿼리를 사용하여 데이터베이스에서 사용되는 복구 모델을 확인할 수 있습니다.</p>\n\n<pre style=\"margin-left: 0.25in;\">\n<code>select name, recovery_model_desc from sys.databases</code></pre>\n\n<p>SQL Server 및 SQL Database 관리되는 인스턴스에서 실행되는 워크로드를 비교하려면 양쪽의 데이터베이스가 전체 복구 모델을 사용하고 있는지 확인합니다.</p>\n\n<h2><strong>리소스 거버넌스 및 HA 구성</strong></h2>\n\n<p>SQL Database 관리되는 인스턴스에는 99.99%의 가용성을 보장하는 기본 제공 리소스 거버넌스가 있으며, 높은 워크로드에서도 자동화된 백업과 같은 관리 작업이 완료되도록 보장합니다. SQL Server 유사한 제약 조건을 사용하지 않는&rsquo; 경우 SQL Database 관리되는 인스턴스의 기본 제공 리소스 거버넌스로 워크로드가 제한될 수 있습니다.</p>\n\n<p>예를 들어 인스턴스 로그 처리량 제한(범용으로 최대 22MB, 중요 비즈니스용 계층에서는 최대 48MB)이&#39;인스턴스가 백업할 수 있는 것보다 많은 데이터를 로드하지&#39;수 있습니다. 이 경우 SQL Server 인스턴스에 존재하지 않는&rsquo; 대기 통계가 더 높을 <code style=\"font-size: 13px; font-style: inherit; font-weight: inherit;\">INSTANCE_LOG_GOVERNOR</code> 수 있습니다. 이러한 리소스 거버넌스 제약 조건은 대량 로드 또는 인덱스 다시 작성과 같은 작업을 느리게 할 수 있습니다. 이러한 작업에는 더 높은 로그 속도가 필요하기 때문입니다.</p>\n\n<p>또한 중요 비즈니스용 계층 인스턴스의 보조 복제본은 변경 내용을 catch하지&#39;적용할 수 있는 경우 주 데이터베이스의 속도가 느려질 수 있으므로 추가 <code style=\"font-size: 13px; font-style: inherit; font-weight: inherit;\">HADR_DATABASE_FLOW_CONTROL </code>또는<code style=\"font-size: 13px; font-style: inherit; font-weight: inherit;\"> HADR_THROTTLE_LOG_RATE_SEND_RECV</code> 대기 통계가 표시될 수 있습니다.</p>\n\n<p>로컬 SSD 스토리지에서 실행되는 SQL Server 워크로드를 중요 비즈니스용 계층과 다시 비교할&#39;있는 경우 중요 비즈니스용 인스턴스는 3개의 보조 복제본이 있는 Always On 가용성 그룹 클러스터입니다. 하나 이상의 동기 커밋 복제본이 있는 Always On 가용성 그룹을 사용하여 원본 SQL Server HA 구현이 유사한지 확인합니다. 중요 비즈니스용 계층을 로컬 디스크에 쓰는 단일 SQL Server 인스턴스와 비교할&#39;있는 경우 원본 인스턴스에 HA가 없기 때문에 비현실적인 비교가 될 수 있습니다. 항상 복제본에서 비동기를 사용하는 경우 HA 성능이 향상되지만, 이 경우 성능에 유리하게 데이터 손실 가능성 간에 장래를 만들고 SQL Server 인스턴스에서 더 나은 결과를 얻을 수 있습니다.</p>\n\n<h2><strong>자동화된 백업 일정</strong></h2>\n\n<p>SQL Database 관리되는 인스턴스를 선택하는 주된 이유 중 하나는 워크로드가 많은 경우에도 항상 데이터베이스의 백업을 보장한다는 사실입니다. SQL Database 관리되는 인스턴스의 데이터베이스는 전체, 증분 및 로그 백업을 예약했습니다. 전체 백업은 7일마다 수행되고 12시간마다 증분되며 로그 백업은 5~10분마다 수행됩니다. 인스턴스에 여러 데이터베이스가 있는 경우 현재 실행 중인 백업이 하나 이상 있을 가능성이&#39;있습니다.</p>\n\n<p>백업 작업은 일부 인스턴스 리소스(CPU, 디스크, 네트워크)를 사용하므로 워크로드 성능에 영향을 줄 수 있습니다. 관리되는 인스턴스와 비교하는 시스템의 데이터베이스에 비슷한 백업 일정이 있는지 확인합니다. 그렇지 않으면 SQL Database 관리되는 인스턴스에서 불가능한 데이터베이스 복구와 성능 간에 절차를 수행할&#39;있으므로 SQL Server 인스턴스에서 더 나은 결과를 얻을&#39;있음을 수락해야 할 수 있습니다.</p>\n\n<p>예기치 않은 성능 차이가&#39;경우 다음 쿼리를 사용하여 현재 실행 중인 워크로드의 성능에 영향을 줄 수 있는 SQL Database 관리되는 인스턴스 또는 SQL Server 인스턴스에서 진행 중인 전체/차등 백업이 있는지 확인합니다.</p>\n\n<pre>\n<code>SELECT r.command, query = a.text, start_time, percent_complete,\n      eta = dateadd(second,estimated_completion_time/1000, getdate())\nFROM sys.dm_exec_requests r\n    CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) a\n WHERE r.command IN (&#39;BACKUP DATABASE&#39;,&#39;BACKUP LOG&#39;)</code></pre>\n\n<p>현재 실행 중인 벤치마크 동안 전체 또는 증분 백업이 실행되고 있는 경우 워크로드를 일시 중지하고 백업이 완료되면 다시 시작할 수 있습니다.</p>\n\n<h2><strong>데이터베이스에 대한 연결 및 앱 근접성</strong></h2>\n\n<p>데이터베이스에 액세스하고 SQL Database 관리되는 인스턴스 및 SQL Server 인스턴스에서 벤치마크 쿼리를 실행하는 애플리케이션은 두 경우 모두 비슷한 네트워크 근접 범위에 있어야 합니다. 로컬 환경에 애플리케이션 및 SQL Server 데이터베이스를 배치하거나 SQL Server 설치된 동일한 컴퓨터에서 <a href=\"https://www.hammerdb.com/\" target=\"_blank\">HammerDB</a>와 같은 앱을 실행하는 경우 SQL Server SQL Database 비해 더 나은 결과를 얻을 수 있습니다.  애플리케이션과 관련하여 분산 클라우드 환경에 배치되는 관리형 인스턴스입니다. 두 경우 모두 벤치마크 애플리케이션을 다시 실행하거나 SQL Database 관리되는 인스턴스와 동일한 지역의 별도 가상 머신에서 쿼리하여 유효한 결과를 얻을&#39;있는지 확인합니다. 온-프레미스 환경을 동등한 클라우드 환경과 비교할&#39;있는 경우 앱과 데이터베이스 간의 대역폭 및 대기 시간을 측정하고 유사한지 확인합니다.</p>\n\n<p>SQL Database 관리되는 인스턴스는 클라이언트 요청을 수락하고 실제 데이터베이스 엔진 노드로 리디렉션하는 프록시 게이트웨이 노드를 통해 액세스됩니다. 환경에 더 가까운 결과를 제공하려면 <a href=\"https://docs.microsoft.com/powershell/module/az.sql/set-azsqlinstance\" target=\"_blank\">Set-AzSqlInstance</a> PowerShell 명령을 사용하여 인스턴스에서 ProxyOverride 모드를 사용하도록 설정하여 클라이언트에서 현재 SQL Database 관리되는 인스턴스를 호스트하는 노드로 직접 액세스할 수 있도록 합니다.</p>\n\n<p>또한 규정 준수 요구 사항으로 인해 SQL Database 관리되는 인스턴스는 항상 사용하도록 설정된 SSL/TLS 전송 암호화를 적용합니다. 많은 수의 쿼리가 있는 경우 암호화로 오버헤드가 발생할 수 있습니다. 온-프레미스 환경에서 SSL 암호화를 적용하지 않으면 SQL Database 관리되는 인스턴스에 추가 네트워크 오버헤드가 표시됩니다.</p>\n\n<h2><strong>투명한 데이터 암호화</strong></h2>\n\n<p>SQL Database 관리되는 인스턴스의 데이터베이스는 기본적으로 투명한 데이터 암호화 사용하여 암호화됩니다. 투명한 데이터 암호화 디스크 스토리지와 교환되는 모든 페이지를 암호화/암호 해독합니다. 이렇게 하면 더 많은 CPU 리소스가 소비되고 디스크 스토리지에서 데이터 페이지를 가져오고 저장하는 과정에서 추가 대기 시간이 발생합니다. SQL Database 관리되는 인스턴스 및 SQL Server 두 데이터베이스 모두 투명한 데이터 암호화 켜거나 끕니다. 성능 테스트를 시작하기 전에 데이터베이스 암호화/암호 해독 작업이 완료되었는지 확인합니다.</p>\n\n<p>다음 쿼리를 사용하여 데이터베이스가 암호화되었는지 여부를 확인할 수 있습니다.</p>\n\n<pre>\n<code>select name, is_encrypted from sys.databases</code></pre>\n\n<p>성능에 영향을 줄 수 있는 또 다른 중요한 요소는 암호화된 TempDB입니다. SQL Server 또는 SQL Database 관리되는 인스턴스에서 하나 이상의 데이터베이스가 암호화된 경우 TempDB가 암호화됩니다. 따라서 암호화되지 않은 두 개의 데이터베이스를 비교할 수 있지만 다른 SQL Database 관리되는 인스턴스가 암호화되기 때문에(워크로드에 포함되지&#39;) TempDB도 암호화됩니다. 암호화되지 않은 데이터베이스는 여전히 암호화된 TempDB를 사용하며 임시 개체를 만들거나 유출을 사용하는 쿼리는 속도가 느려집니다. TempDB는 인스턴스의 모든 사용자 데이터베이스의 암호를 해독하고 인스턴스를 다시 시작한 후에만 암호가 해독됩니다. SQL Database 관리되는 인스턴스를 새 가격 책정 계층으로 크기 조정하고 다시 시작하는 한 가지 방법입니다.</p>\n\n<h2><strong>데이터베이스 엔진 설정</strong></h2>\n\n<p>데이터베이스 호환성 수준, 추적 플래그, 시스템 구성(&lsquo;병렬 처리에 대한 비용 임계값, &rsquo;최대 병렬 처리&rsquo;&rsquo; 수준), 데이터베이스 범위 구성(<code>LEGACY_CARDINALITY_ESTIMATOR, PARAMETER_SNIFFING, QUERY_OPTIMIZER_HOTFIXES</code>등) 및 SQL Server 및 SQL Database 관리되는 인스턴스의 데이터베이스 설정(<code>AUTO_UPDATE_STATISTICS, DELAYED_DURABILITY</code>)과 같은 데이터베이스 엔진 설정이 두 데이터베이스 모두에서 동일한지 확인합니다.</p>\n\n<p>다음 샘플 쿼리는 SQL Server 및 Azure SQL Database 관리되는 인스턴스에 대한 설정을 식별하는 데 도움이 될 수 있습니다.</p>\n\n<p><code>select compatibility_level, snapshot_isolation_state_desc, is_read_committed_snapshot_on,</code></p>\n\n<pre>\n<code>&nbsp; is_auto_update_stats_on, is_auto_update_stats_async_on, delayed_durability_desc \nfrom sys.databases;\nGO\n\nselect * from sys.database_scoped_configurations;\nGO\n\ndbcc tracestatus;\nGO\n\nselect * from sys.configurations;</code></pre>\n\n<p>SQL Database 관리되는 인스턴스 및 SQL Server 이러한 쿼리의 결과를 비교하고 일부 항목을 식별하는 경우 차이점을 조정해 봅니다.</p>\n\n<p><strong>참고:</strong><em> </em>추적 플래그 및 구성 목록은 매우 길 수 있으므로 필터링하거나 변경했거나 알고&#39;추적 플래그만 보고 성능에 영향을 주는 것이 좋습니다. 일부 추적 플래그는 PaaS 구성의 일부로 SQL Database 관리되는 인스턴스에서 미리 구성되며 성능에 영향을 주지 않습니다.</p>\n\n<p>호환성 수준을 더 높은 값으로 변경하거나, 레거시 카디널리티 추정기를 켜거나, SQL Database 관리되는 인스턴스에서 자동 튜닝 기능을 사용하여 SQL Server 데이터베이스보다 더 나은 결과를 얻을 수 있습니다.</p>\n\n<p>또한 SQL Database 관리되는 인스턴스는 최신 개선 사항이 있거나 호환성 수준에 바인딩되지 않은 수정 사항 또는 워크로드를 개선할 수 있는 마지막 좋은 계획을 강제 적용하는 것과 같은 일부 기능이 있기 때문에 모든 매개 변수를 맞추더라도 더 나은 성능을 제공할 수 있습니다.</p>\n\n<h2><strong>하드웨어 및 환경 사양</strong></h2>\n\n<p>SQL Database 관리형 인스턴스는 사용자 환경과 다른 <a href=\"https://docs.microsoft.com/azure/sql-database/sql-database-managed-instance-resource-limits#hardware-generation-characteristics\" target=\"_blank\">미리 정의된 기술 특성을 사용하여</a> 표준화된 하드웨어에서 실행됩니다. 환경을 SQL Database 관리형 인스턴스가 실행 중인 환경과 비교할 때 고려해야 할 몇 가지 특징은 다음과 같습니다.</p>\n\n<ol>\n    <li><strong>코어 수는</strong> SQL Server 및 SQL Database 관리되는 인스턴스 모두에서 동일해야 합니다. SQL Database 관리되는 인스턴스는 프로세서 속도와 다를 수 있는 2.3-2.4GHz 프로세서를 사용합니다. CPU 차이로 인해 동일한 작업에 더 많거나 적은 CPU를 사용할 수 있습니다. 가능하면 SQL Database 관리되는 인스턴스의 Gen4 및 Gen5 하드웨어 세대와 비교할 때 SQL Server 환경에서 하이퍼스레딩이 사용되는지 확인합니다. Gen4 하드웨어의 1개는 하이퍼스레딩을 사용하지 않지만 Gen5에서는 하이퍼스레딩을 사용합니다. 운영 체제 미설치 머신에서 실행되는 SQL Server SQL Database 관리되는 인스턴스 또는 가상 머신에서 실행되는 SQL Server 비교하는 경우&#39;운영 체제 미설치 인스턴스에서 더 나은 결과를 얻을 수 있습니다.</li>\n    <li><strong>메모리/코어 비율을 포함한 메모리</strong> <strong>양</strong>(Gen5의 경우 5.1GB/코어, Gen4의 경우 7GB/코어). 메모리/코어 비율이 높을수록 더 큰 버퍼 풀 캐시가 제공되고 캐시 적중 비율이 증가합니다. 워크로드가 메모리/코어 비율 5의 관리되는 인터페이스에서 잘 수행되지 않는 경우 SQL Database 관리되는 인스턴스 대신 적절한 메모리/코어 비율을 가진 가상 머신을 선택해야 할 수 있습니다.</li>\n    <li><strong>IO 특성</strong> &ndash; 스토리지 시스템의 성능이 온-프레미스 환경에 비해 매우 다를 수 있다는 점에 유의해야 합니다. SQL Database 관리되는 인스턴스는 클라우드 데이터베이스이며 Azure 클라우드 인프라에 의존합니다.\n    <ul>\n        <li>범용 계층은 IO 성능이 파일 크기에 따라 달라지는 원격 Azure Premium 디스크를 사용합니다. 파일 크기에 따라 로그 제한에 도달하면 파일 통계에서 대기 및 더 적은 IOPS를 확인할 <code>WRITE_LOG</code> 수 있습니다. 이 문제는 로그 파일이 작고 미리 할당되지 않은 경우 SQL Database 관리되는 인스턴스에서 발생할 수 있습니다. 성능을 향상시키려면 범용 계층에서 일부 파일의 크기를 늘려야 할 수 있습니다(<a href=\"https://techcommunity.microsoft.com/t5/DataCAT/Storage-performance-best-practices-and-considerations-for-Azure/ba-p/305525\" target=\"_blank\">Azure SQL Managed Instance 범용 계층에 대한 성능 모범 사례 및 고려 사항에 Storage</a> 이 기술 Community 문서 참조).</li>\n        <li>SQL Database 관리되는 인스턴스는 인스턴트 파일 초기화를 사용하지 않으므로 파일 증가 중에 날짜 파일이 0바이트로 채워지므로 추가 <code>PREEMPTIVE_OS_WRITEFILEGATHER</code> 대기 통계가 표시될 수 있습니다.</li>\n    </ul>\n    </li>\n    <li><strong>로컬 또는 원격 스토리지 유형</strong> &ndash; 비교를 수행하는 동안 로컬 SSD와 원격 스토리지를 고려할&#39;있는지 확인합니다. 범용 계층은 로컬 SSD 또는 고성능 SAN을 사용하는 경우 온-프레미스 환경과 일치하지&#39;수 있는 원격 스토리지(Azure Premium Storage)를 사용합니다. 이 경우 중요 비즈니스용 계층을 대상으로 사용해야 합니다. 범용 계층은 원격 스토리지(Azure Premium Storage)를 사용하는 Azure Virtual Machines의 SQL Server 같은 다른 클라우드 데이터베이스와 비교할 수 있습니다. 또한 범용 인스턴스에서 사용하는 원격 스토리지는 다음과 같은 이유로 SQL Virtual Machine에서 사용하는 원격 스토리지와 여전히 다릅니다. <ul>\n        <li>범용 계층은 개별 파일의 크기에 따라 달라지는 각 데이터베이스 파일당 전용 IO 리소스를 사용하는 반면, Azure Virtual Machine의 SQL Server IO 특성이 디스크 크기에 따라 달라지는 모든 파일에 대해 공유 IO 리소스를 사용합니다. 작은 파일이 많은 경우 SQL Virtual Machine에서 더 나은 성능을 얻을 수 있으며, 동일한 IO 리소스를 공유하는 시끄러운 인접 항목이 없으므로 파일 사용이 병렬화될 수 있는 경우 SQL Database 관리되는 인스턴스에서 더 나은 성능을 얻을 수 있습니다.</li>\n        <li>SQL Virtual Machines는 읽기 속도를 향상시키는 읽기 캐싱 메커니즘을 사용합니다.</li>\n    </ul>\n    </li>\n</ol>\n\n<p>하드웨어 사양 및 리소스 할당이 다른 경우 서비스 계층을 변경하거나 파일 크기를 늘려야만 해결할 수 있는 다양한 성능 결과를 기대할 수 있습니다. SQL Database 관리형 인스턴스를 Azure Virtual Machines의 SQL Server 비교하는 경우 <a href=\"https://docs.microsoft.com/azure/virtual-machines/windows/sizes-general#dsv3-series-1\" target=\"_blank\">DS 시리즈와 같은 SQL Database 관리되는 인스턴스와 유사한 메모리/cpu 비율이</a> 있는 가상 머신 시리즈를 선택해야 합니다.</p>\n\n<p>Azure SQL Database 관리형 인스턴스는 잠재적인 문제를 자동으로 해결할 수 있는 기본 제공 인텔리전스 외에도 데이터베이스의 성능을 문제 해결 및 개선하는 데 도움이 되는 강력한 도구 집합을 제공합니다. 다음 문서에서 Azure SQL Database 관리되는 인스턴스의 모니터링 및 튜닝 기능에 대해 자세히 알아봅니다.https://docs.microsoft.com/en-us/azure/sql-database/sql-database-monitoring-tuning-index</p>"
