### YamlMime:Yaml
ms.openlocfilehash: b10b16d20b3696997ffe0c163a004e57beef99be
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902413"
Slug: web-deploy-3-6-beta-released
Title: 웹 배포 3.6 베타 릴리스됨
Summary: >-
  이제 웹 배포 3.6 베타를 다운로드할 수 있음을 발표하게 되어 기쁩니다. 이 릴리스는 다음과 같은 새로운 향상된 기능을 추가합니다.

      Support for publishing ASP.Net vNext web applications
      Command line and API…
Content: >-
  이제 Web Deploy 3.6 베타를 다운로드" href="https://www.microsoft.com/en-us/download/details.aspx?id=43717">다운로드</a>에 <a title="사용할 수 있음을 발표하게 되어 기쁩니다. 이 릴리스는 다음과 같은 새로운 향상된 기능을 추가합니다.

  <ul>
      <li>ASP.Net vNext 웹 애플리케이션 게시 지원</li>
      <li>게시 설정 파일 사용에 대한 명령줄 및 API 지원</li>
      <li>프록시 지원</li>
  </ul>

  또한 다음을 위한 버그 수정을 포함하여 여러 버그 수정이 있습니다.

  <ul>
      <li>원격 동기화에 대한 체크섬 + 매개 변수화 문제</li>
      <li>세션 선호도 쿠키 구문 분석 문제</li>
  </ul>

  &nbsp;

  <h2>ASP.Net vNext" href="https://www.asp.net/vnext" target="_blank"> ASP.Net vNext</a> 웹 애플리케이션 게시 <a title="지원</h2>

  ASP.Net vNext 패키지 및 원본 파일에 대해 증분 게시를 수행할 수 있는 새 contentLibPath 공급자를 추가했습니다. vNext 앱의 폴더 구조가 "approot"라는 새 폴더 아래에 애플리케이션 코드를 배치하도록 변경되었습니다. 이 폴더는 항상 IIS 애플리케이션의 기반에 형제가 됩니다. 예를 들어 IIS 앱의 기본을 "wwwroot"라고 하는 경우 이제 "approot"라는 폴더와 병렬로 폴더가 존재합니다.

  <ul>
      <li>c:\siteName\wwwroot</li>
      <li>c:\siteName\approot</li>
  </ul>

  현재 공급자는 기본 IIS 애플리케이션 폴더(예: contentPath 및 iisApp)에 대한 경로를 사용하지만 이 사용은 변경될 수 있습니다. 다음은 예제입니다.

  <ul>
      <li>msdeploy.exe -verb:sync -source:contentPathLib=c:\siteName\wwwroot -dest:contentPathLib=siteName</li>
  </ul>

  이 공급자를 명시적으로 호출하지 않으려면 새 링크 확장을 지정하여 iisApp 또는 contentPath 공급자로 끌어올 수도 있습니다.

  <ul>
      <li>msdeploy.exe -verb:sync -source:contentpath=c:\siteName\wwwroot -dest:contentpath=siteName -enablelink:contentlibextension</li>
      <li>msdeploy.exe -verb:sync -source:iisApp=siteName -dest:contentpath=siteName -enablelink:contentlibextension</li>
  </ul>

  웹 배포를 호스팅하는 경우 사용자가 wwwroot 외부의 새 폴더에 게시하도록 허용하는 것이 무섭기 때문에 기본적으로 이 공급자에 대한 위임 규칙을 추가하지 않기로 결정했습니다. 따라서 지금은 사용자가 시스템에 게시하기 전에 contentPathLib 공급자가 규칙에 추가되었는지 확인해야 합니다.


  &nbsp;

  <h2>게시 설정 파일 사용에 대한 명령줄 및 API 지원</h2>

  명령줄이 예쁘지 않다는 것을 알고 있습니다. 따라서 좀 더 간단하게 만들기 위해 이제 명령줄에 게시 설정 파일을 지정할 수 있습니다. 예전에는 다음과 같습니다.

  <ul>
      <li>msdeploy.exe -verb:sync -source:contentPath=c:\siteName\wwwroot -dest:contentPath=siteName,computername=,username=https://siteName/msdeploy.axd?site=siteNamemyUser,password=myPass,authtype=basic</li>
  </ul>

  이제 다음과 같이 간소화할 수 있습니다.

  <ul>
      <li>msdeploy.exe -verb:sync -source:contentPath=c:\siteName\wwwroot -dest:contentPath=siteName,publishsettings=c:\siteName.PublishSettings</li>
  </ul>

  마찬가지로 이전 API 사용은 다음과 같이 간소화할 수 있습니다.

  <div style="margin-left: 15px;"><code>

  DeploymentBaseOptions destBaseOptions = new DeploymentBaseOptions();

  destBaseOptions.ComputerName = "https://siteName/msdeploy.axd?site=siteName";

  destBaseOptions.UserName = "myUser";

  destBaseOptions.Password = "myPass";

  destBaseOptions.AuthenticationType = "basic";

  </code></div>

  값:

  <div style="margin-left: 15px;"><code>

  PublishSettings destSettings = new PublishSettings(@"c:\siteName.publishsettings");

  DeploymentBaseOptions destBaseOptions = new DeploymentBaseOptions(destSettings);

  </code></div>

  &nbsp;

  <h2>프록시 지원</h2>

  마침내 웹 배포에 대한 프록시 지원이 있습니다... 주로. :) 여전히 포트 8172에 게시하는 경우 기본적으로 사용자가 가진 프록시 설정은 무시됩니다. 이는 포트 8172를 허용하지 않는 프록시를 사용하는 기존 고객의 중단을 방지하기 위한 것이었습니다. 포트 8172에 대한 프록시 지원이 여전히 필요한 경우 다음을 설정하여 레지스트리 키로 재정의할 수 있습니다.

  <ul>
      <li>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\IIS Extensions\MSDeploy\3\AlwaysUseProxySettings = 1</li>
  </ul>
