### YamlMime:Yaml
ms.openlocfilehash: e375f654927d6bf362bb7476d51665206f416ec7
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139911628"
Slug: policy-expressions-in-azure-api-management
Title: Azure API Management의 정책 식
Summary: '이 게시물에서는 Azure API Management의 정책 식 기능에 대해 설명합니다. '
Content: >-
  <p><a href="https://azure.microsoft.com/en-us/services/api-management/" target="_blank">Azure API Management</a>는 Publisher 포털에서 구성할 수 있는 기본 제공 정책을 사용하여 게시된 API의 동작을 제어하고 수정하는 기능을 제공합니다. 이러한 <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-policy-reference/" target="_blank">정책은</a> API 소비자와 API 백 엔드 사이에 있는 API Management 프록시의 인바운드 요청 또는 아웃바운드 응답에 적용됩니다. <a href="https://msdn.microsoft.com/library/azure/dn910913.aspx" target="_blank">정책 식은</a> API Management 정책의 기능을 강화하여 코드를 작성하거나 백 엔드 서비스를 수정하지 않고도 트래픽을 제어하고 API 동작을 수정하는 정교한 수단을 제공합니다. 대부분의 API Management 정책에서 정책 식을 특성 값 또는 텍스트 값으로 사용할 수 있습니다.</p>


  <h2>Syntax</h2>


  <p>정책 식은 C# 6.0 구문을 사용하며 .NET Framework 형식의 하위 집합에 액세스할 수 있습니다. 또한 멤버가 요청 및/또는 응답에 대한 정보를 갖는 암시적 <a href="https://msdn.microsoft.com/library/azure/dn910913.aspx#ContextVariables" target="_blank">컨텍스트 변수</a> 에 액세스할 수 있습니다.</p>


  <h2>&nbsp;</h2>


  <p>예를 들어&nbsp; <a href="https://msdn.microsoft.com/library/azure/dn894085.aspx#set_variable" target="_blank">변수 설정</a> 정책에서 정책 식을 사용하여&nbsp; 값을 다음과 같이 설정할 수 있습니다.</p>


  <pre class="prettyprint">
    &lt;set-variable name=&quot;isIOS&quot; value=&quot;@(context.Request.Headers[&quot;User-Agent&quot;].Contains(&quot;iPad&quot;) || context.Request.Headers[&quot;User-Agent&quot;].Contains(&quot;iPhone&quot;))&quot; /&gt;</pre>

  <p>위 문의 정책 식은 @(expression)&quot;로 &quot;캡슐화됩니다. 여기서 식은 올바른 형식의 C# 문입니다. 요청이 iPad 또는 iPhone 클라이언트에서 시작된 경우 이 식은 true로 평가됩니다. 여기서 컨텍스트 변수는 멤버 헤더가 API를 호출하는 애플리케이션의 요청에 포함된 헤더에 대한 액세스를 제공하는 Request 개체에 대한 액세스를 제공합니다. 일반 텍스트와 식을 정책의 매개 변수 값으로 혼합할 수&rsquo; 없습니다. 다중 문 식은 @{expression 1; 식 2}&quot;와 같이 중괄호로&quot; 캡슐화되어야 합니다.&nbsp; 다중 문 식의 모든 경로는 정책에서 사용할 수 있는 값을 반환해야 합니다.</p>


  <h2>오케스트레이션 및 API 리디렉션</h2>


  <p><a href="https://msdn.microsoft.com/library/azure/dn894085.aspx" target="_blank">API Management 고급 정책과</a> 함께 사용하여 정교한 API 방향 및 동작 업데이트를 오케스트레이션하는 경우의 정책 식입니다. 이를 사용하여 백 엔드 서비스를 다시 작성하지 않고 게시된 API에 대한 최신 업데이트된 페이&ccedil;드를 프로젝팅할 수 있습니다. 인바운드 경로에 사용될 때 게시된 API에 쿼리 매개 변수로 포함된 버전 정보를 기반으로 들어오는 요청을 리디렉션하는 데 사용할 수 있는 정책 식의 또 다른 예제는 다음과&rsquo; 같습니다.</p>


  <pre class="prettyprint">
    &lt;choose&gt;
      &lt;when condition=&quot;@(context.Request.Url.Query.GetValueOrDefault(&quot;version&quot;) == &quot;2014-03&quot;)&quot;&gt;
        &lt;set-backend-service base-url=&quot;https://contoso.com/api/1.6/&quot; /&gt;
      &lt;/when&gt;
      &lt;otherwise&gt;
        &lt;set-backend-service base-url=&quot;https://contoso.com/api/2.0/&quot;
      &lt;/otherwise&gt;
    &lt;/choose&gt;</pre>

  <h2>&nbsp;</h2>


  <h2>정책 식의 컨텍스트</h2>


  <p>암시적으로 사용할 수 있는 컨텍스트 변수는 API 호출의 요청 및/또는 응답 매개 변수에 대한 액세스를 제공합니다. 컨텍스트는 요청 및 응답 외에도 게시된 API, 작업, 제품, 사용자, 구독 및 변수와 같은 API Management 서비스 인스턴스에 대한 정보에 대한 액세스 권한을 제공합니다. 컨텍스트 변수의 내용은 파이프라인의 각 단계에서 변경 될 수 있습니다. 예를 들어 컨텍스트입니다. Request.Url에는 <a href="https://msdn.microsoft.com/library/azure/7406a8ce-5f9c-4fae-9b0f-e574befb2ee9#RewriteURL" target="_blank">다시 쓰기 URL</a> 정책이 실행된 후 변환된 URL이 포함됩니다. 정책 식과 함께 변수 설정 정책을 사용하여 아래와 같이 나중에 사용할 수 있도록 컨텍스트 변수에서 개체의 현재 내용을 유지할 수 있습니다.</p>


  <pre class="prettyprint">

  &lt;policies&gt;
    &lt;inbound&gt;
      &lt;!-- Save the URL in invoked request from the context before its rewritten. --&gt;
      &lt;set-variable name=&quot;requestPath&quot; value=&quot;@(context.Request.Url.Path)&quot; /&gt;
      &lt;base /&gt;
      &lt;rewrite-uri template=&quot;api/add?a={a}&amp;amp;b={b}&quot; /&gt;
    &lt;/inbound&gt;
    &lt;outbound&gt;
    &lt;base /&gt;
      &lt;!-- Insert the saved request method+URL in the result section. --&gt;
      &lt;!-- Note request method wasn&#39;t rewritten, so we can access that from context. --&gt;
      &lt;find-and-replace from=&quot;&amp;lt;result&amp;gt;&quot; to=&quot;@{
        string str = &quot;&lt;result&gt;\n    &lt;operation&gt;&quot;;
        str += context.Request.Method;
        str += &quot; \&quot;&quot;;
        str += context.Variables.GetValueOrDefault&lt;string&gt;(&quot;requestPath&quot;);
        str += &quot;\&quot;&lt;/operation&gt;&quot;;
        return str;
      }&quot; /&gt;
    &lt;/outbound&gt;
  &lt;/policies&gt;</pre>


  <p>위의 정책 조각은 원래 요청을 호출하는 데 사용된 메서드 &amp; URL 경로를 작업&quot;&gt; 요소로 응답 본문의 결과&quot;&gt; 섹션에&lt;&quot;&lt;&quot; 삽입합니다. 정책 정의는 XML을 사용하므로&#39; &lt; 및 &#39;&#39; &#39;&gt; 문자는 매개 변수에서 이스케이프되지만 to 매개 변수의 다중 문 정책 식에서는 이스케이프되지 않습니다. 이 예제에서는 set-variable를 사용하여 컨텍스트에서 요청 URL 경로를 저장한 다음 찾기 및 바꾸기 정책에서 사용합니다. &nbsp; 이에 대한 간단한 자습서는 Channel 9의 <a href="https://channel9.msdn.com/Blogs/AzureApiMgmt/Policy-Expressions-in-Azure-API-Management" target="_blank">정책 식</a> 에 대한 스크린캐스트를 참조하세요.<iframe allowfullscreen="allowfullscreen" frameborder="0" height="150" scrolling="no" src="//channel9.msdn.com/Blogs/AzureApiMgmt/Policy-Expressions-in-Azure-API-Management/player" style="width: 610px; height: 343px;" width="300"></iframe> 자세한 내용은 <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-howto-policies/" target="_blank">Azure API Management의 정책을</a> 방문하세요.</p>
