### YamlMime:Yaml
ms.openlocfilehash: b1fdbc7aa7a0b74934e4ffd23bc6f533553f1b87
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899642"
Slug: new-full-iis-capabilities-differences-from-hosted-web-core
Title: '새로운 전체 IIS 기능: 호스트된 Web Core의 차이점'
Summary: 채택 프로그램 Insights 시리즈는 고객이 ...에 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다.
Content: '<p><i>채택 프로그램 Insights 시리즈는 고객이 Windows Azure 플랫폼에 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다. 이 게시물은 톰 홀랜더에 의해.</i></p>  <p>새 Windows Azure SDK 1.3은 전체 IIS를 지원하므로 웹 역할이 온-프레미스 IIS 설치에서 사용할 수 있는 모든 범위의 웹 서버 기능에 액세스할 수 있습니다. 그러나 전체 IIS에 애플리케이션을 배포하도록 선택하는 경우 호스트된 Web Core 모델의 동작에 몇 가지 미묘한 차이가 있습니다.&nbsp; </p>  <h3>전체 IIS란?</h3>  <p>Windows Azure의 웹 역할에서는 항상 웹 사이트 및 서비스를 배포할 수 있습니다. 그러나 많은 사람들이 웹 역할이 실제로 전체 인터넷 정보 서비스(IIS)를 실행하지 않았다는 것을 깨닫지 못했을 수 있습니다. 대신 HWC(Hosted Web Core)라는 구성 요소를 사용했는데, 이름에서 알 수 있듯이 다른 프로세스에서 호스팅할 수 있는 웹 페이지를 제공하는 핵심 엔진입니다. 대부분의 간단한 시나리오에서는 HWC 또는 IIS에서 실행하는 경우 중요하지 않습니다. 그러나 여러 사이트 또는 가상 애플리케이션에 대한 지원 및 Windows Activation Services를 통한 비 HTTP 전송을 통한 WCF 서비스 활성화를 포함하여 IIS에만 존재하는 여러 가지 유용한 기능이 있습니다.</p>  <p>PDC 2010에서 발표한 많은 공지 사항 중 하나는 Windows Azure 웹 역할이 전체 IIS를 지원한다는 것입니다. 이 기능은 이제 공개적으로 사용할 수 있으며 <a target="_blank" href="https://www.microsoft.com/downloads/en/details.aspx?FamilyID=7a1089b6-4050-4307-86c4-9dadaa5ed018">Windows Azure SDK v1.3</a>에 포함됩니다. Windows Azure SDK에 HWC가 아닌 전체 IIS에서 실행하려는 경우 ServiceDefinition.csdef 파일에 유효한 <b>&lt;사이트&gt;</b> 섹션을 추가하기만 하면 됩니다. Visual Studio 새 클라우드 서비스 Project 만들 때 기본적으로 이 섹션을 만들므로 생각할 필요도 없습니다.</p>  <p>단일 웹 사이트를 정의하는 간단한 <b>&lt;사이트&gt; </b>섹션은 다음과 같습니다.</p>  <p>&nbsp;&nbsp;&nbsp;&lt; 사이트&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;사이트 이름="웹"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;바인딩&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding name="Endpoint1" endpointName="Endpoint1" /&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Bindings&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Site&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/Sites&gt;</p>  <p>이 예제와 같이 이 섹션을 쉽게 사용자 지정하여 여러 웹 사이트, 가상 애플리케이션 또는 가상 디렉터리를 정의할 수 있습니다.</p>  <p>&lt;Sites&gt;<br>&nbsp;&lt;사이트 이름="웹"&gt;<br>&nbsp;&nbsp;&nbsp;&lt;VirtualApplication name="WebAppA" physicalDirectory="C:\Projects\WebAppA\" /&gt;<br>&nbsp;&nbsp;&nbsp;&lt;바인딩&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding name="HttpIn" endpointName="HttpIn" /&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/Bindings&gt;<br>&nbsp;&lt;/Site&gt;<br>&nbsp;&lt;사이트 이름="AnotherSite" physicalDirectory="C:\Projects\AnotherSite"&gt;<br>&nbsp;&nbsp;&nbsp;&lt;바인딩&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Binding hostHeader="anothersite.example.com" name="HttpIn" endpointName="HttpIn"/&gt;<br>&nbsp;&nbsp;&nbsp;&lt;/Bindings&gt;<br>&nbsp;&lt;/Site&gt;<br>&lt;/Sites&gt;</p>  <p>지난 몇 달 동안 전체 IIS를 사용하여 얼리 어답터 고객과 함께 작업한 후 기존 웹 애플리케이션을 Azure로 Windows 포팅하는 것이 그 어느 때보다 쉬워졌습니다. 그러나 다른 호스팅 모델로 인해 HWC와 약간 다르게 작업을 수행해야 하는 몇 가지 영역도 발견했습니다.</p>  <h3>새 호스팅 모델</h3>  <p>HWC 또는 전체 IIS를 사용하는지에 따라 Windows Azure에서 코드를 호스트하는 방법에는 상당한 차이가 있습니다. HWC에서 <b>RoleEntryPoint</b> 메서드(예: <b>RoleEntryPoint</b>에서 파생된 <b>WebRole</b> 클래스의 <b>OnStart </b>메서드) 및 웹 사이트 자체는 <b>WaWebHost.exe</b> 프로세스에서 실행됩니다. 그러나 전체 IIS에서는 <b>RoleEntryPoint</b> 가 <b>WaIISHost.exe</b>실행되지만 웹 사이트는 일반 IIS <b>w3wp.exe</b> 프로세스에서 실행됩니다. 모든 코드가 동일한 Visual Studio 프로젝트에 속하고 동일한 DLL로 컴파일되기 때문에 이는 다소 예상치 못한 일입니다. 다음 다이어그램에서는WebRole1.dll이라는 이진 파일로 컴파일된 웹 프로젝트가 <b> HWC </b> 및 IIS의 Windows Azure에서 호스트되는 방법을 보여 줍니다.</p>  <p><a target="_blank" href=""><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7652.IIS.png" border="0"></a></p>  <p>이 차이는 다음 섹션에 설명된 대로 예기치 않은 영향을 줄 수 있습니다. </p>  <h3>RoleEntryPoint 및 웹 사이트에서 구성 파일 읽기</h3>  <p>Windows Azure 애플리케이션에 구성을 저장하는 기본 방법은 ServiceConfiguration.cscfg 파일에 있지만, 일반적인 .NET 구성 파일(특히 .NET 시스템 구성 요소 또는 재사용 가능한 프레임워크를 구성할 때)을 사용하려는 경우가 여전히 많습니다. 특히 Windows Azure 진단을 사용할 때마다 .NET 구성 파일에서 <b>DiagnosticMonitorTraceListener</b>를 구성해야 합니다.</p>  <p>웹 역할 프로젝트를 만들 때 Visual Studio .NET 구성에 대한 web.config 파일을 만듭니다. 웹 애플리케이션이 이 정보에 액세스할 수 있지만 <b>RoleEntryPoint </b>코드는 웹 사이트의 일부로 실행되지 않기 때문에 액세스할 수 없습니다. 앞에서 설명한 대로 <b>WaIISHost.exe</b>라는 프로세스에서 실행되므로 해당 구성이WaIISHost.exe.config 파일에 있을 것으로 예상합니다 <b> . </b>&nbsp; 따라서 웹 프로젝트에서 이 이름을 가진 파일을 만들고 "출력 디렉터리로 복사" 속성을 "항상 복사"로 설정하면 <b>RoleEntryPoint </b>에서 이 내용을 행복하게 읽을 수 있습니다. <b> </b>이것은 동일한 프로젝트에 두 개의 .NET 구성 파일이 있는 곳을 생각할 수 있는 유일한 사례 중 하나입니다.</p>  <h3>RoleEntryPoint 및 웹 사이트에서 정적 멤버 액세스</h3>  <p>이 변경의 또 다른 의미는 정적 변수와 같은 AppDomain 범위 데이터가 RoleEntryPoint와 웹 애플리케이션 간에 더 이상 공유되지 않는다는 것입니다. 여러 가지 방법으로 애플리케이션에 영향을 줄 수 있지만 기존 Windows Azure 애플리케이션을 마이그레이션하여 전체 IIS를 사용하는 경우 많은 시나리오가 발생할 수 있습니다. CloudStorageAccount 클래스를 사용한 후에 다음과 같은 코드를 사용하여 저장된 연결 문자열에서 인스턴스를 초기화한 경우:</p>  <p>var storageAccount = CloudStorageAccount.FromConfigurationSetting("ConnectionString");</p>  <p>이 코드가 작동하려면 <b>CloudStorageAccount</b> 에 구성을 가져올 위치를 알려야 합니다. <b>CloudStorageAccount</b>는 특정 구성 파일을 기본값으로 설정하는 대신 원하는 위치에서 구성을 가져올 수 있는 대리자를 설정해야 합니다. 따라서 ServiceConfiguration.cscfg에서 연결 문자열을 얻으려면 다음 코드를 사용할 수 있습니다.</p>  <p>CloudStorageAccount.SetConfigurationSettingPublisher((configName, configSetter) =&gt;<br>{<br>&nbsp;&nbsp;&nbsp; configSetter(RoleEnvironment.GetConfigurationSettingValue(configName));<br>});</p>  <p>이전 버전의 SDK에서 HWC를 사용하거나 SDK 1.3을 사용하여 <b>사이트&gt; 구성 설정을 삭제&lt;</b>한 경우 <b>WebRole.OnStart</b>에 이 코드를 기꺼이 넣을 수 있습니다. 그러나 전체 IIS로 이동하는 즉시 <b>InvalidOperationException</b>으로 <b>CloudStorageAccount.FromConfigurationSetting</b>에 대한 호출이 실패합니다.</p>  <p style="padding-left: 30px;"><i>FromConfigurationSetting을 사용하려면 SetConfigurationSettingPublisher를 호출해야 합니다.</i></p>  <p>"하지만 난 그것을 호출 했다!" 당신은 당신의 컴퓨터에 비명을 것입니다 (잘 적어도 그건 내가 무슨 짓을했는지). 그리고 실제로 당신은 그러나 당신은 IIS에서 완전히 다른 AppDomain에서 호스팅 웹 사이트의 영향을 미치지 않는 <b>WaIISHost.exe</b> 프로세스의 AppDomain에서 호출했다. 솔루션은 웹 사이트에서 가장 가능성이 높은 동일한 AppDomain 내에서 <b>CloudStorageAccount.SetConfigurationSettingPublisher</b> 및 <b>CloudStorageAccount.FromConfigurationSetting을</b> 호출하도록 하는 것입니다. Application_Start<b> 이벤트에서 Windows </b>Azure SDK 클래스에 액세스하는 데 몇 가지 문제가 있었지만 더 이상 적용되지 않으며 구성 설정 게시자를 초기화하기에 좋은 장소입니다.</p>  <p>또는 연결 문자열에 ServiceConfiguration.cscfg 파일을 사용하려는 경우 <b>CloudStorageAccount.FromConfigurationSetting(...)</b> 에 대한 호출을 다음과 같이 바꿔서 이 대리자를 완전히 설정하지 않을 수 있습니다.</p>  <p>var storageAccount = CloudStorageAccount.Parse(RoleEnvironment.GetConfigurationSettingValue("ConnectionString"));</p>  <h3>다양한 웹 사이트 및 애플리케이션에 대한 리소스 보호</h3>  <p>마지막으로 유의해야 할 한 가지는 여러 사이트 또는 가상 애플리케이션을 실행하도록 웹 역할을 구성하는 경우 각각 자체 애플리케이션 풀 및 자체 사용자 계정으로 실행된다는 것입니다. 이렇게 하면 많은 유연성이 제공됩니다. 예를 들어 파일 시스템 경로 또는 인증서와 같은 다른 리소스에 대한 액세스 권한을 다른 가상 애플리케이션에 부여할 수 있습니다. 이를 활용하려는 경우 다른 새 SDK 1.3 기능을 활용하고 상승된 권한으로 실행할 시작 작업을 지정할 수 있습니다. 이 작업은 각 애플리케이션이 필요한 리소스에 액세스할 수 있도록 하는 액세스 제어 목록을 설정하는 PowerShell 스크립트를 시작할 수 있습니다.</p>  <h3>결론 </h3>  <p>Windows Azure 웹 역할과 함께 전체 IIS를 사용하는 옵션을 사용하면 기존 IIS 기반 애플리케이션을 보다 쉽게 마이그레이션할 수 있고 새 애플리케이션을 개발할 때 더 많은 옵션을 제공하는 많은 새로운 기능에 액세스할 수 있습니다. 기본 호스팅 및 보안 모델을 더 잘 이해하면 개발 문제가 적은 이러한 새로운 기능을 사용할 수 있기를 바랍니다.</p>  <p><iframe src="https://www.facebook.com/plugins/like.php?href=;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50" style="overflow: hidden; width: 300px; height: 50px;" frameborder="0" scrolling="no"></iframe><br><a data-url="" data-count="horizontal" data-via="Windowsazure" href="https://twitter.com/share" class="twitter-share-button">짹짹</a>  <script src="https://platform.twitter.com/widgets.js" type="text/javascript"></script>  </p>'
