### YamlMime:Yaml
ms.openlocfilehash: 4f7a3d1292556b9adbaac1ad4c7b495573e72655
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898980"
Slug: getting-started-with-the-azure-java-management-libraries
Title: Java용 Azure 관리 라이브러리 시작
Summary: 이 게시물에서는 Java용 관리 라이브러리를 소개하고 자체 Azure 구독 및 리소스를 만들고 관리하는 데 사용할 수 있는 Eclipse 프로젝트를 시작하고 실행하는 과정을 안내합니다.
Content: "Java용 Microsoft Azure SDK의 0.5.0 릴리스부터 Java SDK에서 서비스 관리에 대한 지원을 추가했습니다. 서비스 관리는 이미 <a href=\"https://github.com/azure/azure-sdk-for-net\">.NET용 Azure SDK</a> 및 <a href=\"https://github.com/azure/azure-sdk-for-node\">Node.js용 Azure SDK </a> 가 풍부한 영역이지만 릴리스하게 되어 기뻤던 Java SDK의 새로운 영역이었습니다. .NET 및 Node.js SDK 및 <a href=\"https://github.com/Azure/azure-storage-java\">Storage 팀의 Java SDK</a>와 마찬가지로 서비스 관리를 위한 Java SDK도 <a href=\"https://github.com/azure/azure-sdk-for-java\">GitHub 오픈 소스</a>입니다. 이 게시물에서는 Java용 관리 라이브러리를 소개하고 자체 Azure 구독 및 리소스를 만들고 관리하는 데 사용할 수 있는 Eclipse 프로젝트를 시작하고 실행하는 과정을 안내합니다.\n<h2>Java용 관리 라이브러리란?</h2>\n간단히 말해서 이러한 라이브러리는 Java 애플리케이션에 Azure 리소스에 대한 설정, 중단, 프로비저닝 및 일상적인 관리 작업을 자동화하는 기능을 제공합니다. 우리 팀의 진언은 매우 간단합니다. 개발자가 관리 포털을 사용하여 수행해야 하는 코드에서 Azure 구독에 대한 작업을 실행할 수 있도록 하려고 합니다. 라이브러리를 사용하면 Azure 리소스를 자동화할 수 있습니다(실제로 라이브러리는 현재 <a href=\"https://msdn.microsoft.com/library/azure/jj554330.aspx\">자체 PowerShell</a> 및 <a href=\"https://github.com/Azure/azure-sdk-tools-xplat\">XPlat CLI</a> 환경을 지원함). 팀의 관리 라이브러리를 사용하여 다음과 같은 작업을 수행할 수 있습니다.\n<ul>\n <li>웹 사이트, SQL 데이터베이스, 클라우드 서비스, 스케줄러 작업 컬렉션, 가상 머신 및 스토리지와 같은 리소스에 대한 설정 만들기, 삭제 및 업데이트</li>\n <li>웹 사이트 시작 및 중지</li>\n <li>스토리지 계정에 데이터베이스 백업</li>\n <li>가상 머신 만들기 자동화</li>\n</ul>\nJava용 관리 라이브러리는 Maven에서 사용할 수 있으므로 대부분의 최신 Java 개발 도구에서 쉽게 사용할 수 있습니다. 이 게시물은 Eclipse를 사용하여 개발하는 데 중점을  두고 있습니다.\n<h2>Eclipse Maven Project 만들기</h2>\n게시물의이 영역은 관객이 Maven 및 Azure 라이브러리를 사용하여 개발하는 Eclipse를 사용하는 경험이 거의 없거나 전혀 없다고 가정하고 지상 0에서 가는 방법을 매우 기본적인 수준으로 요약할 것이므로 Java / Maven / Eclipse의 예술에 실제로 경험이 있다면이 중 일부는 자녀의 놀이처럼 보일 수 있습니다. 오랜 .NET 개발자였던 Java는 비교적 익숙하지만 Azure SDK를 확장하는 데 관심이 있어 언어에 대해 다시 알게 되었습니다. 무뚝뚝하게 말하자면, 나는이 분야에서 시작 게시물에 대한 좋은 후보입니다 (팀은 여기에 농담을해야합니다).\n\n이러한 자습서 수집을 시작하기 위해 새 작업 영역을 만들겠습니다. 여기에서 새 폴더를 만들겠습니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image001.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse 작업 영역 선택\" alt=\"Selecting an Eclipse Workspace\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image001_thumb.png\" width=\"634\" height=\"295\" border=\"0\" /></a>\n\n작업 영역이 만들어지고 Eclipse IDE가 원하는 방식으로 설정되면 새 Maven 프로젝트를 만듭니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image002.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"새 Eclipse Maven 프로젝트 만들기\" alt=\"Creating a new Eclipse Maven project\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image002_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n아키타입을 선택할 필요가 없으므로 이 부분을 건너뛰고 \"간단한 프로젝트\" 접근 방식을 선택하겠습니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image003.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"간단한 프로젝트 모드로 전환\" alt=\"Going with simple project mode\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image003_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n실제로 여기에서 Eclipse Maven 프로젝트를 만들고 있으므로(Azure Maven 패키지를 끌어올 수 있는 한 원하는 모든 유형의 프로젝트를 만들 수 있음) 리포지토리 소비자에게 게시할 때 내 패키지가 수행하는 작업을 볼 수 있도록 앱에 대한 몇 가지 정보를 제공해야 합니다. 데모 코드임을 소비자에게 플래그를 지정하기 위해 여기에 몇 가지 기본 정보를 제공합니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/15/04.png\"><img class=\"alignnone size-medium wp-image-193201\" alt=\"package-details\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/04-591x369.png\" width=\"591\" height=\"369\" /></a>\n\nMaven 패키지를 지원하는 Eclipse 프로젝트를 설정했으므로 이제 Azure 패키지를 찾아 설치해야 합니다.\n<h2>Maven을 사용하여 관리 라이브러리 설치</h2>\npom.xml 파일을 클릭하여 프로젝트가 현재 설치한 패키지 목록을 확인합니다. 이 프로젝트는 새 프로젝트이므로 없어야 합니다. 프로젝트에 Maven 패키지를 추가해야 하므로 여기서 추가 단추를 클릭합니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image005.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse 종속성 창\" alt=\"The Eclipse dependencies window\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image005_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nMaven과 Eclipse를 경험한 경우 뉴스가 아닐 수 있습니다. 나는 내가 알고있는 패키지를 검색 할 때 우리의 이름으로 Maven에 있었다, 나는 어떤을 찾을 수 없습니다 지적했다. 대신, 내 작업 영역 내에 있는 프로젝트만 찾을 수 있었습니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image006.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse에서 Maven 패키지 검색\" alt=\"Searching for Maven packages in Eclipse\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image006_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n내 로컬 개발 워크스테이션의 중앙 Maven 리포지토리 인덱스를 다시 빌드하면 온라인 리포지토리에서 패키지를 검색할 수 없게 됩니다. 이렇게 하려면 Eclipse 인스턴스에서 찾는 방법을 알고 있는 Maven 리포지토리 목록을 찾아야 합니다. 그래서 Eclipse에서 Maven 리포지토리 보기를 엽니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image007.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse에서 Maven 리포지토리 뷰 추가\" alt=\"Adding the Maven Repositories View in Eclipse\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image007_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\nMaven 리포지토리 보기가 열리면 목록에서 중앙 Maven 리포지토리를 찾을 수 있습니다. 해당 항목의 상황에 맞는 메뉴에서 인덱스 다시 작성 항목을 클릭하여 로컬 인덱스 빌드합니다. 시간이 좀 걸릴 것입니다. Maven에는 검색 및 다운로드해야 하는 많은 수의 패키지가 있으므로 몇 분 정도 걸릴 수 있으므로 인내심을 가져야 합니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image008.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"리포지토리의 인덱스 다시 작성\" alt=\"Rebuilding a repository's index\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image008_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n인덱스가 다시 빌드되면 중앙 Maven 리포지토리에서 Microsoft Azure 패키지를 볼 수 있습니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image009.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse에 표시되는 패키지 목록이 있는 리포지토리\" alt=\"A repository with a list of packages visible in Eclipse\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image009_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n이제 Azure Maven 패키지를 검색하면 성공으로 이루어 줍니다. 이후의 패키지를 볼 수 있으므로 지금은 기본 관리 패키지를 선택합니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image010.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Azure SDK 관리 기본 클라이언트 라이브러리 선택\" alt=\"Selecting the Azure SDK management base client library\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image010_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n이제 기본 Azure 관리 패키지가 종속성으로 선택됩니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image011.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Azure 관리 Maven 패키지가 올바르게 설정됨\" alt=\"The Azure management Maven package properly set up\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image011_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n프로젝트에 새 Java 클래스 파일을 추가합니다. 처음에 작성할 코드는 Azure API를 호출하여 코드를 배포하고 해당 지역의 이름을 콘솔에 쓸 수 있는 잠재적 지역 목록을 가져옵니다. 그다지 많지는 않지만 내 코드가 Azure API에 제대로 연결되고 있고 갈 준비가 되었다는 증거를 제공합니다.\n<h2>Azure API에 액세스하기 위한 Java 코드 작성</h2>\n이제 Azure SDK를 참조했으므로 코드를 작성할 준비가 되었습니다. 시작하려면 프로젝트에 새 Java 클래스 파일을 추가합니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image012.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Eclipse 프로젝트에 Java 클래스 추가\" alt=\"Adding a Java class to an Eclipse project\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image012_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n새 클래스 대화 상자가 열리면 정적 void 기본 확인란을 확인합니다. 이렇게 하면 작성 중인 애플리케이션에 진입점을 제공하는 기본 메서드가 Java 클래스에 추가됩니다(다시 간단하지만 Azure API를 올바르게 인증하고 연결할 수 있다는 확신을 제공합니다).\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image013.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"Java 클래스 구조 지정\" alt=\"Specifying the Java class structure\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image013_thumb.png\" width=\"644\" height=\"404\" border=\"0\" /></a>\n\n다음 가져오기를 파일에 추가하여 필요한 기능에 적합한 네임스페이스를 모두 가져올 수 있도록 합니다. 끌어올 네임스페이스는 Azure API 엔드포인트를 사용하는 관리 라이브러리의 클래스에 대한 액세스 권한을 부여합니다.\n<pre class=\"prettyprint\">import java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport javax.print.event.PrintJobAttributeEvent;\nimport javax.xml.parsers.ParserConfigurationException;\nimport org.xml.sax.SAXException;\nimport com.microsoft.windowsazure.core.utils.KeyStoreType;\nimport com.microsoft.windowsazure.exception.ServiceException;\nimport com.microsoft.windowsazure.management.*;\nimport com.microsoft.windowsazure.Configuration;\nimport com.microsoft.windowsazure.management.configuration.ManagementConfiguration;\nimport com.microsoft.windowsazure.management.models.LocationsListResponse;\nimport com.microsoft.windowsazure.management.models.LocationsListResponse.Location;</pre>\n이제 모든 적절한 네임스페이스를 포함했으므로 API를 통해 관리 라이브러리를 인증하는 데 사용할 수 있는 관리 인증서를 구독에 설정합니다.\n<h2>인증서를 사용하여 Azure API에 인증</h2>\nJava SDK를 사용하면 API를 호출하는 것이 매우 간단합니다. 구독에 대해 작동하기 위해 API를 제공해야 하는 몇 가지 정보가 있습니다. API를 제공해야 하는 특성 중 하나는 관리 인증서입니다. 포털 스크린샷에 아래와 같이 CER 파일이 이미 Azure 구독에 업로드되어 있습니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/16.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border: 0px\" title=\"16\" alt=\"16\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/16_thumb.png\" width=\"644\" height=\"368\" border=\"0\" /></a>\n\n로컬 개발 워크스테이션의 클라이언트 인증서를 나타내는 PFX 파일도 있습니다. Java가 인증서를 통해 인증하는 데 사용하기 때문에 해당 PFX를 JKS 파일로 변환해야 합니다. 이 변환을 수행하려면 JDK가 설치된 컴퓨터에서 아래 명령을 실행합니다.\n<pre class=\"prettyprint\">c:\\java\\bin\\keytool.exe -importkeystore -srckeystore c:\\certificates\\AzureJavaDemo.pfx -destkeystore c:\\certificates\\AzureJavaDemo.jks -srcstoretype pkcs12 -deststoretype JKS</pre>\n내 데스크톱에 JKS 파일이 있으면 관리 라이브러리를 사용하여 Azure API에 연결할 코드에서 해당 파일의 경로를 사용할 수 있습니다. 이에 대한 상용구 코드는 다음과 같습니다. 방금 만든 JKS 파일과 관련된 영역을 강조 표시하는 주석을 적어둡니다. 다른 변수를 잠시 채웁니다.\n<pre class=\"prettyprint\">public class Program {\n  static String uri = \"https://management.core.windows.net/\";\n  static String subscriptionId = \"\";\n  static String keyStoreLocation = \"c:\\\\certificates\\\\AzureJavaDemo.jks\";\n  static String keyStorePassword = \"my-cert-password\";\n\n  public static void main(String[] args) \n    throws IOException, URISyntaxException, ServiceException, ParserConfigurationException, SAXException {\n    Configuration config = ManagementConfiguration.configure(\n      new URI(uri), \n        subscriptionId,\n        keyStoreLocation, // the file path to the JKS\n        keyStorePassword, // the password for the JKS\n        KeyStoreType.jks // flags that I'm using a JKS keystore\n    );\n  }\n}</pre>\n현재 Java SDK는 관리 인증서를 통해 Azure API에 인증을 제공하지만, 향후 Java SDK 릴리스에서 Active Directory 인증을 사용하도록 설정하기 위해 Azure Active Directory 팀과 협력하고 있습니다. Java SDK의 0.6.0 릴리스에서 인증 방법은 관리 인증서가 됩니다.\n<h2>Azure API를 호출하여 지역 목록 가져오기</h2>\n다음으로 코드에서 subscriptionId 필드의 값을 설정하는 코드를 추가하고 실제로 Azure에 API를 호출하여 지리적 지역 목록을 가져오는 몇 가지 추가 Java 코드를 작성합니다. 해당 목록이 있으면 해당 지역의 이름을 콘솔에 출력하기만 하면 됩니다. Azure Management API에 성공적으로 인증하고 일부 작업을 수행했음을 보여 줍니다.\n<pre class=\"prettyprint\">public class Program {\n  static String uri = \"https://management.core.windows.net/\";\n  static String subscriptionId = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n  static String keyStoreLocation = \"c:\\\\certificates\\\\AzureJavaDemo.jks\";\n  static String keyStorePassword = \"my-cert-password\";\n\n  public static void main(String[] args) throws IOException, URISyntaxException, ServiceException, ParserConfigurationException, SAXException {\n    Configuration config = ManagementConfiguration.configure(\n      new URI(uri), \n      subscriptionId,\n      keyStoreLocation, // the file path to the JKS\n      keyStorePassword, // the password for the JKS\n      KeyStoreType.jks // flags that I'm using a JKS keystore\n    );\n\n    // create a management client to call the API\n    ManagementClient client = ManagementService.create(config);\n\n    // get the list of regions\n    LocationsListResponse response = client.getLocationsOperations().list();\n    ArrayList locations = response.getLocations();\n\n    // write them out\n    for( int i=0; i&lt;locations.size(); i++){\n      System.out.println(locations.get(i).getDisplayName());\n    }\n  }\n}</pre>\nEclipse에서 코드를 디버그할 때 예상된 출력을 볼 수 있으며, 모든 것이 제대로 작동하고 원하는 대로 작동하는지 확인할 수 있습니다. 이렇게 하면 구독에서 관리 인증서를 JKS 형식으로 성공적으로 변환하고, 애플리케이션의 런타임에 로드하고, 관리 라이브러리를 사용하여 API에 호출할 수 있었습니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/09/clip_image015.png\"><img style=\"padding-top: 0px;padding-left: 0px;padding-right: 0px;border-width: 0px\" title=\"clip_image015\" alt=\"clip_image015\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/clip_image015_thumb.png\" width=\"644\" height=\"413\" border=\"0\" /></a>\n<h2>요약 및 다음 단계</h2>\n이 게시물은 Maven을 통해 Java SDK를 쉽게 가져오고 이를 사용하여 Azure API에 인증하고 몇 가지 간단한 작업을 수행하는 방법을 보여 줍니다. SDK는 지역을 나열하는 것 이상의 작업을 수행할 수 있습니다. 그런 다음 Eclipse Java Toolkit 사용하여 코드를 배포할 수 있는 클라우드 서비스, 개발자 워크스테이션 또는 자체 유지 관리 서버로 사용할 가상 머신, Java 코드를 실행할 수 있는 웹 사이트 또는 모든 항목을 보관할 스토리지 계정을 만들 수 있습니다. 앞으로 몇 주 안에 Azure 블로그의 Java SDK에서 사용할 수 있는 옵션 중 일부를 조사할 예정이므로 계속 지켜봐 주시기 바랍니다. 0.6.0. SDK 릴리스에는 Azure 서비스 자동화 및 프로비저닝에 유용한 다양한 새로운 기능이 있습니다.\n\nJava용 Storage SDK 및 Azure 홈페이지에서 사용할 수 있는 일련의 다른 SDK와 함께 Azure에서 Java를 개발할 기회가 계속 발전하고 있음을 쉽게 알 수 있습니다. 이러한 새로운 도구와 SDK를 사용해 보고 피드백이 있는지 알려 주시기 바랍니다.\n\n즐거운 코딩 작업이 되길 바랍니다!"
