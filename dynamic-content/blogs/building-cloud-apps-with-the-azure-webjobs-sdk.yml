### YamlMime:Yaml
ms.openlocfilehash: 74eb96a6ec16c49147d14246c565e08e81bb8179
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898078"
Slug: building-cloud-apps-with-the-azure-webjobs-sdk
Title: Azure WebJobs SDK를 사용하여 Cloud Apps 빌드
Summary: Azure WebJobs용 Visual Studio 새로운 배포 기능과 Azure WebJobs SDK에 대한 새로운 시작 설명서.
Content: >-
  최근 게시물에 언급 된 바와 같이, MS Press는 스콧 Guthrie의 프리젠 테이션을 기반으로 전자 책을 출판했다, <a href="https://weblogs.asp.net/scottgu/free-ebook-building-cloud-apps-with-microsoft-azure">Windows Azure와 클라우드 앱을 구축</a>.


  이 책은 <a href="https://azure.microsoft.com/en-us/services/cloud-services/">Cloud Services</a>로 전환하는 한 가지 예외를 제외하고 웹 애플리케이션을 호스팅하기 위한 기본 선택으로 <a href="https://azure.microsoft.com/en-us/services/websites/">Azure Websites</a>를 일관되게 제공합니다. <a href="https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern">큐 중심 작업 패턴</a> 챕터에서 이 책은 <a href="https://azure.microsoft.com/en-us/documentation/articles/cloud-services-what-is/">작업자 역할을</a> 사용하여 <a href="https://code.msdn.microsoft.com/windowsazure/Fix-It-app-for-Building-cdd80df4">Fix It 샘플 애플리케이션</a>에 대한 백 엔드 처리를 처리합니다. Scott은 당시 Azure Websites에서 백 엔드 프로세스를 호스트할 방법이 없었기 때문에 프레젠테이션을 개발할 때 이러한 선택을 했습니다. 그 이후로 <a href="https://go.microsoft.com/fwlink/?linkid=390226&amp;clcid=0x409">Azure WebJobs</a> 가 도입되었습니다. WebJobs는 아직 미리 보기 상태이므로 이 버전의 책 및 샘플 애플리케이션은 변경되지 않았지만 다음 업데이트된 버전에서 백 엔드 처리를 위한 기본 선택으로 WebJobs를 기능할 계획입니다.


  <a href="https://azure.microsoft.com/en-us/documentation/articles/choose-web-site-cloud-service-vm/">클라우드 서비스 웹 역할에 비해 웹 사이트</a>와 마찬가지로 작업자 역할에 비해 WebJobs는 배포가 더 쉽고 빠르며 프로그래밍 및 구성이 더 쉽고 테스트 및 문제 해결이 더 쉽습니다. <a href="https://go.microsoft.com/fwlink/?LinkId=390465">Visual Studio 업데이트 3</a> 및 <a href="https://azure.microsoft.com/en-us/downloads/archive-net-downloads/">Azure .NET SDK 2.4</a>의 릴리스는 WebJobs에 대한 자동화된 배포 기능을 제공하여 이점을 더욱 향상시켰습니다. 자세한 내용은 새 문서 Azure <a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs/">WebJobs를 Azure Websites에 배포하는 방법을 참조하세요</a>.


  WebJobs의 또 다른 이점은 WebJobs SDK 덕분에 <a href="https://azure.microsoft.com/en-us/documentation/services/storage/">큐, Blob 및 테이블로</a> 작동하는 코드를 쉽게 작성할 수 있다는 것입니다. 최근에 WebJobs SDK에 대한 새로운 시작 자습서를 게시했습니다. 이 자습서에서는 큐 및 Blob을 사용하는 간단한 다중 계층 애플리케이션을 빌드하고 실행하는 방법을 보여 줍니다. 동일한 자습서 및 샘플 애플리케이션의 작업자 역할 버전을 사용할 수 있으므로 작업자 역할 개발을 WebJobs 개발과 쉽게 비교할 수 있습니다.

  <ul>
   <li>작업자 역할 자습서: <a href="https://azure.microsoft.com/en-us/documentation/articles/cloud-services-dotnet-get-started/">Azure Cloud Services 및 ASP.NET 사용하여 시작</a>.</li>
   <li>WebJobs 자습서: <a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-webjobs-sdk-get-started/">Azure WebJobs SDK를 사용하여 시작</a></li>
  </ul>

  &nbsp;


  나중에 WebJobs 및 WebJobs SDK를 사용하도록 Building Cloud Apps 전자책 및 Fix It 애플리케이션을 업데이트합니다. 그때까지 직접 변환을 시도하려면 기본적으로 다음 단계가 포함됩니다.

  <ul>
   <li><a href="https://code.msdn.microsoft.com/windowsazure/Fix-It-app-for-Building-cdd80df4">Fix It 애플리케이션 코드를 다운로드합니다</a>.</li>
   <li>솔루션에서 클라우드 서비스 및 작업자 역할 프로젝트를 제거합니다.</li>
   <li>솔루션에 WebJob 프로젝트를 추가합니다( <a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-deploy-webjobs">WebJobs 배포 방법</a> 참조).</li>
   <li>WebJob 프로젝트에 WebJobs SDK NuGet 패키지를 추가합니다(<a href="https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-webjobs-sdk-get-started/">Azure WebJobs SDK를 사용한 시작</a> 참조).</li>
   <li>webJob 프로젝트 App.config 파일에 SQL 연결 문자열 및 Storage appSettings를 추가합니다.</li>
   <li>FixitTaskRepository.cs에서 비동기 버전의 CreateAsync 메서드를 만듭니다. (WebJobs SDK의 현재 베타 0.3.1 릴리스에 필요합니다. 이후 릴리스에서는 비동기 메서드를 호출할 수 있습니다.)</li>
   <li>더 이상 해당 메서드가 필요하지 않으므로 FixItQueueManager.cs에서 ProcessMessagesAsync 메서드를 주석으로 처리합니다.</li>
   <li>WebJob 프로젝트의 Program.cs에 다음 코드를 추가합니다.</li>
  </ul>

  <pre class="prettyprint">class Program

  {
      private static IContainer container;
      private static ILogger logger;
      private static IFixItTaskRepository repository;
      static CancellationTokenSource tokenSource = new CancellationTokenSource();

      static void Main(string[] args)
      {
          Initialize();
          JobHost host = new JobHost();
          host.RunAndBlock();
      }

      private static void Initialize()
      {
          var builder = new ContainerBuilder();
          builder.RegisterType&lt;Logger&gt;().As&lt;ILogger&gt;().SingleInstance();
          builder.RegisterType&lt;FixItTaskRepository&gt;().As&lt;IFixItTaskRepository&gt;().SingleInstance();
          container = builder.Build();
          logger = container.Resolve&lt;ILogger&gt;();
          repository = container.Resolve&lt;IFixItTaskRepository&gt;();
          logger.Information("MyFixIt.WebJob entry point called");
      }
      public static void CreateFixIt([QueueTrigger("fixits")] FixItTask fixit)
      {
          repository.Create(fixit);
      }

  }</pre>

  이는 기본 개념 증명 코드이며, 현재 Fix It 샘플 코드와 마찬가지로 프로덕션 앱에서 수행하려는 모든 작업을 수행하지는 않습니다.예를 들어 WebJobs 및 WebJobs SDK는 정상 종료를 처리할 수 있지만 이 코드는 이를 구현하지 않습니다. WebJobs SDK의 장점은 포이즌 메시지 처리와 같은 코드를 작성할 필요 없이 이러한 작업 중 일부를 수행한다는 것입니다(현재 베타 버전 0.3.1에서는 아니지만 향후 버전으로 계획됨).


  WebJobs 및 WebJobs SDK에 대한 자세한 내용은  <a href="https://go.microsoft.com/fwlink/?linkid=390226&amp;clcid=0x409">Azure WebJobs - 권장 리소스를 참조하세요</a>.
