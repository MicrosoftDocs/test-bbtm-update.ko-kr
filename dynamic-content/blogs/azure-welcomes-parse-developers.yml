### YamlMime:Yaml
ms.openlocfilehash: d4e6301b9fa47228740fe4cebb892e1c9ac0ad17
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906136"
Slug: azure-welcomes-parse-developers
Title: Azure는 구문 분석 개발자를 환영합니다.
Summary: 구문 분석 호스팅을 모바일 앱을 지원하는 백 엔드로 사용한 경우 Azure App Service를 사용해 보기에 완벽한 시기일 수 있습니다.
Content: >-
  <p><strong>업데이트:</strong>&nbsp; Microsoft는 Azure에서 구문 분석 구현 프로세스를 간소화하기 위해 <a href="https://azure.microsoft.com/marketplace/partners/microsoft/parseserver/">Marketplace 템플릿</a> 을 릴리스했습니다.&nbsp; 자세한 내용은 <a href="https://azure.microsoft.com/blog/announcing-the-publication-of-parse-server-with-azure-managed-services">Azure Managed Services를 사용하여 Parse Server 게시 발표</a>를 참조하세요.</p>


  <p>구문 분석 호스팅을 모바일 앱을 지원하는 백 엔드로 사용한 경우 Azure App Service를 사용해 보기에 완벽한 시기일 수 있습니다. 최근 발생으로 인해 Parse의 사용자는 Parse에서 호스팅하는 기존 백 엔드를 다른 호스트로 마이그레이션하는 방법을 제공했습니다. 새 호스트를 검색할 때 Azure를 사용해 보시기 바랍니다.</p>


  <h2>쉬운 마이그레이션 경로</h2>


  <p>구문 분석 마이그레이션 가이드에서 알 수 있듯이 Express 앱에 탑재된 구문 분석 서버 API를 사용하여 앱에서 사용하는 구문 분석 호스팅 백 엔드를 다른 호스트로 마이그레이션할 수 있습니다. Azure App Service는 Parse 서버 구현을 호스트하기 위한 훌륭한 대안을 제공합니다. 결국 Azure App Service의 Mobile Apps에 대한 Node.js 백 엔드도 Express 앱입니다. 더 쉽게 시작할 수 있도록 Azure App Service 팀은 App Service에서 구문 분석 서버를 매우 쉽게 실행할 수 있는 간소화된 프로비저닝 프로세스를 만들었습니다.</p>


  <p>시작하기 전에 구 <a href="https://parse.com/docs/server/guide#migrating">문 분석 마이그레이션 가이드</a> 를 통해 새 구문 분석 서버에서 지원되는 내용과 지원되지 않는&rsquo; 항목을 이해할 수 있어야 합니다. 구문 분석 서버에서 누락된 주요 모바일 앱 기능 중 하나는 푸시 알림이지만 Azure Notification Hubs를 사용하는 것도 좋은 대안입니다.</p>


  <p>마이그레이션이 완료되면 기존 데이터에 액세스하는 앱에서 구문 분석 클라이언트 SDK를 계속 사용할 수 있습니다(물론 새 버전의 SDK를 사용하고 새 서비스 위치를 가리키려면 클라이언트도 업데이트해야 함).</p>


  <h2>시작하기 전에</h2>


  <p>Azure에서 실행되는 새 구문 분석 서버를 만드는 프로세스에 들어가기 전에 다음을 수행해야 합니다.</p>


  <h4>Azure 구독 만들기</h4>


  <p>Azure 구독이 아직 없는&rsquo; 경우 등록해야 합니다. <a href="https://azure.microsoft.com/en-us/pricing/free-trial/?WT.mc_id=A261C142F">평가판</a> 구독을 사용할 수 있습니다.</p>


  <h4>MongoDB 설정</h4>


  <p>Parse 서버의 현재 요구 사항 중 하나는 MongoDB를 사용하는 것입니다(Parse는 <a href="https://parse.com/docs/server/guide#database">MongoDB 요구 사항에</a> 대한 지침을 제공합니다). 구문 분석에서는 구문 분석 호스팅 데이터를 MongoDB로 이동할 수 있는 마이그레이션 도구를 약속하고 있습니다. MongoDB를 사용한 경험인 경우 Parse는 <a href="https://azure.microsoft.com/en-us/marketplace/partners/mongolab/mongolab/">Azure Marketplace</a>를 통해 등록할 수 있는 완전 관리형 클라우드 데이터베이스 서비스인 MongoLab 서비스로 시작하는 것이 좋습니다. 그러나 MongoDB&rsquo;를 호스트하도록 선택하면 구문 분석 서버를 실행하려면 연결 정보가 필요합니다.</p>


  <p>나중에 관리되는 NoSQL 문서 데이터베이스인 Azure DocumentDB를 서비스로 사용하는 것도 고려해야 합니다. 이후 게시물에서는 데이터를 DocumentDB로 마이그레이션하고 Parse 서버에서 DocumentDB를 사용하는 방법에 대한 지침을 공유합니다.</p>


  <h4>GitHub 계정 가져오기</h4>


  <p>이 게시물에 설명된 Azure로의 마이그레이션 경로를 사용하려면 <a href="https://github.com/" target="_blank">GitHub</a> 계정이 있어야 합니다. Git 리포지토리를 복제하고 리포지토리에 변경 내용을 커밋하고 푸시하는 방법을 알고 있는 것도 유용합니다.</p>


  <h2>App Service에서 새 백 엔드 만들기</h2>


  <p>첫 번째 단계는 App Service에서 구문 분석 서버를 호스트하는 새 백 엔드를 만드는 것입니다. <a href="https://portal.azure.com/" target="_blank">Azure Portal</a>에서 새 <strong>웹 + 모바일</strong> &gt; <strong>웹앱을</strong> 클릭하고 <strong>+</strong> 백 엔드의 고유한 이름을 입력한 다음 <strong>만들기</strong>를 클릭합니다.&gt;</p>


  <p><img alt="Create new app service in Azure portal" border="0" height="341" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b6d3c5b9-1d96-4f1d-bb14-abe668009017.png" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="create-app-service" width="610"></p>


  <p>그러면 구문 분석 서버를 호스트할 새 백 엔드 서비스가 만들어집니다. 이렇게 하기 전에 <a href="https://azure.microsoft.com/pricing/details/app-service/" target="_blank">서비스 가격 책정</a>에 영향을 주기 때문에 다른 App Service 계획을 만들 수 있습니다. 나중에 항상 App Service 계획을 변경할 수 있습니다. 자세한 내용은 <a href="https://azure.microsoft.com/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/" target="_blank">Azure App Service 계획의 심층 개요를</a> 참조하세요.</p>


  <p>초기 배포가 완료되면 새 백 엔드에 대한 블레이드가 표시됩니다.</p>


  <p><img alt="New web app in Azure portal" border="0" height="336" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b8bfe658-9847-4d79-89c7-db9c6fd26d4d.png" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="web-app-in-Portal" width="610"></p>


  <p>App Service는 앱을 배포하는 다양한 방법을 제공합니다. 다음으로 구문 분석 서버 리포지토리에서 배포를 설정합니다.</p>


  <h2>Parse 서버 리포지토리 복제 및 Azure에 배포</h2>


  <p>Azure에서 Parse 서버를 쉽게 게시할 수 있도록 App Service 팀은 구문 분석 서버 예제 리포지토리를 포크하여 App Service에서 올바르게 실행되는 사용자 지정 구문 분석 서버를 만들었습니다. GitHub <a href="https://github.com/Azure/parse-server-example" target="_blank">Azure Parse 서버 샘플 리포지토리</a>를 계정에 포크합니다.</p>


  <p><img alt="Fork the Parse server example repo" border="0" height="259" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9c5049bf-6051-480a-bb21-2ec1180bba45.png" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="fork-the-parse-server-repo" width="610"></p>


  <p>이 포크를 백 엔드의 배포 원본으로 사용합니다. 새로 만든 백 엔드에 대한 설정 블레이드로 돌아가서 아래로 스크롤하여 <strong>연속 배포</strong> &gt; <strong>원본</strong> &gt; <strong>GitHub</strong> 선택한 다음 <strong>권한 부여</strong> &gt; 를 클릭하고 표시되는 GitHub 페이지에서 Azure 관리 포털에 대한 액세스 권한을 부여합니다(GitHub 암호를 제공해야 할 수도 있음). 그런 다음 <strong>확인을</strong> 클릭합니다.<strong></strong></p>


  <p><img alt="Set up GitHub continous deployment" border="0" height="363" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/9933ab44-044b-4d56-8693-87a1cd3edbb1.png" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="setup-github-deployment" width="610"></p>


  <p>포털이 GitHub 계정에 연결되었으므로 <strong>구문 분석 서버 예제</strong>의 포크를 프로젝트로 선택하고 <strong>마스터</strong> 분기를 선택한 다음 <strong>확인을</strong> 클릭합니다.</p>


  <p><img alt="Set deployment credentials" border="0" height="439" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a77ba5c0-9eeb-485c-9fc8-ca30f0d708ff.png" style="border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="set-deployment-credentials" width="480"></p>


  <p>이 시점에서 배포가 설정되고 구문 분석 서버 코드가 GitHub 프로젝트에서 가져와 Azure에 게시됩니다. 어떤 이유로 배포가 트리거되지 않는&rsquo; 경우 배포 블레이드에서 <b>동기화 단추를 클릭하여</b> 동기화를 수동으로 트리거할 수도 <b>있습니다</b> .</p>


  <h2>백 엔드 구성</h2>


  <p>구문 분석 서버에는 App Service의 앱 설정이라고 하는 환경 변수로 가장 잘 제공되는 몇 가지 정보가 필요합니다. 여기에는 MongoDB 연결 정보 및 앱 ID 및 마스터 키 값이 포함됩니다. 이 중요한 정보가 보안되지 않거나 공용 리포지토리에 게시될 수 있는 코드에 남아 있지 않으므로&rsquo; 앱 설정을 사용하면 더 나은 보안을 제공합니다.&nbsp; 새 앱 설정을 만들려면 설정 블레이드에서 <strong>애플리케이션 설정</strong> 클릭하고 <b>앱 설정</b> 섹션으로 아래로 스크롤하여 다음 설정에 대한 새 키/값 쌍을 만든 다음 <strong>저장</strong>을 클릭합니다.</p>


  <table border="1" cellpadding="2" cellspacing="0" width="508">
   <tbody>
    <tr>
     <td valign="top" width="200"><strong>Key</strong></td>
     <td valign="top" width="306"><strong>값</strong></td>
    </tr>
    <tr>
     <td valign="top" width="200">
     <p>DATABASE_URI</p>
     </td>
     <td valign="top" width="306">
     <p>MongoDB 연결 문자열</p>
     </td>
    </tr>
    <tr>
     <td valign="top" width="200">
     <p>APP_ID</p>
     </td>
     <td valign="top" width="306">
     <p>구문 분석 앱 ID</p>
     </td>
    </tr>
    <tr>
     <td valign="top" width="200">
     <p>MASTER_KEY</p>
     </td>
     <td valign="top" width="306">
     <p>구문 분석 마스터 키</p>
     </td>
    </tr>
   </tbody>
  </table>


  <p><img alt="Parse application settings in the portal" border="0" height="298" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/45b651df-5989-43b6-806d-02abfdd46a3e.png" style="border: 0px currentColor; border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="application-settings-parse" width="610"></p>


  <p>이 시점에서 REST 클라이언트를 사용하여 새 구문 분석 서버에 액세스할 수 있어야 합니다. 구문 분석 서버에 Facebook 앱 ID와 같은 다른 하드 코드된 값이 필요한 경우 앱 설정에도 추가해야 합니다.</p>


  <h2>Hello World 사용해 보기</h2>


  <p>Parse 서버 예제 프로젝트에는 다음과 같이 cURL을 &ldquo;사용하여 호출할 수 있는 <strong>hello라는 hello</strong> world&rdquo; 함수가 있습니다.</p>


  <pre class="prettyprint">

  $ curl -X POST \

  &gt;   -H &quot;X-Parse-Application-Id: dsXH3syuEuuIZvXi1niEtX49LLilneJK5oIBcLM3&quot; \

  &gt;   -H &quot;Content-Type: application/json&quot; \

  &gt;   -d &#39;{}&#39; \

  &gt;   <a href=""></a></pre>


  <p>대부분의 구문 분석 개발자에게 친숙한 호출이어야 합니다. 그러나 이번에는 서비스의 응답이 확실히 다릅니다.</p>


  <pre class="prettyprint">

  {&quot;result&quot;:&quot;Hello from Azure.&quot;}</pre>


  <p>이제 Parse 서버가 Azure&rsquo;에서 올바르게 실행되고 있는지 확인했으므로 배포에 클라우드 코드를 추가할 시간입니다.</p>


  <h2>구문 분석 클라우드 코드 추가</h2>


  <p>이제 Parse 서버 샘플 리포지토리의 포크를 사용하여 연속 배포를 구성했으므로 이 GitHub 리포지토리를 사용하여 배포에 구문 분석 클라우드 코드를 추가하는 것이&rsquo; 가장 쉽습니다.</p>


  <p>배포에 클라우드 코드를 추가하려면 Git 클라이언트 또는 GitBash와 같은 명령줄 도구를 사용하여 로컬 컴퓨터에서 구문 분석 서버 샘플 리포지토리의 포크를 복제합니다.</p>


  <p>로컬 구문 분석 설치에서 /Cloud 및 /Public 하위 폴더를 새 로컬 클론에 복사한 다음 GitHub 변경 내용을 추가, 커밋 및 원본으로 다시 푸시합니다. GitHub 푸시하면 배포가 다시 트리거되는 것을 볼 수 있습니다. 배포가 성공적으로 완료되면 클라우드 코드를 사용할 준비가 됩니다.</p>


  <p>이렇게 하려면 퍼블릭 GitHub 리포지토리에 클라우드 코드를 추가해야 합니다. 코드를 비공개로 유지하려면 <a href="https://help.github.com/articles/duplicating-a-repository/" target="_blank">이 리포지토리를 프라이빗 리포지토리로 복제</a> 해야 할&#39;, 아니면 먼저 <a href="https://azure.microsoft.com/documentation/articles/web-sites-deploy/" target="_blank">다른 배포 방법을</a> 사용하도록 전환할 수 있습니다.</p>


  <h2>클라이언트 앱에서 구문 분석 SDK 업데이트</h2>


  <p>새 구문 분석 서버 및 새 호스팅 환경에는 클라이언트 앱에서 사용하는 구문 분석 SDK의 업데이트가 필요합니다. <a href="https://parse.com/docs/server/guide#using-sdks" target="_blank">구문 분석 서버에서 구문 분석 SDK 사용의</a> 지침을 따라야 합니다.</p>


  <h2>푸시 알림은 어떻습니까?</h2>


  <p><a href="https://parse.com/docs/server/guide#migrating" target="_blank">구문 분석 서버 마이그레이션 가이드를</a> 자세히 읽으면 다음이 표시됩니다.</p>


  <blockquote>

  <p>구문 분석 서버는 푸시 알림 기능을 구현하지 않습니다. 다른 푸시 공급자로 마이그레이션하는 것이 좋습니다.</p>

  </blockquote>


  <p>당황하지 마십시오&rsquo;. Azure에는 모바일 앱인 <a href="https://azure.microsoft.com/en-us/documentation/articles/notification-hubs-overview/">Azure Notification Hubs</a>에 푸시 알림을 보내도록 특별히 설계된 확장성이 뛰어난 서비스가 있습니다. 구문 분석에서 푸시와 마찬가지로 Notification Hubs는 각 PNS(푸시 알림 서비스), APNS, GCM, WNS, 심지어 Kindle, Chrome 및 Baidu에 대한 인증 정보를 저장합니다. Notification Hubs Node.js 라이브러리를 사용하면 클라우드 코드 또는 거의 모든 다른 백 엔드 서비스에서 푸시 알림을 쉽게 보낼 수 있습니다. 가까운 장래에 Notification Hubs를 사용하여 구문 분석 서버에서 푸시 알림을 보내는 방법에 대한 지침을 제공합니다.</p>


  <h2>결론</h2>


  <p>Parse 서버의 Azure App Service 호스팅 환경에 익숙해지면 분석, 예약된 작업 및 Twillio 및 SendGrid와 같은 타사 서비스와의 통합과 같이 Parse 서버에서 누락된 Parse 호스팅의 일부 기능을 제공하는 다른 Azure 서비스를 조사하는 것이 좋습니다. App Service는 서버를 구문 분석하는 더 많은 기본 제공 인증 옵션도 제공합니다.</p>


  <p>Parse 서버를 호스트하기 위해 Azure를 사용해 볼 때 좋은 경험을 했으면 합니다. Parse 호스팅에서 앱의 새 백 엔드 홈으로 마이그레이션하는 데 행운을 빕니다.</p>


  <p>건배</p>


  <h5>글렌 게일리</h5>
