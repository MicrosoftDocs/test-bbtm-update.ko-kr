### YamlMime:Yaml
ms.openlocfilehash: 0e265e8a1b5963bcd1f93c4b3e3a41c3cfcdc364
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897249"
Slug: querying-remote-databases-in-azure-sql-db
Title: Azure SQL Database 데이터베이스 간 쿼리
Summary: 이 블로그는 Azure SQL Database 새로운 데이터베이스 간 쿼리 기능 및 탄력적 데이터베이스 쿼리에 대한 기타 개선 사항을 발표합니다.
Content: "<h4 style=\"background: rgb(238, 238, 238); padding: 5px 10px; border: 1px solid rgb(204, 204, 204); border-image: none;\">참고: <a href=\"https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-query-overview\">Azure SQL Database 탄력적 쿼리 개요(미리 보기)</a> 설명서에는 탄력적 데이터베이스 쿼리에 대한 최신 관련 정보가 있습니다.</h4>\n\n<p>Azure SQL Database <a href=\"https://azure.microsoft.com/en-us/documentation/articles/sql-database-elastic-query-overview/?wt.mc_id=WW_CE_DM_OO_BLOG_NONE\">탄력적 데이터베이스 쿼리</a>에 대한 몇 가지 중요한 개선 사항을 발표하게 되어 기쁩니다. 특히 탄력적 데이터베이스 쿼리는 이제 Azure SQL Database 데이터베이스 간 쿼리를 지원합니다. 이렇게 하면 원격 테이블에서 로컬 테이블로 선택하는 것과 같은 일반적인 데이터베이스 간 쿼리 작업을 수행할 수 있습니다.</p>\n\n<p><img alt=\"Cross-database queries in Azure SQL Database\" border=\"0\" height=\"436\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1f82097d-56e9-46c7-8c6a-5d557d8753f5.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Azure SQL Database 데이터베이스 간 쿼리\" width=\"610\"></p>\n\n<p>또한 여러 데이터베이스가 서로 다른 테이블에 액세스해야 하는 다음 그림과 같이 더 풍부한 원격 데이터베이스 쿼리 토폴로지도 사용할 수 있습니다.</p>\n\n<p><img alt=\"Querying remote databases in Azure SQL Database\" border=\"0\" height=\"436\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/f598f588-f8ae-4e89-b1c3-21e2e025907b.png\" style=\"border-width: 0px; padding-top: 0px; padding-right: 0px; padding-left: 0px; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"Azure SQL Database 원격 데이터베이스 쿼리\" width=\"610\"></p>\n\n<p>이 새로운 데이터베이스 간 쿼리 기능은 다음 그림에 설명된 수평 분할(분할)&nbsp;에 대한 탄력적 데이터베이스 쿼리의 기존 지원을 보완합니다.</p>\n\n<p><img alt=\"HorizontalPartitioning\" border=\"0\" height=\"248\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/fed8945e-4213-40c3-a514-4a608d4c67f4.png\" style=\"border-width: 0px; margin: 0px auto; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: none; display: block; background-image: none;\" title=\"HorizontalPartitioning\" width=\"610\"><br>\nSQL Server 온-프레미스와 달리 Azure SQL Database 탄력적 데이터베이스 쿼리는 이제 하나의 공통 개념과 동일한 노출 영역 하에서 수직 분할과 수평 분할을 모두 통합합니다.</p>\n\n<p>탄력적 데이터베이스 쿼리 미리 보기의 최신 새로 고침의 향상된 기능은 다음과 같습니다.</p>\n\n<ul>\n <li>분할을 수행하지 않는&nbsp; 일반적인 데이터베이스 간 쿼리 시나리오에 대한 지원이 향상되었습니다.</li>\n <li>탄력적 쿼리는 이제 표준 및 Premium 성능 계층 모두에서 사용할 수 있습니다.</li>\n <li>이제 유연한 DDL을 사용하면 스키마 및 테이블 이름 별칭이 원격 데이터베이스 테이블을 나타낼 수 있습니다.</li>\n <li>원격 테이블을 참조할 때 T-SQL 매개 변수를 포함하는 쿼리의 성능이 크게 향상되었습니다.</li>\n <li>원격 데이터베이스에서 많은 수의 행을 검색하는 쿼리의 성능 향상</li>\n <li>sp_execute_fanout 프로시저의 매개 변수 지원입니다.</li>\n</ul>\n\n<p>이러한 향상된 사항에 대한 자세한 내용은 다음 단락을 참조하세요.</p>\n\n<h1>원격 데이터베이스 쿼리</h1>\n\n<p>탄력적 데이터베이스 쿼리는 이제 외부 데이터 원본 및 외부 테이블에 대한 DDL의 간단한 확장을 통해 원격 Azure SQL 데이터베이스의 테이블에 대한 액세스를 제공합니다. 예를 들어 데이터 계층의 모든 데이터베이스 간에 공유되는 참조 데이터를 저장하는 원격 데이터베이스에 대한 액세스를 제공하는 외부 데이터 원본을 정의할 수 있습니다. INSERT INTO를 사용하여 원격 데이터베이스에서 다른 데이터베이스로 테이블 내용을 쉽게 복사할 수도 있습니다. SELECT 문입니다.</p>\n\n<p>단일 원격 데이터베이스를 참조하는 외부 데이터 원본은 다음 DDL 문의 TYPE 절에서 RDBMS 옵션을 사용하여 식별됩니다.</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL DATA SOURCE RemoteReferenceData\nWITH\n(\n TYPE=RDBMS,\n LOCATION=&#39;myserver.database.windows.net&#39;,\n DATABASE_NAME=&#39;ReferenceData&#39;,\n CREDENTIAL= SqlUser\n);\n</pre>\n\n<p>이제 이 외부 데이터 원본에 따라 ReferenceData 데이터베이스에 있는 우편 번호 테이블에 대한 원격 액세스를 제공하는 외부 테이블을 정의할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL TABLE [dbo].[zipcode](\n [zc_id] int NOT NULL,\n [zc_cityname] nvarchar(256) NULL,\n [zc_zipcode] nvarchar(20) NOT NULL,\n [zc_country] nvarchar(5) NOT NULL\n)\nWITH\n(\n DATA_SOURCE = RemoteReferenceData\n);\n</pre>\n\n<p>이 간단한 일회성 설정 후에 쿼리는 이제 외부 데이터 원본 및 외부 테이블이 정의된 모든 Azure SQL Database 원격 우편 번호 테이블에 액세스할 수 있습니다.</p>\n\n<h1>더 많은 성능 계층에서 가용성</h1>\n\n<p>탄력적 데이터베이스 쿼리는 이제 Azure SQL Database 표준 성능 계층에서도 사용할 수 있습니다. 이렇게 하면 Azure SQL Database 데이터베이스 간 쿼리 및 분할 시나리오에 대한 입력 비용이 크게 줄어듭니다. 표준 계층에서 더 작은 DTU 제한으로 인해 첫 번째 원격 데이터베이스 쿼리를 실행할 때 탄력적 데이터베이스 쿼리를 초기화하는 데 최대 1분이 걸릴 수 있습니다. 탄력적 데이터베이스 쿼리의 초기화 대기 시간은 현재 작업 중인 영역입니다. 이 경험은 앞으로 몇 달 동안 개선될 것입니다.</p>\n\n<h1>보다 유연한 이름 지정</h1>\n\n<p>몇 가지 중요한 시나리오에서는 외부 테이블의 이름을 원격 데이터베이스의 원래 테이블과 다르게 지정하는 기능이 필요합니다. 로컬 테이블이 원격 테이블과 동일한 이름으로 이미 존재하는 시나리오가 그 예입니다. 이러한 모든 시나리오에는 원격 테이블 이름에 별칭을 사용하는 기능이 필요합니다.</p>\n\n<p>예를 들어 외부 테이블 정의가 수평 분할(분할된) 데이터 계층에서 DMV(동적 관리 뷰)를 집계하려는 시나리오를 고려합니다. 이전에는 원격 데이터베이스의 뷰를 사용하여 DMV의 이름을 효과적으로 변경하고 외부 테이블 정의에서 보기를 참조하는 등 복잡한 해결 방법이 필요했습니다. DMV 이름 또는 카탈로그 이름이 이미 로컬에 존재하고 외부 테이블 이름으로 직접 사용할 수 없으므로 이 항목이 필요했습니다.</p>\n\n<p>이제 외부 테이블 이름으로 모든 이름을 사용하고 외부 테이블 DDL의 새 OBJECT_SCHEMA 및 OBJECT_NAME 절을 사용하여 기본 원격 테이블을 식별할 수 있습니다. 이렇게 하면 다음 예제와 같이 확장된 데이터 계층의 DMV 또는 카탈로그 뷰에서 쉽게 쿼리할 수 있습니다. 다음 DDL(데이터 정의 언어)은 외부 데이터 원본 및 외부 테이블의 일회성 설정을 수행합니다. 외부 테이블 정의에서 OBJECT_SCHEMA 및 OBJECT_NAME 절을 사용합니다.</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL DATA SOURCE MyExtSrc\nWITH\n(\n TYPE=SHARD_MAP_MANAGER,\n LOCATION=&#39;myserver.database.windows.net&#39;,\n DATABASE_NAME=&#39;ShardMapDatabase&#39;,\n CREDENTIAL= SMMUser,\n SHARD_MAP_NAME=&#39;ShardMap&#39;\n);\n</pre>\n\n<p>&nbsp;</p>\n\n<pre class=\"prettyprint\">\nCREATE EXTERNAL TABLE [dbo].[all_dm_exec_requests](\n [session_id] smallint NOT NULL,\n [request_id] int NOT NULL,\n [start_time] datetime NOT NULL, \n [status] nvarchar(30) NOT NULL,\n [command] nvarchar(32) NOT NULL,\n [sql_handle] varbinary(64),\n [statement_start_offset] int,\n [statement_end_offset] int,\n [cpu_time] int NOT NULL\n)\nWITH\n(\n DATA_SOURCE = MyExtSrc,\n SCHEMA_NAME = &#39;sys&#39;,\n OBJECT_NAME = &#39;dm_exec_requests&#39;,\n DISTRIBUTION=ROUND_ROBIN\n);\n</pre>\n\n<p>이제 다음과 같은 간단한 탄력적 데이터베이스 쿼리를 사용하여 전체 데이터 계층에서 가장 비용이 많이 드는 요청을 검색할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\nSELECT TOP 10 \n [request_id],\n [start_time]\n [status],\n [command]\nFROM all_dm_exec_requests\nORDER BY [cpu_time] DESC\n</pre>\n\n<h1>sp_execute_fanout 대한 새 서명</h1>\n\n<p>탄력적 데이터베이스 쿼리는 원격 데이터베이스에서 저장 프로시저 및 함수를 호출하는 저장 프로시저 sp_execute_fanout 제공합니다. Azure SQL Database 대한 최근의 개선 사항은 이제 sp_execute_fanout 서명을 sp_executesql 친숙한 서명과 일치합니다. 이렇게 하면 일반 SQL 매개 변수를 sp_execute_fanout 호출에 전달할 수 있으며 다음 주 초에 사용할 수 있습니다.</p>\n\n<h1>성능 향상</h1>\n\n<p>이전에는 탄력적 데이터베이스 쿼리가 매개 변수가 있는 작업을 원격 데이터베이스에 푸시할 수 없었습니다. 따라서 이러한 작업을 평가하기 위해 큰 행 집합을 불필요하게 로컬로 가져와야 하는 경우가 있습니다. 최근 개선된 기능으로 매개 변수가 있는 작업을 원격 데이터베이스로 푸시하고 원격으로 평가할 수 있습니다. 외부 테이블 및 다음과 같은 로컬 테이블에 대한 쿼리의 경우 이제 원격 데이터베이스의 WHERE 절에서 선택적 필터를 평가하여 수백만 개의 행을 전송하지 않도록 방지할 수 있습니다.</p>\n\n<pre class=\"prettyprint\">\nDECLARE @low int\nDECLARE @high int\nSET @low = 100\nSET @high = 200\n\nSELECT c.CustomerId, c.Name, count(OrderId) \nFROM remote_customers c\nJOIN local_orders o\nON c.CustomerId = o.CustomerId \nWHERE c.CustomerId &gt; @low and c.CustomerId &lt; @high\nGROUP BY c.CustomerId, c.Name\n</pre>\n\n<p>위의 쿼리에 대한 쿼리 계획을 빠르게 살펴보면 WHERE 절의 고객 ID에 대한 범위 조건자가 원격 쿼리 연산자에 성공적으로 연결되었는지 확인합니다.</p>\n\n<p><img alt=\"Improved performance for parameterized remote operations\" border=\"0\" height=\"269\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2031353a-5130-4eb2-82c0-6477802ad9ac.png\" style=\"border-width: 0px; margin: 0px auto; padding-top: 0px; padding-right: 0px; padding-left: 0px; float: none; display: block; background-image: none;\" title=\"매개 변수가 있는 원격 작업에 대한 성능 향상\" width=\"610\"></p>\n\n<p>마지막으로 탄력적 데이터베이스 쿼리를 사용하여 많은 수의 작은 행을 보다 효율적으로 전송했습니다. 테스트는 100,000개 이상의 행을 전송할 때 외부 테이블에 대한 쿼리 성능이 5개 이상 향상됨을 보여 줍니다.</p>\n\n<p>위에서 설명한 모든 개선 사항에 대해 자세히 알아보려면 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/sql-database-elastic-query-overview/?wt.mc_id=WW_CE_DM_OO_BLOG_NONE\">탄력적 데이터베이스 쿼리</a> 개요를 참조하세요.</p>"
