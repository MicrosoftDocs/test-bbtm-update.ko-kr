### YamlMime:Yaml
ms.openlocfilehash: ddb2e771402a12e942108b5109d64e8a0f966eb5
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139898923"
Slug: inside-azure-search-chaos-engineering
Title: 'Azure Search 내부: Chaos Engineering'
Summary: '시스템이 확장됨에 따라 임의 및 예기치 않은 방법으로 노드가 비정상적으로 실패하고, 네트워크에서 갑작스런 파티션을 경험하고, 언제든지 메시지가 삭제될 것으로 예상합니다. Azure Search는 비정상 상황 엔지니어링을 사용하여 이 문제를 해결합니다.  '
Content: >-
  클라우드 컴퓨팅의 핵심은 실패가 불가피하다는 것입니다.시스템이 확장됨에 따라 임의 및 예기치 않은 방법으로 노드가 비정상적으로 실패하고, 네트워크에서 갑작스런 파티션을 경험하고, 언제든지 메시지가 삭제될 것으로 예상합니다.


  우리는 이 진리와 싸우기보다는 그것을 받아들입니다.오류를 계획하고 시스템을 내결함성, 복원력 및 자체 안정화로 설계합니다.그러나 설계 및 빌드를 마치면 아름답고 내결함성이 있는 시스템이 실제로 오류에 대응하는지 어떻게 확인할 수 있을까요?


  기능 테스트는 너무 많은 작업을 수행할 수 있습니다.분산 시스템은 움직이는 부품의 복잡한 에코시스템입니다.각 구성 요소에는 오류가 발생하며, 그 이상에서는 다른 시스템 구성 요소와의 상호 작용에도 고유한 오류 모드가 있습니다.우리는 앉아서 이러한 구성 요소가 상상된 실패에 대응하는 방법에 대해 우리가 좋아하는 모든 것을 안락의자 이론화 할 수 있지만 가능한 모든 실패 조합을 찾는 것은 불가능합니다.시스템에서 발생할 수 있는 모든 오류 모드를 철저히 고려하더라도 해당 동작을 변경할 때마다 이러한 방식으로 시스템 응답을 다시 확인하는 것은 지속 가능하거나 실용적이지 않습니다.


  &nbsp;

  <h2>Chaos Engineering</h2>

  <a href="https://azure.microsoft.com/en-us/services/search/">Azure Search</a> 는 비정상 상황 엔지니어링을 사용하여 이 문제를 해결합니다.최근 훌륭한 블로그 게시물에서 Netflix가 작성한 바와 같이, 카오스 엔지니어링은 분산 시스템에 제어된 자동화된 오류 주입을 가능하게 하는 인프라를 구축하는 관행입니다.이를 위해 넷플릭스는 고객 서비스에 실패를 주입하는 도구 컬렉션("원숭이"라고 함)을 통해 넷플릭스 시미안 군대를 만들었습니다.


  넷플릭스 시미안 군대의 첫 번째 멤버인 카오스 원숭이에서 영감을 받아, 우리는 우리 자신의 "검색 카오스 원숭이"를 만들고 테스트 환경에 대한 혼란을 과시하기 위해 느슨하게 설정했습니다.

  환경에는 토폴로지 및 상태를 지속적으로 임의로 변경하는 검색 서비스가 포함되어 있습니다.서비스 호출은 이 서비스가 완전히 작동하는지 확인하기 위해 정기적으로 이 서비스에 대해 수행됩니다.


  검색 카오스 원숭이가 플레이할 수 있도록 이 대상 환경을 설정하는 것만으로도 프로비전 및 크기 조정 워크플로와 관련된 문제를 해결하는 데 매우 도움이 되었습니다.검색 카오스 원숭이가 휴면 상태일 때 테스트 서비스가 원활하게 작동할 것으로 기대합니다.따라서 발생하는 모든 오류는 기존 워크플로의 버그 또는 경고 시스템의 가양성으로 인해 발생하는 것으로 간주할 수 있습니다.우리는 그들이 생산으로 탈출 할 수있는 기회를 겪기 전에이 방법으로 몇 가지 버그를 잡았다.


  <img style="background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; margin-right: auto; border: 0px;" title="Azure Search 내부: Chaos Engineering" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/chaos-monkey-2.png" alt="Inside Azure Search: Chaos Engineering" width="610" height="374" border="0" />

  <h2></h2>

  <h2>비정상 상황 수량화</h2>

  테스트 서비스가 안정화 된 후, 우리는 검색 카오스 원숭이를 해방하고 재미를 파괴의 몇 가지 도구를 주었다.지속적으로 실행되며 테스트 환경에서 실행하기 위해 정기적으로 작업을 임의로 선택합니다.

  원숭이가 선택할 수있는 가능한 작업의 세트는 우리가 우리의 테스트 환경에서 원인이라고 말한 혼란의 수준에 따라 달라집니다.


  <strong>낮은 혼돈 </strong>은 시스템이 서비스 가용성을 최소화하거나 중단 없이 정상적으로 복구할 수 있는 오류를 의미합니다.따라서 검색 카오스 원숭이가 낮은 비정상 상황 작업만 실행하도록 설정되어 있지만 테스트 서비스에서 발생한 경고는 버그로 간주됩니다.


  <strong>중간 규모의 비정상 </strong>오류도 정상적으로 복구할 수 있지만 서비스 성능 또는 가용성이 저하되어 호출 시 엔지니어에게 낮은 우선 순위 경고가 발생할 수 있습니다.


  <strong>높은 비정상 상황 </strong>오류는 더 치명적이며 서비스 가용성을 방해합니다.이로 인해 우선 순위가 높은 경고가 대기 중인 엔지니어에게 전송되며 종종 수정을 위해 수동 개입이 필요합니다.


  고객 데이터의 무결성을 유지하면서 시스템이 정상적인 방식으로 실패할 수 있도록 하는 데는 높은 혼란 작업이 중요합니다.중간 규모의 비정상 상황 작업과 함께 경고가 예상대로 발생하는지 확인하는 부정 테스트로도 작동하므로 엔지니어가 문제에 대응할 수 있습니다.


  또한 검색 카오스 원숭이를 수동으로 호출하여 주문형으로 모든 작업을 실행할 수 있습니다.


  &nbsp;

  <h2>예외에서 예상으로 오류 다운그레이드</h2>

  이러한 수준의 혼란은 오류를 알려진 예상 오류로 인프라에 통합하기 위한 체계적이고 반복적인 경로를 제공합니다.


  시스템에서 발생하거나 시스템에 추가하는 오류에는 시스템이 얼마나 잘 반응하는지 측정할 수 있는 수준의 혼란이 할당됩니다.오류는 시스템을 처리하도록 학습하려는 이론적 오류, 기존 비정상 상황 작업에서 발견된 버그 또는 실제 검색 서비스에서 경험한 오류에 대한 재현일 수 있습니다.어느 쪽이든, 검색 카오스 원숭이에 대한 단일 호출로 쉽게 트리거될 수 있도록 먼저 새 오류를 자동화하는 것이 좋습니다.


  위에서 설명한 낮음, 중간 및 높은 수준 외에도 오류는 "극단적인" 수준의 혼란을 일으키는 것으로 분류될 수 있습니다.


  <strong>극단적인 비정상</strong> 상황 작업은 서비스의 비정상적인 저하를 유발하거나, 데이터 손실을 발생하거나, 경고를 발생하지 않고 자동으로 실패하는 오류입니다.극단적인 비정상 상황 오류를 실행한 후 시스템이 어떤 상태에 있게 될지 예측할 수 없으므로, 이 지정을 사용하는 작업은 높은 비정상 상황으로 다운그레이드하기 위해 수정 사항이 추가될 때까지 검색 카오스 원숭이에게 지속적으로 실행하도록 지정되지 않습니다.


  혼돈 수준을 가능한 한 낮게 유도하는 것은 시스템에 추가하는 모든 오류에 대한 목표입니다.


  시스템을 바닥에 놓는 극단적인 혼란 오류인 경우 적어도 인프라가 서비스 무결성 및 고객 데이터를 보존하여 높은 혼돈의 실패로 다운그레이드되도록 하는 것이 필수적입니다.경우에 따라 실제 수정 사항을 찾을 수 있을 때까지 서비스 가용성을 희생합니다.


  사람이 완화해야 하는 높은 비정상 상황 오류인 경우 오류가 발생하는 즉시 인프라를 자동으로 완화하여 우선 순위가 높은 경고가 있는 엔지니어에게 연락할 필요가 없도록 하려고 합니다.


  우리는 검색 카오스 원숭이가 우리의 시스템을 중단하고 고객 서비스가 영향을되기 전에 버그를 발견 할 때마다 그것을 좋아하지만, 원숭이가 높고 극단적 인 수준의 혼돈 실패를 발견 할 때 우리는 특히 좋아합니다.고객의 서비스가 중단되었다는 한밤중 전화 통화를 받은 후 눈이 번쩍 뜨이는 공황 상태에 빠지는 것보다 출시되기 전에 버그를 해결하는 것이 훨씬 더 즐겁습니다.


  긴급하지 않은 경우 중간 혼돈 오류도 환영합니다.시스템이 이미 복구할 수 있는 경우 엔지니어에게 서비스 가용성이 영향을 받음을 알리기 전에 조치를 취할 수 있도록 조기 검색을 개선할 수 있습니다. 호출 시 엔지니어가 처리해야 하는 소음이 적을수록 실제 문제에 더 효과적으로 대응할 수 있습니다.


  자동화는 혼돈 수준을 낮추는 이 프로세스의 핵심입니다.최소한의 노력으로 특정 실패를 트리거할 수 있게 되므로 비정상 상황 수준 감소에 대한 테스트 기반 개발 접근 방식을 느슨하게 따를 수 있습니다.그리고 자동 오류가 검색 Chaos Monkey에 제공되면 향후 시스템 변경 내용이 오류를 처리하는 기능에 영향을 미치지 않도록 회귀 테스트로 작동할 수 있습니다.


  <img style="background-image: none; float: none; padding-top: 0px; padding-left: 0px; margin-left: auto; display: block; padding-right: 0px; margin-right: auto; border: 0px;" title="Azure Search 내부: Chaos Engineering" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/chaos-monkey-3_480.png" alt="Inside Azure Search: Chaos Engineering" width="285" height="360" border="0" />

  <h2></h2>

  <h2>작동 중인 Chaos Engineering</h2>

  이 작동 방식을 설명하기 위해 이 모델을 사용하여 극단적인 혼란에서 낮은 혼돈으로 인해 발생한 오류의 최근 예는 다음과 같습니다.


  <strong>극단적 인 혼란 : 초기 발견.  </strong> 서비스에서 예기치 않은 우선 순위가 낮은 경고를 내보냅니다.추가 조사 결과, 하나 이상의 필수 백그라운드 작업이 실행되고 있지 않음을 나타내는 다운스트림 오류가 발생했습니다.초기 분류는 이 오류를 극단적인 혼란에 묶어 클러스터를 알 수 없는 상태로 두고 올바르게 경고하지 않았습니다.


  <strong>높은 혼란 : 완화.  </strong> 이 시점에서 근본 원인을 인식하지 못해 오류를 자동화할 수 없었습니다.대신, 우리는 실패를 높은 혼란 수준으로 끌어 낮추기 위해 노력했습니다.작동하지만 복제본이 없는 서비스의 가용성에 영향을 주는 수동 수정 사항을 확인했습니다.호출 중인 엔지니어가 오류가 다시 발생할 때마다 이 수동 수정을 수행할 수 있도록 경고를 올바른 수준으로 조정했습니다.오류가 해결되기 전에 우선 순위가 높은 경고에 의해 두 명의 불운한 엔지니어가 깨어났습니다.


  <strong>자동화.  </strong> 고객 서비스가 안전하다는 것을 확인한 후에는 오류를 재현하는 데 주력했습니다.근본 원인은 관련 없는 구성 요소에 영향을 주는 외부 호출을 수행할 때 예기치 않은 중단이 되었습니다.이를 찾으려면 호출을 수행하는 구성 요소에서 인공 대기 시간을 발생시키는 오류 주입을 추가해야 했습니다.


  <strong>낮은 혼돈: 수정 및 확인.  </strong> 근본 원인을 확인한 후에는 수정이 간단했습니다.중단이 해당 구성 요소에만 영향을 주도록 시스템의 나머지 부분으로부터의 호출 대기 시간이 발생하는 구성 요소를 분리했습니다.이 구성 요소에 일부 중복성이 도입되어 작업이 더 이상 대기 시간 또는 격리된 노점의 영향을 받지 않고 장시간 반복된 중단만(훨씬 드물게 발생)했습니다.


  자동화된 비정상 상황 작업을 사용하여 원래 오류가 문제 없이 원활하게 처리되었음을 증명할 수 있었습니다.잠재적으로 가용성에 영향을 미치는 수정을 수행하기 위해 호출 엔지니어를 깨우던 오류는 이제 시스템이 노이즈 없이 복구할 수 있는 낮은 비정상 상황 오류로 다운그레이드될 수 있습니다.


  이 시점에서 자동화된 오류는 검색 카오스 원숭이에게 전달되어 낮은 비정상 상황 작업으로 정기적으로 실행하고 한 때 심각한 오류를 처리하는 시스템의 능력을 지속적으로 확인할 수 있습니다.


  &nbsp;

  <h2>Chaos Engineering and the Cloud</h2>

  <a href="https://azure.microsoft.com/en-us/services/search/">Azure Search</a>에서 비정상 상황 엔지니어링은 안정적이고 내결함성이 있는 클라우드 서비스를 개발할 때 따라야 할 매우 유용한 모델임이 입증되었습니다.우리의 검색 카오스 원숭이는 예외적 인 오류를 찾고 계획, 자동화 된 솔루션으로 낮은 영향 오류로 해결하도록 유도하기위한 결정적 프레임 워크를 제공하는 데 중요한 역할을하고있다.
