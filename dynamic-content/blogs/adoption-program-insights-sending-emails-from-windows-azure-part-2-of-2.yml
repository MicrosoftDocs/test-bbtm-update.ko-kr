### YamlMime:Yaml
ms.openlocfilehash: 8dec081e7595203fdaf7d2279642e766d6d26fb2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902362"
Slug: adoption-program-insights-sending-emails-from-windows-azure-part-2-of-2
Title: '채택 프로그램 Insights: Windows Azure에서 이메일 보내기(2부)'
Summary: 채택 프로그램 Insights 시리즈는 고객이 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다.
Content: "<p><i>채택 프로그램 Insights 시리즈는 고객이 Windows Azure 플랫폼에 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명</i> <i></i> <i>합니다. 이 게시물은 노먼 세케이라, 패트릭 버틀러 몬테데, 톰 홀랜더에 의해.</i></p>  <p>Windows <a target=\"_blank\" href=\"https://azure.microsoft.com/\">Azure</a> 애플리케이션에서 전자 메일을 보내는 옵션을 설명하는 두 부분으로 구성된 시리즈의 두 번째 부분입니다. 1부에서는 사용자 지정 온-프레미스 이메일 전달자 서비스를 사용하여 Windows Azure 애플리케이션을 대신하여 메일을 보내는 패턴을 설명했습니다. 이 게시물에서는 이메일 서버의 웹 서비스 API를 사용하여 Windows Azure 애플리케이션에서 직접 메시지를 수락하는 방법을 설명합니다.</p>  <h2>패턴 2: 이메일 서버의 웹 서비스 API 사용</h2>  <p>이 패턴은 Exchange Server 2007 또는 Exchange Server 2010의 웹 서비스 기능을 활용하여 Windows Azure 플랫폼에서 직접 전자 메일을 보냅니다. 이 방법은 웹 서비스 인터페이스를 제공하는 다른 전자 메일 서버도 사용할 수 있지만 이 게시물은 Microsoft Exchange Server 구현에 대해서만 설명합니다.</p>  <p>웹 역할과 작업자 역할 모두 HTTP 또는 HTTPS를 통해 인터넷 리소스에 아웃바운드 연결을 만들 수 있으므로 웹/작업자 역할이 Exchange Server 호스트되는 웹 서비스와 통신할 수 있습니다. Exchange Server 2007 및 Exchange Server 2010 모두 자동화를 위한 인터페이스로 EWS(Exchange Web Services)를 지원합니다. Exchange Web Services는 전자 메일 보내기, 첨부 파일 추가, 사용자의 사서함 확인, 대리인 액세스 구성 등과 같은 가장 일반적인 메일 자동화 관련 시나리오를 지원하는 풍부한 기능 집합을 제공합니다. EWS에서 지원하는 기능의 전체 목록은 <a target=\"_blank\" href=\"https://msdn.microsoft.com/en-us/library/dd877045.aspx\">이 MSDN 문서를</a> 참조하세요.</p>  <p>조직에서 온-프레미스 이메일 서버 대신 Exchange Online 사용하도록 선택한 경우 Exchange Online Standard 및 Exchange Online Dedicated 제품 EWS 지원을 모두 제공하므로 코드 변경 없이 Windows Azure에서 동일한 EWS 기반 접근 방식을 사용할 수 있습니다. Exchange Online Microsoft에서 제공하는 메시징 및 공동 작업 솔루션 집합인 BPOS(Microsoft Business Productivity Online Suite)의 일부입니다.</p>  <p>다음 다이어그램에서는 Windows Azure 애플리케이션이 EWS를 활용하여 대신 이메일을 보내는 방법을 보여 줍니다.</p>  <p><a target=\"_blank\" href=\"https://msdn.microsoft.com/en-us/library/dd877045.aspx\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7802.EmailPt2Graphic1.png\" border=\"0\"></a></p>  <h3>샘플 코드</h3>  <p><a target=\"_blank\" href=\"https://www.microsoft.com/downloads/details.aspx?displaylang=en&amp;FamilyID=c3342fb3-fbcc-4127-becf-872c746840e1\">EWS 관리형 API</a>는 Exchange Web Services와 상호 작용하기 위한 강력한 형식의 .NET 인터페이스를 제공합니다. Exchange Web Services 관리형 API가 설치되면 첫 번째 단계는 Visual Studio 기존 Windows Azure 프로젝트의 Microsoft.Exchange.WebServices.dll 대한 참조를 추가하는 것입니다.</p>  <p><a target=\"_blank\" href=\"https://www.microsoft.com/downloads/en/details.aspx?displaylang=en&amp;FamilyID=c3342fb3-fbcc-4127-becf-872c746840e1\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4152.EmailPt2Graphic2.png\" border=\"0\"></a></p>  <h3>테스트 서버에 대해 EWS 관리 API 사용</h3>  <p>테스트 서버는 Microsoft .NET Framework 신뢰할 수 없는 자체 서명된 인증서를 사용하여 배포됩니다. 테스트 서버에 대해 EWS 관리 API를 사용하는 경우 다음 오류가 발생할 수 있습니다.</p>  <p><a target=\"_blank\" href=\"https://www.microsoft.com/downloads/en/details.aspx?displaylang=en&amp;FamilyID=c3342fb3-fbcc-4127-becf-872c746840e1\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0361.EmailPt2Graphic3.png\" border=\"0\"></a></p>  <p>이 문제를 해결하려면 테스트 시나리오에서 인증서 유효성 검사를 사용하지 않도록 설정하는 코드를 작성할 수 있습니다. 이 코드가 프로덕션 시나리오에 사용되지 않도록 #if DEBUG 또는 유사한 기술을 사용해야 합니다.  </p>  <p>System.Net.Security 사용<br>  System.Security.Cryptography.X509Certificates 사용</p>  <p>인증서 콜백을 연결합니다.<br>  System.Net.ServicePointManager.ServerCertificateValidationCallback =<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delegate(<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 개체 obj,<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Certificate 인증서,<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X509Chain 체인,<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SslPolicyErrors 오류)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 인증서의 유효성을 검사하고 true 또는 false를 적절하게 반환합니다.<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 그렇지 않기 때문에 항상 true를 반환하는 것은 좋지 않습니다.<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 모든 인증서를 신뢰할 수 있어야 합니다.<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>  <h3>ExchangeService 개체의 인스턴스 만들기</h3>  <p>다음으로 <b>ExchangeService</b><b> </b>인스턴스를 만들고 구성하여 서버에 연결할 차례입니다. <b>자동 검색</b>을 사용하여 전자 메일 주소를 기반으로 서비스의 URL을 확인합니다.</p>  <p>ExchangeService 서비스 = 새 ExchangeService(ExchangeVersion.Exchange2007_SP1);</p>  <p>Azure 구성에서 자격 증명 설정 검색</p>  <p>string userName = RoleEnvironment.GetConfigurationSettingValue(\"EWSUserName\");</p>  <p>string password = RoleEnvironment.GetConfigurationSettingValue(\"EWSPassword\");</p>  <p>string domain = RoleEnvironment.GetConfigurationSettingValue(\"EWSDomain\");</p>  <p>서비스. 자격 증명 = 새 WebCredentials(userName, password, domain);<b></b></p>  <p>EWS URL을 알 수 없는 경우 EWS 관리 API를 통해 EWS URL을 자동으로 파생할 수도 있습니다. </p>  <p>Exchange 서버에서 호스트되는 사서함의 전자 메일 주소 사용</p>  <p>string emailAddress = RoleEnvironment.GetConfigurationSettingValue(\"emailAddress\");</p>  <p>서비스. AutodiscoverUrl(emailAddress); </p>  <h3>전자 메일 보내기</h3>  <p><b>ExchangeService</b> 개체의 인스턴스가 만들어지고 초기화되면 메일을 보내거나 받는 데 사용할 수 있습니다.</p>  <p>EmailMessage 메시지 = 새 EmailMessage(서비스);</p>  <p>메시지. ToRecipients.Add(\"someone@server.com\");</p>  <p>메시지. From = new EmailAddress(\"someone@azureapp.com\");</p>  <p>메시지. 제목 = \"Windows Azure에서 메일 보내기\";</p>  <p>메시지. Body = new MessageBody(BodyType.HTML, \"Windows Azure 환경에서 보낸 메일의 본문입니다.\");</p>  <p>첨부 파일을 보내기 위한 코드입니다.</p>  <p>AddFileAttachment 메서드는 '표시 이름' 및 '바이트 배열'을 매개 변수로 사용합니다.</p>  <p>메시지. Attachments.AddFileAttachment(\"Attachment1\", attachment1);</p>  <p>다음 속성 'ContentId'는 메일 본문에서 첨부 파일을 참조해야 하는 경우에 사용됩니다.</p>  <p>메시지. 첨부 파일[0]. ContentId = \"Attachment1\";</p>  <p>다음 메서드는 메일을 보내고 복사본을 '보낸 편지함' 폴더에 저장합니다.</p>  <p>메시지. SendAndSaveCopy();</p>  <h3>아키텍처 고려 사항<br></h3>  <p>모든 솔루션에 대한 아키텍처 의미를 이해하는 것이 중요합니다. 이메일 서버 웹 서비스 API 접근 방식에 대한 몇 가지 고려 사항은 다음과 같습니다.</p>  <ul class=\"unIndentedList\">  <li>  <b>비용:</b> Windows Azure에서 EWS로의 아웃바운드 데이터 흐름은 전체 솔루션에 추가 비용이 발생합니다. 전체 비용 영향은 개별 솔루션의 이메일 볼륨 및 대역폭 사용량에 따라 달라지며, 이 패턴을 구현하기 전에 주의 깊게 연구해야 합니다.</li>  <li>  <b>성능: </b> 대용량 전자 메일 첨부 파일은 EWS(온-프레미스 또는 온라인)를 사용하여 Exchange 서버에 직렬화 및 다운로드해야 하므로 성능에 영향을 줄 수 있습니다. 또한 신중하게 고려해야 합니다.</li>  </ul>  <h3>요약</h3>  <p>Windows Azure에는 자체 네이티브 SMTP 서버가 포함되지 않지만 이메일을 보내는 애플리케이션을 빌드하는 몇 가지 옵션이 있습니다. 온-프레미스 전자 메일 서버가 있는 경우 Windows Azure Storage를 사용하여 사용자 지정 Email Forwarder Service로 메시지를 보낸 다음 전자 메일 서버로 전달할 수 있습니다. 전자 메일 서버에서 웹 서비스 API를 노출하는 경우 사용자 지정 서비스를 사용하는 대신 직접 통신하는 데 사용할 수 있습니다. SMTP 서버(상용 서비스 포함)에 직접 액세스할 수 있는 경우 이를 사용하도록 Windows Azure 앱을 구성할 수 있습니다.</p>  <p>마지막 설명 - 사용하는 방법 중 어느 것을 사용하든, 애플리케이션에서 매우 많은 수의 전자 메일(예: 사용자 등록)을 보내야 하는 경우 전자 메일 서버가 전자 메일 볼륨을 제한하도록 구성되어 있거나 받는 사람의 서버가 스팸으로 메시지를 거부할 가능성이 있는 경우 문제가 발생할 수 있습니다. 이 경우 메시지가 최종 대상으로 지정되도록 전자 메일 서버를 신중하게 선택하거나 구성해야 합니다. </p>  <p><iframe src=\"https://www.facebook.com/plugins/like.php?href=;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50\" style=\"overflow: hidden; width: 300px; height: 50px;\" frameborder=\"0\" scrolling=\"no\"></iframe><br><a data-url=\"\" data-count=\"horizontal\" data-via=\"Windowsazure\" href=\"https://twitter.com/share\" class=\"twitter-share-button\">짹짹</a>  <script src=\"https://platform.twitter.com/widgets.js\" type=\"text/javascript\"></script>  </p>"
