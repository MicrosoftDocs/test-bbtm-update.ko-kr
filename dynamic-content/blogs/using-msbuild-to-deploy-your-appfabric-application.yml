### YamlMime:Yaml
ms.openlocfilehash: df0bc461f2939dc0e94ce04623785bc32ea85b46
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139903442"
Slug: using-msbuild-to-deploy-your-appfabric-application
Title: MSBuild 사용하여 AppFabric 애플리케이션 배포
Summary: 저스틴 벡위드에 의해이 게시물은 AppFabric 팀 블로그에 게시되었습니다.  애플리케이션 호스팅이 로컬 스테이징 환경에서 클라우드로 이동함에 따라 다음을 수행해야 하는 영역 중 하나입니다.
Content: "<p><em><a target=\"_blank\" href=\"https://social.msdn.microsoft.com/profile/justin%20beckwith/\">저스틴 벡위드</a>에 의해이 게시물은 AppFabric 팀 블로그에 <a target=\"_blank\" href=\"https://blogs.msdn.com/b/appfabric/archive/2011/07/20/using-msbuild-to-deploy-your-appfabric-application.aspx\">게시되었습니다</a>.</em></p>  <p>애플리케이션 호스팅이 로컬 스테이징 환경에서 클라우드로 이동함에 따라 개선해야 하는 영역 중 하나는 자동화된 빌드 프로세스에 배포를 포함하는 기능입니다.&nbsp;&nbsp; 6월 CTP AppFabric 비트를 사용하는 Visual Studio 개발자가 AppFabric 애플리케이션을 디자인, 빌드 및 배포할 수 있도록 하는 훌륭한 작업을 수행합니다.&nbsp; 그러나 현재 도구는 이러한 도구를 반복 가능한 표준 빌드 프로세스에 통합하는 방법을 제공하지 않습니다.&nbsp; 이 게시물의 목표는 자동화된 AppFabric 배포를 빌드 프로세스에 통합하는 데 필요한 단계를 간략하게 설명하고 Application Manager에 기본 제공되는 REST API 기능&rsquo; 중 일부를 보여 주는 것입니다.</p>  <p>시작하기 전에 이 샘플에 사용하는 도구 Im&rsquo; 목록을 실행합니다&rsquo;.</p>  <ul>  <li>2010년 Visual Studio .NET Framework 4.0</li>  <li><a target=\"_blank\" href=\"https://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=17691\">Windows Azure AppFabric SDK CTP &ndash; 6월 업데이트</a>  <ul>  <li>AppFabric 샘플</li>  <li>AppFabric SDK</li>  <li>AppFabric Tools for Visual Studio</li>  <li><a target=\"_blank\" href=\"https://github.com/AzureAppManager/MSBuildTask\">이 게시물에 대한 샘플 코드</a></li>  </ul>  </li>  </ul>  <p>이 게시물의 목표는 MSBuild 사용하여 AppFabric 애플리케이션&rsquo;을 배포하는 것이기 때문에 랩 사이트에서 계정을 등록해야 합니다.&nbsp; CTP에 대한 액세스를 요청하려면 다음 단계를 수행합니다.</p>  <ul>  <li>에서 AppFabric 관리 포털에 <a target=\"_blank\" href=\"\"><span style=\"text-decoration: underline;\"></span></a>로그인합니다.</li>  <li>화면 왼쪽의 AppFabric&rdquo; 노드 아래에서 &ldquo;애플리케이션&rdquo;이라는 항목을 &ldquo;선택합니다.</li>  <li>화면 위쪽의 &ldquo;도구 모음에서 네임스페이스&rdquo; 요청 단추를 클릭합니다.</li>  <li>네임스페이스를 요청하기 전에 몇 가지 질문에 답하라는 메시지가 표시됩니다.</li>  <li>요청이 승인될 때까지 보류 중인&rdquo; 상태가 되고 &ldquo;CTP 기능 사용을 시작할 수 있습니다.</li>  </ul>  <h4>&nbsp;REST API 사용</h4>  <p>AppFabric Application Manager는 Application Manager에서 사용할 수 있는 대부분의 작업을 자동화하는 유용한 RESTful API를 제공합니다.&nbsp; 애플리케이션 수명 주기 메서드(시작, 중지, 배포 등)를 활용하여 사용자 지정 작업을 작성합니다.&nbsp; API를 시작하는 데 도움이 되도록 Weve&rsquo;는 <b>ResourceAccessor.cs</b> 클래스를 결합하여 AtomPub 프로토콜을 사용하여 만드는 일부 호출&rsquo;을 추상화합니다.&nbsp; &nbsp; 예를 들어 애플리케이션에 대한 세부 정보를 얻으려면 네임스페이스 및 관리 키를 사용하여 클래스를 인스턴스화합니다.</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"562\">  <p>&nbsp;Application Manager REST API 래퍼의 새 인스턴스 만들기</p>  <p>ResourceAccessor appManagerAPI = new ResourceAccessor(this. 네임스페이스입니다. ManagementKey);</p>  <p>애플리케이션에 대한 세부 정보 가져오기</p>  <p>ApplicationResource ar = appManagerAPI.GetApplication(\"myApplicationName\");</p>  </td>  </tr>  </tbody>  </table>  <p>이 샘플에서는 기존 계정이 <a target=\"_blank\" href=\"\"></a>있고 네임스페이스를 이미 만들었다고 가정합니다.&nbsp; &nbsp; 네임스페이스에 대한 관리 키를 얻으려면 포털 오른쪽의 속성 패널에 있는 보기&rsquo; 단추를 클릭한 &lsquo;다음, 키를 클립보드에 복사합니다.</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8713.SS1.png\" alt=\"\" height=\"273\" width=\"398\" border=\"0\"></p>  <p>우리의 목적을 위해,&rsquo; 우리는 주로 종료 자동화에 관심이, 배포 취소, 가져오기, 배포, 다음 애플리케이션의 다시 시작.&nbsp; 예를 들어 애플리케이션을 시작하려면 <b>SendCommand</b> 호출을 실행할 수 있습니다.</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"479\">  <p>애플리케이션 시작 시도</p>  <p>Log.LogMessage(MessageImportance.Normal, \"애플리케이션 시작 ...\");</p>  <p>appManagerAPI.SendCommand(이. ApplicationName, LifecycleCommand.Start);</p>  </td>  </tr>  </tbody>  </table>  <p>다른 애플리케이션 명령을 자동화하는 데 관심이 있는 경우&rsquo; 포함된 샘플&rsquo; 웹을 사용하여 시작합니다.</p>  <h4>&nbsp;MSBuild 작업 빌드</h4>  <p>&rsquo;이제 REST API&rsquo;에 익숙해지므로 사용자 지정 MSBuild 작업에서 작업을 시작해야 합니다.&nbsp; 이는 비교적 쉽고 잘 문서화되어 있습니다.</p>  <p><a target=\"_blank\" href=\"https://msdn.microsoft.com/en-us/library/t9883dzc.aspx\">https://msdn.microsoft.com/en-us/library/t9883dzc.aspx</a></p>  <p>사용자 지정 작업에 대한 새 .NET 클래스 라이브러리 프로젝트를 만들어야 합니다.&nbsp; 이 샘플에서는 Task&rsquo;에서 &lsquo;상속되는 클래스를 구현하도록 선택하고 <b>Execute</b> 메서드를 재정의합니다.</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"235\">  <p>public 클래스 AppManagerDeploy: Task</p>  <p>{</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override bool Execute()</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>}</p>  </td>  </tr>  </tbody>  </table>  <p>사용자 지정 패키지를 배포하기 위해 <b>Execute</b> 메서드는 REST API 래퍼를 사용하여 실행 중인 애플리케이션을 중지하고, 애플리케이션을 배포 해제한 다음, 새 패키지를 업로드합니다.</p>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"630\">  <p>&nbsp;/// &lt;요약&gt;</p>  <p>사용자 지정 MSBuild Task를 만들 때 실행되는 기본 함수입니다.&nbsp; 이</p>  <p>함수는 지정된 *.afpkg 파일을 애플리케이션에 업로드합니다.</p>  <p>관리자 API.</p>  <p>/// &lt;/summary&gt;</p>  <p>/// &lt;returns&gt;&lt;/returns&gt;</p>  <p>public override bool Execute()</p>  <p>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MSBuild 콘솔에 디버깅 정보 출력</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application Manager API의 새 인스턴스 만들기</p>  <p>ResourceAccessor appManagerAPI = new ResourceAccessor(this. 네임스페이스입니다. ManagementKey);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 요청된 애플리케이션이 업로드에 유효한 상태인지 확인합니다.</p>  <p>작업(중지됨, 배포 취소됨)</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 지정된 *.afpkg 파일을 Application Manager 배포 서비스에 업로드합니다.</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; appManagerAPI.UploadPackage(이. ApplicationName, 이것. PackagePath);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 애플리케이션 배포 시도</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Log.LogMessage(MessageImportance.Normal, \"애플리케이션 배포 ...\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; crResult = appManagerAPI.SendCommand(this. ApplicationName, LifecycleCommand.Deploy);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 애플리케이션 시작 시도</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Log.LogMessage(MessageImportance.Normal, \"애플리케이션 시작 ...\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; crResult = appManagerAPI.SendCommand(this. ApplicationName, LifecycleCommand.Start);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Log.LogMessage(MessageImportance.High, \"배포 완료!\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 반환 true;</p>  <p>}</p>  </td>  </tr>  </tbody>  </table>  <p>&nbsp;전체 원본은 <a target=\"_blank\" href=\"https://github.com/AzureAppManager/MSBuildTask\">GitHub</a> 방문하세요.</p>  <h4>&nbsp;Azure AppFabric 애플리케이션에 MSBuild 작업 연결</h4>  <p>사용자 지정 MSBuild 작업이 완료되면 현재 애플리케이션 *.csproj 파일에 작업을 첨부합니다.&nbsp; 6월 CTP 샘플에서 사용할 수 있는 Stock Ticker 애플리케이션을 사용하도록 선택했고, 이 솔루션의 수정된 버전은 이 게시물의 소스 코드와 함께 사용할 수 있습니다.&nbsp; *.csproj 파일을 수정하려면 다음을 수행해야 합니다.</p>  <ul>  <li>AppFabric 애플리케이션 솔루션 파일(예: StockTickerApp.sln)</li>  <li>App.cs가 포함된 AppFabric Project 마우스 오른쪽 단추로 클릭하고 프로젝트를 언로드합니다.</li>  <li>언로드된 프로젝트를 마우스 오른쪽 단추로 클릭하고 *.csproj 파일을 편집합니다.</li>  <li>*.csproj 파일의 아래쪽으로 스크롤하고 /project&gt; 태그 바로 위에 이 대상을 &lt;추가합니다.</li>  </ul>  <table border=\"1\" cellpadding=\"0\" cellspacing=\"0\">  <tbody>  <tr>  <td valign=\"top\" width=\"641\">  <p>&lt;UsingTask TaskName=\"AppManagerDeploy\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AssemblyFile=\"C:\\&lt; 샘플&gt;\\AFDeployTask\\bin\\Debug\\Microsoft.Samples.AppFabric.MSBuildTask.dll 경로\"</p>  <p>/&gt;</p>  <p>&nbsp;&lt;Target Name=\"DeployToAppFabric\" AfterTargets=\"Build\" Condition=\" '$(Configuration)|$(Platform)' == 'Release| AnyCPU' \"&gt;&nbsp;</p>  <p>&lt;Message Text=\"AppFabric Portal에 Project 배포\" Importance=\"high\" /&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;AppManagerDeploy</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Namespace=\"justbe\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ManagementKey=\"jmjMPi0GvG97U/eISgswcdt/K3zlrr+MyPS8+DQhlqk=\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ApplicationName=\"stockticker\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PackagePath=\"$(MSBuildProjectDirectory)\\bin\\release\\publish\\StockTickerApp.afpkg\"</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&gt;</p>  <p>&lt;/Target&gt;</p>  </td>  </tr>  </tbody>  </table>  <p>빌드 및 배포 전략의 일부로 이 작업을 구현하도록 선택한 경우 매번 *.dll 경로를 참조하지 않도록 GAC에 Microsoft.Samples.AppFabric.MSBuildTask.dll 어셈블리를 등록할 수 있습니다.&nbsp; <b>UsingTask</b> 명령은 새 어셈블리를 빌드에 연결하고 방금 만든 AppManagerDeploy 작업을 사용할 수 있도록 합니다.&nbsp; AppManagerDeploy 작업은 다음 필드를 허용합니다.</p>  <ul>  <li><b>네임 스페이스</b> &ndash; Azure Portal에서 생성된 애플리케이션 네임스페이스</li>  <li><b>ManagementKey</b> &ndash; Azure Portal에서 액세스할 수 있는 네임스페이스 관리 키</li>  <li><b>Applicationname</b> &ndash; AppFabric 애플리케이션 관리자의 애플리케이션 이름</li>  <li><b>PackagePath</b> &ndash; 빌드 중에 생성된 *.afpkg 파일의 상대 경로입니다.</li>  </ul>  <p>이 대상은 <b>릴리스</b> 모드 구성을 사용하는 경우에만 실행되도록 구성됩니다.&nbsp; 이제 배포 명령을&nbsp; 사용하여 빌드를 실행하는 두 가지 방법이 있습니다. 릴리스 모드를 사용하여 Visual Studio 빌드하거나 명령 프롬프트에서 MSBuild 명령을 실행합니다.&nbsp; 연습의 요점은 자동화된 빌드에 대한 MSBuild 작업을 만드는 것이므로 Visual Studio 명령 프롬프트에서 빌드 실행을 단계별로 수행합니다&rsquo;.&nbsp; 먼저 애플리케이션 *.sln 파일이 저장된 경로로 이동합니다.&nbsp; 그런 다음, 명령을 실행하여 프로젝트를 빌드합니다.</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7510.SS2.png\" alt=\"\" height=\"160\" width=\"400\" border=\"0\"></p>  <p>유의하세요. 이 작업은 실행하는 데 다소 시간이 걸릴 수 있습니다.&nbsp; 그러나 배포가 완료되면 콘솔에서 성공 메시지가 표시됩니다.</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4314.SS3.png\" height=\"204\" width=\"399\"></p>  <p>배포 작업을 실행하도록 허용한 후 애플리케이션 관리자의 관리자 로그를 확인하여 실행된 모든 명령을 검토합니다.</p>  <p><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5811.SS4.png\" alt=\"\" height=\"368\" width=\"394\" border=\"0\"></p>  <h4>기타 예</h4>  <p>Windows Azure AppFabric Application Manager REST API를 사용하는 다른 예제는 6월 CTP에서 PowerShell 샘플을 확인해야 합니다. Azure AppFabric 사용에 대한 다른 유용한 리소스는 다음 블로그를 <a target=\"_blank\" href=\"https://blogs.msdn.com/b/appfabric/\">https://blogs.msdn.com/b/appfabric/</a>참조하세요.</p>  <p><iframe src=\"https://www.facebook.com/plugins/like.php?href= https://blogs.msdn.com/b/windowsazure/archive/2011/07/20/using-msbuild-to-deploy-your-appfabric-application.aspx;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50\" style=\"overflow: hidden; width: 300px; height: 50px;\" frameborder=\"0\" scrolling=\"no\"></iframe><br>트윗  <script type=\"text/javascript\"></script>  </p>"
