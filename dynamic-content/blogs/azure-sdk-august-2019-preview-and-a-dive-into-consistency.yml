### YamlMime:Yaml
ms.openlocfilehash: 79adf4caf83668bb970fddb87d806389f9517b3b
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908624"
Slug: azure-sdk-august-2019-preview-and-a-dive-into-consistency
Title: Azure SDK 2019년 8월 미리 보기 및 일관성 살펴보기
Summary: 최신 Azure API 지침 및 패턴을 따르는 Azure SDK의 두 번째 미리 보기를 사용할 수 있습니다(.Net, Java, JavaScript, Python). 이러한 미리 보기에는 버그 수정, 새로운 기능 및 지침 준수를 위한 추가 작업이 포함되어 있습니다.
Content: >-
  <p>최신 Azure API 지침 및 패턴을 따르는 Azure SDK의 두 번째 미리 보기를 사용할 수 있습니다(<a href="https://aka.ms/azure-sdk-preview2-net" target="_blank">.Net</a>, <a href="https://aka.ms/azure-sdk-preview2-java" target="_blank">Java</a>, <a href="https://aka.ms/azure-sdk-preview2-js" target="_blank">JavaScript</a>, <a href="https://aka.ms/azure-sdk-preview2-python" target="_blank">Python</a>). 이러한 미리 보기에는 버그 수정, 새로운 기능 및 지침 준수를 위한 추가 작업이 포함되어 있습니다.</p>


  <h3>새로운 기능&rsquo;</h3>


  <p>SDK에는 많은 새로운 기능, 버그 수정 및 개선 사항이 있습니다. 새로운 기능 중 일부는 아래에 있지만 위에 연결된 릴리스 정보 및 변경 로그를 참조하세요.</p>


  <ul>
      <li>이제 Java용 Storage 라이브러리에 파일 및 큐 지원이 포함됩니다.</li>
      <li>python용 Storage 라이브러리는 파일, 큐 및 Blob용 API의 비동기 버전을 추가했습니다.</li>
      <li>언어 간 Event Hubs 라이브러리는 호출이 크기 제한을 초과하는 오류 시나리오를 방지하고 대역폭 문제가 있는 개발자에게 일괄 처리 크기 제어를 제공하여 일괄 처리를 만드는 기능을 추가하여 단일 호출에서 여러 메시지를 보내는 지원을 확장했습니다.</li>
      <li>언어 간 Event Hubs 라이브러리는 EventProcessor 클래스를 통해 이벤트를 사용하는 새로운 모델을 도입하여 현재 검사점 프로세스를 간소화하고 향후 미리 보기에서 파티션 간에 부하 분산을 처리합니다.</li>
  </ul>


  <h3>지침에 대해 자세히 알아보기: 일관성</h3>


  <p>이러한 Azure SDK는 모든 플랫폼을 사용하는 모든 개발자에게 인체공학적 환경을 제공하기 위한 조직 간 노력을 나타내며 <a href="https://aka.ms/azure-sdk-preview" target="_blank">, 이전 블로그 게시물</a>에서 언급했듯이 개발자 피드백은 다음과 같은 원칙 집합을 정의하는 데 도움이 되었습니다.</p>


  <ul>
      <li>관용 적</li>
      <li>지속적인 문제</li>
      <li>가까이</li>
      <li>Diagnosable</li>
      <li>호환 가능</li>
  </ul>


  <p>오늘 우리는 일관성에 대해 심층 분석할 것입니다.</p>


  <h3>지속적인 문제</h3>


  <p>개발자 및 사용자 연구의 피드백에 따르면 일관된 API는 일반적으로 더 쉽게 배우고 기억할 수 있습니다. 일관성을 유지하기 위해 Azure에서 SDK를 안내하기 위해 지침에는 <a href="https://azure.github.io/azure-sdk/general_introduction.html#consistent" target="_blank">일관성 원칙</a>이 포함되어 있습니다.</p>


  <ul>
      <li>클라이언트 라이브러리는 언어 내에서 일관되고 서비스와 일치하며 모든 대상 언어 간에 일관되어야 합니다. 충돌하는 경우 언어 내의 일관성이 우선 순위가 가장 높고 모든 대상 언어 간의 일관성이 가장 낮은 우선 순위입니다.</li>
      <li>로깅, HTTP 통신 및 오류 처리와 같은 서비스 중립적 개념은 일관되어야 합니다. 개발자는 클라이언트 라이브러리 간에 이동할 때 서비스에 구애받지 않는 개념을 다시 배울 필요가 없습니다.</li>
      <li>클라이언트 라이브러리와 서비스 간의 용어 일관성은 진단에 도움이 되는 좋은 일입니다.</li>
      <li>서비스 라이브러리와 클라이언트 라이브러리의 모든 차이점에는 관용적인 사용량에 뿌리를 둔 기존에 대한 적절한 명료한 이유가 있어야 합니다.</li>
      <li>각 대상 언어에 대한 Azure SDK는 단일 팀에서 개발한 단일 제품처럼 느껴집니다.</li>
      <li>대상 언어 간에 기능 패리티가 있어야 합니다. 이는 서비스와의 기능 패리티보다 더 중요합니다.</li>
  </ul>


  <p>&rsquo;두 번째 글머리 기호를 자세히 살펴보면 로깅, &ldquo;HTTP 통신 및 오류 처리와 같은 서비스 중립적 개념이 일관되어야 합니다.&rdquo; 개발자는 자체적으로 잘 작동하지만 항상 서로 완벽하게 일치하지 않는&rsquo; API를 지적했습니다. 예를 들면 다음과 같습니다.</p>


  <p><strong>Blob Storage는 동기화 반복기를 결과 집합으로 반환하는 동안 페이징의 건너뛰기/가져오기 스타일을 사용했습니다.</strong></p>


  <p><code>let marker = undefined;<br>

  do {<br>

  &nbsp;&nbsp; const listBlobsResponse = await containerURL.listBlobFlatSegment(<br>

  &nbsp;&nbsp;&nbsp;&nbsp; Aborter.none,<br>

  &nbsp;&nbsp;&nbsp;&nbsp; marker<br>

  &nbsp;&nbsp; );</code></p>


  <p><code>&nbsp; marker = listBlobsResponse.nextMarker;<br>

  &nbsp;&nbsp; for (const blob of listBlobsResponse.segment.blobItems) {<br>

  &nbsp;&nbsp;&nbsp;&nbsp; console.log(`Blob: ${blob.name}`);<br>

  &nbsp;&nbsp; }<br>

  } while (marker);</code></p>


  <p>&nbsp;</p>


  <p><strong>Cosmos 비동기 반복기를 사용하여 결과를 반환했습니다.</strong></p>


  <p><code>for await (const results of this.container.items.query(querySpec).getAsyncIterator()){<br>

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(results.result)<br>

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</code></p>


  <p>&nbsp;</p>


  <p><strong>Event Hubs는 &lsquo;지정된 크기의 결과 배열을 반환하는 테이크&rsquo; 스타일 호출을 사용했습니다.</strong></p>


  <p><code>const myEvents = await client.receiveBatch(&quot;my-partitionId&quot;, 10);</code></p>


  <p>&nbsp;</p>


  <p>이러한 세 가지 서비스를 모두 함께 사용하는 동안 개발자는 코드 샘플을 검토하여 더 많은 것을 기억하거나 메모리를 새로 고치기 위해 노력해야 한다고 지적했습니다.</p>


  <h3>일관성 SDK 지침</h3>


  <p><a href="https://azure.github.io/azure-sdk/typescript_design.html#ts-modern-javascript" target="_blank">JavaScript 지침</a>은 최신 및 Idiomatic JavaScript 섹션에서 이 상황을 처리하는 방법을 지정합니다.</p>


  <p>☑️ 비동기 라이브러리 API를 구현하려면 비동기 함수를 사용해야 합니다.</p>


  <p>ES5를 지원해야 하고 라이브러리 크기와 관련된 경우 비동기 코드를 제어 흐름 구문과 결합할 때 비동기를 사용합니다. 더 간단한 코드 흐름에 프라미스를 사용합니다.&nbsp; 비동기 코드 bloat (특히 ES5를 대상으로 하는 경우)를 추가 합니다.</p>


  <p>☑️ 모든 종류의 시퀀스 및 스트림에 반복기 및 비동기 반복기를 사용합니다.</p>


  <p>반복기와 비동기 반복기는 모두 JavaScript에 기본 제공되어 사용하기 쉽습니다. 다른 스트리밍 인터페이스(예: 노드 스트림)는 idiomatic을 다시&#39;있는 한 적절한 경우 사용할 수 있습니다.</p>


  <p>간단히 말해서 시퀀스(AKA 목록)인 비동기 호출이 있는 경우 비동기 반복기를 사용하는 것이 좋습니다.</p>


  <p>실제로 이 원칙이 Storage, Cosmos 및 Event Hubs에 대한 최신 Azure SDK 라이브러리에 적용되는 방법입니다.</p>


  <p><strong>Storage 비동기 반복기를 사용하여 Blob을 나열합니다.</strong><br>

  <code>for await (const blob of containerClient.listBlobsFlat()) {<br>

  &nbsp;&nbsp; console.log(`Blob: ${blob.name}`);<br>

  }</code></p>


  <p>&nbsp;</p>


  <p><strong>Cosmos 비동기 반복기를 사용하여 항목을 나열합니다.</strong><br>

  <code>for await (const resources of resources.<br>

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.<br>

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; items.<br>

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; readAll({ maxItemCount: 20 }).<br>

  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getAsyncIterator()) {<br>

  &nbsp;&nbsp;&nbsp;&nbsp; console.log(resources.doc.id)<br>

  }</code></p>


  <p>&nbsp;</p>


  <p><strong>이제 Event Hubs는 &ndash; 비동기 반복기를 사용하여 이벤트를 처리합니다.</strong><br>

  <code>for await (const events of consumer.getEventIterator()){<br>

  &nbsp;&nbsp;&nbsp;&nbsp; console.log(`${events}`)<br>

  &nbsp;&nbsp; }</code></p>


  <p>여기서 볼 수 있듯이 이 경우 페이징&mdash;하에 대한 서비스 중립적 개념은&mdash; 세 가지 서비스 모두에 걸쳐 표준화되었습니다.</p>


  <h3>피드백</h3>


  <p>일관성에 대한 피드백이 있거나 <a href="https://aka.ms/azure-sdk-releases" target="_blank">2019년 8월 미리 보기</a>(<a href="https://aka.ms/azure-sdk-preview2-net" target="_blank">.Net</a>, <a href="https://aka.ms/azure-sdk-preview2-java" target="_blank">Java, JavaScript</a>, <a href="https://aka.ms/azure-sdk-preview2-python" target="_blank">Python</a>)를 시도한 후 버그를 <a href="https://aka.ms/azure-sdk-preview2-js" target="_blank"></a>발견했다고 생각&rsquo;되는 경우 GitHub 문제 또는 끌어오기 요청을 제출하거나(<a href="https://github.com/Azure/azure-sdk" target="_blank">지침</a>, <a href="https://github.com/Azure/azure-sdk-for-net" target="_blank">.Net</a>, <a href="https://github.com/Azure/azure-sdk-for-java" target="_blank">Java, JavaScript</a>, <a href="https://github.com/Azure/azure-sdk-for-python" target="_blank">Python</a>) Twitter에 문의 <a href="https://twitter.com/azuresdk" target="_blank">@AzureSDK</a> 하세요. <a href="https://github.com/Azure/azure-sdk-for-js" target="_blank"></a> 이러한 지침 및 라이브러리에 대한 기여를 환영합니다!</p>
