### YamlMime:Yaml
ms.openlocfilehash: 7fdd1235492c3a8edd8e1b8a18e4ea3bde5723a4
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139908404"
Slug: getting-started-with-live-streaming-using-the-media-services-sdk-2
Title: Media Services SDK를 사용하여 라이브 스트리밍 시작
Summary: Azure Media Services 방금 라이브 스트리밍 서비스의 공개 미리 보기를 발표했습니다. 이 자습서에서는 Azure Media Services .NET SDK를 사용하여 라이브 스트리밍을 설정하는 방법을 보여줍니다.
Content: "Azure Media Services <a href=\"https://azure.microsoft.com/blog/2014/09/10/azure-media-services-launches-proven-live-streaming-platform/\">방금 라이브 스트리밍 서비스의 공개 미리 보기를 발표했습니다</a>. 이 자습서에서는 Azure Media Services .NET SDK를 사용하여 라이브 스트리밍을 설정하는 방법을 보여줍니다. <a href=\"https://github.com/Azure/azure-media-services-samples/tree/master/AMSLiveStreaming\">GitHub 전체 소스 코드를 다운로드할</a> 수 있습니다. 한편 코딩 부분을 건너뛰려면 <a href=\"https://azure.microsoft.com/blog/2014/09/10/getting-started-with-live-streaming-using-the-azure-management-portal/\">Azure 관리 포털을 사용하여 라이브 스트리밍 시작에 대해</a> 확인하세요.\n\n&nbsp;\n\n1. .NET 4.0에서 콘솔 애플리케이션을 만듭니다. windowsazure.mediaservices를 검색하여 Nuget을 통해 <a href=\"https://www.nuget.org/packages/windowsazure.mediaservices/\">.NET SDK를 Media Services</a> 수 있습니다.\n\n&nbsp;\n\n2. app.config 다음 코드를 추가하세요. Azure 관리 포털에서 계정 이름 및 계정 키를 찾을 수 있습니다.\n<pre class=\"prettyprint\">  &lt;appSettings&gt;\n    &lt;add key=\"MediaServicesAccountName\" value=\"Account_NAME\" /&gt;\n    &lt;add key=\"MediaServicesAccountKey\" value=\"Account_KEY\" /&gt;\n  &lt;/appSettings&gt;</pre>\n&nbsp;\n\n3. program.cs에서 CloudMediaContext를 통해 Azure Media Services 커넥트.\n<pre class=\"prettyprint\">private const string StreamingEndpointName = \"streamingendpoint001\";\nprivate const string ChannelName = \"channel001\";\nprivate const string AssetlName = \"asset001\";\nprivate const string ProgramlName = \"program001\";\n\n// Read values from the App.config file.\nprivate static readonly string _mediaServicesAccountName =\nConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n\nprivate static readonly string _mediaServicesAccountKey =\nConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n\n// Field for service context.\nprivate static CloudMediaContext _context = null;\nprivate static MediaServicesCredentials _cachedCredentials = null;\n\nstatic void Main(string[] args)\n{\n// Create and cache the Media Services credentials in a static class variable.\n    _cachedCredentials = new MediaServicesCredentials(\n    _mediaServicesAccountName,_mediaServicesAccountKey);\n // Used the cached credentials to create CloudMediaContext.\n    _context = new CloudMediaContext(_cachedCredentials);\n}</pre>\n&nbsp;\n\n4. 라이브 채널을 만들고 채널을 시작합니다. 채널은 라이브 스트림을 수집할 수 있는 Azure Media Services 기본 엔터티입니다. 각 채널에는 수집 URL과 미리 보기 URL이 있으며 하나 이상의 프로그램이 연결되어 있을 수도 있습니다. 일반적으로 채널을 시작하는 데 약 2분이 걸리지만 20분 정도 걸릴 수 있습니다. 채널을 바로 시작할 필요는 없습니다. 일반적으로 사람들은 채널을 미리 설정하지만 라이브 이벤트가 시작될 때까지 기다립니다.\n<pre class=\"prettyprint\">public static IChannel CreateAndStartChannel()\n{\n    IChannel channel = _context.Channels.Create(\n        new ChannelCreationOptions\n        {\n            Name = ChannelName,\n            Input = CreateChannelInput(),\n            Preview = CreateChannelPreview(),\n            Output = CreateChannelOutput()\n        });\n\n    channel.Start();\n    Console.WriteLine(\"Starting Channel \" + ChannelName);\n    Console.WriteLine(\"Channel's ingest URL \" + channel.Input.Endpoints.FirstOrDefault().Url.ToString());\n    Console.WriteLine(\"Channel's preview URL \" + channel.Preview.Endpoints.FirstOrDefault().Url.ToString());\n\n    return channel;\n}</pre>\n&nbsp;\n\n5. 4부에서 각 메서드를 구현합니다. 채널을 만드는 방법은 다음과 같습니다. 채널을 만들 때 조각화된 Mp4(부드러운 스트리밍) 또는 RTMP를 지원하는 수집 프로토콜을 선택할 수 있습니다. 액세스 제어에서 수집 지점 액세스를 허용하도록 IP 허용 목록을 정의해야 하며, 특정 머신으로 잠그거나 IP 주소 범위로 열 수 있습니다. 모든 IP 주소로 열려면 \"0.0.0.0.0/0\"으로 설정합니다.\n<pre class=\"prettyprint\">private static ChannelInput CreateChannelInput()\n{\n    return new ChannelInput\n    {\n        StreamingProtocol = StreamingProtocol.FragmentedMP4,\n        AccessControl = new ChannelAccessControl\n        {\n            IPAllowList = new List&lt;IPRange&gt;\n            {\n                new IPRange\n                {\n                    Name = \"TestChannelInput001\",\n                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                    SubnetPrefixLength = 0\n                }\n            }\n        }\n    };\n}</pre>\n&nbsp;\n\n6. 채널 미리 보기 및 채널 출력을 만듭니다.\n<pre class=\"prettyprint\">private static ChannelPreview CreateChannelPreview()\n{\n    return new ChannelPreview\n    {\n        AccessControl = new ChannelAccessControl\n        {\n            IPAllowList = new List&lt;IPRange&gt;\n            {\n                new IPRange\n                {\n                    Name = \"TestChannelPreview001\",\n                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                    SubnetPrefixLength = 0\n                }\n            }\n        }\n    };\n}\n\nprivate static ChannelOutput CreateChannelOutput()\n{\n    return new ChannelOutput\n    {\n        Hls = new ChannelOutputHls { FragmentsPerSegment = 1 }\n    };\n}</pre>\n&nbsp;\n\n7. 다음 줄을 기본으로 배치하여 채널을 만들고 수집 URL 및 미리 보기 URL을 출력합니다. 수집 URL은 라이브 인코더에 제공할 푸시 대상입니다(Wirecast와 같은 인코더를 설정하려면 <a href=\"https://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/\">라이브 인코더 구성 블로그</a> 를 참조하세요). 라이브 인코더를 구성하고 시작한 후에는 스트림이 제대로 수집되고 있는지 확인하기 위해 미리 보기 URL에서 스트림을 볼 수 있어야 합니다.\n<pre class=\"prettyprint\">IChannel channel = CreateAndStartChannel();\n\n// Set the Live Encoder to point to the channel's input endpoint:\nConsole.WriteLine(\"Channel's ingest URL \" + channel.Input.Endpoints.FirstOrDefault().Url.ToString());\n\n// Use the previewEndpoint to preview and verify \n// that the input from the encoder is actually reaching the Channel. \nConsole.WriteLine(\"Channel's preview URL \" + channel.Preview.Endpoints.FirstOrDefault().Url.ToString());</pre>\n&nbsp;\n\n8. 스트림을 유지하여 대상 그룹에 제공하려면 프로그램 및 스트리밍 엔드포인트를 만들어야 합니다. Main 메서드에 다음 코드를 입력해 보겠습니다.\n<pre class=\"prettyprint\">// Once you previewed your stream and verified that it is flowing into your Channel, \n// you can create an event by creating an Asset, Program, and Streaming Locator. \nIProgram program = CreateAndStartProgram(channel);\nILocator locator = CreateLocatorForAsset(program.Asset, program.ArchiveWindowLength);\nIStreamingEndpoint streamingEndpoint = CreateAndStartStreamingEndpoint();\nGetLocatorsInAllStreamingEndpoints(program.Asset);\n\nConsole.ReadLine();</pre>\n&nbsp;\n\n9. 프로그램을 사용하면 라이브 스트림의 게시 및 스토리지를 제어할 수 있습니다. 최대 3개의 프로그램을 동시에 실행할 수 있으므로 필요에 따라 스트림의 여러 부분을 게시하고 보관할 수 있습니다.\n\n<b>ArchiveWindowLength</b> 속성을 설정하여 프로그램에 대해 기록된 콘텐츠를 보존하려는 시간을 지정할 수 있습니다. 이 값은 최소 5분에서 최대 25시간 사이로 설정할 수 있습니다. 이는 또한 시청자가 현재 라이브 위치에서 시간을 다시 검색할 수 있는 최대 시간을 나타냅니다. 프로그램은 지정된 시간 동안 실행되지만 기간 길이보다 늦는 콘텐츠는 계속 삭제됩니다.\n<pre class=\"prettyprint\">public static IProgram CreateAndStartProgram(IChannel channel)\n{\n    IAsset asset = _context.Assets.Create(AssetlName, AssetCreationOptions.None);\n\n    // Create a Program on the Channel. You can have multiple Programs that overlap or are sequential;\n    // however each Program must have a unique name within your Media Services account.\n    IProgram program = channel.Programs.Create(ProgramlName, TimeSpan.FromHours(3), asset.Id);\n    program.Start();\n\n    Console.WriteLine(\"Starting Program \" + Program.ProgramlName);\n    return program;\n}</pre>\n&nbsp;\n\n10. 그런 다음 스트림에 액세스하려면 스트리밍 로케이터를 만들어야 합니다. 스트리밍 로케이터를 사용하면 프로그램과 연결된 자산을 스트리밍 엔드포인트를 통해 스트리밍할 수 있습니다. 스트리밍 로케이터를 만들 때 자산에 대한 스트리밍 액세스에 대한 액세스 정책을 설정할 수 있습니다.\n<pre class=\"prettyprint\">public static ILocator CreateLocatorForAsset(IAsset asset, TimeSpan ArchiveWindowLength)\n{\n    var locator = _context.Locators.CreateLocator\n        (\n            LocatorType.OnDemandOrigin,\n            asset,\n            _context.AccessPolicies.Create\n            (\n                \"Live Stream Policy\",\n                ArchiveWindowLength,\n                AccessPermissions.Read\n            )\n        );\n\n    return locator;\n}</pre>\n&nbsp;\n\n11. 마지막으로 스트리밍 엔드포인트를 만들고 로케이터 URL을 가져와야 합니다. 단일 Media Services 계정에는 여러 스트리밍 엔드포인트가 있을 수 있습니다. 각각에 대해 서로 다른 구성(예: 보안 설정, 교차 사이트 액세스 정책, 크기 조정 단위 등)을 사용하거나 VOD(주문형 비디오) 및 라이브 스트리밍을 구분하려는 경우 여러 스트리밍 엔드포인트를 포함할 수 있습니다.\n<pre class=\"prettyprint\">public static IStreamingEndpoint CreateAndStartStreamingEndpoint()\n{\n    var options = new StreamingEndpointCreationOptions\n    {\n        Name = StreamingEndpointName,\n        ScaleUnits = 1,\n        AccessControl = GetAccessControl(),\n        CacheControl = GetCacheControl()\n    };\n\n    IStreamingEndpoint streamingEndpoint = _context.StreamingEndpoints.Create(options);\n    streamingEndpoint.Start();\n\n    return streamingEndpoint;\n}\n\nprivate static StreamingEndpointAccessControl GetAccessControl()\n{\n    return new StreamingEndpointAccessControl\n    {\n        IPAllowList = new List&lt;IPRange&gt;\n        {\n            new IPRange\n            {\n                Name = \"Allow all\",\n                Address = IPAddress.Parse(\"0.0.0.0\"),\n                SubnetPrefixLength = 0\n            }\n        },\n\n        AkamaiSignatureHeaderAuthenticationKeyList = new List&lt;AkamaiSignatureHeaderAuthenticationKey&gt;\n        {\n            new AkamaiSignatureHeaderAuthenticationKey\n            {\n                Identifier = \"My key\",\n                Expiration = DateTime.UtcNow + TimeSpan.FromDays(365),\n                Base64Key = Convert.ToBase64String(GenerateRandomBytes(16))\n            }\n        }\n    };\n}\n\nprivate static byte[] GenerateRandomBytes(int length)\n{\n    var bytes = new byte[length];\n    using (var rng = new RNGCryptoServiceProvider())\n    {\n        rng.GetBytes(bytes);\n    }\n\n    return bytes;\n}\n\nprivate static StreamingEndpointCacheControl GetCacheControl()\n{\n    return new StreamingEndpointCacheControl\n    {\n        MaxAge = TimeSpan.FromSeconds(1000)\n    };\n}\n\npublic static void GetLocatorsInAllStreamingEndpoints(IAsset asset)\n{\n    var locators = asset.Locators.Where(l =&gt; l.Type == LocatorType.OnDemandOrigin);\n    var ismFile = asset.AssetFiles.AsEnumerable().FirstOrDefault(a =&gt; a.Name.EndsWith(\".ism\"));\n    var template = new UriTemplate(\"{contentAccessComponent}/{ismFileName}/manifest\");\n    var urls = locators.SelectMany(l =&gt;\n                _context\n                    .StreamingEndpoints\n                    .AsEnumerable()\n                    .Where(se =&gt; se.State == StreamingEndpointState.Running)\n                    .Select(\n                        se =&gt;\n                            template.BindByPosition(new Uri(\"https://\" + se.HostName),\n                            l.ContentAccessComponent,\n                                ismFile.Name)))\n                .ToArray();\n\n    foreach(var url in urls){\n        Console.WriteLine(url);\n    }\n\n}</pre>\n&nbsp;\n\n12. 이제 프로그램을 실행하고 라이브 스트림을 즐길 수 있습니다. <a href=\"https://github.com/Azure/azure-media-services-samples/tree/master/AMSLiveStreaming\">GitHub 전체 소스 코드를 다운로드할</a> 수 있습니다. 또한 이러한 모든 설정은 Azure Portal을 통해서도 볼 수 있습니다."
