### YamlMime:Yaml
ms.openlocfilehash: 5ca4574cc8ed102f80ce14dc98640e779471be22
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906117"
Slug: better-support-for-paging-with-table-storage-in-azure-mobile-services-net-backend
Title: Azure Mobile Services .NET 백 엔드에서 Table Storage 사용하여 페이징에 대한 향상된 지원
Summary: Azure Mobile Services 대한 .NET 백 엔드의 새 릴리스는 Azure Storage 테이블을 사용할 때 환경을 개선합니다. 연속 링크가 이제 노출되고 큰 테이블을 페이징하는 데 사용할 수 있습니다.
Content: "Azure Mobile Services 대한 .NET 백 엔드를 릴리스했을 때 Azure Table Storage 및 MongoDB 데이터베이스에 데이터를 저장하는 지원을 제공했습니다(서비스의 첫 번째 버전부터 사용된 SQL Azure 스토리지 외에). 그러나 테이블 스토리지에 대한 지원은 테이블에 많은 수의 항목이 있는 경우 테이블 스토리지가 SQL 쿼리와 같은 항목을 \"건너뛰는\" 것을 지원하지 않으므로 애플리케이션이 페이징을 사용하여 테이블의 모든 항목을 탐색할 수 없다는 점에서 좋지 않았습니다. 테이블 스토리지는 건너뛰기/테이크를 사용하는 대신 <em>연속 링크</em> (HTTP 링크 헤더로 노출됨)를 통해 페이징을 지원하며, 모든 항목을 포함하지 않는 요청에 대한 응답에는 클라이언트가 추가 항목을 검색하는 데 사용해야 하는 링크가 있습니다. 그러나 이러한 연속 링크는 클라이언트에서 노출되지 않았기 때문에 큰 테이블을 사용할 방법이 없었습니다.\n\n.NET 백 엔드 패키지의 최신 릴리스(<a href=\"https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Storage/1.0.405\">버전 1.0.405</a>) 및 클라이언트 SDK에 대한 일부 업데이트(현재 <a href=\"https://www.nuget.org/packages/WindowsAzure.MobileServices/1.2.5\">관리되는 버전 1.2.5</a> , 곧 출시될 예정임)를 사용하면 이제 클라이언트에서 연속 링크를 검색하고 따라 테이블 스토리지 지원 데이터에 적절한 페이징을 수행할 수 있습니다. 이 작업을 수행하는 방법에 대한 예제를 살펴보겠습니다.\n<h2>데이터 검색 및 페이징</h2>\n서버 쪽에서는 코드 변경이 필요하지 않습니다. <a href=\"https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Storage/1.0.405\">Azure Mobile Services .NET 백 엔드를 Azure Storage 확장</a>에 대한 NuGet 패키지를 업데이트한 후에는 요청에 반환된 항목보다 더 많은 항목이 있을 때 연속 링크를 가져와야 합니다. 아직 서비스 설정이 없는 경우 이 게시물의 뒷부분에서 보너스 자료를 확인할 수 있습니다. 이제 서비스 설정이 중단되었으므로 클라이언트 코드로 시작할 수 있습니다. 앞서 언급했듯이 지금은 관리되는 SDK에서만 전체 지원을 사용할 수 있으므로 살펴보겠습니다. 이 시나리오에서는 다음과 같이 정의된 클라이언트의 내 클래스와 함께 사용자 목록(매우 제한된 연락처 목록)을 반환하는 간단한 컨트롤러를 사용합니다.\n<pre class=\"prettyprint\">    public class Person\n    {\n        [JsonProperty(\"id\")]\n        public string Id { get; set; }\n\n        [JsonProperty(\"name\")]\n        public string Name { get; set; }\n\n        [JsonProperty(\"age\")]\n        public int Age { get; set; }\n    }</pre>\n기본적으로 테이블 컨트롤러의 읽기 작업은 최대 50개의 항목을 반환합니다. 테이블 스토리지에 더 많은 것이 있는 경우 클라이언트는 인터페이스에 메서드 또는 <code>ToEnumerableAsync</code> 메서드의 <code>ToListAsync</code> 결과를 캐스팅하여 더 많은 것을 <code>IQueryResultEnumerable&lt;T&gt;</code> 요청해야 합니다. 아래 코드는 테이블의 모든 요소를 통과하는 방법을 보여줍니다.\n<pre class=\"prettyprint\">    public async Task&lt;double&gt; CalculateAverageAge()\n    {\n        var client = new MobileServiceClient(AppUrl, AppKey);\n        var table = client.GetTable&lt;Person&gt;();\n        var sum = 0.0;\n        var count = 0;\n        var items = await table.Take(10).ToEnumerableAsync();\n        while (items != null &amp;&amp; items.Count() != 0)\n        {\n            count += items.Count();\n            sum += Enumerable.Sum(items, i =&gt; i.Age);\n\n            var queryResult = items as IQueryResultEnumerable&lt;Person&gt;;\n            if (queryResult != null &amp;&amp; queryResult.NextLink != null)\n            {\n                items = await table.ReadAsync&lt;Person&gt;(queryResult.NextLink);\n            }\n            else\n            {\n                items = null;\n            }\n        }\n\n        return sum / count;\n    }</pre>\nJSON 테이블을 사용하는 경우(즉, 이러한 형식<code>Person</code>을 사용하지 않고 대신 패밀리를 사용하는 <code>JToken</code> 경우) 메서드의 <code>ReadAsync</code> 매개 변수에 전달 <code>true</code> 하여 개체에 래핑되도록 <code>wrapResult</code> 응답을 요청할 수 있습니다. 이 경우 결과는 서비스의 실제 결과가 포함된 배열을 포함하는 <strong>결과</strong> 속성이 포함된 개체에 래핑됩니다. 및 <strong>nextLink</strong>- HTTP 응답에 테이블에서 다음 항목 집합을 검색하기 위해 <code>ReadAsync</code> 메서드에 전달되어야 하는 연속 토큰이 있는 Link 헤더가 있는 경우 표시됩니다.\n<pre class=\"prettyprint\">    public async Task&lt;double&gt; CalculateAverageAge2()\n    {\n        var client = new MobileServiceClient(AppUrl, AppKey);\n        var table = client.GetTable(\"person\");\n        var sum = 0.0;\n        var count = 0;\n        var response = await table.ReadAsync(\"$top=10\", null, wrapResult: true);\n        while (response != null)\n        {\n            var items = (JArray)response[\"results\"];\n            var nextLink = (string)response[\"nextLink\"];\n\n            count += items.Count();\n            sum += Enumerable.Sum(items, i =&gt; (int)i[\"age\"]);\n\n            if (nextLink != null)\n            {\n                response = await table.ReadAsync(nextLink, null, true);\n            }\n            else\n            {\n                response = null;\n            }\n        }\n\n        return sum / count;\n    }</pre>\n연속 링크를 사용하면 클라이언트는 이제 테이블 개체의 읽기 메서드에 전달하여 Azure Storage 테이블의 모든 항목을 트래버스할 수 있습니다.\n<h2>보너스 자료: Azure Storage 테이블을 사용하여 서비스 설정</h2>\n아직 Table Storage 지원 컨트롤러를 사용하여 서비스를 설정하지 않은 경우 수행할 수 있는 단계는 다음과 같습니다.\n<h3>스토리지 계정 설정</h3>\n아직 설정하지 않은 경우 table storage를 사용하도록 Azure Storage 계정을 설정해야 합니다. 테이블의 데이터 저장 및 검색을 시작하기 전에 이를 위해 Azure에 스토리지 계정이 필요합니다. \"<a href=\"https://azure.microsoft.com/en-us/documentation/articles/storage-create-storage-account/\">Storage 계정을 만드는 방법</a>\" 자습서의 지침에 따라 계정을 만들 수 있습니다.\n\n계정이 설정되면 계정 이름과 액세스 키를 가져와서 모바일 서비스에 스토리지 계정과 통신하는 방법을 알려야 합니다. 키를 얻으려면 기존 포털의 빠른 시작 또는 대시보드 탭으로 이동하여 \"액세스 키 관리\" 옵션을 선택할 수 있습니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/09/000a-StorageAccountInfo.png\"><img style=\"padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;\" title=\"000a-StorageAccountInfo\" alt=\"000a-StorageAccountInfo\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/000a-StorageAccountInfo_thumb.png\" width=\"480\" height=\"350\" border=\"0\" /></a>\n\n또는 새 포털에서 다음을 수행합니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/09/000b-StorageAccountInfoNewPortal.png\"><img style=\"padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;\" title=\"000b-StorageAccountInfoNewPortal\" alt=\"000b-StorageAccountInfoNewPortal\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/000b-StorageAccountInfoNewPortal_thumb.png\" width=\"484\" height=\"379\" border=\"0\" /></a>\n\n계정 이름과 키가 있으면 모바일 서비스로 이동할 준비가 된 것입니다.\n<h3>서비스 설정</h3>\nAzure Storage 사용하여 모바일 서비스의 데이터를 저장하려면 Azure Mobile Services .NET 백 엔드에 대한 Azure Storage 확장을 추가해야 합니다. 서비스 프로젝트를 마우스 오른쪽 단추로 클릭하고 \"NuGet 패키지 관리...\"를 선택합니다. 및 \"mobileservices.backend\"를 검색합니다. 위에서 언급한 패키지를 선택하고(아래에 표시됨) \"설치\"를 클릭합니다.\n\n<a href=\"https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/10/09/001-AddStorageNuGet.png\"><img style=\"padding-top: 0px; padding-left: 0px; padding-right: 0px; border-width: 0px;\" title=\"001-AddStorageNuGet\" alt=\"001-AddStorageNuGet\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/001-AddStorageNuGet_thumb.png\" width=\"610\" height=\"344\" border=\"0\" /></a>\n\n패키지가 설치되면 서비스 만들기를 시작할 수 있습니다. 이 예제에서는 친구를 저장하는 매우 간단한 테이블을 만들고 아래와 같이 클래스 <code>Person</code> 를 정의합니다. 기본 클래스(일반적으로 Entity Framework/SQL 기반 프로젝트에서 사용됨)를 사용하는 <code>EntityData</code> 대신 파티션/행 키와 같은 Azure Table Storage 사용되는 속성을 정의하는 기본 클래스를 사용합니다<code>StorageData</code>.\n<pre class=\"prettyprint\">    public class Person : StorageData\n    {\n        public string Name { get; set; }\n\n        public int Age { get; set; }\n    }</pre>\n다음으로, 스토리지 계정에 대한 연결 문자열을 서비스에 추가해 보겠습니다. web.config 파일(쉽게 수행할 수 있고 개발에 적합하며 로컬로 디버깅할 때 사용할 수 있지만 안전하지는 않음) 또는 포털의 \"구성\" 탭의 연결 문자열 섹션에서 설정할 수 있습니다(소스 코드에 액세스할 수 있는 사용자가 볼 수 없으므로 더 안전하지만 서비스가 Azure에 배포될 때만 작동). 간단히 하기 위해 Web.config 변경하겠습니다.\n<pre class=\"prettyprint\">  &lt;connectionStrings&gt;\n    &lt;add name=\"MS_TableConnectionString\"\n         connectionString=\"&lt;the actual value&gt;\"\n         providerName=\"System.Data.SqlClient\" /&gt;\n    &lt;add name=\"My_StorageConnectionString\"\n         connectionString=\"DefaultEndpointsProtocol=https;AccountName=&lt;the account&gt;;AccountKey=&lt;the key&gt;;\"/&gt;\n  &lt;/connectionStrings&gt;</pre>\n마지막으로, 스토리지 계정의 테이블에서 데이터를 모바일 서비스의 테이블로 노출하는 컨트롤러 클래스를 만들 수 있습니다. 구현은 다음 예외를 제외하고 포털 빠른 시작 페이지의 다운로드 링크 또는 Entity Framework 지원 데이터에 대한 Visual Studio 템플릿에서 생성된 구현과 거의 동일합니다.\n<ul>\n <li>도메인 관리자는 모바일 서비스 테이블과 백업 데이터 저장소(Azure Storage) 간에 매핑되는 형식 <code>StorageDomainManager&lt;T&gt;</code>입니다.</li>\n <li>Azure Storage의 테이블은 SQL 데이터베이스의 테이블과 마찬가지로 완전한 쿼리 기능을 지원하지 않으므로 반환 <code>IQueryable&lt;T&gt;</code> 은 지원되지 않습니다. 그러나 기본 형식 <code>TableController&lt;T&gt;</code> 에는 스토리지 테이블에 <code>QueryAsync</code> 사용할 수 있는 한 가지 메서드(여러 항목 쿼리용) 및 <code>LookupAsync</code> (단일 항목 쿼리용)</li>\n</ul>\n다음은 이 예제의 컨트롤러 클래스에 대한 전체 코드입니다.\n<pre class=\"prettyprint\">    public class PersonController : TableController&lt;Person&gt;\n    {\n        protected override void Initialize(HttpControllerContext controllerContext)\n        {\n            base.Initialize(controllerContext);\n            var tableName = controllerContext.ControllerDescriptor.ControllerName.ToLowerInvariant();\n            var connStringName = \"My_StorageConnectionString\";\n            DomainManager = new StorageDomainManager&lt;Person&gt;(connStringName, tableName, Request, Services);\n        }\n\n        // GET tables/Person\n        public Task&lt;IEnumerable&lt;Person&gt;&gt; GetAllPerson(ODataQueryOptions queryOptions)\n        {\n            return base.QueryAsync(queryOptions); \n        }\n\n        // GET tables/Person/48D68C86-6EA6-4C25-AA33-223FC9A27959\n        public Task&lt;SingleResult&lt;Person&gt;&gt; GetPerson(string id)\n        {\n            return base.LookupAsync(id);\n        }\n\n        // PATCH tables/Person/48D68C86-6EA6-4C25-AA33-223FC9A27959\n        public Task&lt;Person&gt; PatchPerson(string id, Delta&lt;Person&gt; patch)\n        {\n             return UpdateAsync(id, patch);\n        }\n\n        // POST tables/Person/48D68C86-6EA6-4C25-AA33-223FC9A27959\n        public async Task&lt;IHttpActionResult&gt; PostPerson(Person item)\n        {\n            Person current = await InsertAsync(item);\n            return CreatedAtRoute(\"Tables\", new { id = current.Id }, current);\n        }\n\n        // DELETE tables/Person/48D68C86-6EA6-4C25-AA33-223FC9A27959\n        public Task DeletePerson(string id)\n        {\n             return DeleteAsync(id);\n        }\n    }</pre>\n주목해야 할 한 가지는 조회/삭제/업데이트 메서드가 클라이언트 SDK와의 계약의 일부인 문자열 형식의 ID를 사용한다는 것입니다. 그러나 테이블에 저장된 항목의 ID는 파티션 키와 행 키의 두 부분으로 구성됩니다. 이러한 두 세계를 병합하기 위해 ID가 양식 &lt;파티션 키인&lt; 행 키&gt;&gt;(필요한 경우 키를 작은따옴표로 래핑할 수 있음)의 매핑을 정의합니다. 예를 들어 위에 표시된 코드로 서비스를 실행하는 경우 다음과 같은 요청이 있는 항목을 삽입할 수 있습니다.\n<pre class=\"prettyprint\">POST /tables/person HTTP/1.1\nX-ZUMO-APPLICATION: &lt;the app key&gt;\nContent-Type: application/json; charset=utf-8\nHost: mobile-service-name.azure-mobile.net\nContent-Length: 75\n\n{\n  \"id\": \"partition,row1082\",\n  \"name\": \"dibika lyzufu\",\n  \"age\": 64\n}</pre>\n<h2>요약</h2>\n지금까지 연속 링크 검색에 대한 지원은 현재 관리되는 클라이언트 플랫폼에서 사용할 수 있지만 다른 플랫폼에도 곧 제공될 예정입니다. 이 게시물에 사용되는 코드를 얻으려면 <a href=\"https://github.com/Azure/mobile-services-samples\">모바일 샘플 리포지토리</a>의 <a href=\"https://github.com/Azure/mobile-services-samples/tree/master/NetBackendWithTableStorage\">NetBackendWithTableStorage 디렉터리에서 찾을 수 있습니다</a>.\n\n평소와 같이, 트위터 <a href=\"https://twitter.com/azuremobile\">@AzureMobile</a> 또는 <a href=\"https://social.msdn.microsoft.com/Forums/windowsazure/en-US/home?forum=azuremobile\">MSDN 포럼</a>을 통해이 게시물의 의견으로 피드백을 보내주세요."
