### YamlMime:Yaml
ms.openlocfilehash: e474692f1457a5e04dccce55e8a918ed8b9146e2
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139900173"
Slug: task-based-apis-for-service-bus
Title: Service Bus 작업 기반 API
Summary: '편집자 주: 이 게시물은 Windows Azure Service Bus Team의 Scott Seely 개발자로부터 제공됩니다.  최근에 NuGet 통해 새 버전의 Windows Azure Service Bus Client SDK를 출시했습니다. 현재...'
Content: '<p><strong>편집기 참고 사항: </strong> 이 게시물은 Windows Azure Service Bus 팀의 개발자인 Scott Seely에서 제공됩니다.</p>  <p>최근에 NuGet 통해 새 버전의 Windows Azure Service Bus Client SDK를 출시했습니다. 현재 v2.0.0-beta로 표시된 SDK API는 모든 비동기 API의 System.Threading.Tasks.Task 기반 버전을 제공하도록 개선되었습니다. 즉, 필사자만 읽을 수 있는 비동기 코드를 작성할 수 있습니다. 어떤 수업이 치료를 받았는지 궁금하다면 대답은 간단합니다: 우리는 모든 것을 업데이트했습니다! Begin/End 쌍을 본 모든 곳에서 이제 메서드의 비동기 버전도 표시됩니다. 업데이트된 SDK는 .NET 4.0에 대해 컴파일되므로 Visual Studio 2010 및 Visual Studio 2012에서 작동합니다.</p>  <p>이 짧은 게시물에서 몇 가지 기본적인 사항을 다루고 싶습니다.</p>  <ol>  <li>SDK를 가져오는 방법</li>  <li>비동기/await에서 SDK를 사용하는 방법</li>  <li>Task에서 예외가 발생하는 경우에 대해 자세히 설명합니다.</li>  </ol>  <p>SDK 사용자의 경우 중요한 점은 이제 Service Bus SDK를 사용하여 비동기적이고 읽을 수 있는 코드를 작성할 수 있다는 것입니다.</p>  <h4>베타 SDK 가져오기</h4>  <p>현재 2.0 SDK는 최종 제품으로 간주되지 않습니다. 즉, Windows Azure Service Bus 사용하는 항목을 빌드할 때 현재 프로젝트에서 사용할 수 있는 많은 항목이 포함되어 있습니다. 패키지는 NuGet 통해서만 사용할 수 있습니다. 이 패키지를 프로젝트에 추가하려면 다음 두 가지 방법 중 하나를 사용할 수 있습니다.</p>  <ol>  <li>Visual Studio NuGet GUI를 통해 설치</li>  <li>Visual Studio 패키지 관리자 콘솔을 통해 설치</li>  </ol>  <p>이러한 지침에서는 Visual Studio 열린 프로젝트가 있고 해당 프로젝트에 Service Bus SDK를 추가하려는 것으로 가정합니다. 마우스를 좋아하는 사용자를 위해 프로젝트 노드 또는 참조 노드를 마우스 오른쪽 단추로 클릭하고 <em>NuGet 패키지&hellip;&rsquo; 관리를</em> 선택합니다&lsquo;. <em>시험판 포함</em>을 선택했는지 확인합니다(기본값은 <em>안정 전용</em>임). 그런 다음 <em>servicebus</em>를 검색합니다. Azure Service Bus Windows 선택하고 <em>설치</em>를 클릭합니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8156.taskbase.png" alt="" border="0"></p>  <p><em>패키지 관리자 콘솔</em>(<em>ViewOther</em><em></em>&agrave; Windows&agrave;<em>패키지 관리자 콘솔</em>에서 사용 가능)에서 다음을 입력하여 새 비트를 설치할 수 있습니다.</p>  <p>Install-Package -Id WindowsAzure.ServiceBus &ndash;IncludePrerelease</p>  <p>-IncludePrelease 플래그를 포함해야 합니다. 그렇지 않으면 작업 기반 API를 사용하여 버전을 가져올 수 없습니다.</p>  <h4>비동기/await에서 SDK를 사용하는 방법</h4>  <p>Microsoft.ServiceBus.NamespaceManager 및 Microsoft.ServiceBus.Messaging.QueueClient를 사용하는 간단한 메서드를 작성합니다&rsquo;. Well&rsquo;을 확인하여 큐가 있는지 확인하고 큐가 없는 경우 큐를 만듭니다. &rsquo;그런 다음, 큐에서 메시지를 보내고 받습니다. 즉&rsquo;, well&rsquo;은 Service Bus <em>Hello, World</em>를 작성합니다. 간단한 비동기 프로그래밍&rsquo;의 이점 중 일부를 표시하려면 메시지가 전송된 후 약 5초 후에 메시지가 전달되도록 할 수 있습니다. 코드의 주석은 무슨 일이 일어나고 있는지 설명합니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2500.Screen-Shot-2013_2D00_04_2D00_11-at-12.13.12-PM.png" alt="" border="0"></p>  <p>여기서 볼 수 있는 것은 송신 및 수신이 완료되기를 기다리는 동안 약 9초 동안 기다렸다는 것입니다. 이 시간 동안 클라이언트는 메시지가 표시되고 반환되기를 바쁘게 기다리는 대신 CPU로 다른 작업을 수행할 수 있었습니다. 또한 비동기 코드가 동기 코드만큼 쉽게 읽을 수 있음을 알 수 있습니다. 비동기 프로그래밍 모델 코드가 기존 큐를 확인하는 방법의 예는 다음과 같습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7345.Screen-Shot-2013_2D00_04_2D00_11-at-12.13.54-PM.png" alt="" border="0"></p>  <h4>예외 및 명시적 작업 사용</h4>  <p>비동기 프로그래밍 모델(모든 Begin/End 쌍)의 기존 사용자인 경우 Begin 메서드가 매개 변수 유효성 검사를 수행한다는 것을 알 수 있습니다. 매개 변수에 문제가 있는 경우 예외가 throw될 수 있습니다. 처리가 완료된 후 다른 오류가 발생했을 수 있습니다. 이 때문에 Begin 및 End 메서드 모두에서 예외를 catch해야 했습니다. 개발을 간소화하기 위해 태스크가 완료된 경우에만 모든 예외가 throw되도록 했습니다. 이것은 당신에게 무엇을 의미합니까? 즉, 두 개 이상이 아닌 한 곳에서 예외를 catch합니다. 예를 들어 비동기 프로그래밍 모델에서 다음과 같은 코드가 있는 경우:</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8105.Screen-Shot-2013_2D00_04_2D00_11-at-12.14.32-PM.png" alt="" border="0"></p>  <p>작업 기반 API를 사용하도록 선택하면 ContinueWith 블록의 모든 예외를 처리하도록 코드가 변경됩니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6574.Screen-Shot-2013_2D00_04_2D00_11-at-12.15.09-PM.png" alt="" border="0"></p>  <p>또는 작업을 보류하고 완료될 때까지 기다리도록 선택할 수 있습니다. 이 경우 코드는 다음과 같습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5621.Screen-Shot-2013_2D00_04_2D00_11-at-12.15.50-PM.png" alt="" border="0"></p>  <p>Happy 경로를 따르는 경우 해당하는 비동기/대기 예외 처리 코드를 더 쉽게 읽고 작성할 수 있습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8764.Screen-Shot-2013_2D00_04_2D00_11-at-12.16.20-PM.png" alt="" border="0"></p>  <h4>단어 닫기</h4>  <p>이 기능은 고객에게 제공하게 되어 매우 기쁩니다. 개발이 훨씬 쉬워지고 Service Bus 함께 일해야 하는 팀의 모든 사람에게 미소를 지을 수 있기를 바랍니다.&nbsp;</p>'
