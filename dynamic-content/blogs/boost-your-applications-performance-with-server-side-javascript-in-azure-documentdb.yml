### YamlMime:Yaml
ms.openlocfilehash: 5832a30803c1614b2d8b2543a230eeb70b6a37d3
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902644"
Slug: boost-your-applications-performance-with-server-side-javascript-in-azure-documentdb
Title: Azure DocumentDB에서 Server-Side JavaScript를 사용하여 애플리케이션 성능 향상
Summary: 이 게시물에서는 DocumentDB의 저장 프로시저 해석을 자세히 살펴보겠습니다.
Content: >-
  <h2>최신 T-SQL 통합 JavaScript</h2>


  <p>Azure DocumentDBAzure"> DocumentDB</a>가 데이터베이스 엔진 내에서 JavaScript 논리의 트랜잭션 실행을 기본적으로 지원하는지 알고 <a href="https://azure.microsoft.com/en-us/services/documentdb/" target="_blank" title="계십니까? JavaScript를 최신 T-SQL 사용하는 접근 방식은 개발자에게 비즈니스 논리를 구현하는 풍부하고 친숙한 인터페이스를 제공합니다. 저장 프로시저, triggerstriggers"></a>"></a><a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/#trigger" target="_blank" title=" 및 <a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/#udf" target="_blank" title="UDF(사용자 정의 함수">)</a>의 형태로 <a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/#example-write-a-simple-stored-procedure" target="_blank" title="표현됩니다. 이 게시물에서는 저장 프로시저의 DocumentDB&rsquo; 해석을 자세히 살펴보겠습니다.</p>


  <h2>고성능 일괄 처리 및 시퀀싱 작업</h2>


  <p>저장 프로시저의 주요 장점은 애플리케이션이 데이터에 더 가깝게 데이터베이스 엔진 내에서 직접 복잡한 일괄 처리 및 작업 시퀀스를 수행할 수 있다는 것입니다. 개발자는 삽입, 업데이트 또는 삭제와 같은 작업을 그룹화 및 시퀀스하고 함께 제출할 수 있습니다. 여기서 이점은 일괄 처리 및 시퀀싱 작업에 대한 네트워크 트래픽 대기 시간 비용을 완전히 방지할 수 있다는 것입니다.</p>


  <p align="center"><img alt="A sequence of database operations" class="aligncenter size-medium wp-image-280691" height="154" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/sprocs-fig1-updated1-636x154.png" width="636"></p>


  <p align="center"><em>데이터베이스 작업 시퀀스</em></p>


  <p align="center"><img alt="A sequence of operations using Stored Procedures" class="aligncenter size-medium wp-image-280701" height="156" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/sprocs-fig2-updated21-636x156.png" width="636"></p>


  <p align="center"><em>저장 프로시저를 사용하는 작업 시퀀스</em></p>


  <p>저장 프로시저를 사용하는 또 다른 주요 이점은 등록 시 바이트 코드 형식으로 암시적으로 미리 컴파일되어 각 호출 시 스크립트 컴파일 비용을 방지한다는 것입니다. JSON이 본질적으로 Javascript 언어 유형 시스템에 매핑되고 DocumentDB의 기본 스토리지 단위이기도 하므로 버퍼 풀에서 JSON 문서를 지연 구체화하고 실행 코드에 주문형으로 사용할 수 있도록 하는 등 백그라운드에서 추가로 최적화할 수 있습니다. 이렇게 하면 저장 프로시저 호출이 빠르며 사용 공간이 적습니다.</p>


  <h2>다중 문서 트랜잭션</h2>


  <p>DocumentDB는 단일 저장 프로시저에 참여하는 모든 작업에 대해 완전한 ACID(원자성, 일관성, 격리 및 내구성)를 보장합니다. 즉, 저장 프로시저를 사용하면 애플리케이션이 모든 작업이 성공하거나 성공하지 못하도록 관련 작업을 단일 일괄 처리로 결합할 수 있습니다. 이는 여러 문서/레코드에서 ACIDtransaction&nbsp;을 제공하는 NoSQL 데이터베이스가 거의 없기 때문에 주목할 만합니다. 그렇다면 트랜잭션을 커밋하거나 롤백하려면 어떻게 해야 할까요? 대답은 간단합니다. 저장 프로시저 내의 모든 작업은 자동으로 단일 트랜잭션으로 래핑됩니다. JavaScript가 예외 없이 완료되면 데이터베이스에 대한 작업이 커밋됩니다. 스크립트 내에서 전파된 예외가 있는 경우 JavaScript 런타임은 전체 트랜잭션을 자동으로 롤백합니다. 실제로 예외를 throw하는 것은 DocumentDB의 &ldquo;ROLLBACK TRANSACTION&rdquo; 과 동일합니다. &rsquo;저장 프로시저에는 서버에서 지정<a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-limits/" target="_blank" title="한 documentdb limitsrequest 시간 제한 기간</a> 내에 모든 작업이 완료되어야 하는 제한된 실행이 있다는 점에 유의">해야 합니다. 해당 시간 제한으로 작업이 완료되지 않으면 트랜잭션이 자동으로 롤백됩니다. 시간 제한을 처리하기 위한 개발을 간소화하기 위해 모든 CRUD(만들기, 읽기, 업데이트 및 삭제) 작업은&nbsp; 해당 작업이 완료될지 여부를 나타내는 부울 값을 반환합니다. 이 부울 값은 신호를 사용하여 실행을 마무리하고 연속 기반 모델을 구현하여 실행을 다시 시작할 수 있습니다(아래 코드 샘플에 설명되어 있습니다).</p>


  <h2>비디오 연습, 코드 샘플 등!</h2>


  <p>시작하기 위해 기다릴 수&rsquo; 없습니까? Weve&rsquo;는 <a href="https://channel9.msdn.com/Blogs/Windows-Azure/Azure-Demo-A-Quick-Intro-to-Azure-DocumentDBs-Server-Side-Javascript">채널 9에서 사용할 수 있는</a> 저장 프로시저의 생성 및 실행을 안내하는 짧은 5분 짜리 비디오를 준비했습니다.</p>


  <div id="attachment_278651" style="text-align: center;" width="280"><a href="https://channel9.msdn.com/Blogs/Windows-Azure/Azure-Demo-A-Quick-Intro-to-Azure-DocumentDBs-Server-Side-Javascript" target="_blank" title="Azure 데모: Azure DocumentDB의 Server-Side Javascript에 대한 빠른 소개"><img alt="Azure Demo: A Quick Intro to Azure DocumentDB's Server-Side Javascript" class="size-thumbnail wp-image-278651" height="160" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/video-thumbnail-280x160.png" width="280"></a></div>


  <div style="text-align: center;" width="280">Azure 데모: Azure DocumentDB&#39;Server-Side Javascript에 대한 빠른 소개</div>


  <p>&nbsp;</p>


  <p>또한 Weve&rsquo;는 <a href="https://github.com/Azure/azure-documentdb-js/tree/master/server-side/samples">Github 리포지토리</a>에서 사용할 수 <a href="https://github.com/Azure/azure-documentdb-js/blob/master/server-side/samples/stored-procedures/upsert.js">있는 upsert</a>, <a href="https://github.com/Azure/azure-documentdb-js/blob/master/server-side/samples/stored-procedures/bulkDelete.js">대량 삭제</a>, <a href="https://github.com/Azure/azure-documentdb-js/blob/master/server-side/samples/stored-procedures/update.js">업데이트</a> 및 <a href="https://github.com/Azure/azure-documentdb-js/blob/master/server-side/samples/stored-procedures/BulkImport.js">대량 가져오기</a>를 포함한 다양한 새로운 저장 프로시저 예제를 준비했습니다. 저장된 프로시저를 공유하시겠습니까? 끌어오기 요청을 보내주세요. Wed&rsquo;는 <a href="https://github.com/Azure/azure-documentdb-js">Github</a> 및 <a href="https://twitter.com/documentdb">Twitteraccounts</a>&nbsp;에 기능을 제공하고 스포트라이트하는 것을 좋아합니다. DocumentDB를 <a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-create-account/">시작하는</a> 방법 또는 자세한 내용은 <a href="https://azure.microsoft.com/en-us/documentation/services/documentdb/">웹 사이트를</a> 확인하세요.&nbsp; DocumentDBs&rsquo; 서버 쪽 프로그래밍 모델에 대한 자세한 내용은 <a href="https://azure.microsoft.com/en-us/documentation/articles/documentdb-programming/">여기에서 설명서를</a> 확인하세요.</p>
