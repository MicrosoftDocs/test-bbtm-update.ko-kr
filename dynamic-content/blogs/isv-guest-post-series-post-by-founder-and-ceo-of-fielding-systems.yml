### YamlMime:Yaml
ms.openlocfilehash: e298724f2515a7cac11fe0360dcd5ba96c169676
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910941"
Slug: isv-guest-post-series-post-by-founder-and-ceo-of-fielding-systems
Title: 'ISV 게스트 포스트 시리즈: 필딩 시스템의 설립자이자 CEO에 의해 게시물'
Summary: Azure ISV 블로그 시리즈를 Windows 목적은 Windows Azure 애플리케이션 개발 및 deployment.& 중에 사용한 ISV weve&rsquo;의 성과 중 일부를 강조하는 것입니다.
Content: '<p>Windows Azure ISV 블로그 시리즈의 목적은 Windows Azure 애플리케이션 개발 및 배포 중에 사용한 ISV weve&rsquo;의 성과 중 일부를 강조하는 것입니다.&nbsp; 필딩 시스템<i> 설립자이자 CEO인 숀 커터(Shawn Cutter)</i>가 <i>작성한 </i>Todays&rsquo; 게시물은 회사가 <a target="_blank" href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT_id=cmp_pst001_blg_post0091gen">Windows Azure</a>를 사용하여 석유 및 가스 산업 고객을 위해 웹 기반 서비스를 제공하는 방법을 설명합니다.</p>  <p>-------------------------------------------------------------------------------------------------------------</p>  <p>Fielding Systems는 운영자가 현장 운영 관리, 원격 모니터링 및 생산 분석을 통해 생산 활동을 간소화하고 생산 출력을 높이는 데 도움이 되는 모든 규모의 미드스트림 및 업스트림 석유 및 가스 회사를 위한 두 가지 강력한 웹 기반 서비스를 제공합니다.&nbsp; 각 애플리케이션에는 모든 사용자가 iPhone, Android &amp; Windows Phone 포함한 모든 최신 스마트폰에서 데이터 및 작업에 액세스할 수 있는 완전한 기능을 갖춘 모바일 버전이 포함되어 있습니다.</p>  <p>FieldVisor는 석유 및 가스 생산 작업에서 발생하는 모든 작업을 추적하는 데 사용할 수 있는 현장 자동화 및 데이터 캡처 애플리케이션입니다. &nbsp;사용자는 프로덕션, 장비, 서비스, 처리 기록, 작업 및 프로덕션 작업의 다른 많은 측면을 추적할 수 있습니다. FieldVisor는 펜 및 용지 필드 작업을 대체하기 위해 수동 데이터 입력에 더 중점을 두며 해당 데이터에 대한 강력한 분석 및 보고를 제공합니다.&nbsp; ScadaVisor는 흐름 미터, 펌프 오프 컨트롤러, 탱크, 압축기, PLC, 인공 리프트 및 기타 다양한 SCADA 디바이스와 같은 원격 디바이스를 실시간으로 모니터링합니다.&nbsp; VisorBridge라는 자체 클라우드 기반 통신 및 폴링 엔진에서 지원되기 때문에 클라우드 기반의 유일한 서비스입니다.&nbsp; 이렇게 하면 Fielding Systems가 다른 모든 호스팅 SCADA 서비스 공급자에 비해 확실한 경쟁 우위를 점할 수 있습니다.</p>  <p>원래 모든 Fielding Systems 애플리케이션은 자체 데이터 센터에서 호스트되었습니다.&nbsp; 이러한 애플리케이션은 Windows Azure를 최대한 활용하도록 업그레이드되었으며, 2011년 7월에 Windows Azure로 완전히 마이그레이션되었습니다. 클라우드로 이동하기로 한 결정은 각 애플리케이션에 필요한 서버, 백업 및 네트워킹 관리보다는 최첨단 소프트웨어 기술에 전적으로 노력과 리소스를 집중하려는 강한 욕구에 따라 이루어졌습니다. 우리는 종종 기업이 클라우드에서 할 수 있는 초점으로 기술을 발전시키는 대신 비즈니스를 지원하기 위해 사물에 집중하는 데 귀중한 시간과 자원을 소비하는 것을 인식했습니다.&nbsp; 또한 클라우드로 전환하면 서버 리소스의 과도한 용량을 줄이고 자체 데이터 센터 및 공동 배치 유지 관리와 관련된 높은 소프트웨어 라이선스 비용을 절감함으로써 주요 비용 절감을 용이하게 합니다. 다양한 클라우드 옵션을 철저히 평가한 후 더 강력한 개발 플랫폼을 제공했기 때문에 Azure를 Windows 선택했습니다.&nbsp; azure를 활용하면 Windows Azure는 현재 호스팅된 가상 머신에 불과했던 다른 제품보다 훨씬 더 큰 수준에서 출시 속도와 확장성을 허용할 수 있습니다.</p>  <p>Windows Azure로의 초기 마이그레이션으로 인해 랙 공간, 전원, 백업 및 보조 핫 사이트 공동 배치에 대한 기존 데이터 센터 비용을 최소화할 수 있습니다.&nbsp; 그러나 마이그레이션 이후 제품 및 고객 기반을 확장함에 따라 비용은 계속 감소합니다.&nbsp;</p>  <h3>아키텍처</h3>  <p>FieldVisor, FieldVisor Mobile, ScadaVisor 및 ScadaVisor Mobile은 각 고객에 대한 단일 테넌트 SQL Azure 데이터베이스가 있는 별도의 다중 테넌트 웹 애플리케이션으로 <a target="_blank" href="https://www.windowsazure.com/en-us/home/features/sql-azure/?WT_id=cmp_pst001_blg_post0091sql">Windows</a> Azure에 존재합니다.&nbsp; 이러한 애플리케이션은 경보 및 알림을 처리하고, 고객 데이터베이스를 유지 관리하고, 필드 디바이스에서 원격 데이터 수집을 수행하기 위해 다중 스레드 작업자 역할과 함께 모든 사용자, 역할, 보안 및 기타 애플리케이션 구성을 관리하는 중앙 SSO 관리 애플리케이션에서 지원됩니다.</p>  <p>현재 다음을 포함하여 Windows Azure 클라우드의 거의 모든 측면을 활용합니다.</p>  <ul>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/compute/?WT_id=cmp_pst001_blg_post0091com">계산</a> 인스턴스: 여러 웹 및 작업자 역할</li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/storage/?WT_id=cmp_pst001_blg_post0091sto">Blob Storage</a>: Blob Storage는 BacPac을 사용하여 사이트 증분 업그레이드 및 자동화된 SQL Azure 데이터베이스 백업에 사용됩니다.</li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/storage/?WT_id=cmp_pst001_blg_post0091sto">테이블 Storage</a>: 테이블은 전체 시스템 로깅을 위해 중앙 집중식 데이터 재처리 및 성능 카운터 데이터에 사용됩니다.</li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/storage/?WT_id=cmp_pst001_blg_post0091sto">큐 Storage</a>: 큐는 이벤트 예약, 실시간 디바이스 데이터 요청, 자동화된 알림 및 작업자 역할 관리에 사용됩니다.&nbsp;</li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/sql-azure/?WT_id=cmp_pst001_blg_post0091sql">SQL Azure</a>: 모든 고객 애플리케이션 데이터는 다중 테넌트인 몇 가지 중앙 핵심 관리 데이터베이스와 함께 단일 테넌트 데이터베이스에 저장됩니다.</li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/business-analytics/?WT_id=cmp_pst001_blg_post0091rep">SQL Azure 보고</a>: FieldVisor 및 ScadaVisor의 보고는 SQL Azure 보고에서 지원됩니다.&nbsp; 보고서는 보고서 보기 ASP.NET 컨트롤을 사용하는 사용자와 예약된 모든 보고서를 관리하는 작업자 역할 프로세스에서 제어하는 사용자 정의 일정에 따라 요청 시 실행됩니다.</li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/caching/?WT_id=cmp_pst001_blg_post0091cac">캐싱</a>: 캐싱은 각 웹 애플리케이션에 대한 캐시 지원과 함께 각 애플리케이션의 세션 공급자에 사용됩니다.&nbsp; 또한 캐싱은 각 SQL Azure 데이터베이스의 부하를 제한하기 위해 많이 활용됩니다.</li>  </ul>  <p>각 애플리케이션을 업그레이드하는 동안 여러 프로세스에 대해 Table Storage 고려했습니다. 데이터의 복잡성과 SQL 데이터베이스의 필수 존재로 인해 모든 중앙 프로세스에 데이터베이스를 활용하기로 결정했지만 백그라운드 처리, 데이터베이스 삽입, 자동화된 가져오기/내보내기 및 원격 디바이스 폴링을 위해 pub/sub 모델을 준수하기로 결정했습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8712.FSDiagram1.png" alt="" border="0"></p>  <h3>SSO/중앙 다중 스레드 작업자 역할</h3>  <p>예약된 작업, 알림, 자동화된 가져오기/내보내기 및 수행해야 하는 모든 작업을 처리하는 모든 작업자 역할과 함께 사용자 지정 SSO(Single Sign-On) 서비스는 몇 개의 Small 인스턴스에 상주합니다.&nbsp; 수행되는 대부분의 실제 작업 및 처리는 SQL Azure 작은 작업 단위로 수행되므로 이러한 컴퓨팅 인스턴스에 필요한 오버헤드가 낮습니다.</p>  <h3>애플리케이션</h3>  <p>FieldVisor 및 ScadaVisor는 웹 및 OData 서비스를 지원하는 모바일 버전과 함께 모두 두 개의 중간 컴퓨팅 인스턴스에 보관됩니다.&nbsp; 다중 테넌트 배포 프로세스는 출시를 처리하고 IIS를 관리하여 새 사이트 및 서비스를 스핀업합니다.&nbsp; 다이어그램은 각 애플리케이션에 대한 단일 테넌트 데이터베이스를 보여 줍니다.</p>  <h3>SQL Azure Reporting</h3>  <p>Windows Azure에 대한 초기 프로덕션 배포 시 FieldVisor 및 ScadaVisor 모두에 대한 모든 보고서 처리를 처리하는 SQL Server 2008 R2 Reporting Services의 자체 인스턴스를 계속 실행해야 했습니다.&nbsp; 이후 모든 보고서 처리를 SQL Azure 보고로 옮겼으며 SQL Azure Reporting을 통해 프로덕션에 진출한 최초의 회사 중 하나입니다.</p>  <h3>작업자 역할</h3>  <p>모든 작업자 역할 인스턴스는 각 태스크 프로세서가 다른 모든 스레드를 유지하는 각 인스턴스에 단일 마스터 스레드가 있는 자체 스레드가 있는 다중 스레드 환경에서 실행되도록 설계되었습니다.&nbsp; 또한 단일 마스터 스레드는 컴퓨팅 인스턴스 중 하나에서 엔터프라이즈 마스터 스레드로 작동하여 실행해야 하는 프로세스와 시기를 결정하는 의사 결정자가 하나만 있는지 확인합니다.&nbsp; 이 작업자 역할 아키텍처는 Azure에서 이러한 유형의 예약된 작업을 처리하기 위해 SQL 에이전트 또는 추가 작업 스케줄러를 제공하지 않는 Windows 제한의 무효를 채우기 위해 빌드되었습니다.&nbsp; 이러한 작업자 역할에서 실행되는 프로세스는 내부 관리 기능과 고객 관련 서비스를 모두 제공합니다.&nbsp; 이러한 프로세스의 몇 가지 예는 다음과 같습니다.</p>  <ul>  <li>중요한 디바이스 경보 처리</li>  <li>고객 예약 보고서 실행</li>  <li>내부 상태 검사 및 보고서</li>  <li>이메일/SMS 알림 보내기</li>  <li>다시 인덱싱 및 Blob 백업을 포함한 데이터베이스 유지 관리</li>  <li>고객을 위한 자동화된 가져오기 및 내보내기</li>  </ul>  <p>마스터 스케줄러는 Windows Azure 큐를 활용하여 처리를 위해 각 작업 또는 작업 그룹을 큐에 제출합니다.&nbsp; 여러 컴퓨팅 인스턴스에서 실행되는 작업자 스레드는 다양한 큐를 모니터링하고 처리를 위한 작업을 선택합니다.&nbsp; 각 인스턴스의 다중 스레드 특성을 사용하면 각 인스턴스의 모든 리소스를 최대화할 수 있으며 향후 작업 처리 시 거의 무한 확장성이 가능합니다.&nbsp; Windows Azure 큐를 사용하면 인스턴스가 오프라인 상태가 될 경우 작업자 역할을 복원할 수 있습니다. 그런 다음 해당 작업은 다른 인스턴스에서 선택하고 처리할 큐에 다시 배치됩니다.&nbsp; 모든 단일 작업 단위는 큐에서 각 메시지가 처리될 때 작업 단위 자체에 각 스레드가 처리하는 데 필요한 모든 데이터를 포함하고 작업자 중 하나가 사라지면 데이터 손상의 위험 없이 다른 작업자 인스턴스에서 작업 단위를 선택할 수 있도록 멱등성을 염두에 두고 설계되었습니다.&nbsp;</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5775.FSDiagram2.png" alt="" border="0"></p>  <h3>다중 테넌트</h3>  <p>Windows Azure로 마이그레이션하는 동안 각 고객과 각 애플리케이션에 대해 별도의 애플리케이션을 프로비전하는 대신 각 애플리케이션을 다중 테넌트 애플리케이션 모드에서 실행하도록 변환하기로 결정했습니다.&nbsp; 이 결정은 다음 두 가지 주요 요인에 따라 결정되었습니다.</p>  <ul>  <li>  <p>모든 고객의 각 애플리케이션에 대한 유지 관리 및 출시 시간 증가</p>  </li>  <li>각 고객에게 필요한 많은 양의 서버 리소스</li>  </ul>  <p>각 애플리케이션은 사용량이 많은 동안 각 고객에게 기본적으로 각 서비스에 대한 자체 IIS 애플리케이션이 있는 경우 대규모 인스턴스에서도 모든 메모리를 효과적으로 소비하는 많은 양의 메모리를 사용할 수 있습니다.&nbsp; 특정 고객이 사용할 수 있는 서비스 및 사용자의 ID에 따라 적절한 데이터베이스에 SQL Azure 연결을 매핑하는 추가 데이터 액세스 계층을 통해 다중 테넌트를 처리합니다.&nbsp; 현재 두 개의 중간 인스턴스에서 핵심 고객 지향 서비스를 호스트하고 있으며, 사용량이 많은 동안 부하가 증가함에 따라 추가 인스턴스를 가져와 하루 중 사용량이 많은 시간에 처리 서비스를 공유할 수 있습니다.&nbsp; 성능 카운터를 사용하여 성능을 모니터링하고 Compute API를 활용하여 서비스를 관리합니다.&nbsp; 서비스의 경우 CPU 및 메모리 사용량이라는 두 가지 주요 카운터를 관찰합니다.&nbsp;</p>  <p>또한 작업자 역할을 사용하여 Blob Storage에서 zip 파일의 변경 내용을 모니터링하고 변경 내용이 감지되면 애플리케이션을 업데이트하는 자체 다중 애플리케이션 호스트 배포 프로세스 및 관리 계층을 만들었습니다.&nbsp; 이 프로세스는 업데이트 롤아웃의 관리 및 유지 관리 오버헤드를 크게 줄여 줍니다.&nbsp;</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3107.FSDiagram3.png" alt="" border="0"></p>  <h3>Azure 작업자 및 웹 역할 크기 조정 Windows</h3>  <p>Windows Azure로의 전체 애플리케이션 마이그레이션 전에 진단, 성능 및 컴퓨팅 인스턴스 크기 조정 고려 사항을 위해 각 애플리케이션을 개별적으로 로드 테스트했습니다.&nbsp; 중앙 SSO 서비스와 소수의 작업자 프로세스는 이미 문제나 성능 문제 없이 두 개의 Small Compute 인스턴스에서 실행되고 있었습니다.&nbsp; 이러한 인스턴스의 초당 요청 수가 최소화되고 대부분의 처리에 단순하고 짧은 버스트가 발생하여 사용량이 많은 시간에도 IO 및 메모리 사용량이 낮아지기 때문에 이러한 프로세스는 단독으로 남겨져야 했습니다.&nbsp; 더 많은 리소스가 필요하므로 처리량을 확장하기 위해 추가 인스턴스를 추가할 수 있습니다.&nbsp;</p>  <p>애플리케이션 인스턴스의 경우 올바른 구성을 평가하기 위해 여러 가지 구성을 테스트했습니다.&nbsp; 테스트는 각 애플리케이션에서 사용자 요청 패턴을 기록하고 Test Studio에서 재생하는 것으로 구성되었습니다.&nbsp; 테스트된 주요 구성은 중간 컴퓨팅 인스턴스 2-3개와 비교하여 2-6개의 Small Compute 인스턴스였습니다.&nbsp; 중간 인스턴스는 분명히 더 많은 메모리를 포함하지만 네트워크 및 IO 용량에도 차이가 있습니다.</p>  <ul>  <li>작음: 100Mbps</li>  <li>중간: 200Mbps&nbsp;</li>  </ul>  <p>이러한 차이는 부하를 많이 테스트하는 동안 기하급수적으로 반영되었습니다. &nbsp;6개의 Small Compute 인스턴스가 있는 구성에 대해 초당 30-50개의 요청을 생성할 때 요청이 큐에 대기되고 시간 제한이 발생합니다.&nbsp; 중간 크기의 인스턴스는 부하 테스트를 쉽게 견딜 수 있으며 향후에는 대규모 인스턴스가 아닌 계속 확장할 수 있다고 생각합니다.&nbsp; 또한 중간 인스턴스를 분리하여 별도의 서비스를 처리하도록 할 수 있습니다. 즉, 모든 서비스의 부하를 공유하는 4개의 컴퓨팅 인스턴스에서 각 집합에 호스트되는 서비스의 50%가 있는 두 개의 중간 인스턴스 집합이 있는 것으로 이동합니다.</p>  <h3>결론</h3>  <p>Fielding Systems의 경우 거의 모든 Windows Azure 스택을 활용하여 서버 용량, 백업 및 관리에 대해 걱정하기보다는 믿을 수 없을 만큼 확장 가능한 석유 및 가스 소프트웨어 서비스를 구축하는 데 전적으로 집중하고 있습니다.&nbsp; 모든 항목을 업그레이드하고 Windows Azure로 이동하기 전에 다른 클라우드 제품을 살펴보았습니다.&nbsp; PaaS(Platform as the Service) 디자인의 장기적인 이점을 확인하고 일부 원격 데이터 센터에서 가상 머신을 단순히 추가하고 관리하는 것에 비해 분명한 이점을 이해했습니다.&nbsp; 우리의 경쟁은 비용 센터를 관리하는 데 시간과 자원을 소비하지만, 우리는 우리의 핵심 기술 개선에 초점을 맞추고 있습니다: 소프트웨어.&nbsp; Windows Azure 캐싱을 더 많이 사용하고 Azure Service Bus Windows Windows Azure를 활용하여 규모를 더욱 개선하는 방법을 지속적으로 모색하고 있습니다.&nbsp; &nbsp;&nbsp; 클라우드는 고객에게 판매하는 것이 아닙니다. 또한 Office 365 및 Dynamics CRM과 같은 서비스에서 할 수 있는 모든 작업에 내부적으로 사용합니다.&nbsp; 우리는 기술의 출혈 가장자리에 그것을 사랑.&nbsp;</p>'
