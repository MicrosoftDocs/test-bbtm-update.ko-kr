### YamlMime:Yaml
ms.openlocfilehash: 320e3afba279813ee0ccf7a7e4e684f3fe05c5de
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902464"
Slug: public-preview-azure-sql-database-temporal-tables
Title: Azure SQL Database 임시 테이블의 공개 미리 보기
Summary: 공개 미리 보기에서 사용할 수 있는 Azure SQL Database 모든 서비스 계층의 Temporal 테이블을 사용하여 사용자 지정 코딩 없이도 데이터 변경 기록을 추적할 수 있습니다. 응용 프로그램에 임시 테이블을 활용하는 방법에 대해 알아봅니다.
Content: "<p>이제 <a href=\"https://azure.microsoft.com/en-us/updates/preview-temporal-tables-in-azure-sql-database/\">공개 미리 보기에서 사용할</a> 수 있으며, 사용자 지정 코딩 없이도 데이터 변경 내용의 전체 기록을 추적하고 분석할 수 있는 Azure SQL Database 새로운 프로그래밍 기능인 Temporal Tables를 사용할 수 있습니다. 임시 테이블은 특정 기간 내에서만 유효하기 때문에 저장된 팩트를 해석할 수 있도록 데이터를 시간 컨텍스트와 밀접하게 연결해둡니다.</p> <h2>사용 시나리오</h2> <p>실제 데이터 원본은 정적이지 않습니다. 중요한 정보는 시간이 지남에 따라 변경되지만, 다양한 애플리케이션 시나리오에서는 특정 시점에 분석을 집중할 수 있는 기능을 사용하여 추세를 분석해야 합니다.</p> <p>데이터 변경 내용을 추적하는 사용자는 근본적인 질문에 대답하는 것을 목표로 합니다. 과거의 특정 시점(어제, 한 달 전, 1년 전 등)에서 사실은 어떻게 보였는가?, 어떤 변경이 이루어졌는가?, 특정 기간의 주요 추세는 언제, 무엇이었을까요? 그러나 데이터베이스에서 적절한 지원이 없으면 이와 같은 질문에 대답하기가 쉽지 않았습니다.</p> <p>임시 테이블은 기록 데이터로 작동하는 애플리케이션을 개발하기 위한 생산성 도구로 설계되었으며, 생산성이 크게 향상되기 때문에 아래에 설명된 시나리오에서 사용하는 것이 좋습니다. 임시 테이블은 Azure SQL Database 모든 서비스 계층에서 사용할 수 있습니다.</p> <h3>데이터 감사</h3> <p>중요한 정보를 저장하는 테이블에서 <a href=\"https://msdn.microsoft.com/en-in/library/dn935015.aspx#Anchor_0\" target=\"_blank\">임시 시스템 버전 관리를</a> 사용하도록 설정합니다. 이 경우 변경된 내용, 시기 및 대상을 추적하고 언제든지 변경 포렌식 작업을 수행해야 합니다. 임시 테이블을 사용하면 개발 주기의 초기 단계에서 데이터 감사 시나리오를 계획하거나 필요할 때 기존 애플리케이션에 데이터 감사를 추가할 수 있습니다.</p> <p>새 애플리케이션을 개발하는 경우 <a href=\"https://msdn.microsoft.com/en-us/library/mt590957.aspx\" target=\"_blank\">임시 시스템 버전으로 키 테이블을 만듭니다.</a> 기존 데이터베이스에서 데이터 감사를 수행해야 하는 경우 ALTER TABLE을 사용하여 <a href=\"https://msdn.microsoft.com/library/mt590957.aspx#Anchor_3\" target=\"_blank\">임시 테이블이 아닌 테이블을 temporal로 확장</a>합니다.&nbsp; 다음 예제에서는 간단한 CREATE TABLE 문을 사용하여 HR 데이터베이스에서 직원 관련 정보의 변경 내용 추적을 시작하는 방법을 보여 줍니다.</p><pre class=\"prettyprint\">CREATE TABLE Employee \n(  \n    [EmployeeID] int NOT NULL PRIMARY KEY CLUSTERED \n  , [Name] nvarchar(100) NOT NULL\n  , [Position] varchar(100) NOT NULL \n  , [Department] varchar(100) NOT NULL\n  , [AnnualSalary] decimal (10,2) NOT NULL\n  , [ValidFrom] datetime2 (0) GENERATED ALWAYS AS ROW START\n  , [ValidTo] datetime2 (0) GENERATED ALWAYS AS ROW END\n  , PERIOD FOR SYSTEM_TIME (ValidFrom, ValidTo)\n )  \n WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.EmployeeHistory));</pre>\n<p>테이블이 만들어지면 데이터 감사가 하나의 쿼리에 불과합니다. 새 <a href=\"https://msdn.microsoft.com/en-us/library/dn935015.aspx#Anchor_3\" target=\"_blank\">FOR SYSTEM_TIME</a> 절을 사용하는 다음 간단한 쿼리는 관심 기간 동안 특정 직원의 변경 내용을 쉽게 검색하는 방법을 보여 줍니다.</p><pre class=\"prettyprint\">SELECT * FROM Employee \nFOR SYSTEM_TIME BETWEEN '2014-01-01' AND '2015-01-01' \nWHERE EmployeeID = 1000 ORDER BY ValidFrom;</pre>\n<h3>지정 시간 분석(시간 이동)</h3>\n<p>개별 레코드에 발생한 변경 내용에 초점을 맞춘 데이터 감사와 달리 시간 이동 시나리오에서는 일반적으로 전체 데이터 세트가 과거에 어떻게 표시되었거나 시간이 지남에 따라 변경되었는지 확인하려고 합니다. 시간 이동에는 분석하려는 여러 임시 테이블이 포함될 수 있으며 각 테이블은 독립적인 속도로 변경됩니다.</p>\n<ul>\n<li>기록 전체의 중요한 지표에 대한 추세\n<li>과거의 특정 시점(어제, 한 달 전 등)에 대한 데이터의 정확한 스냅샷\n<li>관심 있는 두 지정 시간 간의 차이(예: 한 달 전 vs. 3개월 전) </li></ul>\n<p>데이터 감사 시나리오에 설명된 대로 새 <a href=\"https://msdn.microsoft.com/en-us/library/mt590957.aspx\" target=\"_blank\">CREATE</a> 또는 <a href=\"https://msdn.microsoft.com/library/mt590957.aspx#Anchor_3\" target=\"_blank\">ALTER TABLE</a> 구문을 사용하여 중요한 테이블을 임시 테이블로 구성합니다.</p>\n<h3>행 수준에서 잘못된 데이터 수정</h3>\n<p>사용자 또는 애플리케이션에서 실수로 오류가 발생한&nbsp; 경우 임시 테이블의 기록 데이터를 사용하여 개별 테이블 행을 \"마지막으로 잘 알려진 상태\"로 신속하게 복구할 수 있습니다. 이는 영향을 받는 행을 찾을 수 있거나 원치 않는 데이터 변경 시간을 알고 있는 경우에 특히 유용합니다. 임시 테이블을 사용하면 백업을 처리하지 않고도 효율적으로 복구를 수행할 수 있습니다. 이 접근 방법에는 여러 가지 이점이 있습니다.</p>\n<ul>\n<li>복구 범위를 매우 정확하게 제어할 수 있습니다. 영향을 받지 않는 행은 최신 상태로 유지되며, 이는 종종 중요한 요구 사항입니다. \n<li>이 작업은 매우 효율적이며 데이터베이스는 데이터를 사용하는 모든 워크로드에 대해 온라인 상태를 유지합니다. \n<li>복구 작업 자체가 버전 관리입니다. 복구 작업 자체에 대한 감사 내역이 있으므로 필요한 경우 나중에 발생한 작업을 분석할 수 있습니다. </li></ul>\n<p>자세한 내용은 <a href=\"https://msdn.microsoft.com/library/mt631669.aspx?#Anchor_4\" target=\"_blank\">해당 MSDN 문서를 확인하세요</a>.</p>\n<h2>임시 테이블을 고려해야 하는 이유는 무엇인가요?</h2>\n<p>데이터 변경 내용을 추적하기 위한 요구 사항이 있는 경우 Temporal 테이블을 사용하면 사용자 지정 솔루션보다 여러 가지 이점이 있습니다. 임시 테이블은 데이터 분석에서 보안에 이르기까지 개체 생성부터 스키마 진화 및 데이터 수정까지 개발 수명 주기의 모든 단계를 간소화합니다.</p>\n<ul>\n<li><strong>테이블 만들기 및 스키마 진화</strong>는 잘 알려진 CREATE/ALTER 테이블 구문과 <a href=\"https://msdn.microsoft.com/en-us/library/mt204009.aspx\" target=\"_blank\">SQL Server Development Tools</a>의 풍부한 테이블 편집기를 통해 지원됩니다. 임시 테이블에 대한 스키마 작업은 일반적인 사용 시나리오에 최적화된 스마트 기본 옵션을 자동으로 적용합니다. \n<li><strong>변경 내용 추적</strong> 은 워크로드에 완전히 투명하게 발생합니다. 사용자와 애플리케이션은 일반 방식으로 데이터를 수정하지만 기록은 백그라운드에서 자동으로 빌드됩니다. \n<li><strong>데이터 분석</strong>: Azure SQL Database <a href=\"https://msdn.microsoft.com/en-us/library/dn935015.aspx#Anchor_3\" target=\"_blank\">FOR SYSTEM_TIME</a> 절을 사용하여 지정 시간 쿼리를 매우 쉽게 수행할 수 있습니다. 임시 쿼리의 힘은 뷰를 사용하여 복잡한 데이터베이스 모델을 쿼리하고 과거의 특정 시점으로 외래 키 관계가 있는 여러 테이블을 포함하는 시나리오에서 명백해집니다. \n<li><strong>기록 데이터의 불변성: </strong> 임시 테이블은 편집 권한이 있는 사용자가 기록 데이터를 변경할 수 없도록 합니다. </li></ul>\n<h2>다음 단계</h2>\n<p>애플리케이션에서 Temporal 테이블을 통합하는 방법을 알아보려면 단계별 지침과 함께 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/sql-database-temporal-tables/\" target=\"_blank\">다음 문서를</a> 참조하세요. 채널 9 <a href=\"https://channel9.msdn.com/Blogs/jsturtevant/Azure-SQL-Temporal-Tables-with-RockStep-Solutions\" target=\"_blank\">를 방문하여 실제 고객 이야기를</a> 듣고 데모를 통해 <a href=\"https://channel9.msdn.com/Shows/Data-Exposed/Temporal-in-SQL-Server-2016\" target=\"_blank\">라이브 프레젠테이션</a> 을 시청하세요.</p>\n<p>자세한 내용은 <a href=\"https://msdn.microsoft.com/en-us/library/dn935015.aspx\" target=\"_blank\">MSDN 설명서를 확인하세요</a>. 마지막으로, 오늘 임시 테이블을 사용해 보세요 - 여러분의 의견을 듣고자 합니다!</p>"
