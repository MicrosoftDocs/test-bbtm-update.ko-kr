### YamlMime:Yaml
ms.openlocfilehash: 78031fb70a730d9efe6a6c16a3984d9475e85454
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139901600"
Slug: migrating-to-azure-sql-database-with-zero-downtime-for-read-only-workloads
Title: 읽기 전용 워크로드에 대한 가동 중지 시간이 0인 Azure SQL Database 마이그레이션
Summary: Microsoft는 MSAsset라는 내부적으로 작성된 서비스를 사용하여 전 세계의 모든 Microsoft 데이터 센터 하드웨어를 관리합니다. MSAsset는 회사 전체에서 Microsoft의 서버, 스위치, 스토리지 디바이스 및 케이블을 추적하는 데 사용되며 중단 수정 요구 사항을 수용하려면 24/7 가용성이 필요합니다.
Content: >-
  <p><em>MSAsset 엔지니어링 팀&rsquo; 피터 리우(수석 소프트웨어 엔지니어), 비제이 칸난(소프트웨어 엔지니어), Sathya Muhandiramalage(수석 소프트웨어 엔지니어), 브라이언 카스티요(수석 소프트웨어 엔지니어) 및 Shail Batra(수석 소프트웨어 엔지니어링 관리자)가 Azure SQL Database 제품 팀과 마이그레이션 스토리를 공유해 주신 것에 대해 특별히 감사드립니다.</em></p>


  <p>Microsoft는 <strong>MSAsset</strong> 라는 내부적으로 작성된 서비스를 사용하여 전 세계의 모든 Microsoft 데이터 센터 하드웨어를 관리합니다. MSAsset는 회사 전체에서 Microsofts&rsquo; 서버, 스위치, 스토리지 디바이스 및 케이블을 추적하는 데 사용되며 중단 수정 요구 사항을 수용하려면 24/7 가용성이 필요합니다.</p>


  <p>작년에 Azure SQL Database 마이그레이션하기 전에 MSAssets&rsquo; 데이터 계층은 SQL Server 245개의 테이블이 있는 107GB 데이터베이스로 구성되었습니다. 데이터베이스는 고가용성 및 읽기 작업 확장에 사용되는 SQL Server Always On 가용성 그룹 토폴로지의 일부였습니다.</p>


  <p>MSAsset 엔지니어링 팀은 다음과 같은 문제에 직면했습니다.</p>


  <ul>
   <li>노후화된 하드웨어는 안정성 및 크기 조정 요구 사항을 충족하지 못했습니다.</li>
   <li>심각도가 높은 데이터 계층 인시던트가 증가했으며 문제 해결, 완화, 근본 원인 분석 및 지속적인 유지 관리에 도움이 되는 직원의 데이터베이스 관리자가 없었습니다.</li>
   <li>MSAssets&rsquo; 데이터베이스는 2012년 SQL Server 실행되었습니다. 개발자와 내부 고객은 점점 더 새로운 SQL Server 기능에 대한 액세스를 요청했습니다.</li>
  </ul>


  <p>MSAsset 엔지니어링 팀은 다양한 옵션을 탐색하고 몇 가지 요인을 고려한 후 Azure SQL Database 향후 투자에 적합한 데이터 계층이며 모든 주요 문제를 해결할 것이라고 결정했습니다. Azure SQL Database 전환하면서 확장성, 기본 제공 관리 효율성 및 최신 기능에 대한 액세스가 향상되었습니다.&nbsp;&nbsp;</p>


  <p>24/7 가용성 요구 사항으로 엔지니어링 팀은 읽기 전용 작업에 가동 중지 시간을 발생시키지 않고 SQL Server Azure SQL Database 마이그레이션하는 방법을 찾아야 했습니다. MSAsset은 데이터 수정과 관련된 트랜잭션의 비율이 훨씬 적은 읽기가 많은 서비스입니다. 단계적 접근 방식을 사용하여 읽기 전용 트래픽의 가동 중지 시간이 0이고 읽기/쓰기 작업의 가동 중지 시간이 2시간 미만인 Azure SQL Database 이동할 수 있었습니다. 이 사례 연구는 이것이 어떻게 성취되었는지 간략하게 설명할 것입니다.&nbsp;</p>


  <h2>원래 MSAsset 아키텍처</h2>


  <p>원래 MSAsset 애플리케이션 아키텍처는 SQL Server 2012 인스턴스에 있는 주 데이터베이스에 대한 읽기-쓰기 액세스 권한이 있는 웹 계층으로 구성되었습니다. 데이터베이스는 동기식 읽기 전용 보조 복제본 1개와 읽기 전용 비동기 보조 복제본 3개가 있는 Always On 가용성 그룹 내에 포함되었습니다. 애플리케이션은 가용성 그룹 수신기를 사용하여 들어오는 쓰기 트래픽을 주 복제본으로 전달했습니다. 상당한 양의 읽기 전용 보고 트래픽을 수용하기 위해 전용 부하 분산 장치를 사용하여 라운드 로빈 알고리즘을 사용하여 읽기 전용 보조 복제본 간에 요청을 전달했습니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/a398a874-bf06-4b9d-83d9-a5756689ad1e.png"><img alt="image" border="0" height="270" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/856b2314-52e2-4c23-9809-166be37b76e4.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="624"></a></p>


  <p><br>

  레거시 SQL Server 솔루션과 마찬가지로 Azure SQL Database 이동을 계획할 때 제안된 새 솔루션은 최종 마이그레이션된 워크로드 볼륨 및 관련 Azure SQL Database 리소스 사용량에 따라 하나의 읽기-쓰기 데이터베이스를 수용해야 했습니다.</p>


  <h2>단계적 마이그레이션 방법 사용</h2>


  <p>MSAsset 엔지니어링 팀은 SQL Server Azure SQL Database 이동하는 단계적 증분 접근 방식을 사용했습니다.&nbsp; 이러한 증분 접근 방식은 프로젝트 실패 위험을 줄이는 데 도움이 되었으며, 팀이 복잡한 애플리케이션 마이그레이션에서 발생하는 불가피한 예기치 않은 변수를 학습하고 적응할 수 있게 해 주었습니다.</p>


  <p>마이그레이션 단계는 다음과 같습니다.</p>


  <ol>
   <li>하이브리드 SQL Server 구성하고 모든 읽기/쓰기 활동을 레거시 SQL Server 데이터베이스에 유지하면서 읽기 전용 작업을 Azure SQL Database.
   <ul>
    <li>읽기 전용 작업을 수용하는 데 사용할 트랜잭션 복제를 SQL Server Azure SQL Database 설정합니다.</li>
    <li>복제 토폴로지에서 안정성, 성능 및 수렴 문제를 모니터링합니다.&nbsp;</li>
    <li>필요에 따라 읽기 전용 트래픽 확장 요구 사항을 수용하기 위해 동일한 지역에 최대 4개의 활성 지역 복제 읽기 가능한 보조 데이터베이스를 만듭니다.</li>
    <li>토폴로지가 일정 기간 동안 안정적으로 확인되면 부하 분산을 사용하여 읽기 전용 트래픽의 25%부터 시작하여 읽기 전용 작업을 Azure SQL Database 지시합니다. 몇 주 동안 50%, 75%로 증가합니다. 부하 분산을 위해 MSAsset 엔지니어링 팀은 독점 애플리케이션 계층 라이브러리를 사용합니다.</li>
    <li>그 과정에서 Query Performance Insight를 사용하여 CPU, 기간, 실행 횟수별로 전체 리소스 사용량 및 상위 쿼리를 모니터링합니다. 또한 MSAsset는 API 대기 시간 및 오류 속도를 포함하여 애플리케이션 메트릭을 모니터링했습니다.</li>
    <li>필요에 따라 Azure SQL Database 서비스 계층 및 성능 수준을 조정합니다.</li>
    <li>불필요한 레거시 트래픽을 많이 사용하는 리소스를 대량 액세스 엔드포인트로 이동하거나 리디렉션합니다.</li>
   </ul>
   </li>
   <li>Azure SQL Database 75%의 읽기 전용 작업의 이전 단계에서 안정화된 후 읽기 전용 트래픽의 100%를 Azure SQL Database 이동합니다.
   <ul>
    <li>다시 쿼리 성능 인사이트를 사용하여 CPU, 기간, 실행 횟수별로 전체 리소스 사용량 및 상위 쿼리를 모니터링합니다. 필요에 따라 Azure SQL Database 서비스 계층 및 성능 수준을 조정하고 읽기 전용 트래픽을 수용하도록 동일한 지역에 최대 4개의 활성 지역 복제가 가능한 보조 데이터베이스를 만듭니다.</li>
   </ul>
   </li>
   <li>Azure SQL Database 최종 컷오버 전에 완전한 롤백 계획을 개발하고 완전히 테스트합니다. MSAsset 팀은 SSDT(SQL Server Data Tools) 데이터 비교 기능을 사용하여 Azure SQL Database 4일 전 백업 간의 델타를&nbsp; 수집한 다음 델타를 SQL Server 데이터베이스에 적용했습니다.</li>
   <li>마지막으로 모든 읽기/쓰기 트래픽을 Azure SQL Database 이동합니다. MSAssets&rsquo;의 경우, 최종 읽기-쓰기 중단을 준비하기 위해 트랜잭션 복제를 통해 Azure SQL Database 있는 새 데이터베이스를 통해 읽기-쓰기 작업을 진행합니다. 수행된 단계:</li>
   <li>전체 다시 크기를 조정한 후 트랜잭션 복제 토폴로지 제거 전에 SQL Server 남은 트랜잭션이 드레이닝될 때까지 기다립니다.</li>
   <li>모든 읽기/쓰기 작업에 Azure SQL Database 주 데이터베이스를 사용하도록 웹 프런트 엔드 구성을 변경합니다. 읽기 전용 트래픽에 읽기 전용 복제본을 사용합니다.</li>
   <li>모니터링의 전체 비즈니스 주기 후, SQL Server 환경을 위임 해제합니다.</li>
  </ol>


  <p>이러한 단계적 접근 방식을 통해 MSAsset 팀은 읽기 전용 작업에 가동 중지 시간이 발생하지 않고 위험을 최소화할 수 있으므로 원래 환경으로 되돌릴 필요 없이 예기치 않은 결과를 학습하고 적응할 수 있는 충분한 시간을 확보했습니다.&nbsp;</p>


  <p>최종 MSAsset 아키텍처는 읽기-쓰기 Azure SQL Database 복제본 1개와 활성 지역 복제 읽기 가능한 보조 데이터베이스 4개를 사용합니다.&nbsp;</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/729c5a03-6992-401b-a653-7f9b343472e0.png"><img alt="image" border="0" height="260" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/95c933c6-43fd-4494-be50-aad9c563f8df.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="436"></a></p>


  <p>나머지 섹션에서는 마이그레이션 노력에서 배운 주요 측면과 교훈에 대해 설명합니다.</p>


  <h2>트랜잭션 복제를 사용하여 읽기 전용 Azure SQL Database 만들기</h2>


  <p>첫 번째 단계에서는 SQL Server 트랜잭션 복제를 Azure SQL Database 설정하여 도입된 성능 또는 수렴 문제 없이 안정적인 복제 토폴로지 보장을 수행했습니다.&nbsp;</p>


  <p>MSAsset 엔지니어링 팀은 트랜잭션 복제를 설정하기 위해 다음 프로세스를 사용했습니다.</p>


  <ul>
   <li>먼저 Azure SQL Database 복제 요구 사항에 대해 기존 SQL Server 데이터베이스를 검토했습니다. 이러한 요구 사항은 SQL Database 설명서<a href="https://docs.microsoft.com/en-us/sql/relational-databases/replication/replication-to-sql-database" target="_blank">에 대한 복제에</a> 자세히 설명되어 있습니다. 예를 들어 MSAsset에 대한 소수의 레거시 테이블에는 기본 키가 없으므로 트랜잭션 복제를 지원하려면 기본 키를 추가해야 했습니다. 일부 테이블은 더 이상 사용되지 않으므로 오래된 개체 및 관련 코드를 정리할 수 있었습니다.</li>
   <li>MSAsset 게시가 Always On 가용성 그룹에서 호스트되었기 때문에 MSAsset 팀은 구성 트랜잭션 복제에 대해 여기에 설명된 단계인 <a href="https://docs.microsoft.com/en-us/sql/database-engine/availability-groups/windows/configure-replication-for-always-on-availability-groups-sql-server" target="_blank">Always On 가용성 그룹(SQL Server)에 대한 복제 구성</a>을 수행했습니다.</li>
  </ul>


  <p><strong>SQL Server Azure SQL Database 마이그레이션하는 두 가지 기본 방법에 대한 개요 </strong> 는 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-cloud-migrate" target="_blank"><strong>클라우드에서 SQL Database SQL Server 데이터베이스 마이그레이션을</strong></a> 참조하세요<strong>.</strong></p>


  <p>트랜잭션 복제가 구성되고 완전히 동기화되면 읽기 전용 트래픽이 먼저 SQL Server 및 Azure SQL Database 모두로 전달되었으며 읽기-쓰기 작업은 SQL Server 상주 데이터베이스에 대해서만 계속 진행됩니다.</p>


  <p><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b1b20b91-87bf-4b61-9ce1-b04b14c36ef4.png"><img alt="image" border="0" height="232" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d21c5718-e75c-4a68-8801-49db06499311.png" style="border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;" title="이미지" width="624"></a></p>


  <p>Azure SQL Database 대한 읽기 전용 트래픽은 시간이 지남에 따라 25%, 50% 및 75%로 점진적으로 증가했으며, 충분한 쿼리 성능과 DTU 가용성을 보장하기 위해 신중한 모니터링을 진행했습니다. MSAsset 팀은 독점 부하 분산 애플리케이션 라이브러리를 사용하여 다양한 읽기 전용 데이터베이스에 부하를 분산했습니다. 75%로 안정화된 MSAsset 팀은 읽기 전용 활동의 100%를 Azure SQL Database 이동했으며 앞에서 설명한 다른 단계를 계속 진행했습니다.</p>


  <h2>정리 기회</h2>


  <p>또한 MSAsset 팀은 이를 불량 보고 프로세스를 정리할 수 있는 기회로 사용했습니다. 여기에는 데이터베이스에 액세스할 수 있지만 MSAsset보다 지속적인 사용에 더 적합한 다른 데이터 웨어하우스 옵션이 있는 사내 Microsoft 보고 도구 및 애플리케이션이 포함되었습니다. 불량 프로세스가 발생하면 MSAsset 팀은 소유자에게 연락하여 적절한 데이터 저장소로 다시 라우팅하도록 했습니다. 사용되지 않는 코드와 개체가 발견되면 제거되었습니다.</p>


  <h2>호환성 문제를 중심으로 다시 디자인</h2>


  <p>MSAsset 팀은 Azure SQL Database 마이그레이션하기 전에 다시 엔지니어링해야 하는 두 가지 영역을 발견했습니다.</p>


  <ul>
   <li>CDC(변경 데이터 캡처)는 SQL Server 데이터 수정을 추적하는 데 사용되었습니다. 이 프로세스는 <a href="https://docs.microsoft.com/en-us/sql/relational-databases/tables/temporal-tables" target="_blank">임시 테이블을</a> 대신 활용하는 솔루션으로 대체되었습니다.</li>
   <li>SQL Server 에이전트 작업은 SQL Server 사용자 지정 T-SQL 예약된 작업을 실행하는 데 사용되었습니다. 모든 SQL Server 에이전트 작업은 대신 동일한 저장 프로시저를 호출하는 Azure 작업자 역할로 대체되었습니다.</li>
  </ul>


  <p>팀은 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=53595" target="_blank">데이터 Migration Assistant</a> 사용하여 호환성 문제를 감지했으며 마이그레이션 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-transact-sql-information" target="_blank">중에 Transact-SQL 차이점을 해결하여 SQL Database</a> 참조도 사용했습니다.</p>


  <p><strong>또한 Microsoft는 </strong> 온-프레미스 SQL Server 호환성을 높이는 새로운 배포 옵션인 <a href="https://channel9.msdn.com/Events/Connect/2017/T142" target="_blank"><strong>Azure SQL Database Managed Instance</strong></a><strong>를 도입하고 있습니다. 확장된 공개 미리 보기가 곧 제공될 예정입니다.</strong></p>


  <h2>Azure SQL Database 네트워킹 및 연결 이해</h2>


  <p>MSAssets&rsquo; 데이터 계층에 액세스해야 하는 서비스 배열을 통해 엔지니어링 팀은 Azure SQL Database 네트워킹 및 연결 요구 사항과 기본 사항을 숙지해야 했습니다. 이러한 배경을 갖는 것은 전반적인 노력의 중요한 측면이었으며 Azure SQL Database 마이그레이션 계획의 핵심 초점 영역이어야 합니다.</p>


  <p><strong>Azure SQL Database 연결 기본 사항 및 연결 문제 해결에 대한 자세한 내용은 </strong><a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-connectivity-architecture" target="_blank"><strong>Azure SQL Database 연결 아키텍처</strong></a><strong> 및 </strong><a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-troubleshoot-common-connection-issues" target="_blank"><strong>Azure SQL Database 연결 문제 해결을</strong></a> 참조하세요<strong>.</strong></p>


  <h2>플랫폼 현대화 및 클라우드 확장성 잠금 해제</h2>


  <p>원래 MSAsset SQL Server 하드웨어는 강력했지만 오래되었습니다. Azure SQL Database 이동하기 전에 MSAsset 엔지니어링은 서버를 교체하는 것을 고려했습니다. 그러나 하드웨어가 향후 5년 동안 MSAssets&rsquo; 예상 워크로드 증가를 따라잡을 수 있는 예상 비용과 능력에 대해 우려했습니다. MSAsset 엔지니어링 팀은 최신 SQL Server 버전을 유지하고 최신 기능에 액세스하는 것에 대해서도 우려했습니다.</p>


  <p>Azure SQL Database 이동한다는 것은 MSAsset 팀이 리소스를 훨씬 더 쉽게 확장할 수 있으며 더 이상 기존 하드웨어를 능가하는 것에 대해 걱정할 필요가 없음을 의미합니다. 또한 이제 명시적으로 업그레이드하지 않고도 Azure SQL Database 사용할 수 있게 되면 새 기능에 액세스할 수 있습니다. 또한 이제 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-threat-detection" target="_blank">위협 탐지</a> 및 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-query-performance" target="_blank">쿼리 성능 인사이트와</a> 같은 Azure SQL Database 고유한 기본 제공 기능을 활용할 수 있습니다.</p>


  <h2>높은 심각도 문제 및 데이터베이스 관리 오버헤드 감소</h2>


  <p>MSAsset 엔지니어링 팀에는 직원에 대한 데이터베이스 관리자가 없으므로 이전 하드웨어 및 표준 DBA 유지 관리 요구 사항의 지원과 함께 이러한 요소는 점점 더 자주 심각도가 높은 인시던트의 주요 기여자였습니다.</p>


  <p>msAsset 팀은 Azure SQL Database 진행 중인 데이터베이스 서버 패치, 백업 또는 복잡한 고가용성 및 재해 복구 토폴로지 구성에 대해 더 이상 걱정하지 않습니다. MSAsset 엔지니어링 팀은 Azure SQL Database 이전한 이후 데이터 계층에 대한 심각도가 높은 문제가 80% 감소했습니다.</p>


  <h2>다음 단계</h2>


  <p>확장성 있고 유지 관리가 낮은 클라우드 솔루션을 Azure SQL Database 빌드하는 방법에 대해 자세히 알아보세요. <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-technical-overview" target="_blank">SQL Database? SQL Database</a> 설명서 소개</p>


  <p>시작하고&rsquo; 싶지만 어디서 시작해야 할지 모르시나요? <a href="https://azure.microsoft.com/en-us/free/" target="_blank">무료 Azure 계정</a>으로 <a href="https://docs.microsoft.com/en-us/azure/sql-database/sql-database-get-started-portal" target="_blank">Azure에서 첫 번째 SQL Database 만듭니</a>다.</p>
