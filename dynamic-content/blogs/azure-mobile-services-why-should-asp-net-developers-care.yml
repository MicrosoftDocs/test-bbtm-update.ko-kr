### YamlMime:Yaml
ms.openlocfilehash: 185ad8830097b1d2ccb0e146c0c8416dd63a3427
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899959"
Slug: azure-mobile-services-why-should-asp-net-developers-care
Title: 'Azure Mobile Services: ASP.NET 개발자가 관심을 가져야 하는 이유는 무엇인가요?'
Summary: Azure Mobile Services 모바일 개발자가 클라우드 호스팅 백 엔드를 앱에 추가할 수 있는 턴키 방법을 제공합니다. 이제 서비스는 ASP.NET Web API 사용하여 백 엔드 논리를 작성할 수 있는 모든 지원을 제공합니다.
Content: >-
  <strong><em>업데이트: Mobile Services ASP.NET Web API 지원은 이제 일반 공급됩니다. <a href="https://weblogs.asp.net/scottgu/azure-virtual-machine-machine-learning-iot-event-ingestion-mobile-sql-redis-sdk-improvements">스콧 거스리의 블로그에서 공지 사항을</a> 읽어보세요. </em></strong>

  <a href="https://azure.microsoft.com/mobile">Azure Mobile Services</a> 모바일 개발자가 클라우드 호스팅 백 엔드를 앱에 추가할 수 있는 턴키 방법을 제공합니다. 이제 서비스는 ASP.NET Web API 사용하여 백 엔드 논리를 작성할 수 있는 모든 지원을 제공합니다. Mobile Services ASP.NET 사용하여 모바일 연결 API를 빌드하는 개발자에게 매력적인 선택입니다.

  <ul>
   <li><strong><a href="#DotNet">모든 모바일 플랫폼에 대한 클라이언트 SDK를 사용하는 턴키 백 엔드입니다.</a></strong> Mobile Services 사용하면 <strong>iOS, Android, Windows, Windows Phone 또는 HTML 앱</strong>에 완전한 기능을 갖춘 백 엔드를 빠르게 추가할 수 있으며 <strong>Xamarin, Sencha 및 PhoneGap과</strong> 같은 플랫폼 간 프레임워크를 사용할 수 있습니다. 이러한 각 플랫폼에 대한 클라이언트 SDK를 제공하여 애플리케이션을 클라우드 호스팅 백 엔드에 쉽게 연결할 수 있습니다.</li>
   <li><strong><a href="#ApiHosting">모바일 API에 대한 일류 호스팅입니다.</a></strong> 모바일 서비스는 Web API를 사용하여 빌드되며 모든 Web API 컨트롤러를 서비스에 게시할 수 있습니다. 다른 컴퓨팅 환경과 Mobile Services 차별화되는 점은 <strong>Web API 컨트롤러를 모니터링하고 관리한다는 것입니다</strong>. Web API 런타임 또는 확장에 문제가 있는 경우 걱정하지 않고 패치합니다. 컨트롤러 코드에 문제가 있다고 생각되면 연락을 드립니다.</li>
   <li><strong><a href="#HighValueCapabilities">고부가가치 모바일 백 엔드 기능이 포함되어 있습니다.</a></strong> Mobile Services 포함되어 있고 Web API에서 쉽게 사용할 수 있는 많은 기능을 찾을 수 있습니다. 모바일 <strong>푸시 알림</strong>, <strong>SignalR을 사용한 실시간 알림(자동 스케일 아웃)</strong>, <strong>소비자 앱에 대한 소셜 인증</strong>, <strong>가끔 연결된 시나리오에 대한 오프라인 데이터 동기화</strong>, 몇 가지 이름을 지정합니다.</li>
   <li><strong><a href="#Enterprise">엔터프라이즈 시스템에 대한 연결.</a></strong> 엔터프라이즈 개발자인 경우 앱 고객이 <strong>Active Directory</strong>를 통해 로그인하고 <strong>SharePoint 및 Office 365</strong> 같은 엔터프라이즈 자산에 액세스할 수 <strong>있습니다.</strong> 또한 <strong>온-프레미스 자산에</strong> 대한 원활한 연결을 사용하도록 설정하여 인터넷에 노출되지 않은 데이터베이스 및 웹 서비스에 연결할 수 있습니다.</li>
   <li><strong><a href="#VisualStudio">Visual Studio 통합</a></strong> 즐겨 찾는 IDE는 이제 Mobile Services 전용 프로젝트 템플릿 및 스캐폴더를 포함하며, 게시 및 원격 디버깅을 위한 일류 지원을 제공합니다.</li>
  </ul>

  <h3><a name="DotNet"></a>모든 모바일 플랫폼에 대한 클라이언트 SDK를 사용하는 턴키 백 엔드</h3>

  즐겨 찾는 환경에서 Mobile Services 지원을 쉽게 시작할 수 있습니다. 항상 Windows Azure 관리 포털로 이동하여 새 모바일 서비스를 만듭니다. 마법사의 첫 번째 화면에서 백 엔드로 ".NET"을 선택합니다. 서비스가 만들어지면 빠른 시작 탭으로 이동하여 대상으로 지정할 클라이언트 플랫폼에 대한 시작 프로젝트를 다운로드합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-1.png"><img class="alignnone size-medium wp-image-161081" alt="mobile-services-for-web-api-devs-1" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-1-467x369.png" width="467" height="369" /></a>


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-2.png"><img class="alignnone size-medium wp-image-161082" alt="mobile-services-for-web-api-devs-2" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-2-467x369.png" width="467" height="369" /></a>


  또는 Visual Studio 시작하려는 경우 먼저 로컬 프로젝트를 만들고 나중에 프로젝트를 게시할 때 모바일 서비스를 만들 수 있습니다. <strong>이 경우 Visual Studio 2013 업데이트 2 이상이 필요합니다.</strong>


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-3.png"><img class="alignnone size-medium wp-image-161092" alt="mobile-services-for-web-api-devs-3" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-3-544x369.png" width="544" height="369" /></a>


  어느 쪽이든 얻을 수 있는 것은 Mobile Services .NET 템플릿 프로젝트입니다. 이 프로젝트는 몇 가지 추가 NuGet 패키지가 사용되는 Web API 프로젝트일 뿐입니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-4.png"><img class="alignnone size-medium wp-image-161111" alt="mobile-services-for-web-api-devs-4" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-4-544x369.png" width="544" height="369" /></a>


  <strong>TodoItemController.cs</strong> 컨트롤러 파일을 열고 해당 콘텐츠를 검사합니다. <strong>GetAllTodoitems()</strong> 메서드 내에서 중단점을 설정합니다. 이 컨트롤러는 Mobile Services .NET 지원을 사용하여 데이터를 사용하는 방법을 보여줍니다.

  <pre class="prettyprint">public class TodoItemController : TableController&lt;TodoItem&gt;

  {
      protected override void Initialize(HttpControllerContext controllerContext)
      {
          base.Initialize(controllerContext);
          csharp_testContext context = new csharp_testContext();
          DomainManager = new EntityDomainManager&lt;TodoItem&gt;(context, Request, Services);
      }

      // GET tables/TodoItem
      public IQueryable&lt;TodoItem&gt; GetAllTodoItems()
      {
          return Query();
      }

      // GET tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public SingleResult&lt;TodoItem&gt; GetTodoItem(string id)
      {
          return Lookup(id);
      }

      // PATCH tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public Task&lt;TodoItem&gt; PatchTodoItem(string id, Delta&lt;TodoItem&gt; patch)
      {
          return UpdateAsync(id, patch);
      }

      // POST tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public async Task&lt;IHttpActionResult&gt; PostTodoItem(TodoItem item)
      {
          TodoItem current = await InsertAsync(item);
          return CreatedAtRoute("Tables", new { id = current.Id }, current);
      }

      // DELETE tables/TodoItem/48D68C86-6EA6-4C25-AA33-223FC9A27959
      public Task DeleteTodoItem(string id)
      {
          return DeleteAsync(id);
      }
  }</pre>

  <strong>TodoItem</strong> 리소스에 대한 모든 주요 CRUD 메서드를 이미 스캐폴드합니다. 기본적으로 컨트롤러는 Entity Framework 모델 위에 있는 씬 래퍼인 <strong>EntityDomainManager</strong>를 사용하고 있습니다. 대체 데이터 저장소를 사용하도록 쉽게 전환할 수 있습니다.

  <ul>
   <li><strong>MongoDB:</strong> <a href="https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Mongo/">WindowsAzure.MobileServices.Backend.Mongo</a> NuGet 패키지에서 <strong>MongoDomainManager</strong>를 사용합니다. 자세한 내용은 <a href="https://blogs.msdn.com/b/azuremobile/archive/2014/04/14/creating-mongodb-backed-tables-in-azure-mobile-services-with-net-backend.aspx">이 블로그 게시물</a>을 참조하세요.</li>
   <li><strong>Azure Table Storage:</strong> <a href="https://www.nuget.org/packages/WindowsAzure.MobileServices.Backend.Storage/">WindowsAzure.MobileServices.Backend.Storage NuGet</a> 패키지에서 <strong>StorageDomainManager</strong>를 사용합니다. 예를 들어 <a href="https://wp.sjkp.dk/azure-mobile-service-net-backend-using-azure-table-storage/">이 자습서</a>를 확인하세요.</li>
  </ul>

  Mobile Services .NET 지원을 사용하면 Mobile Services 백 엔드를 로컬로 실행하고 백 엔드 논리를 디버그할 수 있습니다. <strong>F5</strong> 키를 누릅니다. 기본 페이지에서 "사용해 보기"를 선택합니다. Mobile Services .NET 지원에는 예상대로 Web API에 대한 도움말 페이지가 제공됩니다. <strong>GET 테이블/TodoItem</strong>을 클릭하여 테스트 클라이언트뿐만 아니라 메서드 설명서를 표시합니다. "try this out" 링크를 클릭한 다음 "send"를 눌러 <strong>GetAllTodoItems()</strong> 메서드를 호출합니다. 예상대로 이전에 설정한 중단점에 도달합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-5.png"><img class="alignnone size-medium wp-image-161031" alt="mobile-services-for-web-api-devs-5" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-5-467x369.png" width="467" height="369" /></a>


  백 엔드 API 개발이 완료되면 Mobile Service에 Web API를 게시할 수 있습니다. 게시 지원은 Visual Studio 바로 빌드됩니다. 프로젝트를 마우스 오른쪽 단추로 클릭하고 "게시"를 선택하기만 하면 됩니다. Azure Portal로 이동하지 않고도 기존 모바일 서비스를 선택하거나 Visual Studio 내에서 새 모바일 서비스를 만들 수 있습니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-6.png"><img class="alignnone size-medium wp-image-161041" alt="mobile-services-for-web-api-devs-6" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-6-544x369.png" width="544" height="369" /></a>


  기존 Web API 솔루션을 게시하여 Web API의 관리 및 모니터링을 Mobile Services 즉시 Azure로 오프로드할 수 있습니다.


  .NET 지원 Mobile Services 대한 자세한 내용은 다음 자습서를 따르세요.

  <ul>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started/">Mobile Services .NET 시작</a></li>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-data/">Mobile Services .NET을 사용하여 데이터 시작</a></li>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-users/">Mobile Services .NET으로 인증 시작</a></li>
   <li><a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-push/">Mobile Services .NET을 사용하여 푸시 알림 시작</a></li>
  </ul>

  <h3><a name="ApiHosting"></a>모바일 API에 대한 일류 호스팅</h3>

  숙련된 Web API 개발자인 경우 API를 Mobile Services 게시할 때 어떤 부가 가치를 얻을 수 있는지 궁금할 수 있습니다. 결국 Azure 및 온-프레미스에서 Web API를 호스트하는 여러 가지 쉬운 방법이 있습니다. Mobile Services 사용하여 무료로 얻을 수 있는 몇 가지 부가 가치 기능을 살펴보겠습니다.

  <ul>
   <li><strong>모니터링 및 진단.</strong> Mobile Services API를 정상 상태로 유지하기 위해 빌드한 계측 및 모니터링 기능을 통해 지원되는 99.9% SLA를 제공합니다. 유료 계층에서는 서비스의 HTTP 트래픽 및 SQL 연결을 모니터링하며 높은 오류율이 표시될 경우 연락을 취합니다. 엔드포인트 모니터링 및 경고를 비롯한 다양한 셀프 서비스 기능 외에도 이 기능을 <a href="https://msdn.microsoft.com/en-us/library/azure/dn306639.aspx">사용할 수 있습니다</a>.</li>
   <li><strong>자동 패치.</strong> 앱을 다시 배포할 필요 없이 매주 호스팅 환경에 새 코드를 배포합니다. Mobile Services 런타임의 버그픽스이든, 종속성 중 하나의 버그픽스이든, 새로운 기능이든 관계없이 변경 내용은 중단 없이 모바일 서비스에 투명하게 배포됩니다. 물론 호환성이 손상되는 변경은 배포하지 않을 것이며 모든 변경 내용은 이전 버전과 호환됩니다.</li>
   <li><strong>클라우드 자산의 자동 프로비저닝</strong> 모바일 서비스를 만들 때 서비스에 대한 SQL Database 및 알림 허브(푸시 알림 엔진)를 프로비전 및 구성하고 모든 관련 연결 문자열이 구성되었는지 확인합니다. 또한 몇 번의 클릭만으로 클라우드에서 예약된 작업 및 하이브리드 연결(온-프레미스 연결용)을 쉽게 만들 수 있습니다. Mobile Services 서비스와 관련된 모든 관련 클라우드 자산에 대한 빠른 게이트웨이를 제공합니다.</li>
  </ul>

  <h3><a name="HighValueCapabilities"></a>고부가가치 모바일 백 엔드 기능이 포함되어 있습니다.</h3>

  Mobile Services 사용하여 앱을 빌드하기 시작하면 필요한 많은 기능을 바로 사용할 수 있으며, 이는 출시 시간에서 몇 주 를 면도할 수 있습니다. 다음은 이러한 템플릿의 예입니다.

  <ul>
   <li><strong>턴키 인증.</strong> 모든 모바일 서비스에는 가장 일반적인 인증 시나리오에 필요한 모든 클라우드 자산 및 프레임워크 코드가 함께 제공됩니다. Microsoft 계정, Facebook, Twitter 또는 Google 및 엔터프라이즈 로그인을 사용하여 AAD 사용하여 소셜 로그인을 쉽게 사용할 수 있습니다. 필요한 모든 프레임워크 조각이 이미 있으므로 OAuth 전문가가 될 필요가 없으며 일부 구성 설정을 지정하고 나머지는 처리합니다. 자세한 내용은 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-users/">이 자습서</a>를 참조하세요.</li>
   <li><strong>확장 가능한 푸시 알림.</strong> 각 모바일 서비스에는 모든 주요 디바이스 플랫폼(Windows, iOS, Android 및 Kindle)에서 엄청난 수의 알림을 제공할 수 있는 클라우드 호스팅 푸시 엔진이 함께 제공됩니다. 수백만개의 연결된 디바이스에 알리기 위한 단일 API 호출만 있으면됩니다. 또한 대상 그룹을 쉽게 구분할 수 있는 태그 지정 및 태그 식과 디바이스 자체에서 알림을 사용자 지정할 수 있는 템플릿도 지원합니다. <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-push/">이 문서에서</a> 는 단계별 지침을 제공합니다.</li>
   <li><strong>오프라인 동기화.</strong> 오늘날 고객은 네트워크 연결을 사용할 수 없는 경우에도 모바일 앱이 계속 작동할 것으로 예상합니다. Mobile Services 모든 주요 클라이언트 플랫폼에서 기본 제공 오프라인 SQLite 기반 동기화 지원을 제공합니다. <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-get-started-offline-data/">자세한 내용은 여기를 참조하세요.</a></li>
   <li><strong>실시간.</strong> 푸시 알림은 앱에 대한 고객 참여를 높이는 데 큰 효과가 있지만 앱 내에서 확장 가능한 높은 대역폭의 짧은 대기 시간 연결을 제공하려면 다른 도구 집합이 필요합니다. Mobile Services WebSocket 및 SignalR을 기반으로 하는 기본 제공 실시간 지원을 제공하여 앱에 양방향 메시징을 허용합니다. 이 서비스에는 앱이 성장함에 따라 원활한 스케일 아웃을 위한 기본 제공 메시지 버스(백플레인)가 함께 제공됩니다. 또한 서비스의 나머지 부분과 동일한 인증 파이프라인과 통합되므로 사용자를 쉽게 인증하고 권한을 부여할 수 있습니다. 자세한 내용은 <a href="https://blogs.msdn.com/b/azuremobile/archive/2014/05/30/realtime-with-signalr-and-azure-mobile-net-backend.aspx">이 블로그 게시물</a>을 참조하세요.</li>
  </ul>

  <h3><a name="Enterprise"></a>엔터프라이즈 시스템에 대한 연결</h3>

  .NET은 기업에서 자주 선택하는 플랫폼이므로 .NET 언어를 지원하면 개발자가 비즈니스 앱을 빌드하는 데 도움을 줄 수 있는 많은 훌륭한 시나리오가 열렸습니다. 자세한 정보와 멋진 비디오를 보려면 <a href="https://azure.microsoft.com/en-us/campaigns/mobile-employee-apps/">이 페이지를</a> 확인하세요.

  <ul>
   <li><strong>Active Directory 로그인 및 대신 액세스.</strong> 엔터프라이즈 시나리오에서 앱 사용자가 도메인 ID로 로그인할 수 있도록 하는 것은 중요한 요구 사항입니다. 따라서 계정 수명을 간단하게 관리할 수 있으며 고객이 SharePoint Online 및 Office 365 같은 Active Directory로 보호되는 클라우드 자산에 액세스할 수도 있습니다. Active Directory 인증을 위해 앱을 구성하는 방법에 대한 자세한 내용은 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-windows-store-dotnet-adal-sso-authentication/">이 자습서</a>를 참조하세요. 대신 액세스를 구성하는 방법에 대한 지침은 <a href="https://channel9.msdn.com/Series/Windows-Azure-Mobile-Services/Azure-Mobile-Services-AAD-O365-Authentication-identity-across-services">이 비디오를</a> 확인하세요.</li>
   <li><strong>온-프레미스 연결.</strong> 데이터베이스 및 웹 서비스와 같은 엔터프라이즈 자산은 중요한 데이터를 포함하거나 클라우드로 이동할 수 없는 다른 이유가 있기 때문에 온-프레미스에 있어야 하는 경우가 있습니다. 온-프레미스 트래픽을 클라우드로 릴레이할 수 있는 "하이브리드 연결" 기능을 통해 모바일 서비스에서 이러한 자산을 사용할 수 있습니다. 이 <a href="https://channel9.msdn.com/Series/Windows-Azure-Mobile-Services/Connect-to-an-on-premises-SQL-Server-from-Azure-Mobile-Services-using-Hybrid-Connections">비디오 소개</a> 및 <a href="https://azure.microsoft.com/en-us/documentation/articles/mobile-services-dotnet-backend-hybrid-connections-get-started/">이 자습서</a>를 확인하세요.</li>
   <li><strong>Xamarin SDK.</strong> Xamarin은 C#을 사용하여 플랫폼 간 앱(Android 및 iOS 포함)을 작성할 수 있는 클라이언트 쪽 프레임워크 및 도구 집합을 제공합니다. Microsoft 스택에 익숙한 개발자가 다른 플랫폼에서 기술을 다시 사용할 수 있는 생산적인 방법입니다. Mobile Services Xamarin 기반 앱을 빌드하는 데 도움이 되는 SDK 및 <a href="https://azure.microsoft.com/en-us/develop/mobile/resources-xamarin-ios/">몇 가지 유용한 리소스</a>를 제공합니다.</li>
   <li><strong>가속기.</strong> 시작하는 데 도움이 되는 유용한 참조 구현이 있는 경우 시나리오를 구현하는 것이 가장 쉬운 경우도 있습니다. 이 팀은 최근 일반적인 고객 수직을 커버하고 Mobile Services 사용하여 문제를 해결하는 방법을 보여주는 세련된 앱인 "액셀러레이터" 세트를 구축하는 데 주력했습니다. 앱이 저장소에 게시되고 소스 코드를 사용하여 수정할 수 있습니다. 자세한 내용은 <a href="https://azure.microsoft.com/en-us/develop/mobile/windows-store-samples/#header-1">여기를 참조하세요</a>. 현재 2개 가속기(현장 엔지니어 및 영업 도우미 시나리오)가 준비되었지만 곧 더 많은 액셀러레이터가 준비될 예정입니다.</li>
  </ul>

  <h3><a name="VisualStudio"></a>Visual Studio와의 통합</h3>

  위에 표시된 기능 외에도 Visual Studio 모바일 서비스를 개발하고 디버깅하기 위한 몇 가지 유용한 도구가 포함되어 있습니다. 테이블 컨트롤러(관계형 데이터 저장), 사용자 지정 컨트롤러(임의의 HTTP API 빌드용) 및 예약된 작업을 만들 수 있는 스캐폴더가 있습니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-7.png"><img class="alignnone size-medium wp-image-161042" alt="mobile-services-for-web-api-devs-7" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-7-544x369.png" width="544" height="369" /></a>


  또한 원격 디버깅에 대한 지원을 강화하여 뛰어난 디버깅 환경을 보장했습니다. <strong>서버 탐색기</strong>에서 모바일 서비스를 마우스 오른쪽 단추로 클릭하고 "디버거 연결"을 선택하기만 하면 됩니다. 이 기능을 최대한 활용하려면 서비스 코드의 디버그 빌드를 게시해야 합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-8.png"><img class="alignnone size-medium wp-image-161052" alt="mobile-services-for-web-api-devs-8" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-8-544x369.png" width="544" height="369" /></a>


  <strong>서버 탐색기</strong>에서 찾을 수 있는 또 다른 멋진 기능은 오류 메시지 및 스택 추적을 포함하여 클라우드에서 모바일 서비스에서 내보낸 로그를 찾아볼 수 있는 "로그 보기" 명령입니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2014/07/mobile-services-for-web-api-devs-9.png"><img class="alignnone size-medium wp-image-161062" alt="mobile-services-for-web-api-devs-9" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/mobile-services-for-web-api-devs-9-544x369.png" width="544" height="369" /></a>


  이 멋진 새로운 기능 집합을 통해 다음 프로젝트에 대한 Mobile Services 사용해 보시기 바랍니다. 도움이 필요하거나 피드백이 있는 경우 Twitter에서 연락하는 <a href="https://twitter.com/theYavor">@theYavor</a>것을 주저하지 마세요.
