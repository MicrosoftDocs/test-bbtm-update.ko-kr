### YamlMime:Yaml
ms.openlocfilehash: 75cb65aa910745ed3b50a8b1024d835cdbb79c8d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139899822"
Slug: hosting-services-with-was-and-iis-on-windows-azure
Title: Windows Azure에서 WAS 및 IIS를 사용하여 서비스 호스팅
Summary: 채택 프로그램 Insights 시리즈는 고객이 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다.
Content: "<p><i>채택 프로그램 Insights 시리즈는 고객이 Windows Azure 플랫폼에 솔루션을 배포할 수 있도록 지원하는 Windows Azure 기술 채택 프로그램에 관련된 Microsoft 서비스 컨설턴트의 경험을 설명합니다. 이 게시물은 톰 홀랜더에 의해.</i></p>  <p>많은 개발자가 서비스 지향 기술을 사용하여 대규모 시스템을 더 작고 느슨하게 결합된 서비스로 분할하기로 결정합니다. 종종 각 서비스는 다른 컴퓨터에서 호스트되며 표준 기반 통신에 WS-* 프로토콜을 사용합니다. 그러나 다른 호스팅 및 통신 접근 방식이 더 적합한 경우가 있을 수 있습니다. 예를 들어 서비스 및 모든 클라이언트를 제어하는 경우 TCP를 통해 전송된 이진 메시지를 사용하여 더 나은 성능을 얻을 수 있습니다. 또한 경우에 따라 동일한 컴퓨터에서 여러 서비스를 호스트하고 명명된 파이프와 같은 최적화된 로컬 통신 메커니즘을 사용하면서 서비스 간의 논리적 분리를 유지하도록 선택할 수 있습니다.</p>  <p>Microsofts&rsquo; 애플리케이션 플랫폼은 오랫동안 애플리케이션 코드를 거의 또는 전혀 변경하지 않고 이러한 모든 시나리오를 쉽게 지원할 수 있게 해 왔습니다. Windows Communication Foundation(WCF)은 여러 메시징 프로토콜을 통해 통합 프로그래밍 모델을 제공하는 반면, WINDOWS WAS(Process Activation Services)를 사용하면 IIS에서 서비스를 호스트하고 TCP 및 &ldquo;명명된 파이프를 포함하여 비 HTTP 전송을 통해 전송되는 들어오는 메시지에 의해 해제&rdquo;되도록 할 수 있습니다.</p>  <p>그러나 Windows Azure를 활용하여 애플리케이션을 배포하기로 결정한 경우&rsquo; WAS를 활용하는 방법은 명확하지 않습니다&rsquo;. 그러나 좋은 소식은 PowerShell&rsquo;의 약간의 도움으로이 작업을 완전히 할 수 있다는 것입니다. 스크립트에&rsquo; 필요한 주요 단계는 다음과 같습니다.</p>  <ul>  <li>선택한 프로토콜에 대해 WAS 활성화 서비스를 사용하도록 설정하고 시작합니다.</li>  <li>선택한 프로토콜에 대한 바인딩을 IIS 웹 사이트에 추가</li>  <li>웹 사이트 또는 애플리케이션에서 선택한 프로토콜을 사용하도록 설정합니다.</li>  </ul>  <p>이 블로그에서는 웹 사이트(클라이언트) 및 WCF 서비스를 호스트하는 가상 애플리케이션을 포함하는 단일 웹 역할로 구성된 간단한 애플리케이션에 대해 설명합니다. 클라이언트와 서비스가 모두 동일한 컴퓨터에서 호스트되므로 Well&rsquo;은 최적화된 통신에 WCFs&rsquo; <b>NetNamedPipeBinding</b>을 사용하지만 동일한 기본 접근 방식은 <b>NetTcpBinding</b>에도 작동합니다. (MSMQ는 Windows Azure에서 지원되지 않으므로 이러한 바인딩을 사용할 수 없습니다.) Ive&rsquo;는 게시물에 솔루션의 가장 중요한 부분에 대한 코드를 포함하거나 이 게시물의 맨 아래에 포함된 WasInAzure.zip 파일을 클릭하여 전체 샘플을 다운로드할 수 있습니다.</p>  <h4>WCF 구성</h4>  <p>WCF 구성에 대한 Azure 관련 항목은&rsquo; 없지만 Ill&rsquo;은 일부 구성을 완전성을 위해 표시합니다. Ive&rsquo;는 간단한 서비스를 빌드하고 <b>NetNamedPipeBinding</b> 및 <b>net.pipe://</b> URL을 사용하여 단일 엔드포인트를 구성했습니다.</p>  <p><i>web.config(서비스):</i></p>  <p>&nbsp; &lt;system.serviceModel&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&lt;서비스&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;service name=\"WcfService1.Service1\"&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;endpoint binding=\"netNamedPipeBinding\" address=\"net.pipe://localhost/WcfService1/service1.svc\" contract=\"WcfService1.IService1\"/&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/service&gt;</p>  <p>&nbsp;&nbsp;&nbsp;&lt;/services&gt;</p>  <p>&nbsp;&lt;/system.serviceModel&gt;</p>  <p>클라이언트&rsquo; WCF 구성은 일치하는 ABC(주소, 바인딩 및 계약)를 사용하여 거의 동일하게 보입니다.</p>  <h4>Azure 시작 작업 Windows</h4>  <p>Windows Azure 인스턴스가 시작될 때 일부 스크립팅을 수행하려는 경우 일반적으로&rsquo; 서비스 정의 파일&rsquo; <b>시작&gt; 요소에 정의된 스크립트에서 모든 작업을 수행할 수 있습니다&lt;</b>. 그러나 여기서 정의한 작업은 패브릭이 IIS를 구성하기 전에 실행되므로 WAS에 필요한 대부분의 변경 내용을 적용하기에는 적합하지 않습니다. 따라서 시작 작업에서 수행하는 모든 Well&rsquo;은 PowerShell을 구성하므로 나중에 시작 시퀀스에서 스크립트를 실행할 수 있습니다.</p>  <p><i>ServiceDefinition.csdef:</i></p>  <p>&lt;ServiceDefinition name=\"WasInAzure\" xmlns=\"\"&gt;</p>  <p>&nbsp;&lt;WebRole name=\"WebRole1\"&gt;</p>  <p>&nbsp;&nbsp;&nbsp; ...</p>  <p><b>&nbsp;&nbsp;&nbsp; &lt;</b><b>시작</b><b>&gt;</b><b></b></p>  <p><b>&nbsp;&nbsp; &lt;&nbsp;&nbsp;&nbsp;</b><b>Task</b><b> </b><b>commandLine</b><b>=</b><b>\"setup\\startup.cmd\" executionContext=\"elevated\" /&gt;</b></p>  <p><b>&nbsp;&nbsp;&nbsp; &lt;/</b><b>시작</b><b>&gt;</b><b></b></p>  <p>&nbsp;&lt;/WebRole&gt;</p>  <p>&lt;/ServiceDefinition&gt;</p>  <p><i>Startup.cmd:</i></p>  <p>powershell -command \"set-executionpolicy Unrestricted\" &gt;&gt; out.txt</p>  <h4>Azure Role OnStart Windows</h4>  <p><b>WebRole</b> 클래스의 <b>OnStart</b> 메서드는 패브릭에서 IIS를 설정한 후에 실행되므로 이때&rsquo; 필요한 구성을 변경하는 스크립트를 자유롭게 실행할 수 있습니다. 가장 먼저 주목해야 할 점은 일반적으로 <b>OnStart</b> 메서드가 관리자 권한&mdash;&rsquo;으로 실행되지 않는다는 것입니다. 스크립트가 작동하려면 이를 변경해야 합니다.</p>  <p><i>ServiceDefinition.csdef:</i></p>  <p>&lt;ServiceDefinition name=\"WasInAzure\" xmlns=\"\"&gt;</p>  <p>&nbsp;&lt;WebRole name=\"WebRole1\"&gt;</p>  <p>&nbsp;&nbsp;&nbsp; ...</p>  <p>&nbsp;&nbsp;&nbsp;<b>&lt;</b><b>런타임</b><b> </b><b>executionContext</b><b>=</b><b>\"elevated\" /&gt;</b></p>  <p>&nbsp;&lt;/WebRole&gt;</p>  <p>&lt;/ServiceDefinition&gt;</p>  <p>이제 역할이 시작될 때 PowerShell 스크립트를 시작하는 코드를 추가할 수 있습니다.</p>  <p><i>WebRole.cs:</i></p>  <p>&nbsp;&nbsp;&nbsp; public 클래스 WebRole: RoleEntryPoint</p>  <p>&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public override bool OnStart()</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var startInfo = new ProcessStartInfo()</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FileName = \"powershell.exe\",</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 인수 = @\".\\setup\\rolestart.ps1\",</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RedirectStandardOutput = true,</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UseShellExecute=false,</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; };</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var writer = new StreamWriter(\"out.txt\");</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var process = Process.Start(startInfo);</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 프로세스. WaitForExit();</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 작가. Write(process. StandardOutput.ReadToEnd());</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 작가. Close();</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 반환 기준입니다. OnStart();</p>  <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>  <p>&nbsp;&nbsp;&nbsp; }</p>  <p>  <p>마지막으로 수신기 서비스를 시작하고 바인딩을 구성하는 PowerShell 스크립트로 이동합니다. 이 스크립트에 대해 유의해야 할 몇 가지 사항이 있습니다.</p>  <ul>  <li>명명된 파이프 대신 TCP를 사용하는 경우&rsquo; <b>net.pipe</b> 에 대한 모든 참조를 <b>net.tcp</b>로<b> </b>변경하고 선택한 포트(예: &ldquo;808:*&rdquo;)를 포함하도록 바인딩을 변경합니다. 또한 <b>NetTcpPortSharing</b>&rsquo; 및 <b>NetTcpActivator</b> 서비스를 모두 사용하도록 설정해야 합니다.</li>  <li>이 스크립트는 역할 이름에 대해 몇 가지 가정을 하고 모든 IIS 가상 애플리케이션에서 프로토콜을 업데이트합니다. 역할 및 사이트를 설정하는 방법에&rsquo; 따라 이를 변경해야 할 수 있습니다.</li>  <li>IIS 7.0과 IIS 7.5 간에 IIS PowerShell cmdlet에 액세스하는 방법에는 몇 가지 차이점이 있습니다. 내 스크립트는 Windows Server 2008 R2 및 &ldquo;Windows Azure OS의 2.x&rdquo; 제품군에 포함된 IIS 7.5에서 작동합니다. 이 버전을 얻으려면 ServiceConfiguration.cscfg 파일의 루트 노드에서 <b>osFamily=\"2\" </b>를 설정해야 합니다. 또는 IIS 7.0(Azure OS &ldquo;1.x&rdquo;)을 사용하려는 경우 PowerShell 스크립트를 수정하여 이 작업을 수행할 수 있습니다.</li>  </ul>  <p><i>RoleStart.ps1:</i></p>  <p>write-host \"begin RoleStart.ps1\"</p>  <p>import-module WebAdministration</p>  <p># net.pipe 서비스 시작</p>  <p>$listenerService = Get-WmiObject win32_service -filter \"name='NetPipeActivator'\"</p>  <p>$listenerService.ChangeStartMode(\"Manual\")</p>  <p>$listenerService.StartService()</p>  <p># net.pipe 바인딩 사용</p>  <p>$WebRoleSite = (Get-WebSite \"*webrole*\"). 이름</p>  <p>Get-WebApplication -Site $WebRoleSite | Foreach-Object { $site = \"IIS:/Sites/$WebRoleSite\" + $_.path; Set-ItemProperty $site -Name EnabledProtocols 'http,net.pipe'}</p>  <p>New-ItemProperty \"IIS:/Sites/$WebRoleSite\" -name bindings -value @{protocol=\"net.pipe\";bindingInformation=\"*\"}</p>  <p>write-host \"End RoleStart.ps1\"</p>  <h4>요약</h4>  <p>Windows Azure 서비스 정의 및 서비스 구성 파일에 적합한 요소를 사용하면 코딩이나 스크립팅 없이 가장 일반적인 구성 작업을 수행할 수 있습니다. 그러나 현재 이러한 방식으로 노출되지 않는 온-프레미스 Windows 설치에서 사용할 수 있는 몇 가지 유용한 기능이 있습니다. 다행히 스크립팅 기술 및 Windows Azure 시작 시퀀스에 익숙한 경우&rsquo; 일반적으로 이러한 문제를 해결하는 방법을 코딩할 수 있습니다. Windows 프로세스 정품 인증 서비스는 Windows Azure에서 분명히 사용할 수 없지만 약간의 인내로 작업할 수 있는 유용한 기능&rsquo;의 한 예입니다.&nbsp;</p>  <p><iframe src=\"https://www.facebook.com/plugins/like.php?href= https://blogs.msdn.com/b/windowsazure/archive/2011/06/27/hosting-services-with-was-and-iis-on-windows-azure.aspx;layout=box_count&amp;show_faces=false&amp;width=300&amp;action=like&amp;font=segoe+ui&amp;colorscheme=light&amp;height=50\" style=\"overflow: hidden; width: 300px; height: 50px;\" frameborder=\"0\" scrolling=\"no\"></iframe><br>트윗  <script type=\"text/javascript\"></script>  </p>"
