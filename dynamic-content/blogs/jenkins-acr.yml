### YamlMime:Yaml
ms.openlocfilehash: 51fb4a4d5d2df1c6c6298f0ff7e5b156e0ea5adc
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907145"
Slug: jenkins-acr
Title: 공개 미리 보기에서 Jenkins Azure ACR Build 플러그 인
Summary: ACR(Azure Container Registry)에서 Docker 이미지를 빌드할 수 있도록 Jenkins용 ACR Build 플러그 인의 미리 보기를 발표하게 되어 기쁩니다. Jenkins World 2018에서 만나보세요!
Content: "<p>작년에 Jenkins World에서 Kubernetes에 대한 Azure 지원에 대해 Jenkins를 발표했습니다. <a href=\"https://aka.ms/azcontaineragent\" target=\"_blank\">Azure로</a> 스케일 아웃하고 <a href=\"https://azure.microsoft.com/en-us/services/container-instances/\" target=\"_blank\">ACI(Azure Container Instances)</a> 및/또는 <a href=\"https://azure.microsoft.com/en-us/services/kubernetes-service/?cdn=disable\" target=\"_blank\">AKS(Azure Kubernetes Service)</a>에서 Jenkins 에이전트를 실행할 수 있는 Azure Container Agent를 제공했습니다. Kubernetes <a href=\"https://aka.ms/azjenkinsacs\" target=\"_blank\">AKS(Azure Container Services)</a> 플러그 인에 대한 <a href=\"https://aka.ms/azjenkinsk8s\" target=\"_blank\">Kubernetes 지속적인 배포</a> 또는 배포를 사용하여 Kubernetes에 컨테이너를 배포할 수 있습니다.</p>\n\n<p>4월에 <a href=\"https://kubernetes.io/blog/2018/04/30/zero-downtime-deployment-kubernetes-jenkins/\" target=\"_blank\">는 AKS(Azure Container Services)에 블루/그린 배포 </a> 를 달성하는 방법을 커뮤니티와 공유하는 Kubernetes.io 블로그 게시물을 게시했습니다. 몇 가지 질문은 여전히 대답할 수 있습니다.</p>\n\n<ul style=\"margin-left: 40px;\">\n <li>ACI를 Jenkins 빌드 에이전트로 사용할 때 <strong>Docker 이미지를 빌드</strong> 해야 하는 경우 어떻게 해야 하나요?</li>\n <li>AKS에서 Docker Build를 실행하는 경우 <strong>보안이 설정되었나요</strong>?</li>\n</ul>\n\n<p>올해 초 Azure Container Registry 팀은 이러한 문제만 해결하는 <a href=\"https://aka.ms/acr/build\" target=\"_blank\">ACR(Azure Container Registry) Build</a>라는 네이티브 컨테이너 빌드 기능의 미리 보기를 발표했습니다. ACR 빌드의 가장 좋은 점 중 하나는 이미지를 빌드하는 데 사용하는 컴퓨팅에 대해서만 비용을 지불하는 것입니다.</p>\n\n<h2>로컬 디렉터리에서 빌드</h2>\n\n<p>Maven을 사용하여 Java 프로젝트를 빌드한 다음 AKS에 배포하는 기존 파이프라인이 있다고 가정해 보겠습니다&rsquo;.</p>\n\n<pre style=\"margin-left: 40px;\">\nnode {\n    /* &hellip; snip&hellip; */\n\n    stage(&#39;Build&#39;) {\n    sh &#39;mvn clean package&#39;\n    withCredentials([usernamePassword(credentialsId: env.ACR_CRED_ID, usernameVariable: &#39;ACR_USER&#39;, passwordVariable: &#39;ACR_PASSWORD&#39;)]{\n      sh &#39;docker login -u $ACR_USER -p $ACR_PASSWORD https://$ACR_SERVER&#39;\n      // build image\n      def imageWithTag = &quot;$env.ACR_SERVER/$env.WEB_APP:$env.BUILD_NUMBER&quot;\n      def image = docker.build imageWithTag\n      // push image\n      image.push()\n    }\n    stage(&lsquo;Deploy&rsquo;) {\n      /*&hellip; snip&hellip; */\n    } \n}\n</pre>\n\n<p>ACR Build는 로컬 디렉터리(이 경우 빌드 서버 <strong>로컬 디렉터리)의 빌드</strong> 를 지원하기 때문에 다음과 같이 5개의 코드 줄을 파이프라인의 한 줄로 바꿀 수 있습니다.</p>\n\n<pre style=\"margin-left: 40px;\">\nnode {\n  /* &hellip; snip&hellip; */\n  stage(&#39;Build&#39;) { \n    sh &#39;mvn clean package&#39;\n\n    acrQuickBuild azureCredentialsId: &#39;principal-credentials-id&#39;,\n                  resourceGroupName: env.ACR_RES_GROUP,\n                  registryName: env.ACR_NAME,\n                  platform: &quot;Linux&quot;,\n                  dockerfile: &quot;Dockerfile&quot;,\n                  imageNames: [[image: &quot;$env.ACR_REGISTRY/$env.IMAGE_NAME:$env.BUILD_NUMBER&quot;]]\n  }  \n  stage(&lsquo;Deploy&rsquo;) {\n    /*&hellip; snip&hellip; */\n  }\n}\n</pre>\n\n<h2>이점</h2>\n\n<ul style=\"margin-left: 40px;\">\n <li>AKS 외에도 이제 ACI에서 이 빌드 파이프라인을 실행할 수 있습니다.</li>\n <li>ACR Build를 사용하면 네트워크 종결 다중 테넌트 빌드를 사용하도록 설정하여 네트워크 거리를 줄이고 레지스트리에 대한 Docker 푸시의 안정성을 보장합니다.</li>\n <li>가장 좋은 방법은 Docker에서 Docker를 실행하는 것이 안전한지 여부에 대해 동료와 더 이상 다른 논쟁을 벌일 필요가 없습니다.</li>\n</ul>\n\n<h2>git 커밋을 기반으로 빌드</h2>\n\n<p>새 파이프라인을 설정하고 코드 커밋 시 빌드를 트리거하려는 경우 어떻게 해야 할까요? 두려워하지 않습니다. ACR Build는 <strong>커밋 기반 빌드를 지원합니다</strong>. AKS에 배포하여 ACR에서 <a href=\"https://github.com/Microsoft/todo-app-java-on-azure/blob/master/doc/resources/jenkins/Jenkinsfile-acr-with-git\" target=\"_blank\">Spring Boot 웹앱을</a> 빌드할 수 있는 샘플 Jenkins 파일을 설정합니다. 이 경우 코드가 GitHub 커밋되면 Jenkins는 ACR에서 빌드를 트리거하고 테스트(샘플에서 다루지 않음)를 실행한 다음 Docker 이미지를 프로덕션에 배포할 수 있습니다. <a href=\"https://github.com/Microsoft/todo-app-java-on-azure/blob/master/doc/deployment/deploy-to-aks-with-acr-build-git-using-jenkins.md\" target=\"_blank\">ACR의 git 리포지토리에서 Docker 이미지를 빌드한 다음 Jenkins를 사용하여 AKS에 배포하는 방법에</a> 대한 지침을 따르기만 하면 됩니다.</p>\n\n<p><a href=\"https://www.cloudbees.com/devops-world\" target=\"_blank\">Jenkins World 2018</a>에서 Azure ACR 플러그 인을 미리 볼 것입니다. 또한 Tomcat 및 Java SE 사용하여 App Service에 배포하는 방법을 보여 주는 몇 가지 데모도 있습니다.</p>\n\n<p>Azure Jenkins 부스에 들러 데모를 보거나 Jenkins를 Azure와 통합하는 방법에 대해 설명해 주세요. 우리는 항상 피드백을 찾고 빌드 시스템에 대한 자세한 내용을 듣고 있습니다.</p>"
