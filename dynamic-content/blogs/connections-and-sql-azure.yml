### YamlMime:Yaml
ms.openlocfilehash: 5b517a3e61661f205520751b8bc3d54851d1ee11
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907851"
Slug: connections-and-sql-azure
Title: 연결 및 SQL Azure
Summary: '[이 문서는 SQL Azure 팀에서 제공했습니다.] SQL Azure 같은 웹 지원 데이터베이스를 사용하는 경우 인터넷 또는 기타 복잡한 네트워크를 통해 연결해야 하며, 이로 인해 다음과 같은 작업을 수행할 수 있습니다.'
Content: "<p>[이 문서는 SQL Azure 팀에서 제공했습니다.]</p><p>SQL Azure 같은 웹 지원 데이터베이스를 사용하는 경우 인터넷 또는 기타 복잡한 네트워크를 통해 연결해야 하므로 예기치 않은 연결 삭제를 처리할 준비가 되어 있어야 합니다.&#160; 설정된 연결은 데이터를 반환하는 연결, 연결 풀에서 열린 연결 또는 클라이언트 쪽 변수에 캐시되는 연결로 구성됩니다. SQL Azure 연결할 때 연결 손실은 코드에서 계획해야 하는 유효한 시나리오입니다. 연결 끊김을 처리하는 가장 좋은 방법은 연결을 다시 설정하고 실패한 명령 또는 쿼리를 다시 실행하는 것입니다.</p>  <h2>네트워크 안정성</h2>  <p>클라이언트 코드를 실행하는 컴퓨터와 SQL Azure 서버 간의 모든 네트워크 구성 요소의 품질은 때때로 Microsoft의 control.&#160; 인터넷상의 여러 가지 이유로 인해 세션이 끊어질 수 있습니다.&#160; Windows Azure에서 애플리케이션을 실행할 때 애플리케이션과 서버 간의 거리가 줄어들면 연결이 끊어질 위험이 크게 줄어듭니다.&#160; </p>  <p>네트워크 문제로 인해 연결이 끊어진 경우 세션이 종료되었기 때문에 SQL Azure 애플리케이션에 의미 있는 오류를 반환할 기회가 없습니다. 그러나 연결 풀링을 사용하는 경우와 같이 이 연결을 다시 사용하면 10053이 발생합니다(서버에서 결과를 받을 때 전송 수준 오류가 발생했습니다.) (공급자: TCP 공급자, 오류: 0 - 호스트 컴퓨터의 소프트웨어에 의해 설정된 연결이 중단됨) 오류입니다.</p>  <h2>중복성을 사용하려면 연결 다시 시도 고려 사항이 필요합니다.</h2>  <p>동일한 LAN 내의 단일 SQL Server 연결하는 데 사용하고 해당 서버가 업그레이드에 실패하거나 다운되면 애플리케이션의 연결이 영구적으로 끊어집니다.&#160; 그러나 중복 SQL Server 환경에 대해 코딩한 경우 기본 서버를 사용할 수 없을 때 중복 서버에 대한 다시 연결을 관리하는 코드가 이미 있을 수 있습니다.&#160; 이 상황에서는 문제가 발생합니다.  확장된 가동 중지 시간 대신 짧은 연결 끊기.&#160; SQL Azure 중복 SQL Server 클러스터처럼 동작합니다. SQL Azure 패브릭은 시스템의 모든 노드 상태를 관리합니다. 패브릭에서 노드가 비정상 상태이거나(업그레이드 시) 노드를 오프라인으로 전환할 준비가 되었다는 것을 알면 패브릭은 자동으로 세션을 다른 노드의 데이터베이스 복제본에 다시 연결합니다.</p>  <p>현재 일부 장애 조치(failover) 작업으로 인해 세션이 갑자기 종료되고 클라이언트가 일반 네트워크 연결 끊김 오류를 수신합니다(서버에서 결과를 받을 때 전송 수준 오류가 발생했습니다.) (공급자: TCP 공급자, 오류: 0 - 호스트 컴퓨터의 소프트웨어에 의해 설정된 연결이 중단되었습니다.) &#160; 이러한 상황에서 가장 좋은 작업은 다시 연결하는 것이고 SQL Azure 데이터베이스의 정상 복제본에 자동으로 연결됩니다.</p>  <h2>SQL Azure별 리소스 관리</h2>  <p>다른 데이터베이스 SQL Azure 오류, 리소스 부족 및 기타 일시적인 이유로 인해 때때로 세션을 종료합니다.&#160; 이러한 상황에서 SQL Azure 항상 클라이언트 연결에 활성 요청이 있는 경우 특정 오류를 반환하려고 시도합니다.&#160; 보류 중인 요청이 없으면 항상 클라이언트 애플리케이션에 오류를 반환할 수 없다는 점에 유의해야 합니다.&#160; 예를 들면  활성 요청 없이 30분 이상 SQL Server Management Studio 통해 데이터베이스에 연결된 경우 세션이 시간 초과되고 활성 요청이 없으므로 SQL Azure 오류를 반환할 수 없습니다.</p>  <p>이러한 경우 SQL Azure 이미 설정된 연결을 닫습니다.</p>  <ul>   <li>애플리케이션에서 30분 이상 유휴 연결을 유지했습니다.</li>    <li>점심 식사에 가서 30 분 이상 SQL Server Management Studio 연결을 떠났습니다.</li> </ul>  <h2>SQL Azure 오류</h2>  <p>연결 손실을 처리하는 코드 작성을 시작하기 전에 몇 가지 다른 SQL Azure 오류는 연결을 다시 설정한 다음 실패한 명령 또는 쿼리를 다시 실행하는 것이 도움이 됩니다. 여기에는 다음이 포함됩니다.</p>  <ul>   <li>40197 - 서비스에서 요청을 처리하는 동안 오류가 발생했습니다. 다시 시도하세요. </li>    <li>40501 - 서비스가 현재 사용 중입니다. 10초 후 요청을 다시 시도하십시오. </li> </ul>  <h4>코드</h4>  <p>다음 코드는 인터넷과 연결된 대기 시간 및 연결이 끊어질 가능성을 고려합니다. 코드:</p>  <ul>   <li>실패한 명령 또는 쿼리를 반복적으로 다시 실행합니다. 횟수는 무한 루프에 들어가지 않고도 .config 파일에서 구성할 수 있습니다.</li>    <li>시도 사이의 대기 시간은 .config 파일에서 구성할 수 있습니다.</li>    <li>다시 시도해야 하는 예외만 처리하여 다른 예외를 throw합니다.</li>    <li>나중에 다른 시나리오를 추가할 수 있도록 예외 차단을 추상화합니다.</li> </ul>  <p>C#:</p>  <pre class=\"csharpcode\"><span class=\"rem\">/// &lt;summary&gt;</span>  <span class=\"rem\">/// Generic Code that takes and input and executes </span>  <span class=\"rem\">/// a statement against the SQL Azure</span>  <span class=\"rem\">/// &lt;/summary&gt;</span>  <span class=\"rem\">/// &lt;param name=&quot;companyId&quot;&gt;&lt;/param&gt;</span>  <span class=\"kwrd\">static</span> <span class=\"kwrd\">void</span> DoSomething(Int32 companyId)  {      <span class=\"rem\">// This is the retry loop, handling the retries session</span>      <span class=\"rem\">// is done in the catch for performance reasons</span>      <span class=\"kwrd\">for</span> (Int32 attempt = 1; ; )      {          <span class=\"rem\">// Create a SqlConnection Class, the connection isn't established </span>          <span class=\"rem\">// until the Open() method is called</span>          <span class=\"kwrd\">using</span> (SqlConnection sqlConnection = <span class=\"kwrd\">new</span> SqlConnection(              ConfigurationManager.ConnectionStrings[<span class=\"str\">&quot;SQLAzure&quot;</span>].                  ConnectionString))          {              <span class=\"kwrd\">try</span>              {                  <span class=\"rem\">// Open the connection</span>                  sqlConnection.Open();                    <span class=\"rem\">// Statement To Call</span>                  String sql = <span class=\"str\">@&quot;SELECT Color FROM Source WHERE Id = @CompanyId&quot;</span>;                    SqlCommand sqlCommand = <span class=\"kwrd\">new</span> SqlCommand(sql, sqlConnection);                    sqlCommand.Parameters.AddWithValue(<span class=\"str\">&quot;@CompanyId&quot;</span>, companyId);                    <span class=\"kwrd\">using</span> (SqlDataReader sqlDataReader = sqlCommand.ExecuteReader())                  {                      <span class=\"kwrd\">while</span> (sqlDataReader.Read())                      {                          <span class=\"rem\">/// Do Something Wtih Color</span>                      }                        <span class=\"kwrd\">return</span>;                  }              }              <span class=\"kwrd\">catch</span> (SqlException sqlException)              {                  <span class=\"rem\">// Increment Trys</span>                  attempt++;                    <span class=\"rem\">// Find Maximum Trys</span>                  Int32 maxRetryCount = Int32.Parse(                      ConfigurationManager.AppSettings[<span class=\"str\">&quot;ConnectionRetrys&quot;</span>]);                    <span class=\"rem\">// Throw Error if we have reach the maximum number of retries</span>                  <span class=\"kwrd\">if</span> (attempt == maxRetryCount)                      <span class=\"kwrd\">throw</span>;                    <span class=\"rem\">// Determine if we should retry or abort.</span>                  <span class=\"kwrd\">if</span> (!RetryLitmus(sqlException))                      <span class=\"kwrd\">throw</span>;                  <span class=\"kwrd\">else</span>                      Thread.Sleep(ConnectionRetryWaitSeconds(attempt));              }          }      }  }    <span class=\"kwrd\">static</span> Int32 ConnectionRetryWaitSeconds(Int32 attempt)  {      Int32 connectionRetryWaitSeconds = Int32.Parse(ConfigurationManager.          AppSettings[<span class=\"str\">&quot;ConnectionRetryWaitSeconds&quot;</span>])          * 1000;        <span class=\"rem\">// Backoff Throttling</span>      connectionRetryWaitSeconds = connectionRetryWaitSeconds *          (Int32)Math.Pow(2, attempt);        <span class=\"kwrd\">return</span> (connectionRetryWaitSeconds);  }    <span class=\"rem\">/// &lt;summary&gt;</span>  <span class=\"rem\">/// Determine from the exception if the execution</span>  <span class=\"rem\">/// of the connection should Be attempted again</span>  <span class=\"rem\">/// &lt;/summary&gt;</span>  <span class=\"rem\">/// &lt;param name=&quot;exception&quot;&gt;Generic Exception&lt;/param&gt;</span>  <span class=\"rem\">/// &lt;returns&gt;True if a a retry is needed, false if not&lt;/returns&gt;</span>  <span class=\"kwrd\">static</span> Boolean RetryLitmus(SqlException sqlException)  {      <span class=\"kwrd\">switch</span> (sqlException.Number)      {          <span class=\"rem\">// The service has encountered an error</span>          <span class=\"rem\">// processing your request. Please try again.</span>          <span class=\"rem\">// Error code %d.</span>          <span class=\"kwrd\">case</span> 40197:          <span class=\"rem\">// The service is currently busy. Retry</span>          <span class=\"rem\">// the request after 10 seconds. Code: %d.</span>          <span class=\"kwrd\">case</span> 40501:          <span class=\"rem\">//A transport-level error has occurred when</span>          <span class=\"rem\">// receiving results from the server. (provider:</span>          <span class=\"rem\">// TCP Provider, error: 0 - An established connection</span>          <span class=\"rem\">// was aborted by the software in your host machine.)</span>          <span class=\"kwrd\">case</span> 10053:              <span class=\"kwrd\">return</span> (<span class=\"kwrd\">true</span>);      }        <span class=\"kwrd\">return</span> (<span class=\"kwrd\">false</span>);  }</pre>      <p>&#160;</p>    <p>.Config 파일</p>    <pre class=\"csharpcode\"><span class=\"kwrd\">&lt;</span><span class=\"html\">configuration</span><span class=\"kwrd\">&gt;</span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">connectionStrings</span><span class=\"kwrd\">&gt;</span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">add</span> <span class=\"attr\">name</span><span class=\"kwrd\">=&quot;SQLAzure&quot;</span> <span class=\"attr\">connectionString</span><span class=\"kwrd\">=&quot;Server=tcp:youserver.database.windows.net;  Database=Test;User ID=login@server;Password=yourPassword;  Trusted_Connection=False;Encrypt=True;&quot;</span><span class=\"kwrd\">/&gt;</span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">connectionStrings</span><span class=\"kwrd\">&gt;</span>    <span class=\"kwrd\">&lt;</span><span class=\"html\">appSettings</span><span class=\"kwrd\">&gt;</span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">add</span> <span class=\"attr\">key</span><span class=\"kwrd\">=&quot;ConnectionRetrys&quot;</span> <span class=\"attr\">value</span><span class=\"kwrd\">=&quot;4&quot;</span><span class=\"kwrd\">/&gt;</span>      <span class=\"kwrd\">&lt;</span><span class=\"html\">add</span> <span class=\"attr\">key</span><span class=\"kwrd\">=&quot;ConnectionRetryWaitSeconds&quot;</span> <span class=\"attr\">value</span><span class=\"kwrd\">=&quot;5&quot;</span><span class=\"kwrd\">/&gt;</span>    <span class=\"kwrd\">&lt;/</span><span class=\"html\">appSettings</span><span class=\"kwrd\">&gt;</span>  <span class=\"kwrd\">&lt;/</span><span class=\"html\">configuration</span><span class=\"kwrd\">&gt;</span></pre>      <p>질문, 우려 사항, 의견이 있나요? 아래에 게시하고 우리는 그들을 해결하기 위해 노력할 것입니다.</p>"
