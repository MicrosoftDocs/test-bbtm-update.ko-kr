### YamlMime:Yaml
ms.openlocfilehash: 3daec3ad03782b847eed2cc39bebb4c776c326d1
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139905751"
Slug: visual-studio-code-and-azure-app-service-a-perfect-fit
Title: Visual Studio Code 및 Azure App Service - 완벽한 적합성
Summary: Visual Studio Code 사용하여 Azure App Service에 게시하는 방법을 알아봅니다.
Content: >-
  저와 같은 경우 지난 주에 <a href="https://code.visualstudio.com/Docs" target="_blank">Visual Studio Code</a> 발표를 보게 되어 기뻤고 <a href="https://azure.microsoft.com/en-us/documentation/services/app-service/" target="_blank">Azure App Service</a>에 배포된 프로젝트에 연결할 수 있다면 얼마나 멋진지 즉시 생각하기 시작했습니다. 그래서 <a href="https://channel9.msdn.com/events/build/2015" target="_blank">//build2015</a> 의 세션과 샌프란시스코에서 집으로 돌아오는 길에 (멋진 동료 <a href="https://twitter.com/davidebbo" target="_blank">데이비드 에보</a>의 도움으로) 훌륭한 출발점을 마련할 수 있었습니다. Visual Studio Code 개발하여 Git Push를 수행하여 Azure Cloud에 게시할 수 있는 Azure App Service에서 실행되는 Node.js 앱입니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image1.png"><img class="alignnone size-full wp-image-293991" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image1.png" alt="nirma_image1" width="499" height="249" /></a>


  아래에서 설명하는 단계에서 만든 아티팩트:

  <ul>
   <li>node.js 구현된 Azure App Service 웹앱</li>
   <li>웹앱과 동기화되는 GitHub 리포지토리입니다(마스터 분기에 대한 모든 커밋은 GitHub 후크를 사용하여 새 버전의 웹앱을 게시합니다.)</li>
   <li>원격으로 GitHub 리포지토리에 푸시하는 로컬 git 리포지토리 설정</li>
   <li>로컬 git 리포지토리를 사용하도록 구성된 Visual Studio Code 작업 영역</li>
   <li>최종 결과? Code에서 git 푸시 메뉴 항목을 누르면 라이브 Azure Cloud 애플리케이션이 변경됩니다.</li>
  </ul>

  &nbsp;

  <h2>시스템 요구 사항</h2>

  마법을 실현하려면 다음 구성 요소가 설치되어 있어야 합니다. \ 사용할 수 있습니다.

  <ol>
   <li>Azure 구독( <a href="https://azure.microsoft.com/en-us/pricing/free-trial/" target="_blank">여기</a>로 가져오기)</li>
   <li>Visual Studio Code(<a href="https://code.visualstudio.com/Docs/setup" target="_blank">설치 지침</a>)</li>
   <li>Git(<a href="https://git-scm.com/download" target="_blank">다운로드</a>)</li>
   <li>curl, GitHub 리포지토리를 만드는 데 사용(<a href="https://curl.haxx.se/download.html" target="_blank">설치</a>)</li>
   <li>Azure CLI(<a href="https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/" target="_blank">설치 지침</a>).
  <strong>참고: </strong> Azure CLI는 선택적 구성 요소이며, <a href="https://portal.azure.com/" target="_blank">Azure Portal 또는</a> <a href="https://azure.microsoft.com/en-us/documentation/articles/powershell-install-configure/" target="_blank">Powershell</a> 중 하나를 사용하여 웹앱을 만들고 GitHub 구성하도록 선택할 수 있습니다.</li>
   <li><a href="https://github.com/" target="_blank">GitHub</a> 계정 <strong>참고: </strong>이 초기 버전의 Code에서는 사용한 GitHub 계정이 SSH 또는 2단계 인증을 사용하지 <strong>않습니다</strong>.</li>
  </ol>

  &nbsp;

  <h2>모든 항목 요약</h2>

  이 데모를 위해 server.js 하나의 파일로만 구성된 매우 간단한 node.js 애플리케이션을 빌드합니다. 단계는 다음과 같습니다.


  1. 빈 폴더를 만들면 코드 작업 영역의 위치가 됩니다. 내 경우에는 "C:\websites\CodeWebApp"으로 이동하도록 선택했습니다.

  2. 코드 시작, 파일 | 적중 폴더 메뉴를 열고 새 폴더 선택


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image2.jpeg"><img class="alignnone size-full wp-image-293992" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image2.jpeg" alt="nirma_image2" width="470" height="330" /></a>


  3. Code에서 server.js 파일을 만들고 아래 Java 스크립트 조각을 붙여넣습니다.

  <pre class="prettyprint">var http = require('http');

  http.createServer(function (req, res) {
      console.log('Got request for ' + req.url);
      res.writeHead(200, {'Content-Type': 'text/html'});
      res.end('&lt;h1&gt;Hello Code and Azure Web Apps!&lt;/h1&gt;');
  }).listen(process.env.PORT);</pre>

  <p align="left">저장을 누릅니다. 파일 이름을 server.js 1단계에서 만든 폴더에 저장해야 합니다.</p>

  <p align="left"><a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image3.png"><img class="alignnone size-full wp-image-294011" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image3.png" alt="nirma_image3" width="513" height="337" /></a></p>

  4.이제 나중에 GitHub 동기화할 로컬 git 리포지토리를 만들어야 합니다. 코드에서 왼쪽 탐색 모음의 git 아이콘을 누르고 "Git 리포지토리 초기화" 단추를 누릅니다. <strong>참고: </strong>파일 | 폴더 열기... git 리포지토리 초기화 단추가 표시되지 않으면 메뉴 항목을 선택하고 작업 영역 폴더(1단계에서 생성됨)를 선택합니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image4.png"><img class="alignnone size-full wp-image-294012" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image4.png" alt="nirma_image4" width="522" height="345" /></a>


  5. 커밋 주석을 입력하고 Enter 단추를 눌러 server.js 파일을 커밋합니다. 이제 server.js 체크 인된 로컬 git 리포지토리가 있습니다.


  <img class="alignnone size-full wp-image-294041" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image5.png" alt="nirma_image5" width="527" height="348" />


  6. Git Bash에서 다음 몇 단계를 실행합니다. 온라인 GitHub 리포지토리를 만들고 로컬 리포지토리에 매핑합니다. GitHub 리포지토리를 만들려면 아래 명령을 Git Bash 창에 입력합니다.

  <pre class="prettyprint">curl -u USER https://api.github.com/user/repos -d '{ "name": "NAME" }'</pre>

  <strong>참고: </strong>USER를 GitHub 사용자 이름으로 바꿉습니다.

  <strong>참고: </strong>NAME을 새 GitHub 리포지토리의 이름으로 바꿉습니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image6.png"><img class="alignnone size-full wp-image-294051" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image6.png" alt="nirma_image6" width="549" height="127" /></a>


  GitHub 암호를 입력하라는 메시지가 표시됩니다.

  프로세스는 실행 후 많은 JSON을 반환합니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image7.png"><img class="alignnone size-full wp-image-294061" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image7.png" alt="nirma_image7" width="552" height="159" /></a>


  7. 이제 로컬 리포지토리를 새로 만든 GitHub 리포지토리에 매핑합니다. Git Bash에서 다음을 입력합니다.

  <pre class="prettyprint">git remote add origin https://github.com/USER/NAME.git</pre>

  <strong>참고: </strong>USER를 GitHub 사용자 이름으로 바꿉습니다.

  <strong>참고: </strong>NAME을 만든 GitHub 리포지토리의 이름으로 바꿉습니다.


  8. 이제 자격 증명을 로컬로 저장하고 코드에서 생성된 명령을 푸시하도록 자동으로 추가하도록 git을 구성합니다(코드 팀이 향후 릴리스에서 인증 지원을 개선할 것으로 의심됨). Git Bash에 아래를 입력합니다.

  <pre class="prettyprint">git config credential.helper store</pre>

  9.이 단계는 GitHub 대한 초기 푸시가 될 것이며, 그 후에는 Code에서 모든 푸시 명령을 수행할 수 있습니다. Git Bash에서 다음을 입력합니다.

  <pre class="prettyprint">git push –u origin master</pre>

  <div><strong>참고: </strong>GitHub 사용자 이름 및 암호를 입력하라는 메시지가 표시됩니다.</div>

  <div><a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/07/Git-Bash.png"><img style="background-image: none; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border: 0px;" title="Git Bash" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/Git-Bash_thumb.png" alt="Git Bash" width="564" height="212" border="0" /></a></div>

  <div></div>

  <div></div>

  <div></div>

  이전 단계에서 자격 증명 도우미를 구성했으므로 다음에 Git Bash 또는 Code에서 푸시할 때 자격 증명을 제공할 필요가 없습니다.


  10. 이제 로컬 리포지토리가 GitHub 리포지토리에 동기화되었습니다. Azure App Service Web App을 만들어야 합니다. Web Apps를 만드는 방법에는 여러 가지가 있습니다. <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/" target="_blank">미리 보기 포털</a> ("Ibiza") 또는 "클래식" <a href="https://manage.windowsazure.com" target="_blank">포털</a>에서 만들 수 있습니다. <a href="https://www.troyhunt.com/2015/01/automating-web-hosting-creation-in.html" target="_blank">Powershell commandlet</a> 도 사용할 수 있습니다. 포털 중 하나를 사용하는 경우 새 웹앱을 만들고 연속 배포 UI에서 GitHub 선택합니다. 그런 다음, 6단계(마스터 분기)에서 만든 리포지토리를 선택합니다.

  이 예제에서는 <a href="https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/" target="_blank">Azure CLI</a>를 사용하여 Azure Web App을 만들고 GitHub 리포지토리에 연결합니다. 명령 창(관리자 권한으로 실행)에 다음을 입력합니다.

  <pre class="prettyprint">azure site create NAME  -- github</pre>

  <strong>참고: </strong>NAME을 Web App <strong>Note</strong>의 고유한 이름으로 바꿉습니다. 데이터 센터 및 GitHub 리포지토리에 대한 메시지가 표시됩니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/04/nirma_image10.png"><img class="alignnone size-medium wp-image-294081" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image10-573x369.png" alt="nirma_image10" width="573" height="369" /></a>

  11. 이제 코드를 사용하여 변경하고 웹앱에 푸시할 준비가 되었습니다. Code에서 server.js 파일의 출력 줄을 변경합니다.


  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image11.png"><img class="alignnone size-full wp-image-294091" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/nirma_image11.png" alt="nirma_image11" width="584" height="224" /></a>


  12. 저장을 누르고 왼쪽 탐색에서 Git 아이콘을 클릭합니다.


  13. 코드에서 변경 내용을 커밋합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image65.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="이미지" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image65_thumb.png" alt="image" width="580" height="193" align="left" border="0" /></a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  14. GitHub 리포지토리로 푸시합니다.


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image69.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="이미지" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image69_thumb.png" alt="image" width="587" height="194" align="left" border="0" />

  </a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  <strong>참고: </strong>git 작업의 출력을 보려면 보기 | 출력 메뉴 항목


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image73.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="이미지" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image73_thumb.png" alt="image" width="586" height="191" align="left" border="0" /></a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  15. 이제 만든 웹앱으로 이동하여 방금 변경한 내용을 볼 수 있습니다. 축하합니다! 이제 코드를 사용하여 Azure App Service 웹앱을 게시할 수 있습니다.


  &nbsp;


  <a href="https://acom.azurecomcdn.net/80C57D/blogmedia/blogmedia/2015/05/05/image77.png"><img style="background-image: none; float: left; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-width: 0px;" title="이미지" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/image77_thumb.png" alt="image" width="525" height="129" align="left" border="0" /></a>


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;


  &nbsp;

  <h2>결론</h2>

  위의 시나리오는 수행할 수 있는 작업 측면에서 빙산의 일각에 불과합니다. 팀으로 작업하거나 프로덕션으로 릴리스하기 전에 코드를 스테이징하려는 더 정교한 프로젝트가 있는 경우 코드를 프로덕션으로 전환하기 전에 GitHub 리포지토리를 웹앱 <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-staged-publishing/" target="_blank">스테이징 슬롯</a>에 연결하고 몇 가지 테스트를 수행할 수 있습니다.


  또는 GitHub 워크플로를 활용하고 두 사이트를 마스터 분기와 동기화하고 하나는 스테이징 분기와 동기화한 다음 <a href="https://help.github.com/articles/using-pull-requests/" target="_blank">끌어오기 요청을</a> 사용하여 프로덕션 릴리스를 제어할 수 있습니다. 할 일이 많고 배울 것이 많으며 새로운 내용이 나타나면이 블로그를 업데이트 할 것입니다.
