### YamlMime:Yaml
ms.openlocfilehash: 85a37183e7268951d7459dbb7f43c27e61fc8c63
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910958"
Slug: isv-guest-blog-series-persistent-systems-takes-to-windows-azure-delivers-cloudninja-for-java
Title: 'ISV 게스트 블로그 시리즈: 영구 시스템이 Azure를 Windows 데 사용 – Java용 CloudNinja 제공'
Summary: '편집자&rsquo; 주: Shreekanth Joshi에 의해 작성된 오늘의&rsquo; 게시물, 영구 시스템의 AVP 클라우드 컴퓨팅은 회사가 Java 기반 개발 및 제공을 위해 Windows Azure를 사용하는 방법을 설명합니다...'
Content: '<p><b><i>편집기&rsquo; 참고:</i></b><i> 영구 시스템의 AVP 클라우드 컴퓨팅인 Shreekanth Joshi가 작성한 오늘의&rsquo; 게시물은 회사가 Windows Azure를 사용하여 ISV 고객을 위한 Java 기반 애플리케이션을 개발하고 제공하는 방법을 설명합니다.<img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6076.Joshi.png" alt="" style="float: right;" height="156" border="0" width="120"></i></p>  <p>Persistent Systems는 소프트웨어 제품 및 기술 서비스를 전문으로 하는 글로벌 회사입니다. 클라우드 컴퓨팅, 모바일, BI &amp; 분석 및 협업의 네 가지 주요 차세대 기술 영역에서 동급 최고의 솔루션을 개발하는 데 중점을 두고 있습니다. 영구 시스템은 클라우드 공간에서&nbsp; 초기 참가자였으며, 다양한 클라우드 애플리케이션을 개발하고 배포하는 데 도움을 주기 위해 많은 선구적인 신생 기업 및 혁신적인 기업과 파트너십을 맺고 있습니다.&nbsp; Weve&rsquo;는 세밀하게 조정된 제품 엔지니어링 프로세스를 활용하여 북미, 유럽 및 아시아 전역의 300명 이상의 고객을 위한 혁신적인 솔루션을 개발했습니다.</p>  <p>SaaS 기능 및 경험을 바탕으로 선도적인&rsquo; 클라우드 플랫폼을 위한 전용 역량 센터를 구축했습니다. Windows Azure 커뮤니티의 활성 참가자로서 다음을 포함한 오픈 소스 프로젝트를 릴리스했습니다.</p>  <ul>  <li><a target="_blank" href="https://msdn.microsoft.com/en-us/library/windowsazure/hh694271(v=vs.103).aspx">Java를 사용하여 Eclipse용 Azure 플러그 인 Windows</a></li>  <li><a target="_blank" href="https://odataphp.codeplex.com/">PHP용 OData SDK</a></li>  <li>PHP, Java 및 Ruby용 AppFabric SDK</li>  </ul>  <p>Persistent Systems는 최근 아래에 설명된 대로 Java&nbsp;<a target="_blank" href="https://persistentsys.github.com/cloudninja-for-java/">용 CloudNinja</a>라는 새로운 오픈 소스 프로젝트를 시작했습니다.</p>  <h2>Java용 CloudNinja</h2>  <p>고객이 Java 애플리케이션에 확장성과 고가용성을 제공할 수 있는 <a target="_blank" href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT_id=cmp_pst001_blg_post0097gen.mc">Windows</a> Azure의 개방성을 실현함에 따라 Windows Azure의 Java 기반 애플리케이션에 대한 수요가 증가하고 있습니다. 단일 테넌트 및 다중 테넌트 애플리케이션을 관리하기 위해 다양한 프로젝트 구성 요소를 디자인하는 방법부터 Windows Azure 서비스와 프로젝트 구성 요소를 통합하는 방법에 대한 많은 질문을 받습니다. Azure에 Windows 학습하는 동안 고객이 자주 직면하는 과제는 .NET 이외의 플랫폼을 다루는 제한된 양의 정보 문서 및 코드 샘플만 있다는 것입니다.</p>  <p>Windows Azure는 종종 .NET 클라우드 플랫폼으로 인식되는데, 이는 사실이 아닙니다&rsquo;. 이 오해는 Microsoft Visual Studio 중심으로 작성된 데모 및 방법 블로그를 기반으로 합니다. 알고 보니 Windows Azure는 Windows Server 2008 SP2 또는 Windows Server 2008 R2 가상 머신을 제공합니다. 즉, 대부분의 Windows 기반 실행 파일 또는 스크립트는 Windows Azure에서 실행할 수 있습니다.&nbsp;</p>  <p>Windows Azure의 개방성에 대한 인식을 높이기 위해 최근에 Windows Azure용 다중 테넌트 애플리케이션을 빌드하는 방법을 설명하는 참조 애플리케이션인 Java용 CloudNinja를 출시했습니다. Java용 CloudNinja에는 다음과 같은 기능과 기능이 포함됩니다.&nbsp;</p>  <ul>  <li>테넌트 온보딩</li>  <li>테넌트 수준 사용자 지정(예: 로고 관리)</li>  <li>테넌트별 데이터 격리</li>  <li>테넌트별 계량</li>  <li>다른 ID 공급자를 통해 로그인을 지원합니다. 예를 들어 Yahoo!, Google 및 Windows Live ID</li>  <li>범용 작업 스케줄러</li>  </ul>  <p>이 애플리케이션은 Spring, Hibernate, Log4j 및 jqPlot과 같은 몇 가지 일반적인 OSS 라이브러리를 기반으로 합니다.</p>  <p>이 프로젝트는 Windows Azure에서 실행되며 Java와<b> </b>함께 Eclipse용 Windows Azure 플러그 인을 사용하여 완전히 개발되었습니다. CloudNinja의 아키텍처를 보여 주는 일러스트레이션은 다음과 같습니다. <b> </b></p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5554.CloudNinja1.png" alt="" border="0"></p>  <p>Java용 CloudNinja의 개발 및 배포에서 다양한 Windows Azure 서비스를 활용했습니다. 가장 중요한 것 중 일부는 다음과 같습니다.</p>  <ul>  <li><a target="_blank" href="https://azure.microsoft.com/en-us/home/features/access-control/?WT.mc_id=cmp_pst001_blg_post0097acs">Azure Access Control Service Windows</a></li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/storage/?WT.mc_id=cmp_pst001_blg_post0097sto">Microsoft Azure Storage</a></li>  <li><a target="_blank" href="https://www.windowsazure.com/en-us/home/features/sql-azure//?WT.mc_id=cmp_pst001_blg_post0097sql">SQL Azure</a></li>  <li>Microsoft Azure 서비스 관리</li>  </ul>  <p>Java용 CloudNinja는 Java 커뮤니티에 도움이 될 것이며 Java 개발자가 Windows Azure에 대한 자체 애플리케이션을 만들도록 장려할 것이라고 믿습니다.</p>  <p>Windows Azure용 Java 애플리케이션을 배포할 때 고려해야 할 몇 가지 사항이 있습니다.</p>  <ul>  <li>배포와 함께 <sup>타사</sup> 도구 및 런타임을 번들로 묶을지 여부</li>  <li>애플리케이션 모니터링</li>  <li>누락된 SDK 기능 처리</li>  </ul>  <h3>배포를 사용하여 <sup>타사</sup> 도구 및 런타임을 번들로 묶을지 여부</h3>  <p>Windows Eclipse용 Azure 플러그 인은 Windows Azure 프로젝트와 함께 Java 애플리케이션을 Windows Azure에 업로드하고 배포할 수 있는 패키지로 결합합니다. Windows Azure 프로젝트에는 Java 환경을 설정하고 다음을 포함하여 애플리케이션을 시작하는 시작 스크립트가 포함되어 있습니다.</p>  <ul>  <li>WAR 파일 배포</li>  <li>환경 변수 구성&nbsp;Windows Eclipse용 Azure 플러그 인은 Windows Azure 프로젝트와 함께 Java 애플리케이션을 Windows Azure에 업로드하고 배포할 수 있는 패키지로 결합합니다. Windows Azure 프로젝트에는 Java 환경을 설정하고 다음을 포함하여 애플리케이션을 시작하는 시작 스크립트가 포함되어 있습니다.</li>  </ul>  <p>Windows Eclipse용 Azure 플러그 인은 Windows Azure 프로젝트와 함께 Java 애플리케이션을 Windows Azure에 업로드하고 배포할 수 있는 패키지로 결합합니다. Windows Azure 프로젝트에는 Java 환경을 설정하고 다음을 포함하여 애플리케이션을 시작하는 시작 스크립트가 포함되어 있습니다.</p>  <ul>  <li>웹 서버 설정(이 경우 Apache Tomcat)</li>  <li>JRE 설정</li>  <li>WAR 파일 배포</li>  <li>환경 변수 구성</li>  </ul>  <p>Windows Azure 가상 머신 인스턴스가 시작되면 환경을 설정해야 합니다. 이 작업은 시작 스크립트를 통해 수행됩니다. Tomcat 및 JRE는 Windows 서버 VM 이미지의 일부가 아니므로 직접 제공해야 합니다. &rsquo;Windows Azure 배포 패키지에 포함하기가 매우 쉽습니다. 그러나 Tomcat 및 JRE를 추가하면 패키지 크기에 약 70MB가 추가되고 런타임 애플리케이션이 배포에 결합됩니다. 여기에는 몇 가지 문제가 있습니다.</p>  <ul>  <li>배포 패키지를 Windows Azure에 업로드하는 데 더 오래 걸립니다.</li>  <li>Tomcat 또는 JRE 버전을 업데이트하려면 전체 패키지를 다시 배포해야 합니다.&nbsp;</li>  </ul>  <p>배포 패키지에 Tomcat 및 JRE를 포함할 필요가 없습니다&rsquo;. 위에서 언급한 문제를 방지하기 위해 Windows Azure Blob Storage에 런타임을 저장했습니다. 시작 스크립트는 Blob Storage에서 Apache Tomcat 및 JRE를 다운로드한 다음 Apache Tomcat을 시작합니다. 가상 머신 및 스토리지 계정이 동일한 데이터 센터에 있으므로 Windows Azure Blob Storage에서 가상 머신 스토리지로의 다운로드는 매우 빠릅니다. 이러한 Java 애플리케이션의 패키지 크기는 Apache Tomcat 및 JRE 설치 가능의 총 크기로 감소되었습니다.</p>  <p>배포를 최신 Tomcat 및 JRE로 업그레이드하는 동안 Blob Storage에 새 버전을 복사해야 했습니다. 그런 다음 Windows Azure Portal을 사용하여 애플리케이션을 호스트하는 모든 가상 머신 인스턴스를 이미지화했으며 코드를 다시 배포하지 않고 최신 Tomcat/JRE 버전을 실행했습니다.&nbsp;</p>  <h3>애플리케이션 모니터링</h3>  <p>Windows Azure는 성능 카운터, 이벤트 로그, 파일 디렉터리, Windows Azure 인프라 로그 및 크래시 덤프를 캡처할 수 있는 진단 모니터&rsquo;를 제공합니다. Java를 사용하는 기본 Windows Azure 프로젝트는 진단 구성을 제공하지 않습니다&rsquo;. Java용 CloudNinja의 경우 감시하려는 특정 성능 카운터(주로 CPU 사용률)를 설정하는 독립 실행형 유틸리티를 만들었습니다.</p>  <p>또한 각 테넌트에 대한 사용 통계를 생성하기 위해 Tomcat 액세스 로그 및 Storage 분석 로그를 확인해야 했습니다. Tomcat 로그를 캡처하기 위해 Tomcat이 액세스 로그 파일을 저장하는 디렉터리의 파일을 모니터링하도록 Azure Diagnostics를 Windows 구성했습니다. 진단 모니터는 Blob에 액세스 로그를 푸시합니다. 여기서 나중에 작업자 프로세스에서 액세스합니다. Tomcat의 실행 중인 각 인스턴스에 대한 로그에 액세스할 수 있으므로 매우 잘&rsquo; 작동합니다. 이러한 파일은 Windows Azure Storage&rsquo;에 저장되므로 외부 프로그램에서도 쉽게 액세스할 수 있으므로 예상대로 작동하지 않는 경우 로그 파일을 수동으로 검사할 수 있습니다.</p>  <p>Blob Storage 모니터링과 관련하여 스토리는 약간 변경됩니다. Java용 CloudNinja에서는 Blob Storage에 테넌트 로고를 저장합니다. 이러한 로고를 직접 가리키는 이미지 태그가 Html 출력에 있습니다. 이 로고는 Apache Tomcat 서버를 통과하지 않습니다&rsquo;. 이러한 Blob 액세스 및 관련 대역폭을 캡처하기 위해 Azure에서 Storage Analytics를 제공하는 Windows. 분석의 두 가지 유형은 모든 단일 Blob 액세스에 대한 자세한 통계를 제공하는 <i>로깅 </i>과 시간별 롤업을 제공하는 <i>계량 </i>입니다. 분석은 기본적으로 사용하지 않도록 설정됩니다. Java용 CloudNinja의 경우 Windows Azure Storage 계정에 대한 로깅을 사용하도록 설정했습니다. 이러한 로그는 타임스탬프, 원본 IP, 액세스 중인 Blob 및 결과 상태(액세스 성공 또는 실패)와 같은 세부 정보를 제공합니다. &nbsp;Storage Analytics는 Java용 CloudNinja에 특히 도움이 된 Azure Windows 기능으로, 테넌트 수준 스토리지 사용량을 캡처하려는 다중 테넌트 애플리케이션입니다.</p>  <p>디버깅하는 동안 로깅만으로는 충분하지 않습니다. 개발자가 애플리케이션을 호스트하는 가상 머신에 연결할 수 있도록 원격 액세스를 사용하도록 설정했습니다. Windows Azure Portal을 통해 실행 중인 인스턴스에 대한 원격 액세스 연결을 열 수 있습니다.&nbsp;</p>  <h3>누락된 SDK 기능 처리</h3>  <p>일부 Windows Azure 기능은 Java용 Windows Azure SDK에서 아직 제공되지 않습니다. 실제로 의존하는 기능 중 하나는 ACS(Access Control Services)입니다. Microsoft는 Java용 CloudNinja에서 ACS를 사용하여 테넌트가 Google, Yahoo와 같은 여러 ID 공급자 중 하나를 사용하여 로그인할 수 있도록 하고 싶었습니다. 및 라이브 ID입니다.&nbsp;</p>  <p>알고 보니 ACS에는 완전한 REST 기반 관리 인터페이스가 있습니다. REST 라이브러리(Restlet)의 도움을 받아 Java용 CloudNinja에 ACS를 빌드할 수 있었습니다. Windows Azure의 다른 REST 기반 기능에도 동일한 기술을 사용할 수 있습니다. 다행히 Java용 Windows Azure SDK는 현재 꽤 많은 것을 다룹니다.</p>  <ul>  <li>서비스 런타임</li>  <li>Storage(Blob, 큐, 테이블)</li>  <li>Service Bus</li>  </ul>  <h3>요약</h3>  <p>Windows Azure는 영구 시스템의 핵심 기술이며 고객을 위한 Java 기반 솔루션을 계속 빌드하고 있습니다. .NET 코드를 작성하지 않고도 Java 애플리케이션에서 Azure를 Windows 거의 모든 기능을 성공적으로 사용합니다. Java용 CloudNinja에서 잘 설명되어 있습니다. 예를 들어 Microsofts&rsquo; Windows Java용 Azure SDK에 이 서비스에 대한 API 지원이 없는 경우에도 ACS 관리 서비스와 상호 작용했습니다. REST 기반 API를 성공적으로 활용하여 ACS 관리 서비스와 상호 작용하는 신뢰 당사자 애플리케이션을 만들 수 있습니다. &nbsp;이 REST 기반 접근 방식은 모든 프로그래밍 언어로 Windows Azure 애플리케이션을 개발할 수 있는 기회를 제공합니다.&nbsp;</p>  <p>Java 커뮤니티는 Java용 CloundNinja를 참조하여 Windows Azure용 다중 테넌트 애플리케이션을 빌드하는 것이 좋습니다.</p>  <p>자세한 내용은 영구 시스템 블로그에서 Java&rdquo;용 CloudNinja 소개 블로그 게시물을 &ldquo;참조하세요.</p>'
