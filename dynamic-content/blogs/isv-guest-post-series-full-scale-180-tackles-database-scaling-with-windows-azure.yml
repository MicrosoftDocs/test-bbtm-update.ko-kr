### YamlMime:Yaml
ms.openlocfilehash: d70bdbcb4422ce59e89ec5a12d62ac6031ea9b48
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139910955"
Slug: isv-guest-post-series-full-scale-180-tackles-database-scaling-with-windows-azure
Title: 'ISV 게스트 포스트 시리즈: 본격적인 180 Windows Azure를 사용하여 데이터베이스 크기 조정 해결'
Summary: 편집자&rsquo; 주:&rsquo; 오늘 게시물, 전체 규모에 의해 작성 된 180 교장 트렌트 스완슨, 회사가 Windows Azure 및 데이터베이스 분할을 사용하여 확장 가능한 솔루션을 구축하는 방법을 설명합니다 ...
Content: '<p><b><i>편집자&rsquo; 주:</i></b><i> 180명의 수석 트렌트 스완슨(Trent Swanson)이 작성한 오늘의&rsquo; 게시물은 회사가 Windows Azure 및 데이터베이스 분할을 사용하여 고객을 위한 확장 가능한 솔루션을 구축하는 방법을 설명합니다.</i><i><img style="float: right;" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3678.trent.png" alt="" height="145" border="0" width="106"></i></p>  <p>본격적인 규모 180은 클라우드 컴퓨팅 솔루션을 전문으로 하는 워싱턴 주 레드먼드에 본사를 둔 컨설팅 회사로, 아키텍처 권고에서 솔루션 제공에 이르는 전문 서비스를 제공합니다.&nbsp; 전체 규모 180 팀은 겉보기에는 불가능한 문제로 <a href="https://www.windowsazure.com/en-us/pricing/free-trial/?WT.mc_id=cmp_pst001_blg_post0114gen">Windows Azure</a>에서 혁신적인 클라우드 솔루션을 제공하는 것으로 유명합니다.&nbsp; 본격적인 규모 180은 광범위한 산업의 고객과 함께 작동하며, 모든 프로젝트가 매우 고유하지만 이러한 솔루션에 걸친 일반적인 관심사와 요구 사항이 많이 있는 경우가 많습니다.</p>  <p>고객과 다양한 프로젝트를 진행하면서 Windows Azure에서 매우 멋진 솔루션을 설계, 구현 및 배포하는 과정에서 이 회사는 매우 흥미로운 과제를 제시했습니다.&nbsp; 종종 발생하는 과제는 데이터베이스 크기 조정입니다.</p>  <p>데이터 저장소 작업에 관한 한, 매우 높은 수준에서 다음 두 가지 주요 영역에 작업을 집중해야 합니다.</p>  <ul>  <li>&ldquo;데이터가 저장되는 위치&rdquo;</li>  <li>가장 최적의 방법으로 해당 위치 내/외부로 데이터 가져오기</li>  </ul>  <p>복잡성 및 더 높은 추상화 계층의 게임은 소프트웨어 개발 영역에서 흥미로운 게임입니다. 작업을 완료하거나, 결국 평형 상태로 전환하거나, 더 높은 수준의 추상화 구문을 사용하거나, 빌드/획득 결정이라고도 하는 다른 사람의 구문을 사용하기 위한 수단(이 단어는 API, 라이브러리, 프로그래밍 패러다임, 클래스 라이브러리, 프레임워크와 같은 다양한 개념을 나타냅니다)으로 시작합니다. 다른 것과 마찬가지로 데이터 저장소도 동일한 패턴을 따릅니다. <a href="https://www.windowsazure.com/en-us/home/features/sql-azure/?WT.mc_id=cmp_pst001_blg_post0114sql">SQL Azure</a> 같은 관계형 저장소를 처리할 때 시스템에서 설정한 규칙을 사용해야 합니다.</p>  <h3>데이터가 저장되는 위치</h3>  <p>SQL Azure 작업할 때 데이터 저장소의 물리적 구성 요소는 더 이상 문제가 되지 않으므로 데이터 파일, 파일 그룹 및 디스크 전체 조건과 같은 항목에 대해 걱정하지 마세요. 서비스 자체에 의해 부과되는 리소스 제한을 고려해야 합니다. 현재 SQL Azure 최대 150GB의 개별 데이터베이스를 제공합니다.</p>  <p>애플리케이션&rsquo; 데이터베이스 사용량이 시간이 지남에 따라 증가할 것으로 예상하는 것이&rsquo; 일반적입니다. 온-프레미스 데이터베이스와 달리 제어할 수 있는 유일한 차원은 Windows Azure에서 추가 데이터베이스 공간을 조달하는 것입니다. 이 방법에는 두 가지 방법이 있습니다. 즉, 확장 계획을 수립하고 미리 새 공간을 확보하거나(클라우드에서 실행 목적에 영향을 줄 수 있음) 정책에 따라 필요에 따라 자동으로 확장합니다. 후자를 선택하는 경우 데이터베이스 간에 데이터를 분할하는 방법을 찾아야 합니다.</p>  <h3>최적의 데이터 전송 및 분할</h3>  <p>공간 관리 외에도 데이터 저장소로 들어오고 나가는 데이터가 빠른지 확인해야 합니다. 온-프레미스 시스템을 사용하면 네트워크 및 디스크 속도가 모두 최적화될 수 있지만 클라우드 플랫폼에서는 일반적으로 사용 가능한 최적화가 아니므로 다른 접근 방식이 필요합니다. 이는 일반적으로 데이터 액세스를 병렬화하는 것으로 변환됩니다.</p>  <p>&nbsp;<img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1307.FullScale1.png" alt="" border="0"></p>  <p>데이터 스토리지 요구 사항이 늘어나지만 최대 데이터베이스 크기를 위해 플랫폼에서 설정한 규칙 내에서 플레이해야 합니다. 마찬가지로 이러한 크기 및 처리량 제한을 염두에 두고 솔루션을 설계하는 방법을 배워야 합니다.&nbsp; 데이터 저장소에 대한 연결, 데이터 저장소 내의 실제 스토리지 처리량 또는 데이터 저장소의 크기 제한에 관계없이&rsquo; 이러한 단일 단위 제한을 초과하여 크기를 조정하기 위한 솔루션을 설계해야 하는 경우가 많습니다. 더 작은 데이터베이스 컬렉션을 활용하여 데이터를 저장하는 메커니즘을 사용할 수 있는 경우 이러한 작은 데이터베이스에 병렬로 액세스할 수 있는 경우 크기 및 속도 모두에 맞게 데이터 저장소 솔루션을 최적화할 수 있습니다. 여기서 메커니즘은 자동 데이터 분할 및 데이터베이스 조달을 처리해야 합니다. 이 문제를 해결하는 일반적인 방법 중 하나는 <i>분할입니다</i>.&nbsp; 분할을 사용하면 사용되는 방법에 관계없이 데이터 관리 및 데이터 액세스가 변경됩니다. SQL Azure 페더레이션은 SQL Azure 대한 기본 분할 구현을 제공합니다.&nbsp;</p>  <p>일부 고객 참여 기간 동안 SQL Azure 페더레이션이 솔루션이 될 상황을 발견했습니다.&nbsp; 단일 데이터베이스의 150GB 크기 제한을 넘어서는 확장 외에도 다중 테넌트 클라우드 솔루션에서 페더레이션이 유용한 것으로 나타났습니다.</p>  <h3>다중 테넌트 솔루션의 SQL Azure 페더레이션</h3>  <p>다중 테넌시는 일반적으로 작업하는 클라우드 솔루션의 일부인 요구 사항입니다.&nbsp; 이러한 프로젝트에는 새 솔루션 빌드, 기존 단일 테넌트 솔루션에 이 기능 추가, 확장 및 운영 비용 절감을 위해 기존 다중 테넌트 솔루션을 다시 디자인하는 것이 포함됩니다.&nbsp; SQL Azure 페더레이션이 이러한 요구 사항을 충족하는 데 매우 유용한 기능인 경우가 많습니다.&nbsp; 테넌트는 데이터를 분할하는 자연스러운 <i>경계</i>가 되며, 테넌트가 많을수록 비용 관리가 중요해집니다.</p>  <p>각 테넌트 데이터가 자체 데이터베이스에 있는 최대 100KB의 테넌트&rsquo; 데이터를 저장하는 솔루션을 고려해 보겠습니다&rsquo;.&nbsp; 현재 SQL Azure 프로비전할 수 있는 가장 작은 데이터베이스는 100MB로, 월별 스토리지 비용은 $5/테넌트에 해당합니다.&nbsp; 10,000개의 테넌트에 온보딩하는 경우 기준 비용은 이제 $50,000입니다! 이제 별도의 데이터베이스 대신 모든 테넌트를 단일 데이터베이스로 결합할 수 있습니다. 모든 테넌트가 전체 100KB의 데이터를 저장하더라도 실제로 2GB 데이터베이스에 10,000개의 테넌트를 모두 수용할 수 있으며, 비용은 매월 $13.99에 불과합니다.&nbsp; 그것은&rsquo; 큰 차이입니다!</p>  <p>&rsquo;이제 테넌트 온보딩을 계속하는 동안 더 많은 데이터베이스 스토리지가 필요한 서비스에 새 기능을 추가하는 상황을 살펴보겠습니다.&nbsp; 증가하는 수요를 수용하기 위해 데이터베이스 크기를 확실히 늘릴 수 있지만 어느 시점에는 한계에 도달했습니다.&nbsp; 이 제한은 데이터베이스 크기에 대한 한도이거나 단일 데이터베이스가 허용되는 시간에 처리할 수 있는 트랜잭션 수일 수 있습니다.&nbsp; 분할이 매우 유용해지는 위치이며, SQL Azure 페더레이션&rsquo;을 사용하면 서비스가 여전히 온라인 상태인 동안 데이터베이스 분할을 실행하고 증가하는 수요에 맞게 데이터베이스를 확장할 수 있다는 사실을 알고 있으면 좋습니다.</p>  <p>최근에 Windows Azure에서 다중 테넌트 솔루션을 보여주는 여러 샘플을 개발했습니다.&nbsp; 이러한 샘플 중 하나에는 SQL Azure 페더레이션을 활용하는 다중 테넌트 샘플 애플리케이션이 포함되어 있으며 <a target="_blank" href="https://shard.codeplex.com/">shard.codplex.com</a> 찾을 수 있습니다. 분할된 데이터베이스 프로젝트를 기반으로 한 예제를 살펴보겠습니다&rsquo;.&nbsp;</p>  <h3>기존 솔루션에 다중 테넌트 추가</h3>  <p>단일 테넌트 데이터베이스 접근 방식을 공유 데이터베이스 디자인으로 이동하는 것은 비용이 많이 드는 경우가 많습니다.&nbsp; 일반적인 방법은 테넌트별 데이터를 포함하는 각 테이블에 테넌트 식별자를 추가한 다음 테넌트를 포함하도록 모든 계층에서 애플리케이션을 재작업하는 것입니다.&nbsp; 또한 단일 데이터베이스의 리소스 제한을 초과하는 크기 조정을 지원하려면 테넌트를 여러 데이터베이스에 분산해야 합니다.&nbsp; 그 대가로 솔루션&rsquo; 운영 비용이 낮아 수익이 증가하거나 소프트웨어 공급업체가 솔루션을 보다 경쟁력 있게 가격을 책정할 수 있습니다.&nbsp; 과거에는 기본적으로 비용을 절감하고 규모를 지원하기 위한 사용자 지정 분할 솔루션으로 끝났습니다.&nbsp; 이러한 사용자 지정 솔루션에는 단일 DB에서 테넌트 수준 격리를 제공하고, 연결 라우팅을 처리하며, 증가하는 수요를 충족하기 위해 데이터베이스 간에 테넌트를 이동하는 복잡한 디자인이 있었습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3718.FullScale2.png" alt="" border="0"></p>  <h3>필터링된 연결</h3>  <p>SQL Azure 페더레이션 필터링된 연결 기능은 기존 솔루션을 공유 데이터베이스 디자인으로 이동하는 데 매우 강력합니다.&nbsp; 필터링된 연결을 사용하여 일반적으로 테넌트 ID를 모든 작업의 일부로 만드는 데 필요한 비즈니스 논리 또는 데이터 액세스 계층에 필요한 변경을 최소화할 수 있습니다.&nbsp; 테넌트 컨텍스트를 사용하여 데이터베이스 연결이 초기화되면 기존 비즈니스 논리 및 데이터 액세스 계층과의 연결을 사용할 수 있습니다.&nbsp; 이 기능은 애플리케이션에 필요한 작업량을 최소화하는 데 사용되었지만 스키마 변경이 여전히 필요하고 데이터 계층의 작은 변경도 필요하며 페더레이션에서 지원되지 않는 기능을 사용하기 때문에 애플리케이션을 변경해야 하는 경우도 있습니다.&nbsp; SQL Azure 페더레이션 지침 및 제한 사항에 대한 자세한 내용은 MSDN에서 확인할 수 있습니다.</p>  <p>동일한 테이블에 여러 테넌트에 대한 데이터를 저장하기 위해 스키마에 [TenantId] 열을 추가하더라도 이를 처리하기 위해 코드 또는 모델을 반드시 변경할 필요는 없습니다&rsquo;.&nbsp; 예를 들어 태스크가 포함된 테이블과 테넌트에 대한 해당 테이블의 작업 목록을 삽입하고 표시하는 애플리케이션의 일부 기능이 있다고 가정해 보겠습니다&rsquo;.&nbsp; 필터링된 연결 <span style="text-decoration: underline;">없이</span> 테이블에 TenantId 열을 추가한 후 다음과 같은 SQL 문을 포함하는 모든 코드</p>  <p>SELECT * FROM [Tasks]</p>  <p>&nbsp;다음과 같이 변경해야 합니다.</p>  <p>SELECT * FROM [Tasks] <b>WHERE TenantId = @TenantId</b></p>  <p>실제로 이와 같은 SQL 문을 포함하는 거의 모든 코드에는 변경이 필요합니다.&nbsp; 필터링된 연결을 사용하면 SELECT * FROM [Tasks]&rdquo;와 같은 &ldquo;문을 사용하는 애플리케이션 코드를 변경할 필요가 없습니다.&nbsp;</p>  <h3>스키마 변경</h3>  <p>스키마에서 지원되지 않는 기능의 사용과 다양한 해결 방법을 식별하기 위한 빠른 검토 후에는 페더레이션된 모든 테이블을 식별하는 것으로 시작합니다.&nbsp; 테넌트별 데이터를 포함하는 모든 테이블에는 데이터를 분할하는 데 사용되는 테이블의 테넌트 ID 열이 필요합니다.&nbsp; 또한 페더레이션 테이블을 참조하는 외래 키 제약 조건이 포함된 테이블도 TenantId를 추가해야 하며 페더레이션 테이블이 됩니다.&nbsp; 예를 들어 페더레이션 테이블을 만들기로 결정한 Orders 테이블이 있다고 상상해 보십시오.&nbsp; 이 테이블에는 OrderId가 있고 OrderDetails 테이블은 Orders 테이블의 OrderId에 대한 외래 키 제약 조건을 포함하는 경우가 많습니다.&nbsp; 또한 OrderDetails에는 TenantId 열이 추가되어야 하며 외래 키 제약 조건에는 TenantId도 포함되어야 합니다.</p>  <p>이러한 각 페더레이션 테이블의 경우 새 레코드를 삽입할 때 비즈니스 논리 또는 데이터 액세스 계층이 작업의 일부로 테넌트 ID를 전달할 필요가 없&rsquo;도록 필터링된 연결 컨텍스트를 설정하는 데 사용되는 값으로 테넌트 ID를 기본값으로 설정합니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/3362.FullScale3.png" alt="" border="0"></p>  <p>테넌트별 데이터를 포함하는 모든 테이블에 [TenantId] 열이 추가됩니다.&nbsp; 이 열은 USE FEDERATION 문에 전달된 값과 필터링된 연결의 연결 상태 일부인 페더레이션 필터 값으로 기본 설정됩니다.&nbsp; 이 기능을 사용하면 문에 [TenantId]를 포함하지 않고도 페더레이션 테이블에 데이터를 삽입할 수 있습니다.&nbsp; 이제 현재 테넌트를 처리하지 않는 데이터 액세스 코드는 새 레코드를 삽입할 때 이 새 열을 지원하도록 변경할 필요가 없습니다.&nbsp; 페더레이션 테이블의 모든 고유 및 클러스터형 인덱스에는 페더레이션된 열이 포함되어야 하므로 기본 키의 이 부분도 만들었습니다.&nbsp; &ldquo;FEDERATED ON&rdquo; 절은 페더레이션 테이블로 만들기 위해 추가되며, 이 절에서는 [TenantId] 테이블 열을 [Tid]의 페더레이션 배포 키와 연결합니다.&nbsp;</p>  <h3>연결 컨텍스트</h3>  <p>스키마가 업데이트되었으므로 이제 애플리케이션에서 필터링된 연결을 가져오는 문제를 해결해야 합니다.&nbsp; 여기서 문제는 연결이 열린 후 및 애플리케이션이 이 연결을 사용하기 전에 특정 페더레이션 문(&ldquo;USE FEDERATION&hellip;&rdquo;)을 호출해야 하는 테넌트 컨텍스트를 사용하여 데이터베이스 연결을 초기화해야 한다는 것입니다.&nbsp; 이 작업은 테넌트 식별자를 사용하고 애플리케이션에서 사용할 열린 연결을 반환하거나 연결이 열릴 때 이 논리를 처리하기 위해 일부 이벤트 처리기가 있는 연결 개체를 구현하여 수행할 수 있습니다.</p>  <h3>모두 함께 가져오기</h3>  <p>&rsquo;이 모든 것을 한데 모아 일반적인 다중 테넌트 솔루션에 대한 간단한 웹 요청에 대한 전체 프로세스를 안내합니다.&nbsp; 이 예제에서는 페더레이션된 작업 테이블에 새 작업을 작성하고 테넌트에 대한 작업 목록을 반환하는 방법을 살펴보겠습니다.</p>  <p><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/2604.FullScale4.png" alt="" border="0"></p>  <p>1)&nbsp;&nbsp;&nbsp; 작업 정보가 포함된 웹 요청을 받고, 데이터의 유효성을 검사하고, 요청에 대한 테넌트 컨텍스트가 설정됩니다.&nbsp; 테넌트 식별자를 확인하는 방법은 여러 가지 방법으로 처리할 수 있는 다른 설명입니다.&nbsp; 테넌트 식별자를 메서드에 전달하여 테넌트 컨텍스트로 초기화된 데이터베이스 연결을 검색합니다.</p>  <ol>  <li><b>USE FEDERATION TenantFederation(Tid=137) WITH RESET, FILTERING=ON</b>&rdquo; 문이 실행된 열린 연결을 &ldquo; 반환할 수 있습니다.</li>  <li>연결 상태가 열리도록 변경된 경우 연결 개체에 이벤트 처리기를 연결하여 이 문을 실행할 수 있습니다.</li>  <li>엔터티 프레임워크를 활용하는 경우 사용할 수 있는 여러 가지 방법이 있습니다. 기존 SQL 공급자 래핑, 연결 개체에 연결 및 이벤트 처리기 또는 연결이 열리고 초기화된 컨텍스트를 반환하는 것과 같습니다.</li>  </ol>  <p>2)&nbsp;&nbsp;&nbsp; USE FEDERATION&rdquo; 문은 &ldquo;테넌트 ID 137에 대한 데이터를 포함하는 올바른 페더레이션 멤버로 연결을 리디렉션합니다.&nbsp; 그런 다음, 데이터베이스에 테넌트&rsquo; 데이터가 하나만 포함되어 있을 때 애플리케이션에서 이 필터링된 연결을 정확히 사용할 수 있습니다.<br> <b>INSERT</b> <b>INTO [Task]([Name], &hellip;) VALUES(&lsquo;My Task&rsquo;, &hellip;)</b></p>  <ol>  <li>TenantId 값을 포함할 필요가 없습니다.</li>  </ol>  <p>3)&nbsp;&nbsp;&nbsp; SELECT &ndash; * FROM 보기와 함께 반환할 <b>작업 검색 [작업]</b></p>  <ol>  <li>TenantId를 사용하여 WHERE 절을 포함할 필요가 없습니다.</li>  </ol>  <p>시스템이 성장하고 더 많은 테넌트를 온보딩함에 따라 이제 데이터베이스를 동적으로 확장할 수 있는 아키텍처가 있습니다. &nbsp;페더레이션을 분할하고 애플리케이션이 여전히 온라인인 동안 다른 데이터베이스에서 솔루션을 확장했습니다.</p>  <h3>사용자 지정 분할 대신 페더레이션 SQL Azure</h3>  <p>일부 고객은 이미 사용자 지정 분할 솔루션을 구현했습니다. 작동하는&rsquo; 경우 SQL Azure 페더레이션을 활용하기 위해 솔루션을 변경하는 것을 귀찮게해서는 안되는&rsquo; 것처럼 보일 수 있습니다. 우리는 여전히 페더레이션을 통해 얻은 혜택이 있기 때문에 SQL Azure 페더레이션에 대해 논의합니다.</p>  <ul>  <li><b>테넌트 마이그레이션. </b> &rsquo;경우에 따라 온보딩 프로세스 중에 어떤 테넌트가 작거나 중간 규모가 될지 예측하기가 어렵기 때문에 이러한 테넌트에서 변화하는 리소스 요구 사항을 처리하기가 어렵습니다. 테넌트를 자체 데이터베이스로 이동해야 하거나 시스템에 대한 증가하는 수요를 처리하기 위해 기존 데이터베이스를 분할해야 할 수 있습니다. SQL Azure 페더레이션은 온라인 데이터베이스 분할을 지원합니다.</li>  <li><b>테넌트 독립적 쿼리. </b> 사용자 지정 분할된 데이터베이스를 사용하면 데이터 액세스 계층에 해당 쿼리에 테넌트 ID가 포함됩니다. SQL Azure 페더레이션을 사용하면 <i>연결 필터</i>가 테넌트 수준 필터링을 제공하므로 테넌트 ID를 포함하지 않고도 쿼리를 작성할 수 있습니다.</li>  <li><b>데이터베이스 조회.</b> 일반적으로 다중 테넌트 애플리케이션에서 마스터 데이터베이스는 모든 테넌트 데이터베이스에 대한 조회 인덱스를 제공합니다(애플리케이션 데이터베이스 토폴로지에 따라 테넌트를 공유 데이터베이스 또는 개별 데이터베이스에&rsquo; 매핑). SQL Azure 페더레이션을 사용하면 테넌트 수준 연결 문자열이 해당 데이터베이스에 자동으로 연결되며, 연결 문자열을 사용하여 마스터 조회 데이터베이스를 관리할 필요가 없습니다.</li>  <li><b>연결 풀 조각화.</b>&nbsp; 사용자 지정 분할 구현은 여러 데이터베이스를 활용하므로 해당 데이터베이스에 대한 여러 연결 및 연결 문자열을 사용합니다.&nbsp; 이러한 각 연결은 애플리케이션 서버에서 연결 풀을 생성하며, 애플리케이션의 풀 조각화와 관련된 문제가 발생하는 경우가 많습니다.&nbsp; 솔루션을 지원하는 데 필요한 데이터베이스 수에 따라 성능 문제가 발생할 수 있으며 때로는 복잡한 재설계 또는 연결 풀링을 사용하지 않도록 설정해야 하는 유일한 옵션이 있습니다.&nbsp; 페더레이션에 대한 연결이 훨씬 다르게 처리되어 단일 연결 풀이 발생하므로 SQL Azure 페더레이션의 경우는 그렇지 않습니다.</li>  </ul>  <h3>요약</h3>  <p>SQL Azure 페더레이션은 Windows Azure에서 관계형 데이터베이스를 동적으로 확장해야 하는 모든 솔루션으로 고려하고 평가해야 합니다.&nbsp; 새 솔루션 또는 기존 다중 테넌트 솔루션에서 확실히 고려해야 합니다.&nbsp; SQL Azure 페더레이션에 대한 자세한 내용은 다음 리소스 중 일부부터 시작하는 것이 좋습니다.</p>  <ul>  <li>SQL Azure의 페더레이션(SQL Azure 데이터베이스)</li>  <li><a target="_blank" href="https://blogs.msdn.com/b/cbiyikoglu/">Cihan Biyikoglus&rsquo; 블로그<br></a></li>  <li><a target="_blank" href="https://social.technet.microsoft.com/wiki/contents/articles/2281.federations-building-scalable-elastic-and-multi-tenant-database-solutions-with-sql-azure-en-us.aspx">페더레이션: SQL Azure 사용하여 확장성 있는, 탄력적 및 다중 테넌트 데이터베이스 솔루션 빌드</a></li>  <li><a target="_blank" href="https://shard.codeplex.com">클라우드 닌자 페더레이션 샘플</a></li>  </ul>'
