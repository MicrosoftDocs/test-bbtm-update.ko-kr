### YamlMime:Yaml
ms.openlocfilehash: 5ef577c50360de19dfbbe6b47853ef0e459e6c57
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139902207"
Slug: book-excerpt-to-the-cloud-cloud-powering-an-enterprise
Title: '책 발췌: "클라우드에: 클라우드 전원을 Enterprise"'
Summary: 안녕하세요, Im&rsquo; Pankaj Arora, Microsoft IT 글로벌 전략 이니셔티브 팀의 선임 관리자.  Microsoft CEO 스티브 발머가 클라우드에서&rdquo; Were&rsquo;를 공개적으로 선언했을 &ldquo;때...
Content: '<p>안녕하세요, Im&rsquo; Pankaj Arora, Microsoft IT 글로벌 전략 이니셔티브 팀의 선임 관리자.</p>  <p>2010년 3월, Microsoft CEO 스티브 발머(Steve Ballmer)가 클라우드 컴퓨팅에서 Were&rsquo;를 공개적으로 선언&ldquo;했을 때, 그는 단지 Microsofts&rsquo; 제품을 언급한 것이 아니었&rsquo;습니다.&rdquo; 또한 IT 조직에 클라우드 컴퓨팅으로 전환할 권한을 부여했습니다. 그 선언 이후, 내 동료와 나는 글로벌 기업에서 클라우드 컴퓨팅을 채택하는 데 걸리는 것에 대해 많은 것을 배웠습니다. 이제 모든 공통 모델&mdash;SaaS, PaaS 및 IaaSand&mdash; were&rsquo;의 <a href="https://technet.microsoft.com/en-us/library/gg521165.aspx" target="_blank">클라우드 배포</a>가 Data-as-a-Service를 사용하기 시작했습니다.&nbsp;</p>  <p>2012&mdash;년에 훨씬 더 큰 클라우드 채택에 대한 <a href="https://www.cio.com/article/695777/Gartner_Predictions_for_2012_More_Cloud_Consumerization_Loss_of_IT_Control" target="_blank">업계 예측</a>에 따라&mdash; 수많은 배포 경험이 있는 이 커뮤니티는 Ive가 두 명의 동료와 공동 저술한 책&rsquo;인 <i>To the Cloud: Cloud Powering a Enterprise</i> 대해 알고 싶습니다. 요약하면 이 책에서는 엔터프라이즈 클라우드 채택의 <i>이유, 내용 및 방법을</i> 설명합니다. 클라우드&rsquo; 컴퓨팅을 채택하는 우리 고유의 경험과 모범 사례를 기반으로 하며 업계 및 고객 경험을 활용합니다.&nbsp;</p>  <p href="" target="_blank">다음은 <a href="https://www.amazon.com/Cloud-Powering-Enterprise/dp/007179221X/" target="_blank">아마존</a>, <a target="_blank" href="https://www.barnesandnoble.com/w/to-the-cloud-pankaj-arora/1104664478?ean=9780071792219">반스 &amp; 노블</a>, <a target="_blank" href="https://www.mhprofessional.com/product.php?isbn=007179221X">맥그로 힐</a><a href="" target="_blank"></a>을 통해 인쇄 및 전자 책에서 사용할 수있는 책의 사전 제작 버전의 4 장에서 발췌한 것입니다. 여기에서 책 웹 사이트에서 더 많은 것을 볼 수 있습니다.</p>  <p>자유롭게 질문할 수 있으며, 이러한 발췌문(및 책)이 클라우드 컴퓨팅 전략 및 배포에 도움이 되기를 바랍니다.</p>  <p>판카즈 주</p>  <h3 class="Sub-Headings">아키텍처 원칙</h3>  <p class="FirstParaNoIndent">애플리케이션 및&nbsp; 데이터를 회사 데이터 센터에서 이동해도 하드웨어 오류, 애플리케이션에 대한 예기치 않은 요청 또는 프로덕션에서 발생하는 예기치 않은 문제의 위험이 제거되지는 않습니다. 그러나 클라우드에서 실행되는 서비스는 확장성과 내결함성이 뛰어나고 온-프레미스 솔루션보다 성능이 우수해야 합니다.</p>  <p class="FirstParaNoIndent">클라우드 공급자가 사용하는 가상화 및 클라우드 패브릭 기술을 사용하면 이론적으로 무제한 용량으로 확장할 수 있습니다. 즉, 물리적 용량이 아닌 애플리케이션 아키텍처 및 자동화 수준이 확장성을 제한합니다. 이 섹션에서는 애플리케이션 엔지니어 및 운영 담당자가 클라우드에 대해 확장성이 뛰어나고 안정적인 애플리케이션을 제대로 설계하기 위해 이해해야 하는 몇 가지 디자인 원칙을 소개합니다.</p>  <h3 class="Sub-Headings">복원력</h3>  <p class="FirstParaNoIndent">제대로 디자인된 애플리케이션은 단일 배율 단위에 문제가 발생하므로 중단되지 않습니다. 반면, 잘못 디자인된 애플리케이션은 단일 구성 요소가 실패할 때 성능 문제, 데이터 손실 또는 중단이 발생할 수 있습니다. 클라우드 중심 소프트웨어 엔지니어가 특정 수준의 비관론을 육성하는 이유입니다. 최악의 시나리오를 모두 고려하면 오류가 발생할 때 내결함성과 복원력이 뛰어난 애플리케이션을 디자인할 수 있습니다.</p>  <p class="FirstParaNoIndent">프레젠테이션 계층과 기능 논리가 하나의 애플리케이션 구성 요소에 긴밀하게 통합된 모놀리식 소프트웨어 디자인은 효과적으로 확장되거나 오류를 정상적으로 처리하지 못할 수 있습니다. 클라우드용 애플리케이션을 통합하려면&nbsp; 개발자가 긴밀한 종속성을 제거하고 비즈니스 논리 및 작업을 느슨하게 결합된 모듈식 구성 요소로 분리하여 독립적으로 작동할 수 있도록 해야 합니다. 이상적으로 애플리케이션 기능은 다른 애플리케이션 구성 요소의 상태에 관계없이 작동하는 자치 역할로 구성됩니다. 엔터프라이즈 복잡성을 최소화하기 위해 개발자는 가능한 경우 재사용 가능한 서비스도 활용해야 합니다.</p>  <p class="FirstParaNoIndent">앞서 Microsoft 온라인 경매 도구에 대해 이야기했습니다. 이러한 애플리케이션을 디자인하는 한 가지 방법은 각 서비스가 서로 다른 수요 패턴을 가지며 다른 서비스와 상대적으로 비동기적이므로 세 가지 구성 요소로 분할하는 것입니다. 즉, 사용자에게 정보를 제공하는 UI 계층, 이미지 리사이저 및 입찰 규칙을 적용하고 적절한 데이터베이스 업데이트를 수행하는 비즈니스 논리 구성 요소입니다. 경매가 시작될 때 사람들이 카탈로그에 추가하는 항목의 사진을 업로드할 때 많은 이미지 크기 조정이 발생합니다. 경매가 끝날 무렵, 사람들이 서로를 능가하려고 노력함에 따라 입찰 엔진의 수요가 증가하고 있습니다. 각 구성 요소는 시스템 부하에 따라 필요에 따라 배율 단위를 추가합니다. 예를 들어 이미지 리사이저 구성 요소가 실패하면 도구의 전체 기능이 손실되지 않습니다.</p>  <p class="FirstParaNoIndent"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6266.image1-copy.png" alt="" border="0"></p>  <p class="BeforeListBody">비관적 측면에서도 클라우드 모델에 기본 제공되는 중복성 및 자동화는 일반적으로 클라우드 서비스를 보다 안정적으로 만듭니다.&nbsp; 종종 클라우드 공급자에는 네트워크 인프라, 하드웨어 및 서로의 전원을 분할하는 여러 &ldquo;가용성 영역&rdquo; 이 있습니다. 이러한 영역에서 단일 애플리케이션의 여러 배율 단위를 작동하면 위험을 더욱 줄일 수 있습니다. 일부 공급자는 더 높은 SLA를 보장하기 전에 이를 요구합니다. 따라서 실패를 고려할 때 실제 질문은 애플리케이션 인스턴스가 갑자기 다시 부팅되거나 중단되거나 이동되면 어떻게 되나요?</p>  <ul>  <li>IT에서 오류가 발생했음을 어떻게 알 수 있나요?</li>  <li>어떤 애플리케이션 기능(있는 경우)을 계속 사용할 수 있나요?</li>  <li>사용자의 데이터 및 기능을 복구하는 데 필요한 단계는 무엇인가요?</li>  </ul>  <p class="MyBodyText">불필요한 종속성을 제거하면 애플리케이션의 안정성이 높아집니다. 애플리케이션이 한 가지 사용 시나리오에 의존하는 서비스가 중단되면 다른 애플리케이션 시나리오를 계속 사용할 수 있어야 합니다.</p>  <p class="MyBodyText">백 엔드의 경우&nbsp; 일부 클라우드 공급자가 요청을 제한하거나 SQL PaaS 및 기타 스토리지 플랫폼에서 장기 실행 쿼리를 종료할 수 있으므로 엔지니어는 재시도 논리를 포함해야 합니다. 예를 들어 다른 원본에서 데이터를 요청하는 구성 요소에는 예외를 throw하기 전에 지정된 기간 내에 지정된 횟수만큼 데이터를 요청하는 논리가 포함될 수 있습니다.</p>  <p class="MyBodyText">클라우드 인스턴스를 가끔 다시 부팅하는 경우 다시 부팅하는 다른 배율 단위 또는 원래 인스턴스가 트랜잭션을 복구할 수 있도록 애플리케이션 디자인에 영구 캐시가 포함되어야 합니다. 영구 상태를 사용하려면 클라우드 기반 애플리케이션에 대한 상태 비저장&mdash; 설계 원칙을 자세히 살펴봐야 합니다.</p>  <h3 class="Sub-Headings">상태 비저장</h3>  <p class="FirstParaNoIndent">상태 비정상성을 위한 디자인은 클라우드의 확장성 및 내결함성을 위해 매우 중요합니다. 운영 체제 업데이트와 마찬가지로 가동 중단이 예기치 않거나 계획되었는지 여부와 관계없이 한 배율 단위가 중단되면 다른 규모 단위가 작업을 선택합니다. 애플리케이션 사용자는 어떤 일이 발생했는지 알 수 없습니다. 확장 목적이 아닌 경우 중복성 및 가용성을 위해 각 중요한 클라우드 서비스에 대해 둘 이상의 배율 단위를 배포하는 것이 중요합니다.</p>  <p class="MyBodyText">클라우드 공급자는 일반적으로 애플리케이션이 상태 비 상태여야 합니다. 단일 세션 동안 애플리케이션 사용자는 상태 비저장 부하 분산&rdquo; 또는 &ldquo;세션 선호도 부족으로 독립적으로 &ldquo;작동하는 하나 이상의 배율 단위 인스턴스와 상호 작용할 수 있습니다.&rdquo; 사용자가 해당 특정 배율 단위와 독점적으로 상호 작용한다는 보장은 없으므로 개발자는 배율 단위의 작업 메모리에 애플리케이션 또는 세션 상태를 보유해서는 안 됩니다. 따라서 상태 비국적 디자인이 없으면 많은 애플리케이션이 클라우드에서 제대로 스케일 아웃할 수 없습니다. 대부분의 클라우드 공급자는 이 문제를 해결하기 위해 영구 스토리지를 제공하므로 애플리케이션이 확장 단위에서 검색할 수 있는 방식으로 세션 상태를 저장할 수 있습니다.</p>  <h3 class="Sub-Headings">병렬 처리</h3>  <p class="FirstParaNoIndent">&nbsp;병렬화 및 다중 스레드 애플리케이션 디자인을 사용하여 성능을 향상시키고 핵심 클라우드 디자인 원칙입니다. 부하 분산 및 클라우드 플랫폼에 내재된 기타 서비스는 상대적으로 쉽게 부하를 분산하는 데 도움이 될 수 있습니다. 클라우드에서 저렴한 비용의 신속한 프로비전을 통해 크기 조정 단위는 몇 가지 API 호출 내에서 병렬 처리를 위해 주문형으로 사용할 수 있으며, 마찬가지로 쉽게 서비스 해제됩니다.</p>  <p class="MyBodyText">대규모 병렬 처리는 실시간 엔터프라이즈 데이터 분석과 같은 고성능 컴퓨팅 시나리오에도 사용할 수 있습니다. 많은 클라우드 공급자는 병렬 처리를 위해 대규모 작업을 분할할 수 있는 프레임워크를 직접 또는 간접적으로 지원합니다. 예를 들어 Microsoft는 워싱턴 대학교와 협력하여 과학 연구를 수행하기 위해 Azure를 Windows 기능을 입증했습니다. 그 결과 1주일 이내에 2,000개 서버에 해당하는 250만 포인트의 계산이 수행되었으며, 그렇지 않으면 몇 달이 걸렸을 수 있는 컴퓨팅 작업입니다.</p>  <h3 class="Sub-Headings">대기 시간</h3>  <p class="FirstParaNoIndent">Softwareengineers&nbsp;는 다음과 같은 일반적인 디자인 원칙을 적용하여 네트워크 대기 시간이 가용성 및 성능을 방해할 가능성을 줄일 수 있습니다.</p>  <ul>  <li>특히 크로스-프레미스 시스템의 경우처럼 더 높은 대기 시간 시스템에서 검색된 데이터에 캐싱을 사용합니다.</li>  <li>특히 크로스-프레미스 통합이 관련된 경우 구성 요소 간의 대화 및/또는 페이로드를 줄입니다.</li>  <li>지역 배포&nbsp; 및 콘텐츠를 전역적으로 복제합니다. 앞에서 설명한 것처럼 Windows Azure에서 콘텐츠 배달 네트워크를 사용하도록 설정하면 최종 사용자가 가장 가까운 지리적 위치에서 BLOB 스토리지 콘텐츠를 받을 수 있습니다.</li>  </ul>  <h3 class="Sub-Headings">자동화된 크기 조정</h3>  <p class="FirstParaNoIndent">자동 크기 조정 기능을 지원하는 클라우드 제품의 경우 엔지니어는 기존 모니터링 API를 폴링하고 서비스 관리 API를 사용하여 애플리케이션에 자체 크기 조정 기능을 빌드할 수 있습니다. 예를 들어 트래픽이 임의로 급증하거나 특정 CPU 사용량 임계값에 도달할 때 애플리케이션 인스턴스를 자동으로 추가하는 사용률 기반 논리를 고려해 보세요. 동일한 루틴은 메시지를 수신 대기하여 수요가 더 일반적인 수준으로 떨어지면 인스턴스를 종료하도록 지시할 수 있습니다.</p>  <p class="MyBodyText">일부 논리는 재무 기반일 수 있습니다. 예를 들어 개발자는 비용 제어 논리를 추가하여 비임계 애플리케이션이 지정된 조건에서 자동 크기 조정되지 않도록 방지하거나 사용량이 급증하는 경우 경고를 트리거할 수 있습니다.</p>  <p class="MyBodyText"><img src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/0363.image2-copy.png" alt="" border="0"></p>  <p class="MyBodyText">데이터 크기 조정은 애플리케이션 크기 조정만큼 중요하며, 다시 한 번 적절한 디자인의 문제입니다. 클라우드에서 사용할 애플리케이션&rsquo; 데이터 계층의 아키텍처를&nbsp; 다시 생각해 보지만 잠재적으로 번거로울 수 있지만 성능 및 가용성이 향상될 수도 있습니다. 예를 들어 기존 데이터베이스에 데이터를 포함할 수 있을 만큼 큰 솔루션을 제공하는 클라우드 데이터 스토리지 서비스가 없는 경우 데이터 세트를 파티션으로 분할하고 여러 인스턴스에 저장하는 것이 좋습니다. 분할&rdquo;이라고 하는 &ldquo;이 사례는 많은 클라우드 플랫폼의 표준이 되었으며 SQL Azure 비롯한 여러 플랫폼에 기본 제공되었습니다. 처음에는 필요하지 않더라도 데이터 요구 사항이 증가함에 따라 시간이 지남에 따라 그렇게 될 수 있습니다. &nbsp;</p>  <div><hr align="left" size="1" width="33%">  <div>  <p>[1] &ldquo;과학자들은 단백질 신비를 전개, Windows Azure와 질병을 싸우고.&rdquo; Microsoft.</p>  </div>  </div>'
