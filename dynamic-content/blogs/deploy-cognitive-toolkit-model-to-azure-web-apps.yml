### YamlMime:Yaml
ms.openlocfilehash: ea8c6a0036b6ac8ea2a90b06e6c7bfc8e2e02e10
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906852"
Slug: deploy-cognitive-toolkit-model-to-azure-web-apps
Title: Azure Web Apps에 Cognitive Toolkit 모델 배포
Summary: 'Azure는 웹앱, Linux(Docker) 웹앱 및 Azure Container Services(Docker)Windows 딥 러닝 모델(예: CNTK)을 배포하는 여러 가지 방법을 제공합니다. 두 Docker 메서드는 모두 더 많은 것입니다...'
Content: >-
  <p>Azure는 Windows Web App, Linux Web App 및 <a href="https://gallery.cortanaintelligence.com/Tutorial/Deploy-CNTK-model-to-ACS">Azure Container Services</a>를 포함하여 딥 러닝 모델을 배포하는 여러 가지 방법을 제공합니다. Linux 환경/컨테이너 경험이 적은 사람들을 위해 Windows Web Apps는 친숙한 영역을 제공합니다. 이 게시물에서는 Azure Web Apps에 ResNet-18 모델을 배포한 다음 샘플 HTML 인터페이스 및 Python을 통해 테스트 사진을 제출합니다.</p>


  <h2>데모 결과</h2>


  <h3>Python</h3>


  <p><img alt="Demo" height="326" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/python_result.JPG" width="375"></p>


  <p>위의 스크린샷은 이 <a href="https://github.com/ilkarman/Azure-WebApp-w-CNTK/blob/master/readme_support/REST.ipynb">Notebook</a>에서 가져온 것입니다. 일부 속도 테스트를 실행하려는 경우 <a href="https://github.com/ilkarman/Azure-WebApp-w-CNTK/blob/master/readme_support/REST_Speed_Test.ipynb">GitHub 이 Notebook</a>은 이미지를 대량으로 분류하는 데 걸리는 시간을 파악하기 위해 생성된 API에 asyncrochonous 요청을 제출하는 방법을 보여 줍니다. 이 예제에서는 <strong>이미지당 0.86초를</strong> 가져옵니다.</p>


  <h2>데모 복제</h2>


  <p>1.<a href="https://github.com/ilkarman/Azure-WebApp-w-CNTK">리포지토리</a>의 콘텐츠를 다운로드하고 폴더에서 명령 프롬프트를 엽니다.</p>


  <p>2. 다음 명령을 실행하여 git 및 azure-cli가 설치되어 있는지 확인합니다.</p>


  <blockquote>

  <pre>

  <code>az --version  # time-of-writing: 2.0.1

  pip install azure-cli  # otherwise install azure-cli

  git --version # time of writing: 2.9.2.windows.1</code></pre>

  </blockquote>


  <p>3. 로컬 git 배포에 대한 사용자 이름 및 암호를 설정합니다. 이 작업은 한 번만 수행하면 됩니다. 예를 들면 다음과 같습니다.</p>


  <blockquote>

  <pre>

  <code>set uname=&lt;username_for_local_git_deployment&gt;

  set pass=&lt;password_for_local_git_deployment&gt;

  # Create a user-name and password for git deployment of all your apps

  az appservice web deployment user set --user-name %uname% --password %pass%</code></pre>

  </blockquote>


  <p>4. 아래 명령을 실행하여 웹앱을 만듭니다.</p>


  <blockquote>

  <pre>

  <code># Name for your web-app

  set appn=&lt;app_name&gt;

  # Name for resource-group containing web-app

  set rgname=&lt;name_for_resource_group_that_contains_app&gt;

  # Login to azure

  az login

  # Create a resource-group

  az group create --location westeurope --name %rgname%

  # Create a paid &#39;S2&#39; plan to support your app

  # The standard paid plans are: S1, S2, S3

  az appservice plan create --name %appn% --resource-group %rgname% --sku S2

  # Create the web-app

  az appservice web create --name %appn% --resource-group %rgname% --plan %appn%

  # Configure for local git deployment (SAVE URL)

  az appservice web source-control config-local-git --name %appn% --resource-group %rgname% --query url --output tsv

  # Initialise your git repo

  git init

  # Add the azure endpoint

  git remote add azure &lt;PASTE_URL_FROM_ABOVE&gt;

  # e.g. git remote add azure https://ilia2ukdemo@wincntkdemo.scm.azurewebsites.net/wincntkdemo.git

  </code></pre>

  </blockquote>


  <p>5. 이제 Python을 설치합니다. Azure Portal에서 웹앱으로 이동하고 확장&quot; 블레이드까지 &quot;아래로 스크롤한 다음 선택을 클릭합니다.</p>


  <p><a href="https://github.com/ilkarman/Azure-WebApp-w-CNTK/blob/master/readme_support/extensions_1.JPG"><img alt="Demo" height="194" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/extensions_1.JPG" width="251"></a></p>


  <p>6.그런 다음 추가&quot;&quot;를 &quot;클릭하고 Python 3.5.3 x64&quot;를 찾아 추가합니다. <em> </em><em>이 확장을 사용해야 합니다.</em></p>


  <p><a href="https://github.com/ilkarman/Azure-WebApp-w-CNTK/blob/master/readme_support/requirement.JPG"><img alt="Demo" height="114" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/requirement.JPG" width="401"></a></p>


  <p>성공적으로 설치되었다는 알림이 표시되는지 확인합니다.</p>


  <p><a href="https://github.com/ilkarman/Azure-WebApp-w-CNTK/blob/master/readme_support/extensions_2.JPG"><img alt="Demo" height="141" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/extensions_2.JPG" width="392"></a></p>


  <p>7. <em>(선택 사항)</em> &quot;애플리케이션 설정&quot; 블레이드&quot;에서 항상 켜기를 설정&quot;&quot;하여 &quot;모델이 로드된 상태로 유지되므로 응답 시간을 줄입니다.</p>


  <p>8. 다음을 실행하여 이 데모를 배포합니다.</p>


  <blockquote>

  <pre>

  <code>git add -A

  git commit -m &quot;init&quot;

  git push azure master

  </code></pre>

  </blockquote>


  <p>모든 항목이 성공적으로 완료되면 스크립트 출력에 다음 줄이 표시됩니다.</p>


  <blockquote>

  <pre>

  <code>remote: Successfully installed cntk-2.0rc1

  remote: ..

  remote: 2.0rc1

  </code></pre>

  </blockquote>


  <p>이제 웹앱 주소로 이동하여 CNN: ResNet-18에 따라 분류되는 사진을 업로드할 수 있습니다.</p>


  <h2>고급 수정(직접 실행)</h2>


  <ol>
   <li>
   <p>model.py 파일에 다른 모듈(예: pandas 또는 opencv)에 대한 참조를 포함할 수 있지만 python에서 모듈을 설치하도록 &quot;requirements.txt&quot; 파일에 모듈을 추가해야 합니다. 모듈을 빌드해야 하는 경우 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">미리 빌드된 휠 파일을</a> wheels 폴더에 다운로드할 수 있습니다. &#39;디렉터리의 루트에 있는requirements.txt&quot; 파일에 휠 경로를 &quot; 추가하는 것을 잊지 마세요. <strong>참고: <a href="https://azurewebappcntk.blob.core.windows.net/wheels/numpy-1.12.1+mkl-cp35-cp35m-win_amd64.whl">Numpy</a>, <a href="https://azurewebappcntk.blob.core.windows.net/wheels/scipy-0.19.0-cp35-cp35m-win_amd64.whl">Scipy</a> 및 <a href="https://azurewebappcntk.blob.core.windows.net/cntkrc/cntk-2.0rc1-cp35-cp35m-win_amd64.whl">CNTK</a> 휠은 deploy.cmd&quot; 스크립트 내에 &quot;자동으로 설치됩니다. 이를 변경하려면 deploy.cmd 파일을 편집하여 필요한 numpy 휠을 가리킬 수 있습니다.</strong></p>
   </li>
   <li>
   <p><strong>deploy.cmd 편집 - </strong> 설치 스크립트는 <a href="https://azurewebappcntk.blob.core.windows.net/cntkrc/cntk.zip">CNTK v2.0 rc1</a>에 대한 이진 파일을 자동으로 추가합니다. 그러나 <strong>Python 3.6 또는 CNTK v2.0 rc1+를</strong> 사용하려면 deploy.cmd&quot; 스크립트에서 아래를 &quot;변경합니다.</p>

   <blockquote>
   <pre>
  <code>:: VARIABLES

  echo &quot;ATTENTION&quot;

  echo &quot;USER MUST CHECK/SET THESE VARIABLES:&quot;

  SET PYTHON_EXE=%SYSTEMDRIVE%\home\python353x64\python.exe

  SET NUMPY_WHEEL=https://azurewebappcntk.blob.core.windows.net/wheels/numpy-1.12.1+mkl-cp35-cp35m-win_amd64.whl

  SET SCIPY_WHEEL=https://azurewebappcntk.blob.core.windows.net/wheels/scipy-0.19.0-cp35-cp35m-win_amd64.whl

  SET CNTK_WHEEL=https://azurewebappcntk.blob.core.windows.net/cntkrc/cntk-2.0rc1-cp35-cp35m-win_amd64.whl

  SET CNTK_BIN=https://azurewebappcntk.blob.core.windows.net/cntkrc/cntk.zip

  </code></pre>
   </blockquote>

   <p>&#39;cntk.zip&#39; 파일을 만들려면 cntk/cntk 폴더(즉, &#39;CNTK.exe&#39; 및 DLL이 포함된 폴더, 휠이 포함된 python 하위 폴더를 제거할 수 있음)를 추출한 다음 위의 %CTNK_BIN% 환경 변수를 사용하여 참조하면 됩니다.</p>
   </li>
   <li>
   <p>원하는 경우 다른 Python 확장을 설치할 수도 있지만 제대로 참조하고 Numpy, Scipy 및 CNTK 휠을 가져와야 합니다. 예를 들어 &quot;Python 3.5.3 x64&quot; 확장은 디렉터리 &quot;D:\home\python353x64&quot;에 설치되므로 스크립트는 다음을 참조합니다. <code>SET PYTHON_EXE=%SYSTEMDRIVE%\home\python353x64\python.exe</code></p>
   </li>
   <li>
   <p>마지막으로, HTMl 템플릿과 함께 WebApp 폴더&quot;에서 원하는 대로 model.py&quot; 스크립트를 변경&quot;하고 템플릿 &quot;&quot; 에서 &quot;index.html&quot; 변경 내용을 리포지토리에 푸시&quot;합니다.</p>

   <blockquote>
   <pre>
  <code>git add -A

  git commit -m &quot;modified some script&quot;

  git push azure master</code></pre>
   </blockquote>
   </li>
  </ol>
