### YamlMime:Yaml
ms.openlocfilehash: e26b55b9972b4998b9dedb8c0de35c7e27bfb390
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139897584"
Slug: microsoft-showcases-the-azure-cloud-switch-acs
Title: Microsoft에서 ACS(Azure Cloud Switch)를 소개합니다.
Summary: ACS(Azure Cloud Switch)는 Linux에서 빌드된 데이터 센터 네트워킹을 위한 플랫폼 간 모듈식 운영 체제입니다.
Content: >-
  <p>클라우드와 엔터프라이즈는 모두 서비스에 전력을 공급하기 위해 고속 고가용성 네트워크에 의존합니다. 따라서 네트워크 운영자는 위험과 복잡성을 증가시키는 기능 변경을 유지하면서 필요한 네트워크 기능을 빠르게 추가하여 자신의 운명을 제어할 수 있어야 합니다.</p>


  <p>Microsoft에서는 혁신, 속도 증가 및 비용 절감을 주도하는 많은 공급업체 간의 건전한 경쟁으로 시장에서 사용할 수 있는 훌륭한 스위치 하드웨어 플랫폼이 많이 있다고 믿습니다. 그러나 클라우드 및 엔터프라이즈 네트워크에서 어려운 점은 각 스위치 유형에서 실행되는 근본적으로 다른 소프트웨어를 클라우드 차원의 네트워크 관리 플랫폼에 통합하는 것입니다. 이상적으로, 우리는 우리가 구현 한 기능의 모든 이점과 우리가 최신 스위치 하드웨어 혁신의 조류를 타고에도, 우리와 함께 유지하기 위해 고정 한 버그를 싶습니다.</p>


  <p>ACS(Azure Cloud Switch)는 스위치와 같은 네트워크 디바이스를 실행하기 위한 자체 소프트웨어를 빌드하기 위한 것입니다. Linux 기반의 데이터 센터 네트워킹을 위한 플랫폼 간 모듈식 운영 체제입니다. ACS를 사용하면 소프트웨어 버그를 훨씬 더 빠르게 디버그, 수정 및 테스트할 수 있습니다. 또한 소프트웨어를 유연하게 축소하고 데이터 센터 및 네트워킹 요구 사항에 필요한 기능을 개발할 수 있습니다.</p>


  <p>ACS를 사용하면 여러 스위치 공급업체의 하드웨어 간에 동일한 소프트웨어 스택을 공유할 수 있습니다. 이 작업은 <a href="https://www.opencompute.org/">OCP(Open Compute Project)</a>의 ASIC를 프로그래밍하기 위한 첫 번째 오픈 표준 C API인 SAI(<a href="https://github.com/opencomputeproject/OCP-Networking-Project-Community-Contributions">Switch Abstraction Interface)</a> 사양을 통해 수행됩니다. Microsoft는 SAI 노력의 창립 멤버였으며 ACS를 성공시키기 위한 중요한 요소로 SAI를 볼 때 프로젝트의 주요 기여자로 남아 있습니다.</p>


  <p>ACS는 수년간의 품질 스위치 소프트웨어 스택 경험을 존중하고 학습하지만, 기존 스위치 소프트웨어 스택에서 여러 측면에서 벗어나 방금 강조한 목표 중 일부를 달성합니다.</p>


  <p>기존 스위치 소프트웨어는 여러 시나리오 및 기능 요청이 있는 여러 고객을 위해 빌드됩니다. ACS는 Microsoft 우선 순위에 따라 기능 개발에 중점을 두기 때문에 <strong>Lean Stack</strong>이 있습니다. 씬 소프트웨어 스택은 Datacenter Networks에 필요한 소프트웨어에 중점을 두고 네트워크 디바이스 소프트웨어 버그를 현재 실행 속도보다 빠르게 수정, 테스트 및 수정하기 위해 노력합니다. ACS는 하나의 모놀리식 이미지가 아닌 <strong>모듈식 스택</strong> 이기도 합니다. 린과 모듈식 스택의 장점은 많습니다. 숨겨진 높은 우선 순위 버그에 대한 확률이 낮아 유효성 검사를 더 쉽게 수행하고 새로운 기능 요청 시간 지연을 줄입니다.</p>


  <p>ACS는 Microsofts&rsquo; 모니터링 및 진단 시스템과 통합하여 <strong>더 쉬운 구성 및 관리를</strong> 위해 노력합니다. 명령줄 인터페이스의 기존 엔터프라이즈 대화형 모델에서 벗어나 서버가 매주 소프트웨어 롤아웃 및 롤백을 사용하는 것처럼 스위치를 관리할 수 있으므로 완성도 높은 구성 및 배포 모델을 보장할 수 있습니다.</p>


  <p>ACS는 <strong>오픈 네트워킹</strong>의 기능을 믿습니다. ACS와 개방형 표준화된 <strong>SAI 인터페이스</strong> 를 함께 사용하면 새 하드웨어를 더 빠르게 활용할 수 있으며 ASIC 혁신의 흐름을 타면서 동시에 여러 플랫폼에서 작동할 수 있습니다. <strong>Linux</strong>에서 실행되는 ACS는 활기찬 에코시스템을 활용할 수 있습니다. ACS를 사용하면 <strong>오픈 소스</strong>, Microsoft 및 <strong>타사</strong> 애플리케이션을 사용하고 확장할 수 있습니다. ACS 스택의 위쪽에서 아래쪽까지의 주요 기능 블록은 아래 그림에 나와 있습니다.<br>

  <br>

  <a href="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/1f9cd897-e17c-4582-b70a-573ae3d1271e.jpg"><img alt="ACS Stack" border="0" height="480" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8c668b77-b4c0-451b-bed1-8e07c369dcf1.jpg" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" title="ACS 스택" width="564"></a></p>


  <p><strong>애플리케이션</strong>: 여기에는 Quagga와 같은 오픈 소스 애플리케이션, Autopilot과 같은 전체 구성 관리 시스템 또는 SWAN과 같은 기능과 관련시킬 수 있는 Microsoft 특정 애플리케이션 및 타사 애플리케이션도 포함됩니다.</p>


  <p><strong>SSS(상태 서비스 전환):</strong> SSS는 전역 네트워크 상태의 하위 집합입니다. 그것은 그것의 목표 상태를 향해 스위치를 구동 하는 데 도움이. Redis와 같은 오픈 소스 키-값 쌍 저장소를 사용하여 모든 스위치 상태 요구 사항을 관리합니다. 또한 SAI 개체 관리 하위 계층인 데이터베이스 계층을 사용하면 여러 애플리케이션 간의 개체 공유 및 종속성에 도움이 됩니다. 데이터베이스는 모듈식이며 애플리케이션에 상태 보기를 제공합니다.</p>


  <p><strong>SAI: SAI</strong> 이전에는 프로토콜 스택 소프트웨어의 엄격한 결합과 함께 하드웨어의 근본적인 복잡성으로 인해 네트워킹 요구 사항에 가장 적합한 하드웨어와 소프트웨어 조합을 선택할 수 있는 자유가 거부되었습니다. SAI를 사용하면 소프트웨어가 변경 없이 여러 스위치 칩을 프로그래밍할 수 있으므로 기본 라우터 플랫폼이 간단하고 일관되며 안정적입니다. 또한 표준화된 API를 사용하면 네트워크 하드웨어 공급업체가 혁신적인 하드웨어 아키텍처를 개발하여 프로그래밍 인터페이스를 일관되게 유지하면서 뛰어난 속도를 달성할 수 있습니다. 또한 SAI를 사용하면 기능, 스택 및 애플리케이션의 개방형 소프트웨어 개발도 더 쉽게 수행할 수 있습니다. 2015년 7월 현재 SAI는 <a href="https://www.opencompute.org/">OCP(Open Compute Project)</a>에 공식적으로 승인되었습니다. 자세한 내용은 <a href="https://azure.microsoft.com/en-us/blog/switch-abstraction-interface-sai-officially-accepted-by-the-open-compute-project-ocp/">여기</a>서 확인할 수 있습니다.</p>


  <p><strong>공급업체는 하드웨어 및 소프트웨어를 제공했습니다</strong>. 이는 실제 ASIC, 해당 드라이버, SAI와 북쪽으로 통신하는 SDK(소프트웨어 개발 키트)로 구성됩니다.</p>


  <p>SAI와 ACS는 <a href="https://conferences.sigcomm.org/sigcomm/2015/industrialdemosessions.php">8 월에 SIGCOMM 회의에서 시연되었다 2015</a>. ACS, 4개의 ASIC 공급업체(Mellanox, Broadcom, Cavium 및 Barefoot 소프트웨어 스위치), SAI의 6가지 구현(브로드컴, 델, 멜라녹스, 카비움, 맨발 및 메타스위치) 및 3개의 애플리케이션 스택(Microsoft, Dell 및 Metaswitch)을 선보였습니다.</p>


  <p>그것은 ACS&rsquo; 린과 모듈식 스택을 선보였다. 하나의 소프트웨어 애플리케이션이 다양한 ASIC와 통신하도록 함으로써 표준화된 SAI, ASIC 독립적 인터페이스의 기능을 발휘했습니다. 또한 ACS는 Dells&rsquo; 및 Metaswitchs&rsquo; 애플리케이션 스택과도 상호 작용했습니다. 이 기능은 Microsoft가 데이터 센터에서 사용하는 실제 클로 토폴로지에서 입증되었습니다. 이 기능은 QoS와 같은 복잡한 계층 3 라우터 기능을 포함합니다.</p>


  <p>&rsquo;스위치 하드웨어에서 스위치 소프트웨어를 분리하는 이 접근 방식이 네트워킹 업계에서 계속 증가하는 추세가 될 것이라고 믿기 때문에 ACS에 대해 공개적으로 이야기하는 Were는 여기에서부터 이 여정의 통찰력과 경험을 제공하고자 합니다.</p>
