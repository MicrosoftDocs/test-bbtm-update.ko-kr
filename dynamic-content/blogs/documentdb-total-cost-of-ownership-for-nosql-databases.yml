### YamlMime:Yaml
ms.openlocfilehash: 7e807a9ef8af9ed1b9468b0dfc2e010b89f74b6d
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139907803"
Slug: documentdb-total-cost-of-ownership-for-nosql-databases
Title: 2016년 NoSQL 데이터베이스 서비스의 총 소유 비용(비)
Summary: 오늘 이전에 "2016년에 NoSQL 데이터베이스의 총 (비) 소유권(TCO) 비용"을 발표했습니다. 온-프레미스 및 Azure Virtual Machines에서 OSS NoSQL 데이터베이스를 호스팅하고 관리되는 NoSQL 데이터베이스를 Azure DocumentDB와 같은 서비스로 사용하는 TCO를 비교합니다.
Content: >-
  <p>오늘 이전에 <a href="https://aka.ms/documentdb-tco-paper">NoSQL 데이터베이스 클라우드 서비스의 TCO&nbsp;(Non) 소유권에 대한 총 비용을</a> 발표했습니다. TCO는 NoSQL 데이터베이스를 선택할 때 중요한 고려 사항이며 고객은 종종 TCO에 영향을 주는 여러 요인을 간과합니다. 이 문서에서는 다음 시나리오에서 실행 중인 NoSQL 데이터베이스의 TCO를 비교합니다.</p>


  <ul>
   <li>온-프레미스에서 호스트되는 Cassandra 또는 MongoDB와 같은 OSS NoSQL 데이터베이스</li>
   <li>Azure Virtual Machines에서 호스트되는 OSS NoSQL 데이터베이스</li>
   <li>관리되는 NoSQL 데이터베이스를 Servicesuch&nbsp; <a href="https://azure.microsoft.com/en-us/services/documentdb/">asAzure DocumentDB</a>로&nbsp; 사용합니다.</li>
  </ul>


  <p>편견을 최소화하기 위해 가능하면 다른 게시의 시나리오를 활용했습니다.</p>


  <p>TCO 논문의 1부에서는 Amazon이 발행한 유사한 논문 NoSQL TCO 분석에서 엔드투엔드 게임 시나리오를 살펴봅니다. 시나리오 매개 변수와 가정을 변경하지 않고 온-프레미스 및 가상 머신에서 OSS NoSQL 데이터베이스에 대한 TCO를 계산하는 데 동일한 방법을 사용했습니다. 물론 이 문서에서는 Azure Virtual Machines를 사용했습니다. 이 시나리오는&nbsp; 영화를 기반으로 하는 온라인&nbsp; 게임을 탐색하며, 세 가지 게임 인기 수준을 포함합니다. 즉, 영화가 출시되는 시간&nbsp;(낮은 사용량), 영화&nbsp; 출시 후 첫 달&nbsp;(높은 사용량), 이후의 사용량(중간 사용량) 및 각 단계 동안 저장된 트랜잭션 및 데이터의 볼륨이 서로 다르며 아래 차트에&nbsp; 나열되어 있습니다.</p>


  <p>분석 결과는 AWS 논문과 상당히 일치합니다. 모든 관련 TCO 고려 사항을 고려하면 DocumentDB 및 DynamoDB와 같은 관리되는 클라우드 서비스는 온-프레미스 또는 가상 머신을 실행하는 OSS 카운터 파트보다<strong> 5~10배 더 비용 효율적 </strong>일 수 있습니다.</p>


  <p><img alt="part1_chart" border="0" height="485" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8588fcfc-e48e-4218-b564-8e4d6122b8af.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="part1_chart" width="554"></p>


  <p>&nbsp;다음 요인으로 인해 DocumentDBmore&nbsp;와 같은 관리되는 NoSQL 클라우드 서비스가 온-프레미스 또는 가상 머신을 실행하는 OSS 카운터 파트보다 비용 효율적입니다.</p>


  <ul>
   <li><strong>NoSQL 관리 개발/운영이 필요하지 않습니다.</strong> BecauseDocumentDB&nbsp;는 관리형 클라우드 서비스&nbsp;이므로 온-프레미스 또는 클라우드 인프라에서 호스트되는 anOSS&nbsp; NoSQL 클러스터에 필요한 배포, 유지 관리, 크기 조정, 패치 및 기타 일상적인 작업을 처리하기 위해 개발/운영 팀을 고용할 필요가 없습니다.</li>
   <li><strong>뛰어난 탄력성.</strong> DocumentDB 처리량은 확장 및 축소&nbsp;할 수 있으며 사용&nbsp;량이 많은 시간이 아닌 시간에 소유 비용을 유도할&nbsp; 수 있습니다. 클라우드 인프라에 배포된 OSS NoSQL 클러스터는 제한된 탄력성을 제공하며 온-프레미스 배포는 탄력적이지 않습니다.</li>
   <li><strong>규모의 경제.</strong> DocumentDB와 같은 관리되는&nbsp; 서비스는 운영적으로 많은 수의 노드이며 절감액을 고객에게 전달할 수 있습니다.</li>
   <li><strong>클라우드 최적화.</strong> DocumentDB와 같은 관리되는 서비스는 클라우드를 최대한 활용합니다. 현재 OSS NoSQL 데이터베이스는 특정 클라우드 공급자에 대해 최적화되지 않습니다. 예를 들어 OSS NoSQL 소프트웨어는 노드가 다운되는 것과 일상적인 이미지 업그레이드 간의 차이점 또는 프리미엄 디스크가 이미 3방향 복제되어 있다는 사실을 인식하지 못합니다.</li>
  </ul>


  <p>이 보통 시나리오의 Azure DocumentDB<strong> </strong>및 AWS DynamoDB용 TCO<strong></strong>는 쓰기 요청 비용 절감으로 <strong>인해 Azure DocumentDB</strong><strong>가 약간(~10%) 저렴</strong>하게 <strong>비교</strong>되었습니다.</p>


  <p><strong>정량 비교</strong></p>


  <p>Amazons&rsquo; 백서에서 사용하는 접근 방식의 한 가지 과제는 OSS NoSQL 데이터베이스 실행 비용에 대한 가정(종종 명시적으로 명시되지 않음)의 수입니다. 먼저 이 문서에서는 비교에 사용되는 OSS NoSQL 데이터베이스를 언급하지 않습니다. 동일한 시나리오에 대해 Cassandra 또는 MongoDB와 같은 매우 다른 두 개의 NoSQL 데이터베이스 엔진을 실행하는 TCO가 정확히 동일할 것이라고는 상상하기 어렵습니다. 그러나, 우리는 아마존&rsquo; 방법론이 중요한 질적 장점을 유지 생각합니다, 이 우려는 견딜 수 없습니다.</p>


  <p>백서의 두 번째 섹션에서는 이러한 문제를 해결하고 보다 구체적인 시나리오에 대해 보다 정확한 정량적 비교를 제공하려고 합니다. 다음 세 가지 시나리오를 살펴봅니다.</p>


  <ul>
   <li>100만 개의 레코드/초 수집</li>
   <li>균형 잡힌 50/50 읽기/쓰기 워크로드</li>
   <li>일반 버스트에서 100만 개의 레코드/초 수집</li>
  </ul>


  <p>Azure D14v2 Linux Virtual Machines에서 Azure DocumentDB, Amazon DynamoDB 및 OSS Cassandra와 같은 NoSQL 데이터베이스를 사용하는 경우 이러한 마이크로 시나리오에 대한 TCO를 비교합니다. 이는 대용량 데이터 볼륨 시나리오에서 널리 사용되는 NoSQL 선택입니다. Cassandra를 사용하여 테스트를 실행하기 위해 오픈 소스 <a href="https://github.com/GoogleCloudPlatform/PerfKitBenchmarker">PerfKit Benchmarker</a>에 포함된 오픈 소스 Cassandra-stress 명령을 활용합니다.</p>


  <p><img alt="tco_part2" border="0" height="297" src="https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/23cff938-656c-4bd8-a7cf-f68ed30f774d.png" style="border-image: none; padding-top: 0px; padding-right: 0px; padding-left: 0px; display: inline; background-image: none;" title="tco_part2" width="610"></p>


  <p>위의 차트에 표시된 시간별 TCO 결과는 1부의 관찰과 일치하며 몇 가지 추가 정량적 결과가 있습니다.</p>


  <ul>
   <li><strong>DocumentDB </strong> TCO는 스토리지<strong> 요구가 낮은</strong> <strong>높은 지속</strong>형 사전 쓰기 워크로드(즉<strong>, Cassandra</strong> 노드의 로컬 SSD로 충분함)와 관련된 시나리오에서 Azure D14v2 VM에서 실행되는 OSS Cassandra와<strong> 비슷합니다</strong>.&nbsp; Forexample&nbsp;,&nbsp; TTL(Time to Live)이 3시간 미만인 1M 쓰기 또는 대부분의 쓰기는 업데이트입니다. Cassandra는 이러한 시나리오에 대한 좋은 성능으로 유명하며 제품 개발의 초기 단계에서 종종 이러한 이유로 매우 매력적으로 보입니다. 그러나 사소한 개발/운영 비용 구성 요소는 Cassandra 배포의 총 소유 비용을 높입니다.</li>
   <li>더 많은 스토리지가 필요하거나 워크로드에 분산된 읽기/쓰기 조합이 포함되거나 워크로드가 버스트되는 경우 DocumentDB TCO는 Azure VM에서 실행되는 <strong>OSS Cassandra보다 최대 4시간 낮을 수 있습니다 </strong>. Cassandra&#39;TCO는 Cassandra 클러스터 및 Cassandra&#39;기본 클라우드 플랫폼에 대한 인식 부족의 관리에 대한 사소한 개발/운영 비용으로 인해 이러한 시나리오에서 더 높습니다. DocumentDB TCO는 낮은 오버헤드 자동 인덱싱 덕분에 뛰어난 탄력성과 읽기 및 쿼리 비용 절감 덕분에 더 낮습니다.</li>
   <li><strong>DocumentDB는 검사한 대량 워크로드의 경우 DynamoDB보다 최대 2~3배 저렴합니다 </strong>. 두 제품 모두에 의해 보장되는 예측 가능한 성능 덕분에 이러한 수치는 단순히 퍼블릭 소매 가격 페이지를 비교하여 확인할 수 있습니다. DocumentDB는 기본적으로 쓰기 최적화된 낮은 오버헤드 인덱싱을 제공하여 보조 인덱스에 대한 걱정 없이 쿼리를 보다 효율적으로 만듭니다. DocumentDB 쓰기는 높은 처리량 워크로드에 대해 훨씬 저렴합니다.</li>
  </ul>


  <p>결론적으로, Wed&rsquo;는 NoSQL 데이터베이스를 선택할 때 TCO가 한 가지(중요한 고려 사항임에도 불구하고) 고려 사항임을 추가하려고 합니다. 비교된 각 제품은 자체적으로 빛을 발합니다. 제품 기능, 개발 용이성, 지원, 커뮤니티 및 기타 요인을 결정할 때 고려해야 합니다. 이 문서에는 DocumentDB 기능에 대한 개요가 포함되어 있습니다.</p>


  <p>커뮤니티 전선에서 MongoDB와 Cassandra 프로젝트는 그들의 제안을 중심으로 중요한 커뮤니티를 만든 것에 박수를 보냅니다. Azure를 이러한 커뮤니티에 더 나은 위치로 만들기 위해 최근에 DocumentDB 제품의 일부로 Azure Cosmos DB for MongoDB API에 <a href="https://docs.microsoft.com/en-us/azure/documentdb/documentdb-protocol-mongodb">대한 프로토콜 수준 지원을 </a>제공했으며 MongoDB 개발자로부터 현재까지 받은 피드백으로 권장됩니다. 이제 DocumentDB 고객은 Azure Cosmos DB for MongoDB API 커뮤니티 전문 지식을 활용할 수 있을 뿐만 아니라 PaaS 서비스의 일반적인 관심사인 독점 API에 대한 잠금에 대해 걱정하지 않아도 됩니다.</p>


  <p>언제나 그처럼, <a href="https://feedback.azure.com/forums/263030-documentdb">UserVoice</a>, StackOverflow <a href="https://stackoverflow.com/questions/tagged/azure-documentdb">#azure-documentdb</a> 또는 Twitter <a href="https://twitter.com/documentdb">@DocumentDB</a>를 통해 DocumentDB에 대해 앞으로 어떤 개선 사항을 보고 싶은지&#39;알려주세요.</p>
