### YamlMime:Yaml
ms.openlocfilehash: bcff925f2a599f71ce85643f007d2c12b9977cfb
ms.sourcegitcommit: d03bdc7fe5447adb6530886aab848b75fe8fa8ee
ms.translationtype: MT
ms.contentlocale: ko-KR
ms.lasthandoff: 03/11/2022
ms.locfileid: "139906340"
Slug: what-s-new-in-azure-machine-learning-service
Title: Azure Machine Learning 서비스의 새로운 기능
Summary: 오늘 우리는 Azure Machine Learning 서비스에 대한 새로운 기능을 출시하게되어 매우 기쁩니다. 2017년 9월에 처음 공개 미리 보기가 출시된 이래, 우리는 매우 중요하고 건설적인 피드백을 받았습니다.
Content: "<p>오늘 우리는 Azure Machine Learning 서비스에 대한 새로운 기능을 출시하게되어 매우 기쁩니다. <a href=\"https://azure.microsoft.com/en-us/blog/diving-deep-into-what-s-new-with-azure-machine-learning/\" target=\"_blank\">2017년 9월에 처음 공개 미리 보기가 출시</a>된 이래, 우리는 매우 중요하고 건설적인 피드백을 받았습니다. 지난 12개월 동안 팀은 제품 개선, 피드백 처리 및 새로운 기능 추가에 매우 바빴습니다. 이러한 새로운 개선 사항을 여러분과 공유하는 것은 매우 흥미롭습니다. 클라우드 규모로 기계 학습 솔루션을 빌드하고 배포하는 데 데이터 과학자 및 기계 학습 실무자의 생산성을 크게 높일 것이라고 확신합니다.</p>\n\n<p>이 게시물에서는 릴리스의 핵심 기능 중 일부를 좀 더 기술적인 세부 정보로 강조하고 싶습니다.</p>\n\n<h2>Python SDK &amp; Machine Learning 작업 영역</h2>\n\n<p>최신 기계 학습 혁신의 대부분은 Python 언어 공간에서 발생하므로 Python SDK를 통해 서비스의 핵심 기능을 공개하기로 결정했습니다. 격리된 <a href=\"https://conda.io/docs/index.html\" target=\"_blank\">conda</a> 가상 환경에서 간단한 pip 설치 명령을 사용하여 설치할 수 있습니다.</p>\n\n<pre>\n# install just the base package\n$ pip install azureml-sdk\n\n# or install additional capabilities such as automated machine learning\n$ pip install azureml-sdk[automl]</pre>\n\n<p>SDK를 완전히 활용하려면 Azure 구독에 액세스해야 합니다. 먼저 Azure Machine Learning 작업 영역을 만들어야 한다고 생각합니다. Python SDK 또는 Azure Portal을 통해 이 작업을 수행할 수 있습니다. 작업 영역은 모든 자산의 논리적 컨테이너이며 보안 및 공유 경계이기도 합니다.</p>\n\n<pre>\nworkspace = Workspace.create(name=&#39;my-workspace&#39;,\n                             subscription_id=&#39;&lt;azure-subscription-id&gt;&#39;,\n                             resource_group=&#39;my-resource-group&#39;)</pre>\n\n<p>작업 영역을 만든 후에는 SDK를 통해 다양한 Azure 서비스 집합에 액세스하고 데이터 과학을 흔들 수 있습니다. 시작하는 방법에 대한 자세한 내용은 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/quickstart-get-started\" target=\"_blank\">시작</a> 문서를 참조하세요.</p>\n\n<h2>데이터 준비</h2>\n\n<p>데이터 준비는 기계 학습 워크플로의 중요한 부분입니다. 모델은 더 쉽게 이용할 수 있는 형식의 정리된 데이터에 액세스할 수 있는 경우 더 정확하고 효율적입니다. SDK를 사용하여 다양한 형식의 데이터를 로드하고, 더 사용할 수 있도록 변환하고, 해당 데이터를 모델에 액세스할 수 있는 위치에 쓸 수 있습니다. 다음은 몇 가지 예제를 제공하여 열을 2개의 새 열로 변환하는 멋진 예입니다.</p>\n\n<pre>\ndf2 = df1.derive_column_by_example(source_columns=&#39;start_time&#39;,\n                                   new_column_name=&#39;date&#39;,\n                                   example_data=[\n                                   (&#39;2017-12-31 16:57:39.6540&#39;, &#39;2017-12-31&#39;),\n                                   (&#39;2017-12-31 16:57:39&#39;, &#39;2017-12-31&#39;)])\ndf3 = df2.derive_column_by_example(source_columns=&#39;start_time&#39;,\n                                   new_column_name=&#39;wday&#39;,\n                                   example_data=[(&#39;2017-12-31 16:57:39.6540&#39;, &#39;Sunday&#39;)])</pre>\n\n<p>자세한 내용은 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-data-prep\" target=\"_blank\">이 문서를 참조</a>하세요.</p>\n\n<h2>실험 추적</h2>\n\n<p>모델링 학습은 반복적인 프로세스입니다. Azure Machine Learning 서비스는 클라우드에서 모든 실험 실행을 추적할 수 있습니다. 로컬 또는 원격으로 실험을 실행하고 로깅 API를 사용하여 메트릭을 기록하거나 파일을 업로드할 수 있습니다.</p>\n\n<pre>\nexp = Experiment(workspace, &quot;fraud detection&quot;)\nwith exp.start_logging() as run:\n      # your code to train the model omitted\n      ... ...\n     \n      run.log(&quot;overall accuracy&quot;, acc) # log a single value\n      run.log_list(&quot;errors&quot;, error_list) # log a list of values\n      run.log_row(&quot;boundaries&quot;, xmin=0, xmax=1, ymin=-1, ymax=1) # log arbitrary key/value pairs\n      run.log_image(&quot;AUC plot&quot;, plt) # log a matplotlib plot\n      run.upload(&quot;model&quot;, &quot;./model.pkl&quot;) # upload a file</pre>\n\n<p>실행이 완료되면(또는 실행이 실행되는 동안에도) Azure Portal에서 추적된 정보를 볼 수 있습니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/5f332f33-7200-480b-bc70-a6badbd072de.png\"><img alt=\"image\" border=\"0\" height=\"369\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/cef75029-4c67-4ca7-925f-05cab8843731.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"이미지\" width=\"560\"></a></p>\n\n<p>또한 실험 실행을 쿼리하여 가장 높은 정확도, 가장 낮은 평균 제곱 오차 등 사용자가 정의한 가장 적합한 메트릭을 기록한 메트릭을 찾을 수 있습니다. 그런 다음 해당 실행에서 생성된 모델을 작업 영역 아래의 모델 레지스트리에서 등록할 수 있습니다. 해당 모델을 가져와서 배포할 수도 있습니다.</p>\n\n<pre>\n# Find the run that has the highest accuracy metric recorded.\nbest_run_id = max(run_metrics, key=lambda k: run_metrics[k][&#39;accuracy&#39;])\n\n# reconstruct the run object based on run id\nbest_run = Run(experiment, best_run_id)\n\n# register the model produced by that run\nbest_run.register_model(&#39;best model&#39;, &#39;outputs/model.pkl&#39;)</pre>\n\n<p><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-track-experiments\" target=\"_blank\">실험 로깅 API를 사용하는 방법에 대한</a> 자세한 예제를 찾습니다.</p>\n\n<h2>GPU 클러스터를 사용하여 학습 크기 조정</h2>\n\n<p>랩톱에서 로컬로 작은 데이터 세트를 사용하여 조정해도 되지만 정교한 모델을 학습하려면 클라우드에서 대규모 컴퓨팅 리소스가 필요할 수 있습니다. Python SDK를 사용하면 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#dsvm\" target=\"_blank\">기존 Azure Linux VM을 연결</a>하거나 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#hdinsight\" target=\"_blank\">Spark 클러스터용 Azure HDInsight를 연결</a> 하여 학습 작업을 실행할 수 있습니다. 또한 Azure Batch AI 클러스터라고도 하는 관리형 컴퓨팅 클러스터를 쉽게 만들어 스크립트를 실행할 수 있습니다.</p>\n\n<pre>\npc = BatchAiCompute.provisioning_configuration(vm_size=&quot;STANDARD_NC6&quot;,\n                                               autoscale_enabled=True,\n                                               cluster_min_nodes=0,\n                                               cluster_max_nodes=4)\ncluster = compute_target = ComputeTarget.create(workspace, pc)</pre>\n\n<p>위의 코드는 GPU(&ldquo;STANDARD_NC6&rdquo; Azure VM 유형)를 갖춘 관리형 컴퓨팅 클러스터를 만듭니다. 작업이 제출될 때 자동으로 최대 4개의 노드로 스케일 업하거나, 작업이 완료되면 0개 노드로 축소하여 비용을 절감할 수 있습니다. 많은 작업을 병렬로 실행하거나, 지능형 하이퍼 매개 변수 튜닝 또는 일괄 처리 채점과 같은 기능을 지원하거나, 분산된 방식으로 대규모 딥 러닝 모델을 학습하는 데 적합합니다.</p>\n\n<p><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#batch\" target=\"_blank\">관리되는 컴퓨터 클러스터를 만드는 방법에</a> 대한 자세한 예제를 찾습니다.</p>\n\n<h2>유연한 실행 환경</h2>\n\n<p>Azure Machine Learning 서비스는 로컬 컴퓨터, 앞서 언급한 원격 VM, Spark 클러스터 또는 관리 컴퓨터 클러스터를 비롯한 다양한 컴퓨팅 대상에서 스크립트 실행을 지원합니다. 또한 각 컴퓨팅 대상에 대해 유연한 실행 구성 개체를 통해 다양한 실행 환경을 지원합니다. 컴퓨팅 대상에서 이미 구성한 Python 환경에서 스크립트를 실행하도록 시스템에 요청하거나 작업을 실행하도록 지정된 종속성에 따라 새 conda 환경을 빌드하도록 시스템에 요청할 수 있습니다. 작업을 실행하기 위해 Docker 이미지를 다운로드하도록 시스템에 요청할 수도 있습니다. 선택할 수 있는 몇 가지 기본 Docker 이미지를 제공하지만 원하는 경우&rsquo; 사용자 고유의 Docker 이미지를 가져올 수도 있습니다.</p>\n\n<p>다음은 시스템 관리형 conda 환경을 사용하여 Docker 이미지를 지정하는 실행 구성 개체의 예입니다.</p>\n\n<pre>\n# Create run configuration object\nrc = RunConfiguration()\nrc.target = &quot;my-vm-target&quot;\nrc.environment.docker.enabled = True\nrc.environment.python.user_managed_dependencies = False\nrc.environment.docker.base_image = azureml.core.runconfig.DEFAULT_CPU_IMAGE\n\n# Specify conda dependencies with scikit-learn\ncd = CondaDependencies.create(conda_packages=[&#39;scikit-learn&#39;])\nrc.environment.python.conda_dependencies = cd\n\n# Submit experiment\nsrc = ScriptRunConfig(source_directory=&quot;./&quot;, script=&#39;train.py&#39;, run_config=rc)\nrun = experiment.submit(config=src)</pre>\n\n<p>또한 SDK에는 환경을 더욱 쉽게 정의할 수 있도록 TensorFlow 및 PyTorch 기반 실행에 대한 이러한 구성 중 일부를 래핑하는 고급 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-train-ml-models#train-with-an-estimator\" target=\"_blank\">추정기 패턴</a> 이 포함되어 있습니다. 이러한 환경 구성은 최대한의 유연성을 허용하므로 재현성과 제어 간의 균형을 맞출 수 있습니다. 자세한 내용은 HDInsight에서 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#local\" target=\"_blank\">로컬 실행</a>, <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#local\" target=\"_blank\">원격 VM 실행</a> 및 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-set-up-training-targets#hdinsight\" target=\"_blank\">Spark 작업 프로덕션을</a> 구성하는 방법을 확인하세요.</p>\n\n<h2>데이터 저장소</h2>\n\n<p>다양한 컴퓨팅 대상 및 실행 환경을 지원하므로 스크립트에서 데이터 파일에 액세스할 수 있는 일관된 방법을 유지하는 것이 중요합니다. 모든 작업 영역에는 Azure Blob Storage 계정을 기반으로 하는 기본 데이터 저장소가 함께 제공됩니다. 데이터 파일을 저장하고 검색하는 데 사용할 수 있습니다. 또한 작업 영역에서 추가 데이터 저장소를 구성할 수도 있습니다. 다음은 데이터 저장소를 사용하는 간단한 예입니다.</p>\n\n<pre>\n# upload files from local computer into default datastore\nds = workspace.get_default_datastore()\nds.upload(src_dir=&#39;./data&#39;, target_path=&#39;mnist&#39;, overwrite=True)\n\n# pass in datastore&#39;s mounting point as an argument when submitting an experiment.\nscr = ScriptRunConfig(source_directory=&quot;./&quot;,\n                      script=&quot;train.py&quot;,\n                      run_config=rc,\n                      arguments={&#39;--data_folder&#39;: ds.as_mount()})\nrun = experiment.submit(src)</pre>\n\n<p>한편 컴퓨팅 클러스터에서 실행되는 학습 스크립트에서는 데이터 저장소가 자동으로 탑재됩니다. 탑재 경로를 보류하기만 하면 됩니다.</p>\n\n<pre>\nargs = parser.parse_args()\n# access data from the datastore mounting point\ntraining_data = os.path.join(args.data_folder, &#39;mnist&#39;, &#39;train-images.gz&#39;)</pre>\n\n<p><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-access-data\" target=\"_blank\">데이터 저장소</a>에 대한 자세한 내용을 확인하세요.</p>\n\n<h2>자동화된 기계 학습</h2>\n\n<p>학습 데이터 집합을 고려할 때 올바른 데이터 전처리 메커니즘과 올바른 알고리즘을 선택하는 것은 전문가에게도 어려운 작업일 수 있습니다. Azure Machine Learning 서비스에는 설정된 대상 메트릭에 따라 최상의 기능화 단계와 최상의 알고리즘 및 최상의 하이퍼 매개 변수로 구성된 기계 학습 파이프라인을 자동으로 추천하는 고급 기능이 포함되어 있습니다. 다음은 지정된 학습 데이터 집합을 분류하기 위해 가장 높은 AUC_Weighted 값을 생성하는 파이프라인을 자동으로 찾는 예제입니다.</p>\n\n<pre>\n# automatically find the best pipeline that gives the highest AUC_weighted value.\ncfg = AutoMLConfig(task=&#39;classification&#39;,\n                   primary_metric=&quot;AUC_weighted&quot;,\n                   X = X_train,\n                   y = y_train,\n                   max_time_sec=3600,\n                   iterations=10,\n                   n_cross_validations=5)\nrun = experiment.submit(cfg)\n\n# return the best model\nbest_run, fitted_model = run.get_output()</pre>\n\n<p>다음은 실행의 인쇄물입니다. 반복 #6은 <a href=\"https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html\" target=\"_blank\">scikit-learn StandardScaler</a> 및 <a href=\"https://github.com/Microsoft/LightGBM\" target=\"_blank\">LightGBM</a> 분류자를 포함하는 최상의 파이프라인을 나타냅니다.</p>\n\n<table border=\"1\" cellpadding=\"2\" cellspacing=\"0\">\n <tbody>\n  <tr>\n   <td valign=\"top\"><strong>반복</strong></td>\n   <td valign=\"top\"><strong>파이프라인</strong></td>\n   <td valign=\"top\"><strong>DURATION</strong></td>\n   <td valign=\"top\"><strong>메트릭</strong></td>\n   <td valign=\"top\"><strong>최고의</strong></td>\n  </tr>\n  <tr>\n   <td valign=\"top\">0</td>\n   <td valign=\"top\">SparseNormalizer LogisticRegression</td>\n   <td valign=\"top\">0:00:46.451353</td>\n   <td valign=\"top\">0.998</td>\n   <td valign=\"top\">0.998</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">1</td>\n   <td valign=\"top\">StandardScalerWrapper KNeighborsClassi</td>\n   <td valign=\"top\">0:00:31.184009</td>\n   <td valign=\"top\">0.998</td>\n   <td valign=\"top\">0.998</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">2</td>\n   <td valign=\"top\">MaxAbsScaler LightGBMClassifier</td>\n   <td valign=\"top\">0:00:16.193463</td>\n   <td valign=\"top\">0.998</td>\n   <td valign=\"top\">0.998</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">3</td>\n   <td valign=\"top\">MaxAbsScaler DecisionTreeClassifier</td>\n   <td valign=\"top\">0:00:12.379544</td>\n   <td valign=\"top\">0.828</td>\n   <td valign=\"top\">0.998</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">4</td>\n   <td valign=\"top\">SparseNormalizer LightGBMClassifier</td>\n   <td valign=\"top\">0:00:21.779849</td>\n   <td valign=\"top\">0.998</td>\n   <td valign=\"top\">0.998</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">5</td>\n   <td valign=\"top\">StandardScalerWrapper KNeighborsClassi</td>\n   <td valign=\"top\">0:00:11.910200</td>\n   <td valign=\"top\">0.998</td>\n   <td valign=\"top\">0.998</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">6</td>\n   <td valign=\"top\">StandardScalerWrapper LightGBMClassifi</td>\n   <td valign=\"top\">0:00:33.010702</td>\n   <td valign=\"top\">0.999</td>\n   <td valign=\"top\">0.999</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">7</td>\n   <td valign=\"top\">StandardScalerWrapper SGDClassifierWra</td>\n   <td valign=\"top\">0:00:18.195307</td>\n   <td valign=\"top\">0.994</td>\n   <td valign=\"top\">0.999</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">8</td>\n   <td valign=\"top\">MaxAbsScaler LightGBMClassifier</td>\n   <td valign=\"top\">0:00:16.271614</td>\n   <td valign=\"top\">0.997</td>\n   <td valign=\"top\">0.999</td>\n  </tr>\n  <tr>\n   <td valign=\"top\">9</td>\n   <td valign=\"top\">StandardScalerWrapper KNeighborsClassi</td>\n   <td valign=\"top\">0:00:15.860538</td>\n   <td valign=\"top\">0.999</td>\n   <td valign=\"top\">0.999</td>\n  </tr>\n </tbody>\n</table>\n\n<p>자동화된 기계 학습은 분류 및 회귀를 모두 지원하며 누락된 값 처리, 중지 메트릭에 의한 조기 종료, 탐색하지 않으려는&rsquo; 블랙리스트 알고리즘 등의 기능을 포함합니다. <a href=\"https://aka.ms/aml-blog-automl\" target=\"_blank\">자세한 내용은 자동화된 기계 학습</a> 문서를 살펴보세요.</p>\n\n<h2>지능형 하이퍼 매개 변수 튜닝</h2>\n\n<p>하이퍼 매개 변수 튜닝(즉, 매개 변수 스윕)은 지정된 알고리즘에 대한 최적의 하이퍼 매개 변수 값을 찾기 위한 일반적인 기계 학습 기술입니다. 무차별 및/또는 완전한 하이퍼 매개 변수 검색은 계산 비용이 많이 들고 시간이 많이 걸릴 수 있습니다. Azure Machine Learning 서비스는 사용자에게 상당한 시간과 리소스를 절약할 수 있는 지능형 하이퍼 매개 변수 튜닝 기능을 제공합니다. 매개 변수 공간을 임의로 또는 Bayesian 최적화를 사용하여 검색하고, 관리되는 컴퓨팅 클러스터에서 매개 변수 검색 작업을 병렬로 자동으로 예약하고, 사용자 정의 초기 종료 정책을 통해 검색 프로세스를 가속화할 수 있습니다. 기존의 기계 학습 알고리즘과 반복적인 딥 러닝 알고리즘 모두 이점을 얻을 수 있습니다. 다음은 추정기 개체와 하이퍼 매개 변수 튜닝을 사용하는 예제입니다.</p>\n\n<pre>\n# parameter grid to search\nparameter_samples = RandomParameterSampling{\n       &quot;--learning_rate&quot;: loguniform(-10, -3),\n       &quot;--batch_size&quot;: uniform(50,300),\n       &quot;--first_layer_neurons&quot;: choice(100, 300, 500),\n       &quot;--second_layer_neurons&quot;: choice(10, 20, 50, 100)\n}\n\n# early termination policy\npolicy = BanditPolicy(slack_factor=0.1, evaluation_interval=2)\n\n# hyperparameter tuning configuration\nhtc = HyperDriveRunConfig(estimator=my_estimator,\n                          hyperparameter_sampling=parameter_samples,\n                          policy=policy,\n                          primary_metric_name=&#39;accuracy&#39;,  \n                          primary_metric_goal=PrimaryMetricGoal.MAXIMIZE,\n                          max_total_runs=200,\n                          max_concurrent_runs=10,\n)\nrun = experiment.submit(htc)</pre>\n\n<p>위의 코드는 지정된 매개 변수 공간을 임의로 검색하고 추정기 개체에 구성된 컴퓨터 대상에서 최대 200개의 작업을 시작하고 가장 높은 정확도를 반환하는 작업을 찾습니다. BanditPolicy는 두 번의 반복마다 각 작업에서 생성된 정확도를 확인하고, 정확&rdquo;도 값이 다른 실행에서 지금까지 보고된 가장 &ldquo;높은 정확&rdquo;도의 10% 여유를 가지고 있지 않은 경우 &ldquo;작업을 종료합니다. <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-tune-hyperparameters\" target=\"_blank\">지능형 하이퍼 매개 변수 튜닝</a>에 대한 자세한 설명을 찾습니다.</p>\n\n<h2>분산 학습</h2>\n\n<p>심층 신경망을 학습할 때 GPU가 장착된 컴퓨터 클러스터를 통해 계산을 병렬화하는 것이 더 효율적일 수 있습니다. 이러한 클러스터를 구성하고 학습 스크립트를 병렬화하는 작업은 지루하고 오류가 발생하기 쉬운 작업이 될 수 있습니다. Azure Machine Learning 서비스는 분산 학습 기능이 이미 활성화된 관리형 컴퓨팅 클러스터를 프로비전합니다. <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-train-tensorflow#parameter-server\" target=\"_blank\">TensorFlow와 함께 제공되는 네이티브 매개 변수 서버 옵션을</a> 사용하든, <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-train-tensorflow#horovod\" target=\"_blank\">TensorFlow와 결합된 Hovorod 프레임워크</a>에서 활용하는 MPI 기반 접근 방식 또는 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-train-pytorch#horovod\" target=\"_blank\">PyTorch와 Horovod</a>를 사용하든, <a href=\"https://aka.ms/aml-notebook-cntk-mpi\" target=\"_blank\">MPI를 사용하여 CNTK</a> 네트워크를 쉽게 병렬로 학습시킬 수 있습니다.</p>\n\n<p>다음은 mpi로 설정된 distributed_backend 플래그를 사용하여 MPI 지원을 사용하여 TensorFlow 학습 실행을 구성하는 예제입니다. word2vec.py 파일에서 자동으로 설치되는 Horovod를 활용할 수 있습니다.</p>\n\n<pre>\ntf_estimator = TensorFlow(source_directory=&quot;./&quot;,\n                          compute_target=my_cluster,\n                          entry_script=&#39;word2vec.py&#39;,\n                          script_params=script_params,\n                          node_count=4,\n                          process_count_per_node=1,\n                          distributed_backend=&quot;mpi&quot;,\n                          use_gpu=True)</pre>\n\n<p><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-train-ml-models?#distributed-training-and-custom-docker-images\" target=\"_blank\">Azure Machine Learning 서비스의 분산 학습에</a> 대한 자세한 내용을 확인하세요.</p>\n\n<h2>파이프라인</h2>\n\n<p>Azure Machine Learning 파이프라인을 사용하면 데이터 과학자가 여러 단순하고 복잡한 워크플로를 동시에 만들고 관리할 수 있습니다. 일반적인 파이프라인에는 데이터를 준비하고, 모델을 학습, 배포 및 평가하는 여러 작업이 있습니다. 개별 단계에서는 다양한 컴퓨팅 옵션(예: 데이터 준비용 CPU 및 학습을 위한 GPU) 및 언어를 사용할 수 있습니다. 사용자는 일괄 처리 채점 및 재학습과 같은 시나리오에 게시된 파이프라인을 사용할 수도 있습니다.</p>\n\n<p>다음은 데이터 준비, 학습 및 일괄 처리 채점을 위한 순차 파이프라인을 보여 주는 간단한 예제입니다.</p>\n\n<pre>\n# Uses default values for PythonScriptStep construct.\ns1 = PythonScriptStep(script_name=&quot;prep.py&quot;, target=&#39;my-spark-cluster&#39;, source_directory=&quot;./&quot;)\ns2 = PythonScriptStep(script_name=&quot;train.py&quot;, target=&#39;my-gpu-cluster&#39;, source_directory=&quot;./&quot;)\ns3 = PythonScriptStep(script_name=&quot;batch_score.py&quot;, target=&#39;my-cpu-cluster&#39;, source_directory=&quot;./&quot;)\n\n# Run the steps as a pipeline\npipeline = Pipeline(workspace=ws, steps=[s1, s2, s3])\npipeline.validate()\npipeline_run = experiment.submit(pipeline)</pre>\n\n<p>파이프라인을 사용하면 다단계 워크플로를 구성하여 복잡성을 크게 줄이고, 전체 워크플로를 단일 실험 실행으로 추적하여 관리 효율성을 개선하고, 모든 중간 작업 및 데이터를 기록하여 유용성을 높일 수 있습니다. 자세한 내용은 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/concept-ml-pipelines\" target=\"_blank\">이 설명서를 참조</a>하세요.</p>\n\n<h2>모델 관리</h2>\n\n<p>Azure Machine Learning 실험에서 학습 실행에서 모델을 생성할 수 있습니다. 간단한 API를 사용하여 작업 영역 아래에 등록할 수 있습니다. Azure Machine Learning 외부에서 생성된 모델을 가져와서 등록할 수도 있습니다.</p>\n\n<pre>\n# register a model that&#39;s generated from a run and stored in the experiment history\nmodel = best_run.register_model(model_name=&#39;best_model&#39;, model_path=&#39;outputs/model.pkl&#39;)\n\n# or, register a model from local file\nmodel = Model.register(model_name=&quot;best_model&quot;, model_path=&quot;./model.pkl&quot;, workspace=workspace)</pre>\n\n<p>등록되면 태그를 지정하고, 버전을 지정하고, 검색하고, 배포할 수 있습니다. 모델 관리 기능에 대한 자세한 내용은 <a href=\"https://aka.ms/aml-notebook-deployment-aci\" target=\"_blank\">이 Notebook을 검토</a>하세요.</p>\n\n<h2>컨테이너화된 배포</h2>\n\n<p>등록된 모델이 있으면 SDK의 모델 관리 API를 사용하여 Docker 이미지를 쉽게 만들 수 있습니다. 로컬 컴퓨터에서 모델 파일을 제공하거나 작업 영역에서 등록된 모델을 사용하여 학습 스크립트 및 패키지 종속성 파일을 추가하기만 하면 됩니다. 시스템은 모든 항목을 클라우드에 업로드하고 Docker 이미지를 만든 다음 작업 영역에 등록합니다.</p>\n\n<pre>\nimg_conf = ContainerImage.image_configuration(runtime=&quot;python&quot;,\n                                                execution_script=&quot;score.py&quot;,\n                                                conda_file=&quot;dependencies.yml&quot;)\n# create a Docker image with model and scoring file\nimage = Image.create(name=&quot;my-image&quot;,                   \n                     models=[model_obj],\n                     image_config=image_config,\n                     workspace=workspace)</pre>\n\n<p>이미지를 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-deploy-to-aci\" target=\"_blank\">ACI(Azure Container Instance) 서비스</a>, 개발/테스트 시나리오용 Docker 컨테이너를 실행하는 컴퓨팅 패브릭에 배포하거나, 확장 및 보안 프로덕션 환경을 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-deploy-to-aks\" target=\"_blank\">위해 AKS(Azure Kubernetes Cluster) 서비스에 배포</a> 하도록 선택할 수 있습니다. 더 많은 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-deploy-and-where\" target=\"_blank\">배포 옵션을 찾습니다</a>.</p>\n\n<h2>Notebook 사용</h2>\n\n<p>Azure Machine Learning Python SDK는 선택한 모든 Python 개발 환경에서 사용할 수 있습니다. 또한 다음 Notebook 노출 영역과 더욱 긴밀하게 통합할 수 있습니다.</p>\n\n<h2>Juypter Notebook</h2>\n\n<p>인용하는 거의 모든 샘플이 GitHub 게시된 Jupyter Notebook 형식임을 알 수 있습니다. Jupyter는 상호 작용 및 자체 문서화 특성으로 인해 데이터 과학에 가장 인기 있는 도구 중 하나가 되었습니다. Juypter 사용자가 실험 실행 기록과 상호 작용할 수 있도록 실행 기록 위젯을 만들어 실행 개체를 모니터링합니다. 다음은 하이퍼 매개 변수 튜닝 실행의 예입니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/da9a91df-c225-47ab-822b-db03c9dc7875.png\"><img alt=\"image\" border=\"0\" height=\"836\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/e6fb0ba2-e8c1-424a-8b27-5df4ada822ce.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"이미지\" width=\"560\"></a></p>\n\n<p align=\"center\"><em>실행 기록 위젯</em></p>\n\n<p>실행 기록 위젯의 작동을 확인하려면 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/tutorial-train-models-with-aml\" target=\"_blank\">이 Notebook을 따르세요</a>.</p>\n\n<h2>Azure Notebooks</h2>\n\n<p><a href=\"https://notebooks.azure.com/\" target=\"_blank\">Azure Notebooks</a> 는 Jupyter를 사용하여 브라우저에서 코드를 개발하고 실행하는 데 사용할 수 있는 무료 서비스입니다. Azure Notebooks 컨테이너의 Python 3.6 커널에 SDK를 미리 설치했으며 <a href=\"https://aka.ms/aml-clone-azure-notebooks\" target=\"_blank\">모든 샘플 Notebook을 사용자 고유의 라이브러리에 쉽게 복제할 수</a> 있도록 했습니다. 또한 Azure Portal의 작업 영역에서 <strong>Azure Notebooks의 시작</strong> 단추를 클릭할 수 있습니다. 작업 영역 구성은 복제된 라이브러리에도 자동으로 복사되므로 SDK에서 바로 액세스할 수 있습니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/b8136320-0ead-4d8d-98ac-06d105bd6ed3.png\"><img alt=\"image\" border=\"0\" height=\"440\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31b2367b-a9a9-4c63-8d78-d268f47cb1dd.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"이미지\" width=\"560\"></a></p>\n\n<h2>Azure Databricks와 통합</h2>\n\n<p><a href=\"https://azure.microsoft.com/en-us/services/databricks/\" target=\"_blank\">Azure Databricks</a> 는 빅 데이터 분석을 수행하는 Apache Spark&ndash; 기반 분석 서비스입니다. Azure Databricks 클러스터에 SDK를 쉽게 설치하고 학습 실행 메트릭을 로깅하는 데 사용할 수 있으며 Spark ML 모델을 컨테이너화하고 다른 모델과 마찬가지로 ACI 또는 AKS에 배포할 수 있습니다. Azure Machine Learning Python SDK를 사용하여 Azure Databricks를 시작하려면 <a href=\"https://aka.ms/aml-notebook-adb\" target=\"_blank\">이 Notebook을 검토</a>하세요.</p>\n\n<h2>AI용 Visual Studio Code 도구</h2>\n\n<p><a href=\"https://code.visualstudio.com/\" target=\"_blank\">Visual Studio Code</a> 매우 인기 있는 코드 편집 도구이며 Python 확장은 Python 개발자들 사이에서 널리 채택됩니다. <a href=\"https://aka.ms/vscodetoolsforai\" target=\"_blank\">Visual Studio Code Tool for AI</a>는 강력한 실험 기능을 위해 Azure Machine Learning 원활하게 통합됩니다. 이 확장을 사용하면 친숙한 사용자 인터페이스 내에서 컴퓨팅 대상 프로비저닝에서 모델 관리 및 배포에 이르기까지 실험 실행 제출에서 실행 추적에 이르는 모든 멋진 기능에 액세스할 수 있습니다. 다음은 작동 중인 AI용 Visual Studio Code 도구 확장의 스크린샷입니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/60c50b41-5fd2-48a3-8308-241798c1d8ea.png\"><img alt=\"image\" border=\"0\" height=\"276\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/00036eee-3da9-4f8d-9de4-5eac15462634.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"이미지\" width=\"560\"></a></p>\n\n<p align=\"left\"><a href=\"https://aka.ms/vscodetoolsforai\" target=\"_blank\">Visual Studio Code Tool for AI</a> 확장을 다운로드하고 사용해 보세요.</p>\n\n<h2>지금 시작하세요!</h2>\n\n<p>이것은 매우 긴 게시물되었습니다 그래서 그것을 통해 읽을 수있는 인내심을 주셔서 감사합니다. 그러나, 나는 겨우 Azure Machine Learning 서비스의 표면을 긁었다. 내가 얻을 수없는 다른 많은 흥미로운 기능이 있습니다. 직접 탐색해야 합니다.</p>\n\n<ul>\n <li><a href=\"https://aka.ms/aml-notebook-tb\" target=\"_blank\">TensorBoard 통합</a> &ndash; TensorFlow를 사용하지 않더라도 TensorBoard에서 실험 실행을 모니터링합니다.</li>\n <li><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-build-deploy-onnx\" target=\"_blank\">ONNX 런타임 지원</a> &ndash; 개방형 ONNX 형식으로 만든 모델을 배포합니다.</li>\n <li><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-enable-data-collection\" target=\"_blank\">모델 원격 분석 컬렉션</a> &ndash; 라이브 실행 모델에서 원격 분석을 수집합니다.</li>\n <li><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-deploy-fpga-web-service\" target=\"_blank\">FPGA(Field programmable gated-array) 추론</a> &ndash; 빠른 속도와 저렴한 비용으로 미리 학습된 심층 신경망을 사용하여 이미지 데이터의 점수를 매기거나 기능을 제공합니다.</li>\n <li><a href=\"https://docs.microsoft.com/azure/machine-learning/service/how-to-deploy-to-iot\" target=\"_blank\">IoT 배포</a> &ndash; IoT 디바이스에 모델을 배포합니다.</li>\n</ul>\n\n<p>그리고 앞으로 더 많은. 우리와 함께 흥미 진진한 여행을 시작 <a href=\"https://docs.microsoft.com/azure/machine-learning/service/quickstart-get-started\" target=\"_blank\">하려면 시작 가이드</a> 를 방문하십시오!</p>"
