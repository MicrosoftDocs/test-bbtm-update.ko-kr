{
    "Slug": "an-introduction-to-service-bus-topics",
    "Title": "Service Bus 항목 소개",
    "Summary": "[This article was contributed by the AppFabric team.]In the May CTP of Service Bus, we&rsquo;ve added a brand-new set of cloud-based, message-oriented-middleware technologies including reliable…",
    "Content": "<p>[이 문서는 AppFabric 팀에서 제공했습니다.]</p><p class=\"Publishwithline\">Service Bus 5월 CTP에서 <span style=\"color: black;\">weve&rsquo;는 신뢰할 수 있는 메시지 큐 및 지속성 게시/구독 메시징을 포함한 새로운 클라우드 기반 메시지 지향 미들웨어 기술 세트를 추가했습니다. 지난 주에 Service Bus 큐 블로그 항목<a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">에 대한 소개를 게시했습니다</a>. 이 게시물은 그 다음에 이어 Service Bus Topics에서 제공하는 게시/구독 기능에 대한 소개를 제공합니다. 다시 말하지만, Im&rsquo;은이 문서의 모든 기능을 다루지 않을 것입니다, 난 그냥 당신에게 새로운 기능을 시작하기에 충분한 정보를 제공하고 싶습니다. Well&rsquo;에는 일부 세부 정보를 자세히 알아보는 후속 게시물이 있습니다.</span></p>  <p class=\"MsoNormal\"><span style=\"color: black;\"><br>Im&rsquo;은 <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">큐 블로그 게시물</a>에서 시작한 소매 시나리오를 계속 진행합니다. </span>개별 POS(Point of Sale) 터미널의 판매 데이터는 재고를 보충해야 하는 시기를 결정하기 위해 해당 데이터를 사용하는 인벤토리 관리 시스템으로 라우팅되어야 합니다. 각 POS 터미널은 아래와 같이 인벤토리 관리 시스템에서 받을 때까지 앉아 있는 DataCollectionQueue로 메시지를 보내 판매 데이터를 보고합니다.</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/7853.t1.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">이제 이 시나리오를 발전시킬 수 있습니다&rsquo;. 새로운 요구 사항이 시스템에 추가되었습니다. 매장 소유자는 저장소가 실시간으로 어떻게 수행되는지 모니터링할 수 있기를 원합니다. </p>  <p class=\"MsoNormal\"><br>이 요구 사항을 해결하려면 판매 데이터 스트림을 &ldquo;탭&rdquo; 해야 합니다. POS 터미널에서 보낸 각 메시지를 이전과 같이 인벤토리 관리 시스템으로 보내려고 하지만 저장소 소유자에게 대시보드 보기를 표시하는 데 사용할 수 있는 각 메시지의 또 다른 복사본을 원합니다.</p>  <p class=\"MsoNormal\"><br>이와 같은 상황에서는 여러 당사자가 각 메시지를 사용해야 하는 경우 Service Bus 항목 기능이 필요합니다. 토픽은 토픽에 등록된 각 구독에 게시된 각 메시지를 사용할 수 있는 게시/구독 패턴을 제공합니다. 단일 소비자가 각 메시지를 사용하는 큐와 대조를 이룹니다. 두&rsquo; 모델 간의 주요 차이점입니다. </p>  <p class=\"MsoNormal\"><br>메시지는 큐로 전송되는 것과 똑같은 방식으로 토픽으로 전송되지만, 메시지가 토픽에서 직접 수신되지 않고&rsquo; 대신 구독에서 수신됩니다. 토픽 구독은 토픽으로 전송되는 메시지의 복사본을 가져오는 가상 큐와 같이 생각할 수 있습니다. 메시지는 큐에서 받은 것과 똑같은 방식으로 구독에서 수신됩니다.</p>  <p class=\"MsoNormal\"><br>따라서 시나리오로 돌아가서 가장 먼저 해야 할 일은 토픽에 대한 큐를 전환하고 인벤토리 관리 시스템에서 사용할 구독을 추가하는 것입니다. 이제 시스템은 다음과 같이 표시됩니다.</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/8546.t2.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">위의 구성은 이전 큐 기반 디자인과 동일하게 수행됩니다. 즉, 토픽으로 전송된 메시지는 인벤토리 관리 시스템에서 사용하는 인벤토리 구독으로 라우팅됩니다.</p>  <p class=\"MsoNormal\"><br>이제 관리 대시보드를 지원하려면 아래와 같이 토픽에 두 번째 구독을 만들어야 합니다.</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/6758.t3.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\"><br>이제 위의 구성을 사용하여 POS 터미널의 각 메시지를 대시보드 및 인벤토리 구독에서 모두 사용할 수 있게 됩니다.</p>  <h2 class=\"WordSection1\"><br>코드 표시</h2>  <p class=\"MsoNormal\">Service Bus 계정에 등록하고 <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">큐 블로그 게시물에</a> 네임스페이스를 만드는 방법을 설명했으므로 여기서 다시 다루지 않을 것입니다&rsquo;. Service Bus 네임스페이스를 사용하려면 애플리케이션이 AppFabric Service Bus DLL, 즉 Microsoft.ServiceBus.dll 및 Microsoft.ServiceBus.Messaging.dll 참조해야 합니다. SDK 다운로드의 일부로 찾을 수 있습니다.</p>  <h3 class=\"WordSection1\"><br>항목 및 구독 만들기</h3>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Service Bus 메시징 엔터티(큐 및 토픽)에 대한 관리 작업은 Service Bus 네임스페이스의 기본 주소 및 사용자 자격 증명으로 구성된 ServiceBusNamespaceClient를 통해 수행됩니다. ServiceBusNamespaceClient는 메시징 엔터티를 만들고 열거하고 삭제하는 메서드를 제공합니다. 아래 코드 조각은 ServiceBusNamespaceClient를 사용하여 DataCollectionTopic을 만드는 방법을 보여줍니다.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">&nbsp;</p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">. CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"ingham-blog\"</span>, <span style=\"color: blue;\">string</span>. 비어 있음);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> name = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp; </span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> namespaceClient = </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">new</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusNamespaceClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baseAddress, </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">. CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">Topic</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> dataCollectionTopic = </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">namespaceClient.CreateTopic(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">토픽의 속성을 튜닝할 수 있도록 하는 CreateTopic 메서드의 오버로드가 있습니다. 예를 들어 토픽에 전송된 메시지에 적용할 기본 Time-to-Live를 설정합니다. 다음으로 인&rsquo;벤토리 및 대시보드 구독을 추가할 수 있습니다.</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <h3 class=\"WordSection1\">항목으로 메시지 보내기</h3>  <p class=\"MsoNormal\">앞에서 설명한 것처럼 애플리케이션은 큐에 보내는 것과 동일한 방식으로 토픽에 메시지를 보내므로 <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">큐 블로그 게시물을</a> 읽는 경우 아래 코드가 매우 친숙해 보입니다. 차이점은 애플리케이션이 QueueClient 대신 TopicClient를 만든다는 것입니다.</p>  <p class=\"MsoNormal\"><br>Service Bus 엔터티에 대한 런타임 작업(예: 메시지 보내기 및 받기)의 경우 애플리케이션은 먼저 MessagingFactory를 만들어야 합니다. ServiceBus 네임스페이스의 기본 주소와 사용자 자격 증명이 필요합니다. </p>  <p class=\"MsoNormal\" style=\"margin-bottom: 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">Uri</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">ServiceBusEnvironment</span><span style=\"font-family: consolas; font-size: 8pt;\">. CreateServiceUri(<span style=\"color: #a31515;\">\"sb\"</span>, <span style=\"color: #a31515;\">\"ingham-blog\"</span>, <span style=\"color: blue;\">string</span>. 비어 있음);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> name = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"owner\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">string</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> key = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"abcdefghijklmopqrstuvwxyz\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> 팩터리 = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessagingFactory</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">. Create(</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;baseAddress, </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">TransportClientCredentialBase</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">. CreateSharedSecretCredential(name, key) );</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">팩터리에서 특정 관심 항목인 DataCollectionTopic에 대한 TopicClient가 만들어집니다.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; TopicClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> topicClient = factory. CreateTopicClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">MessageSender는 보내기 작업을 수행하기 위해 TopicClient에서 만들어집니다.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; MessageSender</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> ms = topicClient.CreateSender();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\">Service Bus 토픽(및 큐)으로 보내고 받은 메시지는 표준 속성 집합(예: Label 및 TimeToLive), 애플리케이션 속성을 보유하는 데 사용되는 사전 및 임의의 애플리케이션 데이터의 본문으로 구성된 BrokeredMessage 클래스의 인스턴스입니다. 애플리케이션은 모든 직렬화 가능한 개체를 CreateMessage에 전달하여 본문을 설정할 수 있습니다(아래 예제에서는 POS 터미널의 판매 데이터를 나타내는 SalesData 개체에 전달됨). 이 개체는 DataContractSerializer를 사용하여 개체를 직렬화합니다. 또는 System.IO.Stream을 제공할 수 있습니다.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: green; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> bm = </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">. CreateMessage(salesData);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm. Label = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"SalesReport\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm. Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Redmond\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; Bm. Properties[</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"MachineID\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">] = </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"POS_1\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; ms. Send(bm);</span></p>  <h3 class=\"WordSection1\"><br>구독에서 메시지 받기</h3>  <p class=\"MsoNormal\">큐를 사용할 때와 마찬가지로 MessageReceiver를 사용하여 구독에서 메시지를 받습니다. 차이점은 MessageReceiver가 QueueClient가 아닌 SubscriptionClient에서 생성된다는 것입니다. <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">큐 블로그 게시물</a>에서 설명한 두 가지 수신 모드(ReceiveAndDelete 및 PeekLock)에 대한 지원을 포함하여 다른 모든 항목은 동일하게 유지됩니다.</p>  <p class=\"MsoNormal\"><br>따라서 먼저 토픽의 이름과 구독 이름을 매개 변수로 전달하는 SubscriptionClient를 만듭니다. 여기서는 인벤토리 구독을 사용하는 Im&rsquo;입니다.</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; SubscriptionClient</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> subClient = factory.CreateSubscriptionClient(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"DataCollectionTopic\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Inventory\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">다음으로 MessageReceiver를 만들고 메시지를 받습니다.</p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">MessageReceiver</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> mr = subClient.CreateReceiver();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">BrokeredMessage</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> receivedMessage = mr. Receive();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">시도</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ProcessMessage(receivedMessage);</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Complete();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">catch</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> (</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">Exception</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\"> e)</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; {</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; receivedMessage.Abandon();</span></p>  <p class=\"WordSection1\" style=\"margin: 2.15pt 0in 0pt;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;&nbsp;&nbsp; }</span></p>  <h2 class=\"WordSection1\"><br>구독 필터</h2>  <p class=\"MsoNormal\">지금까지 Ive&rsquo;는 토픽에 전송된 모든 메시지를 등록된 모든 구독에서 사용할 수 있다고 말했습니다. 이 핵심 구를 &ldquo;사용할 수 있습니다&rdquo;. Service Bus 구독에는 토픽으로 전송된 모든 메시지가 표시되지만 해당 메시지의 하위 집합만 가상 구독 큐에 복사할 수 있습니다. 이 작업은 구독 필터를 사용하여 수행됩니다. 구독을 만들&rsquo;면 위의 예제에서 시스템 속성(예: 레이블) 및 애플리케이션 속성(예: StoreName)을 통해 작동할 수 있는 SQL92 스타일 조건자의 형태로 필터 식을 제공할 수 있습니다.</p>  <p class=\"MsoNormal\"><br>이를 설명하기 위해 시나리오를 약간 개선해 보겠습니다&rsquo;. 두 번째 매장은 소매 시나리오에 추가됩니다. 두 매장의 모든 POS 터미널의 판매 데이터는 여전히 중앙 집중식 인벤토리 관리 시스템으로 라우팅되어야 하지만 대시보드 도구를 사용하는 매장 관리자는 매장의 성능에만 관심이 있습니다. 이를 위해 구독 필터링을 사용할 수 있습니다. POS 터미널은 메시지를 게시할 때 메시지에 대해 StoreName 응용 프로그램 속성을 설정합니다. 이제 Redmond와 Seattle이라는&rsquo; 두 개의 매장이 있으며, Redmond 저장소의 POS 터미널은 Redmond StoreName으로 판매 데이터 메시지를 스탬프하고 시애틀 스토어 POS 터미널은 시애틀의 StoreName을 사용합니다. Redmond 저장소의 매장 관리자는 POS 터미널의 데이터만 보고자 합니다. 시스템의 모양은 다음과&rsquo; 같습니다.</p>  <p class=\"MsoNormal\"><a href=\"\"><img src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/4628.t4.GIF\" border=\"0\"></a></p>  <p class=\"MsoNormal\">이 라우팅을 설정하려면 다음과 같이 대시보드 구독을 만드는 방법을&rsquo; 간단하게 변경해야 합니다.</p>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: #2b91af;\">&nbsp;&nbsp;&nbsp; </span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">dataCollectionTopic.AddSubscription(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"Dashboard\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">, </span><span style=\"font-family: consolas; color: blue; font-size: 8pt;\">new</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span><span style=\"font-family: consolas; color: #2b91af; font-size: 8pt;\">SqlFilterExpression</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">(</span><span style=\"font-family: consolas; color: #a31515; font-size: 8pt;\">\"StoreName = 'Redmond'\"</span><span style=\"font-family: consolas; color: black; font-size: 8pt;\">);</span></pre>  </div>  <div class=\"WordSection1\">  <pre style=\"background: white;\"><span style=\"font-family: consolas; color: black; font-size: 8pt;\">&nbsp;</span></pre>  </div>  <p class=\"MsoNormal\">이 구독 필터를 사용하면 StoreName 속성이 Redmond로 설정된 메시지만 대시보드 구독의 가상 큐에 복사됩니다.</p>  <p class=\"MsoNormal\"><br>구독 필터링은 다른 방식으로도 폭넓게 활용할 수 있습니다. 애플리케이션에는 구독당 여러 필터 규칙이 있는 옵션이 있으며&rsquo;, 구독&rsquo; 가상 큐에 전달되는 메시지의 속성을 수정하는 기능도 있습니다. Well&rsquo;은 별도의 블로그 게시물에서 이러한 고급 항목을 다룹니다.</p>  <h2 class=\"WordSection1\"><br>요약</h2>  <p class=\"MsoNormal\">이 게시물이 새로운 Service Bus 5월 CTP에 도입되는 토픽 기반 게시/구독 기능을 시작하는 방법을 보여 주길 바랍니다.</p>  <p class=\"MsoNormal\"><br>&rsquo;큐 <a href=\"https://blogs.msdn.com/b/appfabric/archive/2011/05/17/an-introduction-to-service-bus-queues.aspx\">블로그 게시물</a> 소개에서 언급 한 큐를 사용하는 모든 이유가 토픽, 즉 다음과 같은 항목에도 적용된다는 점을 주목할 가치가 있습니다.</p>  <ul>  <li>  <div class=\"MsoNormal\">임시 분리 &ndash; 메시지 생산자와 소비자는 동시에 온라인 상태가 될 필요가 없습니다.</div>  </li>  <li>  <div class=\"MsoNormal\">부하의 부하 평준화 &ndash; 피크는 사용 중인 애플리케이션이 최대 부하가 아닌 평균 부하에 대해 프로비전될 수 있도록 토픽에 의해 다듬어집니다.</div>  </li>  <li>  <div class=\"MsoNormal\">큐와 마찬가지로 부하 분산 &ndash; 을&rsquo; 사용하면 여러 경쟁 소비자가 단일 구독에서 수신 대기하고 각 메시지가 소비자 중 한 명에게만 전달되어 부하 분산이 가능합니다.</div>  </li>  <li>  <div class=\"MsoNormal\">느슨한 결합&ndash;&rsquo;을 통해 기존 엔드포인트에 영향을 주지 않고 메시징 네트워크를 발전시킬 수 있습니다( 예: 새 소비자를 수용하기 위해 토픽에 구독 추가 또는 필터 변경).</div>  </li>  </ul>  <p class=\"MsoNormal\">Weve&rsquo;는 정말 그냥 여기에 표면을 긁어; well&rsquo;은 미래의 게시물에 더 깊이로 이동합니다.</p>  <p class=\"MsoNormal\"><br>마지막으로 CTP 릴리스의 주요 목표 중 하나는 서비스에 대한 피드백을 얻는 것입니다. 우리는&rsquo; 당신이 Service Bus 메시징 기능에 대해 어떻게 생각하는지 듣고 관심이 있습니다. 우리는&rsquo; 특히 API에 대한 의견을 얻기 위해 촉각을 곤두 세우고 있습니다. 따라서 제안, 비판, 칭찬 또는 질문이 있는 경우 알려 <a href=\"https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/\">https://social.msdn.microsoft.com/Forums/en-US/appfabricctp/</a>주세요. 피드백은 사용자와 사용자와 같은 다른 사용자를 위한 서비스를 개선하는 데 도움이 됩니다. </p>"
}