{
    "Slug": "10-ways-to-speed-up-your-wordpress-site-on-azure-websites",
    "Title": "Azure App Service에서 WordPress 사이트 속도를 높이는 방법",
    "Summary": "WordPress needs no introduction and is the fastest growing Open source CMS solution which allows you to quickly create dynamic website. The more plugins, content and customizations you add to your WordPress site, can start slowing your WordPress site. In this blog post we will showcase tips and tricks to speed up your WordPress site.",
    "Content": "<p>느린 페이지 로드 시간은 대상 사용자 대상에 영향을 줄 수 있으며 웹 사이트를 다시 방문하지 못하게 할 수 있습니다. 많은 검색 엔진은 결과 순위를 지정할 때 페이지 로드 시간뿐만 아니라 검색 엔진 결과에 대한 웹 사이트의 가시성에 영향을 미칠 수 있습니다. &nbsp;웹 애플리케이션 속도를 높이기 위해 수행해야 하는 단계를 논의하기 전에 대기 시간에 영향을 줄 수 있는 App Service의 몇 가지 주요 디자인 요소를 이해할 수 있습니다. 다음은 페이지 요청에 약간의 대기 시간을 추가할 수 있는 App Service의 두 가지 주요 디자인 요소입니다.</p>\n\n<ul>\n <li>Web Apps 원격 스토리지 디스크 사용&nbsp;</li>\n <li><a href=\"https://blogs.msdn.microsoft.com/appserviceteam/2016/08/18/announcing-mysql-in-app-preview-for-web-apps/\">MySQL 앱 내</a> 기능을 사용하지 않는 경우 Web Apps 사용되는 다른 MySQL 솔루션이 들어오는 reuqest를 처리하는 동일한 컴퓨터에 있지 않습니다.&nbsp;</li>\n</ul>\n\n<p>이러한 아키텍처 디자인 구성의 결과로 App Service 다양한 기능을 유연하게 사용할 수 있지만 요청당 스토리지 및/또는 MySQL 데이터베이스를 너무 많이 호출하는 경우 페이지 응답 시간에 대기 시간을 추가할 수 있습니다.</p>\n\n<p>애플리케이션 속도를 높이기 위해 아래에 언급된 이러한 빠르고 쉬운 단계를 구현하는 것이 좋습니다.</p>\n\n<h4>1. 웹 사이트와 데이터베이스는 동일한 데이터 센터에 있어야 합니다.</h4>\n\n<p>Azure Websites에서 WordPress 사이트를 실행할 때 데이터베이스와 웹 사이트가 동일한 데이터 센터에 있는지 확인합니다. 네트워크 대기 시간은 웹 사이트가 데이터베이스를 호출하기 위해 전 세계로 이동해야 하는 경우 사이트의 페이지 로드 시간을 늘릴 수 있습니다. 사이트 및 데이터베이스 구성 요소를 동일한 데이터 센터에 유지하면 네트워크 대기 시간이 줄어들고 웹 사이트의 페이지 로드 시간이 향상됩니다.</p>\n\n<p>프로덕션 웹앱에 ClearDB FREE MySQL 데이터베이스를 사용하지 않는 2.Do</p>\n\n<p>사이트를 개발하는 경우 웹 사이트 애플리케이션 갤러리에서 WordPress 설치와 함께 제공되는 무료 MYSQL 데이터베이스를 사용할 수 있습니다. 그러나 프로덕션 수준 사이트에는 적합하지 않습니다. FREE 데이터베이스에는 다음이 있습니다.</p>\n\n<ul>\n <li>데이터베이스의 최대 20MB 스토리지</li>\n <li>최대 4개의 연결(max_connections)을 허용합니다.</li>\n <li>낮은 성능</li>\n</ul>\n\n<p><a href=\"https://www.cleardb.com/store/azure\">여기에</a> 표시된 것처럼 ClearDB에서 지원하는 다양한 다른 옵션에서 예상 사용자 트래픽을 처리할 수 있는 데이터베이스에 사용하는 것이 좋습니다. 추가 비용 &nbsp;없이 데이터베이스를 찾고 있는 경우 <a href=\"https://azure.microsoft.com/en-us/blog/mysql-in-app-preview-app-service/\">앱 내 MySQL을</a> 고려할 수 있지만 <a href=\"https://blogs.msdn.microsoft.com/appserviceteam/2016/08/18/announcing-mysql-in-app-preview-for-web-apps/\">제한 사항이 있습니다</a>.&nbsp;</p>\n\n<p>3. 웹앱 요구 사항에 적합한 MySQL 데이터베이스 솔루션 사용&nbsp;</p>\n\n<p>이러한 솔루션 중 하나를 사용하여 조사하는 것은 데이터베이스에 적합합니다. 이러한 솔루션을 사용하여 애플리케이션을 조사하고 테스트하여 더 나은 성능을 제공하는 최상의 적합을 확인합니다.</p>\n\n<ul>\n <li><a href=\"https://blogs.msdn.microsoft.com/appserviceteam/2016/08/18/announcing-mysql-in-app-preview-for-web-apps/\" style=\"font-family: Tahoma, &quot;Helvetica Neue&quot;, Arial, Helvetica, sans-serif; font-size: 13px; font-style: normal; font-weight: normal;\">MySQL 앱</a>&nbsp; 내 애플리케이션을 호스트하는 동일한 컴퓨터 인스턴스에서 로컬 MySQL 데이터베이스를 제공하는&nbsp;</li>\n <li>ClearDBwhich&nbsp;에서 제공하는 MySQL 솔루션은 타사 서비스입니다.</li>\n <li><a href=\"https://github.com/Azure/azure-quickstart-templates/tree/master/mysql-replication\">가상 머신&nbsp;의 MySQL</a> 사용자 고유의 MySQL 서버를 호스팅하기 위한 IaaS 솔루션입니다.</li>\n</ul>\n\n<h4>4.&nbsp; 데이터베이스 최적화</h4>\n\n<p>WordPress는 모든 항목을 자동으로 저장하지만 단점은 데이터베이스가 정기적으로 수동으로 정리해야 하는 많은 사후 수정, 트랙백, 핑백, 메모 및 휴지통 항목으로 채워진다는 것입니다. 웹 사이트에서 사용 중인 데이터베이스 계획을 사용하면 데이터베이스에 할당된 스토리지 크기에 제한이 있으며 데이터베이스가 정기적으로 정리되지 않은 경우에도 이 제한에 도달할 수 있습니다. <a href=\"https://wordpress.org/plugins/wp-optimize/\">WP-Optimize</a> 는 데이터베이스를 정기적으로 정리하여 데이터베이스를 보다 효율적이고 유지해야 하는 항목으로만 채우도록 하는 훌륭한 플러그 인입니다. 데이터베이스를 최적화하고 정리하기 위해 수동 쿼리를 수행하지 않고도 많은 시간을 절약할 수 있습니다.</p>\n\n<p>5. 이미지 압축</p>\n\n<p>WordPress 사이트에 이미지가 많은 경우 이미지는 사이트의 대역폭 대부분을 차지할 수 있습니다. 이 경우 수행할 수 있는 몇 가지 작업은 다음과 같습니다.</p>\n\n<ul>\n <li><strong>모든 미디어 콘텐츠를 Azure Storage Blob에 저장:</strong> 웹 사이트에서 WordPress 사이트의 <strong><em>업로드</em></strong> 디렉터리 대신 Azure Storage에 새 콘텐츠를 저장할 수 있는 Azure Storage <a href=\"https://wordpress.org/plugins/windows-azure-storage/\">플러그 인</a>을 사용합니다. 사이트가 미디어 콘텐츠가 많은 경우 Azure Storage Azure CDN 사용하여 대역폭을 줄이는 데 크게 도움이 될 수 있습니다.</li>\n <li><strong>이미지 압축:</strong> <a href=\"https://wordpress.org/plugins/wp-smushit/\">WP Smush.it</a> 미디어 라이브러리에 업로드할 때 이미지를 자동으로 압축하는 훌륭한 플러그 인입니다. 압축하는 동안 데이터가 손실되지 않으며&rsquo; 이미지 품질에 차이가 없습니다. 미디어 라이브러리에 수천 개의 이미지가 저장되어 있는 경우 플러그 인을 통해 모두 실행하여 관리 가능한 크기로 압축할 수 있습니다.</li>\n</ul>\n\n<h4>6. HTTP 요청 줄이기</h4>\n\n<p>모든 웹 사이트는 JS, CSS 파일 또는 타사 서비스 또는 라이브러리에 여러 종속 요청을 수행합니다. 모든 JavaScript를 하나의 JavaScript 파일과 모든 CSS 파일을 하나의 CSS 파일에 배치하는 것이 훨씬 더 효율적이며 가능한 경우 종속 요청을 줄일 수 있습니다. CSS/JS 스크립트의 경우<a href=\"https://wordpress.org/plugins/bwp-minify/\"> Better WordPress Minify </a>와 같은 축소 플러그 인을 실행하여 모든 스타일시트와 JavaScript 파일을 하나로 결합하여 브라우저에서 수행해야 하는 요청 수를 줄일 수 있습니다. 사이트에서 타사 라이브러리&rsquo;를 사용하는 경우 로컬로 복사하여 대역폭을 줄이기 위해 라이브러리를 제공하는 서비스를 호출하는 것이 좋습니다.</p>\n\n<p>7.Azure CDN 사용</p>\n\n<p>정적 콘텐츠를 로드하는 데 시간이 오래 걸리는 결과로 속도가 느려질 수 있는 경우 <a href=\"https://www.iis.net/configreference/system.webserver/staticcontent\">IIS 정적 콘텐츠 캐싱</a> 또는 <a href=\"https://azure.microsoft.com/en-us/services/cdn/\">Azure CDN </a>사용합니다. &nbsp;</p>\n\n<h4>8. 테마의 사이트 속도가 느려지는지 진단</h4>\n\n<p>플러그 인과 같은 일부 테마는 제대로 작성되지 않을 수 있으며 사이트 속도가 느려질 수 있습니다. 테마가 긴 페이지 로드 시간을 담당하는지 테스트합니다. 이렇게 하려면 기본 WordPress 템플릿 TwentyFourteen으로 되돌리고 페이지 로드 시간이 훨씬 더 나은지 확인합니다. 그렇다면 테마가 원인일 수 있습니다. 이 문제를 해결하려면 다른 테마를 선택합니다. 테마를 이전 버전으로 되돌려 본 후 페이지 로드 시간에 차이가 없는 경우 이 블로그에 나열된 몇 가지 팁을 시도해 보세요.</p>\n\n<h4 id=\"plugin\">9. 플러그 인이 사이트 속도를 저하시키는지 진단</h4>\n\n<p>일부 플러그 인은 사이트 속도가 느려지는 원인이 될 수 있습니다. 특히 제대로 작성되거나 구성되지 않은 경우 그렇습니다. <a href=\"https://wordpress.org/plugins/p3-profiler/\">P3</a>과 같은 플러그 인을 사용하여 애플리케이션에서 사용하는 모든 플러그 인이 사이트 속도를 높이기 위해 필요한 조치를 취하기 위해 페이지 로드 시간에 미치는 영향을 이해합니다. 사용하지 않는 플러그 인이 있는 경우 WordPress가 활성화된 모든 플러그 인을 로드하려고 할 때 페이지 로드 시간을 추가할 수 있습니다. 사용되지 않는 모든 플러그 인을 정리하거나 제거합니다. 웹 사이트를 개선하고 사이트의 성능을 끌어낼 수 없는 플러그 인만 사용했습니다.</p>\n\n<p>App Service 플랫폼에서 가장 느린 Captcha 및 Visual Composer인 두 플러그 인을 확인했습니다. 이러한 플러그 인의 적절한 대체 항목을 찾습니다.&nbsp;</p>\n\n<h4>10. 사용하지&#39;경우 핑백 및 트랙백 끄기</h4>\n\n<p>WordPress는 Pingback 및 trackbacks 메서드를 사용하여 게시물이 연결되는 다른 블로그에 경고합니다.</p>\n\n<ul>\n <li>pingback은 pingback이&rsquo; 사용되는 다른 블로그 게시물에 연결할 때 생성되는 메모의 한 유형입니다.</li>\n <li>트랙백은 레거시 블로그 시스템에 연결되었음을&rsquo; 알리는 방법입니다.</li>\n</ul>\n\n<p>그들은 페이지 속도를 드레이닝 할 수 있으며, 당신이 정말로 그들을 필요로하지 않는&rsquo; 경우 일반적으로 더 나은 해제됩니다. 핑백 및 트랙백에 대해 자세히 알아보려면 <a href=\"https://make.wordpress.org/support/user-manual/building-your-wordpress-community/trackbacks-and-pingbacks/\">여기</a>를 클릭하세요.</p>\n\n<h4>11. 이미지 차원 지정</h4>\n\n<p>콘텐츠가 최종 사용자에게 표시되기 전에 브라우저는 이미지 주위의 콘텐츠 레이아웃을 식별해야 했습니다. 이미지의 크기를 모르는 브라우저는 이를 파악하고 더 오래 걸릴 수 있는 더 많은 작업을 수행합니다. 브라우저가 이 단계를 거치지 않아도 되는 이미지 차원을 지정하여 속도를 향상하는 것이 가장 좋습니다.</p>\n\n<h4>12. 캐싱</h4>\n\n<p>사이트에 사용자 트래픽이 급증하기 시작하면 트래픽 급증을 처리하기 위해 사이트에 대한 일종의 캐싱을 추가하는 것이 좋습니다. 두 방법 모두 정적 파일을 캐시하는 IIS 출력 캐싱 또는 WP-SuperCache 플러그 인을 사용할 수 있습니다.</p>\n\n<ul>\n <li><a href=\"https://www.iis.net/learn/manage/managing-performance-settings/walkthrough-iis-output-caching\">IIS 출력 캐싱</a> :&rsquo; 쉽게 구성하고 설정할 수 있습니다. 사이트 처리량이 크게 향상되지만 메모를 제출할 때 확인 메시지가 표시되지 않을 수 있습니다. IIS 출력 캐싱에 대해 자세히 알아보려면 여기를 클릭하세요.</li>\n <li><a href=\"https://wordpress.org/plugins/wp-super-cache/\">WP 슈퍼 캐시</a> : 사이트 처리량을 크게 향상시키고 주석 제출 및 기타 방문자&rsquo; 작업을 올바르게 처리합니다. IIS 출력 캐싱에 비해 설정 및 구성이 약간 더 복잡합니다. IIS의 슈퍼 캐시 구성에 대해 자세히 알아보려면 여기를 클릭하세요.</li>\n <li id=\"wincache\"><a href=\"https://php.net/manual/en/book.wincache.php\">Wincache</a> : 웹 애플리케이션의 wwwroot 아래에 .user.ini 만들어 PHP 설정을 추가합니다. &nbsp;.user.ini&nbsp;<a href=\"https://php.net/manual/en/wincache.configuration.php#ini.wincache.fcenabled\">wincache.fcenabled</a>&nbsp;= 1 및 <a href=\"https://php.net/manual/en/wincache.configuration.php#ini.wincache.reroute_enabled\">wincache.reroute_enabled</a>&nbsp;=1에서 wincache 설정을 사용하도록 설정</li>\n <li>Redis 캐시: 성능을 향상시키려면 <a href=\"https://wordpress.org/plugins/wp-redis/\">WP redis 플러그 인</a>을 사용하여 <a href=\"https://azure.microsoft.com/en-us/services/cache/\">Azure Redis Cache</a>를 WordPress와 통합할 수도 있습니다.&nbsp;</li>\n</ul>\n\n<p>이러한 모든 최적화는 몇 분 정도의 작업일 뿐이며 웹 사이트의 성능이 크게 향상되는 것을 볼 수 있도록 도와줍니다.</p>\n"
}