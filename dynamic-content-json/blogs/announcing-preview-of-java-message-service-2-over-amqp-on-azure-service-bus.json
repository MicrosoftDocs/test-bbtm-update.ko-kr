{
    "Slug": "announcing-preview-of-java-message-service-2-over-amqp-on-azure-service-bus",
    "Title": "Azure Service Bus AMQP를 통해 Java Message Service 2.0 미리 보기 발표",
    "Summary": "Azure Service Bus simplifies enterprise messaging scenarios by leveraging familiar queue and topic subscription semantics over the industry driven AMQP protocol.",
    "Content": "<div style=\"background:#eeeeee;border:1px solid #cccccc;padding:5px 10px;\">\n<p itemprop=\"name\"><strong>2021년 2월 22일에 업데이트됨</strong>: 이제 Azure Service Bus Premium JMS(Java Message Service) 2.0 API를 일반 공급합니다. 자세한 내용은 <a href=\"https://techcommunity.microsoft.com/t5/messaging-on-azure/announcing-general-availability-for-java-message-service-jms-2-0/ba-p/2073151\" target=\"_blank\">Azure Service Bus Premium JMS(Java Message Service) 2.0 API에 대한 postAnnouncing 일반 공급</a> 블로그&nbsp;를 참조하세요.&nbsp;</p>\n</div>\n\n<p><a href=\"https://azure.microsoft.com/en-us/services/service-bus/\" target=\"_blank\">Azure Service Bus</a> 업계 중심&nbsp;보다 친숙한 큐 및 토픽 구독 의미 체계를 활용하여 엔터프라이즈 메시징 시나리오를 간소화합니다. AMQP(고급 메시지 큐 프로토콜&nbsp;). 고객에게 Azure 서비스와의 긴밀한 통합을 통해 완전히 관리되는 PaaS(Platform as a Service) 제품을 제공하여 높은 처리량, 안정적인 대기 시간을 제공하는 동시에 최고 수준의 환경으로서 고가용성, 보안 디자인 및 확장성을 보장하는 메시징 브로커를 제공합니다. 대부분의 애플리케이션 스택 및 에코시스템에서 고객 워크로드에 대한 Azure Service Bus 제공하는 것을 목표로 합니다.</p>\n\n<p>이러한 비전에 따라 Azure Service Bus&rsquo; <strong>프리미엄 계층에서 AMQP를 통해 JMS(Java Message Service) 2.0에</strong> 대한 미리 보기 지원을 발표하게 되어 매우 기쁩니다. 이를 통해 고객은 Java 및 Spring 워크로드를 Azure로 원활하게 리프트 앤 시프트하는 동시에 클라우드에서 동급 최고의 엔터프라이즈 메시징으로 애플리케이션 스택을 현대화할 수 있습니다.</p>\n\n<p>엔터프라이즈 고객은 워크로드를 Azure로 전환하려고 할 때 클라우드 네이티브 Azure 제품을 활용하여 애플리케이션 스택을 현대화할 수 있습니다. 데이터 평면의 구성 요소, 데이터 저장 또는 이동에 더 적합하며, IaaS(Infrastructure as a Service) 호스팅 설정에서 클라우드 네이티브 PaaS 설정으로 이동하는 것이 좋습니다.</p>\n\n<p>데이터베이스 및 데이터 저장소를 사용하면 표준화된 API 및 프로토콜을 설정하여 원활한 마이그레이션을 위한 길을 열어주었으며, 애플리케이션은 이 표준화된 API의 실제 공급자 또는 구현에 독립적이며 무시할 수 있거나 구성만 변경하면 애플리케이션이 현재 온-프레미스 공급자에서 예상되는 동작으로 완전히 관리되는 AzureS&rsquo; PaaS 제품으로 이동할 수 있습니다.</p>\n\n<p>엔터프라이즈 메시징 에코시스템은 <strong>2011년 최근 AMQP 1.0 프로토콜</strong> 표준화까지 데이터 에코시스템에 비해 크게 조각화되어 프로토콜 구현으로 보장되는 모든 엔터프라이즈 메시지 브로커에서 일관된 동작을 유도했습니다. 그러나 여전히 표준화된 API 계약으로 이어지지 않아 엔터프라이즈 메시징 공간에서 조각화가 지속되었습니다.</p>\n\n<p><strong>Java </strong>Enterprise 커뮤니티(및 확장에 따라 <strong>Spring</strong>)는 엔터프라이즈 메시징 브로커와 상호 작용할 때 생산자 및 소비자 애플리케이션에서 사용하는 API를 표준화하기 위해 <strong>JMS 1.1 및 2.0(Java Message Service) 사양</strong>으로 몇 가지 진전을 이루었습니다. <strong>Apache QPID</strong> 커뮤니티는 AMQP를 통해 JMS API 사양을 구현하여 이를 발전시켰습니다. 독립 실행형이든 Spring JMS 패키지의 일부로든 QPID-JMS는 다양한 메시지 브로커로 작업하는 대부분의 엔터프라이즈 고객을 위한 사실상의 JMS 구현입니다.</p>\n\n<h2>AMQP를 통해 Azure Service Bus 있는 기존 애플리케이션 커넥트</h2>\n\n<p>이 미리 보기에서 지원되는 기능 목록(일반 공급으로 계획된 전체 패리티 포함)을 통해 Azure Service Bus 모든 Java Message Service API 계약을 지원하므로 고객은 애플리케이션을 다시 작성하지 않고도 기존 애플리케이션을 Azure로 가져올 수 있습니다. 다음은 현재 지원되는 JMS 기능 목록입니다.</p>\n\n<ul>\n    <li>큐.</li>\n    <li>항목.</li>\n    <li>임시 큐.</li>\n    <li>임시 항목입니다.</li>\n    <li>구독.\n    <ul>\n        <li>공유 지속성 구독.</li>\n        <li>공유된 비지속성 구독.</li>\n        <li>공유되지 않는 지속성 구독.</li>\n        <li>공유되지 않는 비지속성 구독.</li>\n    </ul>\n    </li>\n    <li>QueueBrowser.</li>\n    <li>TopicBrowser.</li>\n    <li>위의 모든 엔터티를 자동으로 만듭니다(아직 없는&rsquo; 경우).</li>\n    <li>메시지 선택기.</li>\n    <li>배달 지연이 있는 메시지 보내기(예약된 메시지)</li>\n</ul>\n\n<h2>온-프레미스 또는 IaaS 호스팅 JMS 공급자에서 Azure Service Bus 원활한 마이그레이션</h2>\n\n<p>기존 JMS 기반 애플리케이션을 Azure Service Bus 연결하려면 Azure Service Bus JMS <a href=\"https://search.maven.org/artifact/com.microsoft.azure/azure-servicebus-jms\" target=\"_blank\">Maven 패키지</a> 또는 <a href=\"https://docs.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-azure-service-bus\" target=\"_blank\">Spring 부팅용 Azure Service Bus 스타터를</a> 애플리케이션&rsquo; pom.xml 추가하고 Azure Service Bus 연결 문자열을 구성 매개 변수입니다.</p>\n\n<p>위에 표시된 것처럼 구성만 코드 변경하면 고객은 메시지 브로커에 관계 없이 비즈니스 논리를 유지하고 공급업체 잠금을 방지할 수 있습니다.<br>\n&nbsp;&nbsp; <a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/694d3869-01c4-4b64-bf74-46d43ba9fc12.png\"><img alt=\"migration from on-premises or IaaS hosted JMS provider to Azure Service Bus\" border=\"0\" height=\"319\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/31cf3408-2abd-4fba-809d-3b58016ba46d.png\" style=\"border: 0px currentcolor; margin-right: auto; margin-left: auto; display: block; background-image: none;\" title=\"\" width=\"1024\"></a></p>\n\n<h2>간단한 가격 책정, 고통 없는 배포 및 확장 가능한 자원</h2>\n\n<p>이제 고객은 Azure Service Bus JMS 지원을 활용하여 라이선스 조달, 자체 IaaS Compute에서 엔터프라이즈 메시징 브로커 관리, 메시징 단위당 고정 가격으로 비용 관리 간소화 및 워크로드의 가변성을 해결하기 위해 자동 강화 및 축소 프로비저닝을 활용하여 비용 관리를 간소화할 수 있습니다.</p>\n\n<h2>다른 Azure 제품과 통합하여 애플리케이션 스택을 더욱 현대화</h2>\n\n<p>다른 Azure 제품과 Azure Service Bus 통합을 활용하여 애플리케이션 스택을 현대화하고 간소화할 수도 있습니다. 이 작업을 수행하는 방법에 대한 몇 가지 방법은 다음과 같습니다.</p>\n\n<ol>\n    <li><strong>Azure Logic Apps</strong>: Azure Service Bus Azure Logic Apps 커넥터를 활용하여 다양한 중요한 비즈니스 워크플로를 간단한 낮은 코드 종량제 서버리스 제품으로 대체합니다.</li>\n    <li><strong>Azure Functions</strong>: Azure Service Bus 대한 Azure Functions 트리거를 활용하여 사용자 지정 애플리케이션을 간단한 종량제 서버리스 PaaS 제품으로 대체합니다.</li>\n    <li><strong>Azure Monitor 및 경고</strong>: Azure 모니터 및 경고를 활용하여 Azure Service Bus 네임스페이스, 큐, 토픽 및 구독 수준 메트릭을 확인합니다.</li>\n    <li><strong>Azure KeyVault</strong>: Azure KeyVault와의 통합을 활용하여 고객 관리형 키를 사용하여 네임스페이스의 데이터를 암호화합니다.</li>\n    <li><strong>가상 네트워크 및 프라이빗 엔드포인트</strong>: 가상 네트워크 서비스 엔드포인트를 사용하여 Azure Service Bus 대한 액세스를 보호합니다. 프라이빗 엔드포인트를 사용하여 프라이빗 네트워크에서 호스트되는 주소를 통해 클라우드 호스팅 서비스로 커넥트.</li>\n</ol>\n\n<h2>오늘 시작</h2>\n\n<p><a href=\"https://aka.ms/jmsGettingStarted\" target=\"_blank\">현재 시작 JMS 기능을 사용하여 Service Bus 네임스페이스를 프로비</a>전하고 <a href=\"https://aka.ms/jmsActiveMQToServiceBus\" target=\"_blank\">기존 Java 및 Spring 애플리케이션을 Apache ActiveMQ에서 Service Bus 마이그레이션합니다</a>.</p>\n"
}