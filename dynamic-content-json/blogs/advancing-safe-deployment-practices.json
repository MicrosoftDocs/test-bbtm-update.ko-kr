{
    "Slug": "advancing-safe-deployment-practices",
    "Title": "안전한 배포 방법 발전",
    "Summary": "When running IT systems on-premises, you might try to ensure perfect availability by having gold-plated hardware, locking up the server room and throwing away the key. Software wise, IT would traditionally prevent as much change as possible – avoiding applying updates to the OS and/or applications because they’re too critical, and pushing back on change requests from users.",
    "Content": "<p>&quot;작지만 일반적인 하드웨어 오류 이외에 Azure에서 표시되는 서비스 안정성 문제의 주요 원인은 무엇인가요? 변경. 클라우드&rsquo;의 가치 제안 중 하나는 보안 및 안정성 향상뿐만 아니라 새로운 기능과 기능을 지속적으로 개선하고 제공한다는 것입니다. 그러나 플랫폼이 지속적으로 진화하고 있기 때문에 변화는 불가피합니다. 이렇게 하려면 박스 제품 또는 기존 IT 접근 방식 &mdash; 과는 매우 다른 방식으로 품질과 안정성을 보장해야 하며, 이는 변경 내용을 방지하기 위해 오랜 시간 동안, 그리고 일단 배포된 후에 테스트하는 것입니다. 이 게시물은 Azure&#39;안정성이 가장 중요한 워크로드를 지원하도록 하기 위해&#39;작업에 대한 인사이트를 공유하는 <a href=\"https://azure.microsoft.com/en-us/blog/advancing-microsoft-azure-reliability/\" target=\"_blank\">7월 블로그 게시물</a>에서 시작한 <a href=\"https://azure.microsoft.com/en-us/blog/tag/advancing-reliability/\" target=\"_blank\">시리즈의</a> 다섯 번째 게시물입니다. 오늘 우리는 모든 코드 및 구성 업데이트가 고객에게 도달하기 전에 회귀 및 버그를 catch하기 위해 잘 정의된 단계를 거치거나 초기 단계를 지나도록 하는 경우 가능한 가장 적은 수에 영향을 미치도록 변경 자동화를 관리하는 <strong>안전한 배포 사례를</strong> 설명할&#39;있습니다. 컴퓨팅 엔지니어링 팀의 <strong>크리스티나 델 아모 카사도(Cristina del Amo Casado</strong>)는 안전한 배포 이니셔티브를 주도하면서 이 게시물을 작성했습니다.&rdquo; - Mark Russinovich, CTO, Azure</p>\n\n<hr>\n<p>&nbsp;</p>\n\n<p>온-프레미스에서 IT 시스템을 실행하는 경우 금도금 하드웨어를 사용하고 서버 공간을 잠그고 키를 버리면 완벽한 가용성을 보장하려고 할 수 있습니다. 소프트웨어 측면에서 IT는 일반적으로 너무 중요하기 때문에&rsquo; 운영 체제 또는 애플리케이션에 업데이트를 적용하고 사용자의 변경 요청을 다시 푸시하지 않도록 최대한 &mdash; 많은 변경을 방지합니다. 모든 사람이 시스템을 주의 깊게 밟으면 아무도 &lsquo;숨을 쉬지 않습니다!&rsquo; 접근 방식은 지속적인 시스템 개선을 저해하고 때로는 정기적으로 패치하기에 너무 중요하다고 간주되는 시스템의 보안을 손상시킬 수도 있습니다. 위에서 설명한 대로 이 방법은 Azure와 같은 하이퍼스케일 퍼블릭 클라우드에서 변경 및 릴리스 관리에 작동하지&#39;. 서비스 업데이트 및 개선 사항을 배포해야 할 필요성과 보안 취약성에 직면하여 신속하게 조치를 취해야 한다는 우리의 약속을 감안할 때 변경은 불가피하고 유익합니다. 단순히 변경을 피할 수&rsquo; 없으므로 Microsoft, 고객 및 파트너는 변경이 예상된다는 것을 인정해야 하며 이를 계획합니다. Microsoft는 업데이트를 가능한 한 투명하게 만들기 위해 계속 노력하고 있으며 아래 설명된 대로 변경 내용을 안전하게 배포할 것입니다. 하지만 고객과 파트너는 고가용성을 위해 설계하고 플랫폼이 보낸 유지 관리 이벤트를 사용하여 필요에 따라 조정해야 합니다. 마지막으로, 경우에 따라 고객은 <a href=\"https://www.aka.ms/advancingreliability/4\" target=\"_blank\">조직에 적합한 시간에</a> 플랫폼 업데이트를 시작하는 것을 제어할 수 있습니다.</p>\n\n<h2>안전하게 변경</h2>\n\n<p>Azure 데이터 센터 전체에 릴리스를 배포하는 방법을 고려할 때 프로세스를 구성하는 주요 프레미스 중 하나는 배포되는 변경으로 인해 알 수 없는 문제가 발생할 수 있다고 가정하고, 영향을 최소화하면서 해당 문제를 검색할 수 있도록 계획하고, 문제가 노출될 때 완화 작업을 자동화하는 것입니다. 개발자는 완전히 무해한 것으로 판단하여 서비스에 영향을 주지&#39;보장하지만, 시스템에 대한 가장 작은 변경 내용조차도 시스템의 안정성에 위험을 초래하므로 &lsquo;여기서 변경된 내용은&rsquo; 모든 종류의 새 릴리스를 참조하고 코드 변경 및 구성 변경 내용을 모두 다룹니다. 대부분의 경우 구성 변경은 시스템 동작에 덜 큰 영향을 주지만, 코드 변경과 마찬가지로 구성 변경은 대기 코드 결함 또는 새 코드 경로를 활성화할 위험이 없습니다.</p>\n\n<p>Azure의 Teams 변경과 관련된 영향을 방지하거나 최소한 최소화하기 위해 유사한 프로세스를 따릅니다. 첫째, 테스트 및 통합 유효성 검사를 통해 배포가 시작되기 전에 변경 내용이 품질 표시줄을 충족하는지 확인합니다. 그런 다음 로그오프 후 점진적인 방식으로 변경 내용을 롤아웃하고 상태 신호를 지속적으로 측정하므로 테스트 중에 표시되지 않은 변경과 관련된 예기치 않은 영향이 있으면 상대적 격리에서 감지할 수 있습니다. 문제가 발생하는 변경이 광범위한 프로덕션으로 전환되는 것을 원하지 않으므로 가능한 한 이를 피할 수 있도록 조치를 취합니다. 점진적 배포는 광범위한 영향을 주기 전에 더 작은 규모(또는 더 &lsquo;작은 폭발 반경&rsquo;)에서 문제를 감지할 수 있는 좋은 기회를 제공합니다.</p>\n\n<p>Azure 접근 방식은 모든 코드 및 구성 변경이 특정 단계의 수명 주기를 거치도록 하는 것을 목표로 하는 <strong>SDP(안전한 배포 사례) 프레임워크</strong>를 통해 위의 높은 수준의 프로세스에 맞춰 자동화를 변경합니다. 이 프레임워크는 성능 저하가 감지될 경우 자동 작업 및 경고를 트리거하기 위해 상태 메트릭을 모니터링합니다. 다음 다이어그램에 표시된 이러한 단계는 소프트웨어 변경이 기존 Azure 워크로드에 부정적인 영향을 미칠 위험을 줄입니다.</p>\n\n<p><a href=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/dfe1ed0f-f1f3-45c7-bd0d-9cb934b15eed.png\"><img alt=\"A diagram showing how the cost and impact of failures increases throughout the production rollout pipeline, and is minimized by going through rounds of development and testing, quality gates, and integration.\" border=\"0\" height=\"463\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/bf679ad2-9c14-484f-a30c-6ac44391150e.png\" style=\"border: 0px currentcolor; border-image: none; margin-right: auto; margin-left: auto; float: none; display: block; background-image: none;\" title=\"프로덕션 출시 파이프라인 전체에서 오류의 비용과 영향이 증가하고 개발 및 테스트, 품질 게이트 및 통합을 통해 최소화되는 방법을 보여 주는 다이어그램.\" width=\"1024\"></a></p>\n\n<p>이는 개발자가 코드를 수정하고, 자체 시스템에서 테스트하고, 스테이징 환경으로 푸시하는 것부터 시작하여 배포 파이프라인의 간소화를 보여줍니다. 일반적으로 이 <strong>통합 환경</strong> 은 특정 구성 요소의 상호 작용을 함께 테스트해야 하는 Azure 서비스의 하위 집합에 대한 팀 전용입니다. 예를 들어 컴퓨팅, 네트워킹 및 스토리지와 같은 핵심 인프라 팀은 통합 환경을 공유합니다. 각 팀은 해당 환경에서 소프트웨어에 대한 가상 테스트 및 스트레스 테스트를 실행하고, 안정될 때까지 반복한 다음, 품질 결과에 따라 지정된 릴리스, 기능 또는 변경이 프로덕션에 대해 준비되었음을 나타내면 카나리아 지역에 변경 내용을 배포합니다.</p>\n\n<h2>카나리아 지역</h2>\n\n<p>공개적으로 <strong>카나리아 지역을</strong> 조기 업데이트 액세스 프로그램&rdquo; 지역이라고 &ldquo;하며&rsquo;, 대부분의 Azure 서비스를 통해 효과적으로 본격적인 Azure 지역을 제공합니다. 카나리아 지역 중 하나는 <a href=\"https://docs.microsoft.com/en-us/azure/availability-zones/az-overview\" target=\"_blank\">가용성 영역</a> 사용하여 빌드되고 다른 하나는 없는 지역으로 빌드되며, 두 지역 모두 데이터 지역 복제 기능의 유효성을 검사할 수 있도록 <a href=\"https://docs.microsoft.com/en-us/azure/best-practices-availability-paired-regions\" target=\"_blank\">지역 쌍</a>을 형성합니다. 이러한 카나리아 지역은 전체 프로덕션 수준, 종단 간 유효성 검사 및 대규모 시나리오 검사에 사용됩니다. 카나리아 지역에 공용 Azure 지역을 대표하는 사용 패턴이 있는지 확인하기 위해 일부 자사 서비스(내부 고객용), 여러 타사 서비스 및 프로그램에 초대하는 소규모 외부 고객 집합을 호스팅하여 카나리아 지역에 적용되는 시나리오의 풍요로움과 복잡성을 높일 수 있습니다. 또한 Azure 팀은 이러한 환경에서 스트레스 및 합성 테스트를 실행하고, 지역 또는 가용성 영역 수준에서 오류 주입 또는 재해 복구 훈련을 주기적으로 실행하여 실제 환경에서 발생하는 경우 실행될 검색 및 복구 워크플로를 연습합니다. 이와 별도로 이러한 연습은 변경 내용이 Azure의 광범위한 고객 워크로드에 연결되기 전에 소프트웨어가 최고 품질인지 확인하려고 시도합니다.</p>\n\n<h2>파일럿 단계</h2>\n\n<p>카나리아의 결과가 알려진 문제가 감지되지 않았음을 나타내면 <strong>파일럿 단계</strong>부터 시작하여 프로덕션에 대한 점진적 배포를 시작할 수 있습니다. 이 단계를 사용하면 비교적 작은 규모로 변경 작업을 시도할 수 있지만 하드웨어 및 구성의 다양성이 더 다양합니다. 이 단계는 하드웨어 종속성이 있는 핵심 스토리지 서비스 및 핵심 컴퓨팅 인프라 서비스와 같은 소프트웨어에 특히 중요합니다. 예를 들어 Azure는 GPU&#39;, 대형 메모리 서버, 상용 서버, 여러 세대 및 프로세서 유형, Infiniband 등을 포함하는 서버를 제공하므로 변경 내용을 플라이팅할 수 있으며 소규모 테스트 중에 표시되지 않는 문제를 검색할 수 있습니다. 그 과정에서 각 단계에서 철저한 상태 모니터링 및 확장된 &#39;베이킹 시간을 통해 잠재적인 오류 패턴이 노출될&#39; 있으며, 변경에 대한 신뢰도를 높이는 동시에 고객의 전반적인 위험을 크게 줄일 수 있습니다.</p>\n\n<p>파일럿 단계의 결과가 양선이라고 판단되면 배포 시스템은 변경 내용이 <strong>점점 더 많은 지역으로</strong> 점진적으로 진행되도록 하여 진행합니다. 더 넓은 Azure 지역에 배포하는 동안 배포 시스템은 가용성 영역(변경은 지역 내의 하나의 가용성 영역으로만 변경됨) 및 지역 페어링(모든 지역이 지역별 스토리지를 위해 두 번째 지역&lsquo;과 쌍으로 연결&rsquo;됨)을 준수하기 위해 노력하므로 변경 내용이 먼저 지역에 배포된 다음 해당 쌍으로 배포됩니다. 일반적으로 변경 내용은 음수 신호가 표시되지 않는 한 배포됩니다.</p>\n\n<h2>작동 중인 배포 사례 금고</h2>\n\n<p>Azure의 규모를 전역적으로 고려할 때 전체 롤아웃 프로세스는 정책에 의해 완전히 자동화되고 구동됩니다. 이러한 선언적 정책 및 프로세스(개발자가 아님)는 소프트웨어를 출시할 수 있는 빈도를 결정합니다. 정책은 중앙에서 정의되며 소프트웨어 품질을 모니터링하기 위한 필수 상태 신호와 위에 설명된 여러 단계 간의 필수 &lsquo;베이킹 시간을&rsquo; 포함합니다. 각 단계에서 서로 다른 기간 동안 소프트웨어를 앉아서 베이킹하는 이유는 해당 서비스의 전체 부하 스펙트럼에 변화를 노출하기 위해서입니다. 예를 들어 다양한 조직 사용자가 아침에 온라인 상태가 되고, 게임 고객이 저녁에 온라인 상태가 될 수 있으며, 고객의 새 VM(가상 머신) 또는 리소스 생성이 장기간에 걸쳐 발생할 수 있습니다.</p>\n\n<p>다른 클러스터, 지역 또는 서비스 링에 점진적으로 배포하는 접근 방식을 취할 수 없는 글로벌 서비스는 SDP에 맞춰 점진적 롤아웃 버전을 연습합니다. 이러한 서비스는 여러 단계에서 서비스 인스턴스를 업데이트하는 모델을 따르며, Azure Traffic Manager 통해 업데이트된 인스턴스에 대한 트래픽을 점진적으로 완화합니다. 신호가 양수이면 업데이트된 인스턴스에 시간이 지남에 따라 더 많은 트래픽이 이탈되어 신뢰도가 높아지고 시간이 지남에 따라 더 많은 서비스 인스턴스에 배포가 적용되지 않도록 차단이 해제됩니다.</p>\n\n<p>물론 Azure 플랫폼은 매우 중요한 취약성을 완화하는 데 필요한 경우 모든 Azure에 동시에 변경 사항을 배포할 수 있습니다. 안전한 배포 정책은 필수이지만 특정 비상 조건이 충족되면 이를 가속화하도록 선택할 수 있습니다. 예를 들어 평소보다 훨씬 빠르게 이동해야 하는 보안 업데이트를 릴리스하거나 이미 고객에게 매우 영향을 미치는 문제를&rsquo; 완화하는 수정으로 회귀 위험이 극복되는 수정을 위해 릴리스합니다. 이러한 예외는 매우 드물며, 일반적으로 배포 도구 및 프로세스는 신호를 빌드할 기회를 최대화하고 시나리오 및 워크플로를 대규모로 실행하여 가능한 가장 작은 영향 규모로 문제를 검색할 수 있는 기회를 만들기 위해 의도적으로 속도를 희생합니다.</p>\n\n<h2>지속적인 개선 사항</h2>\n\n<p>안전한 배포 사례 및 배포 도구는 이전 중단 및 유지 관리 이벤트의 학습과 함께 훨씬 더 작은 규모로 문제를 검색하는 목표에 따라 계속 진화하고 있습니다. 예를 들어, 상태 신호를 지속적으로 보강하는 것의 중요성과 기계 학습을 사용하여 오류를 더 잘 상호 연결하고 변칙을 감지하는 방법에 대해 알아보았습니다. 또한 더 작은 위험으로 더 다양한 하드웨어를 커버할 수 있도록 파일럿 및 비행 방식을 지속적으로 개선하고 있습니다. 잠재적인 문제의 징후가 표시될 경우 변경 내용을 자동으로 롤백하는 기능을 계속 개선하고 있습니다. 또한 일반적으로 변경의 영향을 줄이거나 제거하는 플랫폼 기능에 계속 투자하고 있습니다.</p>\n\n<p>작년에 출시된 1,000개가 넘는 새로운 기능을 통해 Azure의 변화 속도는 압도적일 수 있다는 것을 알고 있습니다. Mark가 언급했듯이 클라우드 서비스의 민첩성과 지속적인 개선은 클라우드 &ndash; 변경의 주요 가치 제안 중 하나이며 버그가 아닌 기능입니다. 최신 릴리스에 대해 알아보려면 고객과 파트너가 <a href=\"https://www.Azure.com/Updates\" target=\"_blank\">Azure.com/Updates</a> 파악하는 것이 좋습니다. 개발 중인 혁신의 로드맵을 포함하여 최근 및 향후 Azure 제품 업데이트에 대해 알아볼 수 있는 단일 위치로 유지하기 위해 노력하고 있습니다. 이러한 다양한 서비스를 사용할 수 있는 지역이나 서비스를 사용할 수 있는 지역을 이해하려면 <a href=\"https://www.Azure.com/ProductsbyRegion\" target=\"_blank\">Azure.com/ProductsbyRegion 도구를 사용할</a> 수도 있습니다.</p>\n"
}