{
    "Slug": "announcing-the-0-3-0-beta-preview-of-microsoft-azure-webjobs-sdk",
    "Title": "Microsoft Azure WebJobs SDK의 0.3.0 베타 미리 보기 발표",
    "Summary": "This preview of WebJobs SDK adds support for Service Bus and many more new features.",
    "Content": "<a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">여기에서</a> Scott Hanselman이 소개한 Microsoft Azure WebJobs SDK의 또 다른 미리 보기를 릴리스합니다. 이전 미리 보기에 대해 자세히 알아보려면 이 <a href=\"https://blogs.msdn.com/b/webdev/archive/2014/03/27/announcing-0-2-0-alpha2-preview-of-windows-azure-webjobs-sdk.aspx\">게시물을</a> 읽어보세요.\n\n이 릴리스에는 alpha2와 동일한 일반 기능 집합과 새로운 기능이 있습니다.\n<h3>이 릴리스 다운로드</h3>\nNuGet 갤러리에서 WebJobs SDK를 다운로드할 수 있습니다. 다음과 같이 NuGet 패키지 관리자 콘솔을 사용하여 NuGet 갤러리를 통해 이러한 패키지를 설치하거나 업데이트할 수 있습니다.\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs –Pre</pre>\nMicrosoft Azure Service Bus 트리거를 사용하려면 다음 패키지를 설치합니다.\n<pre class=\"prettyprint\">Install-Package Microsoft.Azure.Jobs.ServiceBus -Pre</pre>\n패키지 이름이 alpha2에서 변경되었으므로 alpha2 – 베타에서 업데이트하는 데 도움이 되는 리디렉션 패키지를 업로드했습니다.\n<pre class=\"prettyprint\">Update-Package Microsoft.WindowsAzure.Jobs –Pre\nUpdate-Package Microsoft.WindowsAzure.Jobs.Host –Pre</pre>\n&nbsp;\n<h3>WebJobs SDK란?</h3>\nMicrosoft Azure 웹 사이트의 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a> 기능을 사용하면 웹 사이트에서 서비스 또는 백그라운드 작업과 같은 프로그램을 쉽게 실행할 수 있습니다. .exe, <i>.cmd</i><i> 또는 </i> <i>.bat</i>파일과 같은 실행 파일을 업로드하고 웹 사이트에 실행할 수 있습니다. 트리거되거나 연속적인 WebJobs로 실행할 수 있습니다. WebJobs SDK가 없으면 백그라운드 작업을 연결하고 실행하려면 복잡한 프로그래밍이 많이 필요합니다. SDK는 일반적인 작업을 완료하기 위해 최소한의 코드를 작성할 수 있는 프레임워크를 제공합니다.\n\nWebJobs SDK에는 Service Bus 뿐만 아니라 Microsoft Azure Storage Blob, 큐 및 테이블과 함께 작동하는 바인딩 및 트리거 시스템이 있습니다. 바인딩 시스템을 사용하면 Microsoft Azure Storage 개체를 읽거나 쓰는 코드를 쉽게 작성할 수 있습니다. 트리거 시스템은 큐 또는 Blob에서 새 데이터를 받을 때마다 코드에서 함수를 호출합니다.\n<h4>WebJobs SDK에 대한 시나리오</h4>\n다음은 Azure WebJobs SDK로 보다 쉽게 처리할 수 있는 일반적인 시나리오입니다.\n<ul>\n<ul>\n <li>\n<div><b>이미지 처리</b> 또는 기타 CPU 집약적 작업.</div></li>\n <li>\n<div>백그라운드 스레드에서 실행하려는 기타 <b>장기 실행 작업</b> (예: 전자 메일 보내기) 지금까지는 앱이 일정 시간 동안 유휴 상태인 경우 IIS가 앱을 재활용하므로 ASP.NET 이 작업을 수행할 수 없었습니다. 이제 Azure 웹 사이트에서 <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> 을 사용하면 앱이 유휴 상태일 때 웹 사이트가 재활용되지 않도록 할 수 있습니다. <a href=\"https://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx\">AlwaysOn</a> 은 사이트가 절전 모드로 이동하지 않도록 합니다. 즉, WebJobs 및 WebJobs SDK를 사용하여 장기 실행 작업 또는 서비스를 실행할 수 있습니다.</div></li>\n <li>\n<div><b>큐 처리</b>. 웹 프런트 엔드가 백 엔드 서비스와 통신하는 일반적인 방법은 큐를 사용하는 것입니다. 일반적인 생산자인 소비자 패턴입니다.</div></li>\n <li>\n<div><b>RSS 집계</b>. RSS 피드 목록을 유지 관리하는 사이트가 있는 경우 백그라운드 프로세스에서 피드의 모든 문서를 풀할 수 있습니다.</div></li>\n <li>\n<div><b>로그 파일</b> 집계 또는 정리와 같은 파일 유지 관리</div></li>\n</ul>\n</ul>\n<h4>SDK의 목표</h4>\n<ul>\n <li>백그라운드 처리 작업을 수행할 때 Azure Storage 더 쉽게 사용할 수 있는 방법을 제공합니다.</li>\n <li>SDK를 사용하면 애플리케이션 내에서 Azure Storage 더 쉽게 사용할 수 있습니다. 스토리지에서 읽거나 쓰기 위해 코드 작성을 처리할 필요가 없습니다.</li>\n <li>개발자가 진단 및 로깅 코드를 작성하지 않고도 풍부한 진단 및 모니터링 환경을 제공합니다.</li>\n</ul>\n<h3>이 미리 보기의 업데이트</h3>\n<h4>Microsoft Azure Service Bus 대한 지원 추가</h4>\nWebJobs SDK는 이제 Microsoft Azure Service Bus 지원합니다. 이전 미리 보기에서는 Azure 큐에서 함수를 트리거할 수 있었습니다. 이제 Azure Service Bus 큐 및 토픽을 사용할 수 있습니다.\n\n예를 들어 다음 코드에서는 WebJobs SDK를 사용하여 Service Bus 큐의 새 메시지에 대한 함수를 트리거하고 다른 Service Bus 메시지를 쓰는 방법을 보여 줍니다. QueueYou는 대시보드에서 이러한 함수를 모니터링하고 실행하고, 중단하고, Azure Queues에 대해 했던 것처럼 Service Bus 대한 모든 대시보드 기능을 가져올 수 있습니다.\n\nServiceBus 연결을 가리키는 \"AzureJobsServiceBus\"라는 connectionString을 지정할 수 있습니다. Service Bus 큐 및 토픽 사용에 대한 자세한 샘플은 <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">샘플</a> 사이트를 참조하세요.\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void TriggerOnSBQueue(\n        [ServiceBusTrigger(\"inputqueue\")] string inputText,\n        [ServiceBus(\"outputqueue\")] out string outputText)\n    {\n        outputText = inputText;\n    }\n}</pre>\n&nbsp;\n<h4>트리거 및 바인딩 사용이 더 명시적이 되었습니다.</h4>\nSDK를 사용하면 함수를 트리거하고 메시지를 지정된 형식 또는 String, TextReader, TextWriter 등의 CLR 형식에 바인딩할 수 있습니다. 이전 미리 보기에서는 함수 매개 변수에 사용되는 특성에 트리거 및 바인딩 사용이 지정되었습니다. 특성 사용에 대한 규칙은 명확하지 않았으며 혼동을 피하기 위해 트리거 및 바인딩을 보다 명시적으로 만들기 위해 특성의 이름과 사용을 변경했습니다.\n\n다음은 개략적인 변경 내용입니다.\n<ul>\n <li>\n<div>트리거된 QueueInput은 이제 QueueTrigger이고 QueueOutput은 이제 큐입니다.</div></li>\n</ul>\n<strong>전에</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueInput(\"input\")] string message, \n    [QueueOutput(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<strong>후</strong>\n<pre class=\"prettyprint\">public static void OnQueue(\n    [QueueTrigger(\"input\")] string message, \n    [Queue(\"output\")] out string newMessage)\n{     \n    newMessage = message;\n}</pre>\n<ul>\n <li>\n<div>트리거된 BlobInput은 이제 BlobTrigger이지만 BlobInput 또는 BlobOutput은 Blob입니다.</div></li>\n</ul>\n<strong>전에</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobInput(\"input/{name}\")] TextReader input, \n    [BlobOutput(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<strong>후</strong>\n<pre class=\"prettyprint\">public static void BlobToBlob(\n    [BlobTrigger(\"input/{name}\")] TextReader input, \n    [Blob(\"output/{name}\")] out string output)\n{\n    output = input.ReadToEnd();\n}</pre>\n<h4>브랜딩 변경 내용</h4>\nMicrosoft Azure <a href=\"https://azure.microsoft.com/blog/2014/03/25/upcoming-name-change-for-windows-azure/\">대한 브랜딩 변경</a>에 따라 패키지 이름, 어셈블리 이름 및 네임스페이스를 이 브랜딩과 일치하도록 변경합니다. 다음은 앱에 필요한 변경 내용입니다.\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>이전</b></td>\n<td valign=\"top\" width=\"177\"><b>이후</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs.Host</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>향상된 함수 검색</h4>\nWebJobs SDK에서 함수를 찾는 방법을 사용자 지정할 수 있도록 ITypeLocator 및 INameResolver를 추가했습니다. 이렇게 하면 다음과 같은 시나리오가 가능합니다.\n<ul>\n <li>\n<div>QueueName이 명시적이지 않은 함수를 정의할 수 있습니다. 구성 원본에서 큐 이름을 읽고 런타임에 이 값을 지정할 수 있습니다.</div></li>\n <li>\n<div>함수 검색을 특정 클래스 또는 어셈블리로 제한합니다.</div></li>\n <li>\n<div>인덱싱 시 동적 함수: 런타임에 함수 서명을 정의할 수 있습니다.</div></li>\n</ul>\n<h4>큐 메시지의 큐에서 제거 횟수에 대한 액세스</h4>\nSDK를 사용하면 Azure 큐를 더 쉽게 사용할 수 있고 대부분의 일반적인 사용 패턴을 다루지만 하위 수준 큐에 액세스하려는 경우가 있습니다. 이제 SDK를 사용하면 고급 시나리오에 필요할 수 있는 일반적으로 사용되는 메시지 속성 중 일부에 액세스할 수 있습니다. 예를 들어 이 샘플에서는 큐 메시지의 dequeueCount에 액세스할 수 있습니다. 이 지원 외에도 SDK를 사용하면 Azure Storage SDK 큐 형식에 바인딩할 수 있습니다.\n<pre class=\"prettyprint\">public static void PropertyBinding(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    int dequeueCount)\n{\n   // Do something with the dequeueCount            \n}</pre>\n<h4>취소 토큰에 대한 지원이 추가됨</h4>\n함수는 함수에서 CancellationToken 매개 변수를 사용할 수 있으며 함수는 호스트에서 취소 요청을 받을 수 있습니다.\n<h4>WebJobs 종료 알림에 대한 지원이 추가됨</h4>\nWebJobs는 정상적인 종료에 대한 지원을 추가했습니다. 이렇게 하면 WebJob이 중지되기 전에 WebJob에서 함수 실행을 완료할 수 있습니다. SDK는 WebJob이 종료될 때 알림으로써 WebJobs에서 이 정상적인 종료를 지원합니다. 이 정보는 CancellationToken을 사용하여 함수로 전달됩니다. 다음 함수는 WebJob이 중지될 때 취소 요청을 수신하는 CancellationToken을 사용합니다.\n<pre class=\"prettyprint\">public static void UseCancellationToken(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log,\n    CancellationToken token)\n{\n      // This is a long running function which can be cancelled  \n      while (!token.IsCancellationRequested)\n      {\n          Thread.Sleep(2000);\n          log.WriteLine(\"Not cancelled\");\n      }\n      log.WriteLine(\"cancelled\");\n}</pre>\n&nbsp;\n<h4>이제 호스트에서 트리거가 지원됩니다. Call()</h4>\n이제 호스트를 통해 호출되는 함수에 트리거를 사용할 수 있습니다. Call()\n<pre class=\"prettyprint\">class Program\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.Call(typeof(Program).GetMethod(\"TriggerOnQueue\"),\n            new { inputText=\"input\" });\n    }\n\n    public static void TriggerOnQueue(\n    [QueueTrigger(\"inputqueue\")] string inputText)\n    {\n        //Process Queue message\n    }\n}</pre>\n&nbsp;\n<h4>JobHost 구성</h4>\nAzure Storage 및 Service Bus 계정의 기본 connectionString 이름을 재정의하려는 경우 JobHostConfiguration을 통해 수행할 수 있습니다.\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    var _storageConn = ConfigurationManager\n        .ConnectionStrings[\"MyStorageConnection\"].ConnectionString;\n\n    var _servicesBusConn = ConfigurationManager\n        .ConnectionStrings[\"MyServiceBusConnection\"].ConnectionString;\n\n    JobHostConfiguration config = new JobHostConfiguration(_storageConn)\n        {\n            ServiceBusConnectionString = _servicesBusConn\n        };\n\n    JobHost host = new JobHost(config);\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>업데이트된 Azure Storage 종속성</h4>\nWebJobs SDK는 <a href=\"https://www.nuget.org/packages/WindowsAzure.Storage\">Azure Storage 4.0.1 패키지</a>에 따라 달라집니다.\n<h3>SDK의 기존 기능</h3>\n다음은 alpha2에서 지원되고 이 릴리스에서 계속 지원되는 기능 집합입니다.\n<h4>Azure Storage</h4>\nSDK는 Azure Blob, 큐 및 테이블에서 작동합니다.\n<h4>트리거</h4>\n큐 또는 Blob에서 새 입력이 검색되면 함수가 실행됩니다. 예를 들어 모바일 서비스는 스크립트 실행 간에 상태를 유지하지 않으므로 스크립트 실행 간에 지속되어야 하는 모든 데이터를 테이블에 저장해야 합니다. 다음 코드에서는 \"inputqueue\"라는 큐에 새 메시지가 표시되면 ProcessQueue 함수가 트리거됩니다. 트리거에 대한 자세한 내용은 이 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/01/28/trigger-bindings-and-route-parameters-in-azurejobs.aspx\">게시물을</a> 참조하세요.\n<pre class=\"prettyprint\">public static void ProcessQueue(\n    [QueueTrigger(\"inputqueue\")] string input)\n{\n    // Process the Queue message \n}</pre>\n&nbsp;\n<h3>바인딩</h3>\nSDK는 C# 기본 형식과 Blob, 테이블 및 큐와 같은 Azure Storage 간에 모델 바인딩을 제공하는 바인딩을 지원합니다. 따라서 개발자는 blob, 테이블 및 큐에서 쉽게 읽고 쓸 수 있으며, Azure Storage 읽기/쓰기에 관한 코드에 대해 알아볼 필요가 없습니다.\n\n현재 지원되는 바인딩은 <b>Stream, TextReader/Writer 및 String입니다. </b> Storage SDK에서 사용자 지정 형식 및 기타 형식에 바인딩에 대한 지원을 추가할 수도 있습니다.\n\n바인딩이 Azure Storage 대해 작동하는 방법에 대한 자세한 내용은 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-1-blobs.aspx\">Blob</a><b>, </b><a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/18/azure-storage-bindings-part-2-queues.aspx\">큐</a><b> </b>및 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/03/06/azure-storage-bindings-part-3-tables.aspx\">테이블을</a> 참조하세요.\n<h4>Hosting</h4>\nJobHost는 프로그램에 있는 함수를 알고 있는 실행 컨테이너입니다. <a href=\"https://www.nuget.org/packages/Microsoft.Azure.Jobs\">Microsoft.Azure.Jobs</a> 있는 JobHost 개체는 바인딩을 읽고, 트리거를 수신 대기하고, 함수를 호출합니다. 다음 예제에서는 JobHost의 인스턴스를 만들고 RunAndBlock()을 호출합니다. 그러면 JobHost는 이 호스트에서 정의하는 모든 함수에 대한 트리거를 수신 대기하게 됩니다.\n<pre class=\"prettyprint\">static void Main(string[] args)\n{\n    JobHost host = new JobHost();\n    host.RunAndBlock();\n}</pre>\n&nbsp;\n<h4>WebJobs 모니터링을 위한 대시보드입니다.</h4>\nWebJobs(<b><i>모든 언어 및 모든 형식으로 작성</i></b>됨)가 실행되면 실시간으로 모니터링할 수 있습니다. 해당 상태(실행 중, 중지됨, 성공적으로 완료됨), 마지막 실행 시간 및 특정 실행의 로그를 볼 수 있습니다. 다음 스크린샷은 웹 사이트에서 실행되는 모든 WebJobs의 보기를 보여 줍니다.\n\n<img style=\"border: 0px;\" title=\"Azure WebJobs 베타\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/AllTypesOfWebJobs.png\" width=\"610\" height=\"308\" border=\"0\" />\n<h4>함수 실행 세부 정보</h4>\n이 \"ImageProcessing\" WebJob의 특정 실행을 모니터링하는 경우 다음과 같이 프로그램의 함수에 대한 호출 세부 정보를 볼 수 있습니다.\n<ul>\n<ul>\n <li>\n<div>이 함수의 매개 변수입니다.</div></li>\n <li>\n<div>함수를 실행하는 데 걸린 시간입니다.</div></li>\n <li>\n<div>Blob에서 읽는 데 걸린 시간 및 읽거나 쓴 바이트 수입니다.</div></li>\n</ul>\n</ul>\n<img style=\"border: 0px;\" title=\"Azure WebJobs 베타\" alt=\"Azure WebJobs Beta\" src=\"https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/new_details.png\" width=\"610\" height=\"478\" border=\"0\" />\n\n다음은 이 ImageProcessing WebJob에 대한 코드입니다.\n<pre class=\"prettyprint\">public class ImageProcessing\n{\n    static void Main(string[] args)\n    {\n        JobHost host = new JobHost();\n        host.RunAndBlock();\n    }\n\n    public static void Resize(\n        [BlobTrigger(@\"images-input/{name}\")] WebImage input,\n        [Blob(@\"images2-output/{name}\")] out WebImage output)\n    {\n        var width = 80;\n        var height = 80;\n        output = input.Resize(width, height);\n    }\n\n    public static void WaterMark(\n        [BlobTrigger(@\"images2-output/{name}\")] WebImage input,\n        [Blob(@\"image2-output/{name}\")] out WebImage output)\n    {\n        output = input.AddTextWatermark(\"WebJobs\", fontSize: 6);\n    }\n}\n\npublic class WebImageBinder : ICloudBlobStreamBinder&lt;WebImage&gt;\n{\n    public WebImage ReadFromStream(System.IO.Stream input)\n    {\n        return new WebImage(input);\n    }\n\n    public void WriteToStream(WebImage result, System.IO.Stream output)\n    {\n        var bytes = result.GetBytes();\n        output.Write(bytes, 0, bytes.Length);\n    }\n}</pre>\n&nbsp;\n<h4>Replay 호출 &amp;</h4>\n위의 예제에서 Resize 함수가 어떤 이유로든 실패하는 경우 실행 체인을 트리거하고 워터마크 함수를 호출하는 새 이미지 및 Replay Resize 함수를 업로드할 수 있습니다. 이는 함수를 함께 연결하기 위한 복잡한 그래프가 있는 경우 문제를 진단하고 디버그하는 데 유용합니다. 대시보드에서 함수를 실행할 수도 있습니다.\n<h4>함수의 인과 관계</h4>\n위의 예제에서는 Resize 함수가 Blob에 쓸 때 WaterMark 함수를 트리거한다는 것을 알고 있습니다. 대시보드는 함수 간에 이러한 인과 관계를 표시합니다. 새 입력이 검색될 때 트리거되는 많은 함수를 연결한 경우 이 인과 관계 그래프를 보는 것이 유용할 수 있습니다.\n<h4>Blob 검색</h4>\nBlob 검색을 클릭하고 해당 Blob에 발생한 작업에 대한 정보를 가져올 수 있습니다. 예를 들어 ImageProcessing의 경우 Resize 함수가 실행되었기 때문에 Blob이 작성되었습니다. 검색 Blob에 대한 자세한 내용은 이 <a href=\"https://blogs.msdn.com/b/jmstall/archive/2014/02/19/who-wrote-that-blob.aspx\">게시물을</a> 참조하세요.\n<h3>샘플</h3>\nWebJobs SDK에 대한 샘플은 다음에서 찾을 수 있습니다. <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt\">https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/ReadMe.txt</a>\n<ul>\n<ul>\n <li>\n<div>Blob, 테이블, 큐 및 Service Bus 대한 트리거 및 바인딩을 사용하는 방법에 대한 샘플을 찾을 수 있습니다.</div></li>\n <li>\n<div>고객이 Blob Storage에서 해당 사진을 처리하는 함수를 트리거하는 그림을 업로드할 수 있는 이미지 처리 웹 사이트인 PhluffyShuffy라는 샘플이 있습니다.</div></li>\n</ul>\n</ul>\n<h3>설명서</h3>\n<ul>\n<ul>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/getting-started-with-windows-azure-webjobs\">자습서: Windows Azure WebJobs SDK를 사용하여 시작</a></li>\n <li><a href=\"https://channel9.msdn.com/Shows/Web+Camps+TV/Making-Your-Jobs-Easier-With-Windows-Azure-WebJobs-SDK\">Windows Azure WebJobs SDK를 사용하여 작업을 더 쉽게 만드는 채널 9 비디오</a></li>\n <li><a href=\"https://www.hanselman.com/blog/IntroducingWindowsAzureWebJobs.aspx\">Scott Hanselman의 WebJobs 및 SDK 소개</a></li>\n <li>WebJobs를 사용하여 빌드되고 <a href=\"https://twitter.com/bradygaster\">Brady Gaster</a>가 ASP.NET 웹 사이트 모니터</li>\n <li><a href=\"https://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/azure-webjobs-recommended-resources\">Azure WebJobs - 권장 리소스 </a></li>\n</ul>\n</ul>\n<h3>SDK를 사용하여 WebJobs 배포</h3>\nWebJobs 포털 페이지를 사용하여 프로그램을 업로드하지 않으려면 FTP, Git 또는 웹 배포를 사용할 수 있습니다. 자세한 내용은 WebJobs를 사용하여 Azure에 .NET 콘솔 앱을 배포하는 Azure WebJobs 및 Git을 배포하는 방법을 참조하세요.\n\n웹 사이트와 함께 WebJobs를 배포하려면 다음 Visual Studio <a href=\"https://visualstudiogallery.msdn.microsoft.com/f4824551-2660-4afa-aba1-1fcc1673c3d0\">확장을</a> 확인하세요.\n<h3>0.2.0-alpha2에서 0.3.0-beta로 마이그레이션할 때 알려진 문제</h3>\n<h4>새 API와 일치하도록 네임스페이스 업데이트</h4>\n&nbsp;\n<table width=\"413\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"234\"><b>이전</b></td>\n<td valign=\"top\" width=\"177\"><b>이후</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs.Host</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"234\">Microsoft.WindowsAzure.Jobs</td>\n<td valign=\"top\" width=\"177\">Microsoft.Azure.Jobs.Core</td>\n</tr>\n</tbody>\n</table>\n<h4>connectionString 이름 업데이트</h4>\nconnectionStrings를 설정할 때 WebJob의 app.config 또는 Microsoft Azure 웹 사이트의 \"구성 탭\"에서 connectionString 이름을 0.3.0-beta의 이름과 일치하도록 변경해야 합니다.\n<table width=\"401\" border=\"1\" cellspacing=\"0\" cellpadding=\"2\">\n<tbody>\n<tr>\n<td valign=\"top\" width=\"200\"><b>이전</b></td>\n<td valign=\"top\" width=\"199\"><b>이후</b></td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsData</td>\n<td valign=\"top\" width=\"199\">AzureJobsStorage</td>\n</tr>\n<tr>\n<td valign=\"top\" width=\"200\">AzureJobsRuntime</td>\n<td valign=\"top\" width=\"200\">AzureJobsDashboard</td>\n</tr>\n</tbody>\n</table>\n<h4>테이블에 대한 바인딩</h4>\n이 릴리스에서는 Azure Table Storage 대한 IDictionaryTuple&lt;, 튜플&gt; 바인딩에 대한 지원을 중단했습니다. CloudTableEntity를 사용하여 테이블에 바인딩할 수 있습니다. 다음 예제에서는 Azure 테이블에 바인딩할 수 있는 차이점과 방법을 보여 줍니다. 자세한 예제는 <a href=\"https://aspnet.codeplex.com/SourceControl/latest#Samples/AzureWebJobs/BasicSamples/TableOperations/Program.cs\">샘플 사이트의 테이블 사용량을</a> 참조하세요.\n\n<strong>전에</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueInput] string textInput, \n    [Table] IDictionary&lt;Tuple&lt;string, string&gt;, WordCount&gt; words) \n{ \n}</pre>\n<strong>후</strong>\n<pre class=\"prettyprint\">public static void CountAndSplitInWords(\n    [QueueTrigger(\"textInput\")] string textInput, \n    [Table(\"words\")] CloudTable wordsTable) \n{ \n}</pre>\n&nbsp;\n<h4>로깅</h4>\n로깅 정보를 작성하려면 Console.Write()를 사용할 수 있습니다. WebJob 세부 정보를 볼 때 이러한 로그가 대시보드에 표시됩니다.\n\n함수 수준 로깅을 수행하려면 Blob Storage에 정보를 기록하는 TextWriter를 사용해야 합니다. 함수 실행 세부 정보가 표시되면 이러한 로그가 대시보드에 표시됩니다.\n<pre class=\"prettyprint\">public static void Logging(\n    [QueueTrigger(\"inputqueue\")] string inputText,\n    TextWriter log)\n{\n   log.WriteLine(inputText);\n}</pre>\n&nbsp;\n<h4>대시보드는 0.3.0 베타로 배포된 WebJobs에 대해서만 작동합니다.</h4>\nSDK의 0.2.0-alpha2를 사용하여 WebJob을 배포한 경우 대시보드에 액세스하여 WebJob에 대한 로그를 보려면 \"호스트가 실행되지 않음\"에 대한 경고가 표시됩니다. 이 문제는 이 릴리스의 일부로 최신 버전의 대시보드가 모든 Azure Websites에 배포되기 때문에 발생합니다. 새 대시보드에는 0.2.0-alpha2와 호환되지 않는 일부 프로토콜 변경 내용이 있습니다. 이 오류를 해결하려면 0.3.0-beta NuGet 패키지를 사용하도록 WebJob을 업데이트하고 WebJob을 다시 배포하세요.\n<h3>피드백 제공 및 도움말 보기</h3>\nMicrosoft Azure 웹 사이트 및 Microsoft Azure WebJobs SDK의 <a href=\"https://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/\">WebJobs</a> 기능은 미리 보기로 제공됩니다. 피드백은 향후 버전에 대한 변경 내용에서 고려됩니다.\n\n자습서와 직접 관련이 없는 질문이 있는 경우 <a href=\"https://azure.microsoft.com/en-us/support/forums/\">Azure 포럼</a>, <a href=\"https://forums.asp.net/1247.aspx\">ASP.NET 포럼</a> 또는 <a href=\"https://stackoverflow.com/\">StackOverflow.com</a> 게시할 수 있습니다. Twitter에 <a href=\"https://twitter.com/search?q=AzureWebJobs\">#AzureWebJobs</a> 사용하고 StackOverflow의 태그 Azure-WebJobsSDK 사용합니다."
}