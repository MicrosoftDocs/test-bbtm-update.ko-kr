{
    "Slug": "3-best-practices-for-windows-azure-sql-reporting-development",
    "Title": "Windows Azure SQL 보고 개발을 위한 3 가지 모범 사례",
    "Summary": "Editor's note:&nbsp;This blog post comes from David Magar,&nbsp;Program Manager, Windows Azure SQL Reporting.  Although it&rsquo;s tempting to take an existing Reporting Services project and push it…",
    "Content": "<p><strong>편집기 참고 사항:</strong>&nbsp; 이 블로그 게시물 데이비드 Magar에서 온다,&nbsp; 프로그램 관리자, Windows Azure SQL 보고.</p>  <p>&rsquo;기존 Reporting Services 프로젝트를 그대로 클라우드에 푸시하려고 하지만 실제로는 안 됩니다&rsquo;. 로컬 서버에서 잘 실행되는 보고서는 SQL Reporting 보고서 서버에 배포한 후 성능이 떨어지지 않을 수 있습니다.</p>  <p>다행히 거의 항상 더 빠른 실행 보고서를 생성하는 3가지 간단한 수정이 있습니다. 이 블로그 게시물은 각각에 대해 자세히 설명합니다.</p>  <h4>모범 사례 #1: ReportViewer 컨트롤 다시 구성</h4>  <p>ASP.Net 페이지 또는 Windows 양식 애플리케이션에서 RVC(ReportViewer Control)를 사용하는 경우 다음 구성을 변경해야 합니다.</p>  <ol>  <li><span style=\"font-family: 'courier new', courier;\"><span style=\"color: #00ccff;\">WebRequest</span>를 호출하여 애플리케이션 초기화에서 기본 프록시를 사용하지 않도록 설정합니다. DefaultWebProxy = <span style=\"color: #0000ff;\">null</span></span></li>  <li><span style=\"font-family: 'courier new', courier;\">SetParameter</span>가 아닌 <span style=\"font-family: 'courier new', courier;\">SetParameters</span>를 호출하여 모든 Windows Azure SQL 보고 보고서 매개 변수를 한 번에 설정합니다. 매개 변수를 설정하면 Windows Azure SQL Database 있는 Windows Azure SQL 보고 데이터 계층에 대한 호출이 발생합니다. 여러 호출 대신 하나의 호출을 실행하여 읽기/쓰기 주기를 줄이면 큰 도움이 될 수 있습니다.</li>  <li>로그온 호출을 하는 대신 인증에 쿠키를 사용하도록 애플리케이션&rsquo; RVC를 구성합니다. 이렇게 하면 사용자 또는 애플리케이션이 한 번 로그인한 다음 나중에 더 빠른 렌더링을 위해 쿠키를 반환합니다. 보고서 서버는 지난 60분 이내에 만들어진 쿠키만 허용하므로 애플리케이션을 디자인할 때 이 사실을 고려해야 합니다. 여기서 쿠키 인증을 달성하는 방법을 읽을 수 있습니다.</li>  </ol>  <h4>모범 사례 #2: 동일한 데이터 센터에서 웹 애플리케이션 및 데이터베이스를 공동 배치합니다.</h4>  <p>ReportViewer 컨트롤은 보고서 서버와 자주 통신합니다. 이 동작을 제거할 수는&rsquo; 없지만 동일한 데이터 센터에 Windows Azure 애플리케이션 및 보고서 서버를 배포하여 비용을 최소화할 수 있습니다.</p>  <p>Windows Azure SQL 데이터베이스를 배포할 위치를 선택할 때도 동일한 고려 사항이 적용됩니다. SQL Database 전송되는 각 쿼리에는 일정량의 오버헤드가 발생합니다. 인증, 권한 부여, 요청 처리 등은 초기 연결과 페이지가 렌더링되는 시점 사이의 지연에 영향을 주는 모든 작업입니다. 데이터베이스를 다른 애플리케이션 구성 요소와 동일한 데이터 센터에 배치하면 이러한 작업을 수행하는 시간이 줄어들어 렌더링 시간이 절약되고 성능이 향상됩니다.</p>  <p>데이터베이스, 애플리케이션 및 보고서 서버의 위치를 감지하고 각 보고서 렌더링에 대한 데이터를 가져오는 데 걸리는 시간을 정확히 파악할 수 있습니다. 이 블로그 게시물은 Microsoft 팀의 David Bahat이 읽어 줍니다.</p>  <h4>모범 사례 #3: 효율적인 쿼리 작성</h4>  <p>보고서를 작성할 때 보고서 시각화에 필요한 데이터만 가져오도록 쿼리를 설정합니다(특히 쿼리를 디자인할 때 Select *&rdquo; 형식의 SQL 문은 사용하지 마세요&ldquo;). 이 모범 사례는 보고서가 가능한 가장 빠른 렌더링에 최적화되도록 합니다.</p>  <p>결론적으로, 이러한 3가지 제안이 SQL Reporting 작동하는 애플리케이션에서 발생할 수 있는 성능 문제 중 일부를 해결하는 데 도움이 되기를 바랍니다. 나는 아래의 피드백과 의견을 기대합니다.</p>  <p>감사합니다.<br>데이비드 마가<br>프로그램 관리자, Windows Azure SQL 보고</p>"
}